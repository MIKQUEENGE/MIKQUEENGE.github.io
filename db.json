{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/BN.png","path":"images/BN.png","modified":1,"renderable":0},{"_id":"source/images/BN_back.png","path":"images/BN_back.png","modified":1,"renderable":0},{"_id":"source/images/BN_y.png","path":"images/BN_y.png","modified":1,"renderable":0},{"_id":"source/images/Capture.PNG","path":"images/Capture.PNG","modified":1,"renderable":0},{"_id":"source/images/Capture1.PNG","path":"images/Capture1.PNG","modified":1,"renderable":0},{"_id":"source/images/Capture2.PNG","path":"images/Capture2.PNG","modified":1,"renderable":0},{"_id":"source/images/Capture3.PNG","path":"images/Capture3.PNG","modified":1,"renderable":0},{"_id":"source/images/Capture4.PNG","path":"images/Capture4.PNG","modified":1,"renderable":0},{"_id":"source/images/Capture5.PNG","path":"images/Capture5.PNG","modified":1,"renderable":0},{"_id":"source/images/L1.jpg","path":"images/L1.jpg","modified":1,"renderable":0},{"_id":"source/images/L2.jpg","path":"images/L2.jpg","modified":1,"renderable":0},{"_id":"source/images/Untitled.png","path":"images/Untitled.png","modified":1,"renderable":0},{"_id":"source/images/analysis_final_1.PNG","path":"images/analysis_final_1.PNG","modified":1,"renderable":0},{"_id":"source/images/analysis_final_3.PNG","path":"images/analysis_final_3.PNG","modified":1,"renderable":0},{"_id":"source/images/analysis_final_5.PNG","path":"images/analysis_final_5.PNG","modified":1,"renderable":0},{"_id":"source/images/classification.PNG","path":"images/classification.PNG","modified":1,"renderable":0},{"_id":"source/images/filename_txt.PNG","path":"images/filename_txt.PNG","modified":1,"renderable":0},{"_id":"source/images/lesson13_1.png","path":"images/lesson13_1.png","modified":1,"renderable":0},{"_id":"source/images/lesson16_1.png","path":"images/lesson16_1.png","modified":1,"renderable":0},{"_id":"source/images/lesson16_2.png","path":"images/lesson16_2.png","modified":1,"renderable":0},{"_id":"source/images/lesson16_3.png","path":"images/lesson16_3.png","modified":1,"renderable":0},{"_id":"source/images/lesson6.png","path":"images/lesson6.png","modified":1,"renderable":0},{"_id":"source/images/lesson6_3.png","path":"images/lesson6_3.png","modified":1,"renderable":0},{"_id":"source/images/lesson6_3b.png","path":"images/lesson6_3b.png","modified":1,"renderable":0},{"_id":"source/images/lesson6_3c.png","path":"images/lesson6_3c.png","modified":1,"renderable":0},{"_id":"source/images/lesson7_2.png","path":"images/lesson7_2.png","modified":1,"renderable":0},{"_id":"source/images/lesson7.png","path":"images/lesson7.png","modified":1,"renderable":0},{"_id":"source/images/lesson9_2.png","path":"images/lesson9_2.png","modified":1,"renderable":0},{"_id":"source/images/lesson9_3.png","path":"images/lesson9_3.png","modified":1,"renderable":0},{"_id":"source/images/lesson9_4.png","path":"images/lesson9_4.png","modified":1,"renderable":0},{"_id":"source/images/lesson9_5.png","path":"images/lesson9_5.png","modified":1,"renderable":0},{"_id":"source/images/pat_1086.jpg","path":"images/pat_1086.jpg","modified":1,"renderable":0},{"_id":"source/images/woff_decode.PNG","path":"images/woff_decode.PNG","modified":1,"renderable":0},{"_id":"themes/landscape/source/google9da4e92e637f6c53.html","path":"google9da4e92e637f6c53.html","modified":1,"renderable":1},{"_id":"source/images/analysis_final_2.PNG","path":"images/analysis_final_2.PNG","modified":1,"renderable":0},{"_id":"source/images/analysis_final_4.PNG","path":"images/analysis_final_4.PNG","modified":1,"renderable":0},{"_id":"source/images/lesson6b.png","path":"images/lesson6b.png","modified":1,"renderable":0},{"_id":"source/images/lesson8.png","path":"images/lesson8.png","modified":1,"renderable":0},{"_id":"source/images/lesson9_1.png","path":"images/lesson9_1.png","modified":1,"renderable":0},{"_id":"source/images/lesson8_2.png","path":"images/lesson8_2.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5f5cda3f6c72ad3ee0b593daafabfec550a41dc6","modified":1536252046653},{"_id":"source/README.md","hash":"d11066d2f7eb3171534982364d62645c0aa7a712","modified":1536252046653},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1536252046665},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1536252046665},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1536252046665},{"_id":"themes/landscape/_config.yml","hash":"26b34b139c05b86a1fc1ed9c5693cbf2be859c82","modified":1536252046665},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1536252046669},{"_id":"source/_posts/Flask入门学习笔记.md","hash":"aacff75c58bb2e6210e7986255042e3b92d1689f","modified":1536252046653},{"_id":"source/_posts/HTML与CSS学习记录.md","hash":"54b722cb302fed342f11e97d99379de50a477ecb","modified":1536643323434},{"_id":"source/_posts/JavaScript原型链-prototype与-proto.md","hash":"99551ce6c2ee5059c787d6c3916011b5c725fdf1","modified":1536252046653},{"_id":"source/_posts/PAT刷题记录.md","hash":"bb1c263b270985f27921749a7e90c8e94c2b3807","modified":1536252046653},{"_id":"source/_posts/TensorFlow基础知识.md","hash":"3d8a8b8338229bc56b390200a70bc9b0f9b3a6a7","modified":1536252046653},{"_id":"source/_posts/TensorFlow训练MNIST报错ResourceExhaustedError.md","hash":"5e67245a3c9f939de4e00937ca53f25ffb66740e","modified":1536252046653},{"_id":"source/_posts/hexo创建的tags和categories页面为空的解决办法.md","hash":"2023e1fd6d63cf0644e9ea6ba7641a33564a7e83","modified":1536252046653},{"_id":"source/_posts/hexo博客谷歌百度收录踩坑日记.md","hash":"1d83ac59fb184cef15fc8d1526cda6dd8c707f4e","modified":1536252046653},{"_id":"source/_posts/numpy常用函数和数据类型.md","hash":"4d9e59416f31eb7121a0e5e1e81f333ffd2c256e","modified":1536252046653},{"_id":"source/_posts/ubuntu-18-04下安装稳定版Chrome谷歌浏览器.md","hash":"6505cc8564d11897fa35aeeaf4d4a0f8332eb354","modified":1536252046653},{"_id":"source/_posts/ubuntu下Chrome谷歌浏览器部分网站图片显示不正常的解决方法.md","hash":"0cacb722366f991b8cb98179f938bc849196c1ac","modified":1536252046653},{"_id":"source/_posts/ubuntu18-04中安装iNode.md","hash":"9c784d1587d2a9ac0751006df23f2a8ec5cbc0bd","modified":1536252046653},{"_id":"source/_posts/ubuntu下创建文件夹快捷方式.md","hash":"68f29e20df557f0901a13752b83549f880440f85","modified":1536252046653},{"_id":"source/_posts/ubuntu下无法将iNode绑定到侧边栏的解决办法.md","hash":"7bc6c4118da0d083e5b5c2239328db4c75ae1967","modified":1536252046653},{"_id":"source/_posts/使用TensorBoard可视化工具.md","hash":"3625f4478f20e02c33287737ae7342a44fc11f4e","modified":1536252046653},{"_id":"source/_posts/关于hexo-markdown添加的图片在github-page中无法显示的问题.md","hash":"19fabae46672060f6a3015db23d5431dd3a5e8ee","modified":1536252046653},{"_id":"source/_posts/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法.md","hash":"9924e13dc054f4e840e60ee3e5a3046d45f95318","modified":1536252046653},{"_id":"source/_posts/在ubuntu中安装Markdown神器Typora.md","hash":"8bae1d7429924dfad8e7285734141f17ce9b5bec","modified":1536252046653},{"_id":"source/_posts/堆和栈的区别.md","hash":"bf944e472f09034ddf8606c2ae69c6fd8ccdb0ea","modified":1536252046653},{"_id":"source/_posts/接入gitment为hexo添加评论功能.md","hash":"04ee5ea1dfe3f3c76e774973b7a2ef8408fa79a0","modified":1536252046653},{"_id":"source/_posts/智能指针.md","hash":"874a283ed3089cb203362668842c2ccc674c1cae","modified":1536252046653},{"_id":"source/_posts/深度学习周报week01-week02.md","hash":"afc056d6850f2d98a3857bab3f2a92fa3aff9131","modified":1536252046653},{"_id":"source/_posts/深度学习周报week03-week04.md","hash":"5941c65b818c059557630e11da1a6ec4808a3a7c","modified":1536252046653},{"_id":"source/_posts/深度学习周报week05-week06.md","hash":"179e7e15fc0288f0394b121bd046c40a2627ccd8","modified":1536252046653},{"_id":"source/_posts/深度学习周报week07-week08.md","hash":"25c24860dd03a538cf9862e3ba4b55dbcfbbfd05","modified":1536252046653},{"_id":"source/_posts/深度学习周报week09-week10.md","hash":"898fbe60feba4ca18fcf11714f91d98214be5891","modified":1536252046653},{"_id":"source/_posts/深度学习周报week11-week12.md","hash":"f0c3f0a46bc52e3eeac93c85fb357f4eaaf8d701","modified":1536252046653},{"_id":"source/_posts/猫眼电影加密数字破解（爬取评分票房票价）.md","hash":"f4df667e6a8e8791dfff45a91e0fc4fe01f4ab5b","modified":1536252046653},{"_id":"source/_posts/系统分析与设计作业FinalReport.md","hash":"7cc66e2cd153207668f3616a7d86a1839dce1c03","modified":1536252046653},{"_id":"source/_posts/系统分析与设计作业七.md","hash":"3ad75d7377376e8387b132b795144d906d688070","modified":1536252046653},{"_id":"source/_posts/系统分析与设计作业九.md","hash":"430fb561c3ddae3339225848c8defc50badf9cbb","modified":1536252046653},{"_id":"source/_posts/系统分析与设计作业五.md","hash":"e3d183bb7d47bf12dc51087f521439c0ee733b20","modified":1536252046653},{"_id":"source/_posts/系统分析与设计作业八.md","hash":"2546e3849c2bc0406fd943260869a55d278e9935","modified":1536252046653},{"_id":"source/_posts/系统分析与设计作业六.md","hash":"300701bdde7d84191909e67e0b826f15860b8e29","modified":1536252046657},{"_id":"source/favicon.ico","hash":"17b0ff4f4afab42c75b3b7afff59575631b514ae","modified":1536252046657},{"_id":"source/_posts/系统分析与设计作业十三.md","hash":"269e682b669e462b3df983b93b7a0c6c30e21682","modified":1536252046657},{"_id":"source/_posts/系统分析与设计作业十六.md","hash":"3b5f633006bb4e03f26829913c1b5f422a74d2d1","modified":1536252046657},{"_id":"source/_posts/遇见逆水寒男号女NPC奇物好感统计.md","hash":"af5ab8d0c6a2a7653cadfa7959d48877641defa4","modified":1536252046657},{"_id":"source/_posts/部署hexo后github-pages页面未更新或无法打开问题.md","hash":"71f1ab005d21c3fca7c4fc3de8f971f8c4a558a8","modified":1536252046657},{"_id":"source/categories/index.md","hash":"998826a4be87e88a9d2d51684d52017839db4c3f","modified":1536252046657},{"_id":"source/images/BN.png","hash":"16a8d79aff9c062eb5654627f404cf37db042e8b","modified":1536252046657},{"_id":"source/images/BN_back.png","hash":"b1457ee4faac43b4e561ee259327bc9b43bd06a2","modified":1536252046657},{"_id":"source/images/BN_y.png","hash":"278d7811ac757a93d5067baecd1244e6012f031f","modified":1536252046657},{"_id":"source/images/Capture.PNG","hash":"92290ce107044453cc8f78bd1c73c0142e0190df","modified":1536252046657},{"_id":"source/images/Capture1.PNG","hash":"c6dd3c2cb3585bf7ce1dea86dfb6c433c589c355","modified":1536252046657},{"_id":"source/images/Capture2.PNG","hash":"c68af93d76ea39560435b0e5b3d768fbb2051462","modified":1536252046657},{"_id":"source/images/Capture3.PNG","hash":"a88eb075f4cfa82822fae098458cdc4617153dde","modified":1536252046657},{"_id":"source/images/Capture4.PNG","hash":"6902b1d3acd40c54183f7ec398ebfcdecf4037f2","modified":1536252046657},{"_id":"source/images/Capture5.PNG","hash":"97f3f8567f653b671854b5f96eb679c53c18bbd1","modified":1536252046657},{"_id":"source/images/L1.jpg","hash":"b43e8926a31012f34e6961897ee796f2be364ac5","modified":1536252046657},{"_id":"source/images/L2.jpg","hash":"99f85d9063828c1efd5fd712aa6249bc01c3c519","modified":1536252046657},{"_id":"source/images/Untitled.png","hash":"24ea3d0e09177d1cdf15371775079fef7e5e1c08","modified":1536252046657},{"_id":"source/images/analysis_final_1.PNG","hash":"311843a5328f609273a79c0907bdb397aeac4971","modified":1536252046657},{"_id":"source/images/analysis_final_3.PNG","hash":"61526342708461c189abd9ca54221db5c98bcc3e","modified":1536252046661},{"_id":"source/images/analysis_final_5.PNG","hash":"78aa509a5537c4f4f182eebc73e4ff41e153172f","modified":1536252046661},{"_id":"source/images/classification.PNG","hash":"db34d2712eec4a44cfc20488aac3020394797ca5","modified":1536252046661},{"_id":"source/images/filename_txt.PNG","hash":"4b587eadb4dd595b2a6f609f1087aa74fabc4058","modified":1536252046661},{"_id":"source/images/lesson13_1.png","hash":"31db137a072c31ed7bcb8b6f8e8ddf0187c2fdaa","modified":1536252046661},{"_id":"source/images/lesson16_1.png","hash":"7e45e0bea924348106203e0a4096b2f9628480fe","modified":1536252046661},{"_id":"source/images/lesson16_2.png","hash":"06d407682af5f02d0708a92278a99b4b2abd2ef2","modified":1536252046661},{"_id":"source/images/lesson16_3.png","hash":"ff2b64fd298bf00cb6f9a454798dd01e91dd16f1","modified":1536252046661},{"_id":"source/images/lesson6.png","hash":"c2bae02e87fe851ecc8881f6504f460f603d4d0b","modified":1536252046661},{"_id":"source/images/lesson6_3.png","hash":"43c087415436e9102156fd4bf4f59a8484cd6294","modified":1536252046661},{"_id":"source/images/lesson6_3b.png","hash":"774a6ae430d729a7fa41f1990e84e7c36f6c8ee4","modified":1536252046661},{"_id":"source/images/lesson6_3c.png","hash":"b37095a0a2092d82b90476d95391dd61629c29c0","modified":1536252046661},{"_id":"source/images/lesson7_2.png","hash":"eed9f4172450b140d60fd9d85d214f5a5f3d59ff","modified":1536252046665},{"_id":"source/images/lesson7.png","hash":"5a8f624b8683b69f32fbc50d14b9cbafe30b2d06","modified":1536252046665},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1536252046665},{"_id":"source/images/lesson9_2.png","hash":"c06f731136f43e58430ef6d5323a9ab105f60d37","modified":1536252046665},{"_id":"source/images/lesson9_3.png","hash":"fa4b73721a97c7806fc035d5d6d2a5c9ed614132","modified":1536252046665},{"_id":"source/images/lesson9_4.png","hash":"8457257aef5b457087086f2502b46d99bbd4cbef","modified":1536252046665},{"_id":"source/images/lesson9_5.png","hash":"5950f6e6ecb706acd441fac3a326f38382203c8f","modified":1536252046665},{"_id":"source/images/pat_1086.jpg","hash":"4e08fe072bcd69e9048ebf9714cc34a2476ae980","modified":1536252046665},{"_id":"source/images/woff_decode.PNG","hash":"21a52a39b4c9cb0e1a6ddbff1ec5a910db603167","modified":1536252046665},{"_id":"source/tags/index.md","hash":"b9c8710929fac0a1ff1a72a3138b3aa2067a03c0","modified":1536252046665},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1536252046665},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1536252046665},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1536252046665},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1536252046665},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1536252046665},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1536252046665},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1536252046665},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1536252046665},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1536252046665},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1536252046665},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1536252046665},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1536252046665},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1536252046669},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1536252046669},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1536252046669},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1536252046669},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1536252046669},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1536252046669},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1536252046669},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1536252046669},{"_id":"themes/landscape/source/google9da4e92e637f6c53.html","hash":"67e87478705d1c4257f2c5dd619d42f5fe83273d","modified":1536252046681},{"_id":"source/images/analysis_final_2.PNG","hash":"519f5d48483b3cd810c61e06386ae566c9aa215a","modified":1536252046657},{"_id":"source/images/analysis_final_4.PNG","hash":"138983b8bc652fb041f94583221f99614dfa68e5","modified":1536252046661},{"_id":"source/images/lesson6b.png","hash":"d200d7a5d15cce2e0538c14ee21bf0c48b251702","modified":1536252046665},{"_id":"source/images/lesson8.png","hash":"58bffcabfa1db623bdb317772483bd1ea8007835","modified":1536252046665},{"_id":"source/images/lesson9_1.png","hash":"c355a88e7a51dc46740790378a0605a603aeede9","modified":1536252046665},{"_id":"source/images/lesson8_2.png","hash":"5614c0b9f84ac4b46d5bd8a5489ea7bf86812853","modified":1536252046665},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1536252046669},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1536252046669},{"_id":"themes/landscape/source/css/_extend.styl","hash":"c42f3ca51806b35cd84c3d8583577a4f5a68a935","modified":1536252046669},{"_id":"themes/landscape/source/css/_extend.styl.bak","hash":"7c95099628df6cdfc94e6e2fb9e47813452f0980","modified":1536252046669},{"_id":"themes/landscape/source/css/_variables.styl","hash":"a88cf9c687d8610f5998ab79f266056c73cfb1f0","modified":1536252046669},{"_id":"themes/landscape/source/css/_variables.styl.bak","hash":"a6dcfc0b8dfe87aab360a12b84189c2e95662981","modified":1536252046669},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1536252046669},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1536252046669},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1536252046669},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1536252046681},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1536252046681},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"1f5ebda47eb033e9011591e3c2b4c0a79102abc2","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1536252046669},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1536252046669},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"4b6c4384c4f269d9af9557aebbd632b5f732daea","modified":1536252046669},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1536252046669},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1536252046669},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"2b07778ec0b24fd44b5946f8a4365fbdf28c5448","modified":1536252046669},{"_id":"themes/landscape/source/css/_partial/header.styl.bak","hash":"793abd37d8b8ae0e291c341e757f42e8b025f4e8","modified":1536252046669},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1536252046669},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1536252046669},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1536252046669},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1536252046669},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1536252046669},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1536252046669},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1536252046669},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1536252046673},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1536252046673},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1536252046677},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"b4e5b071137a37d064c18888a52e8800021fc1c6","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536252046677},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1536252046677},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1536252046669},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1536252046677},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/post/git.ejs","hash":"9cd7dafa48f699cc4ec9ecdad88184efed450689","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1536252046669},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1536252046669},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1536252046677},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1536252046677}],"Category":[{"name":"Python","_id":"cjlx9rtym00037bagexj9b4up"},{"name":"Web","_id":"cjlx9rtyu00087bag0kfzwj3f"},{"name":"deep learning","_id":"cjlx9rtz9000i7bagg2wgrw6o"},{"name":"methods","_id":"cjlx9rtzl000v7bag79c3p9nn"},{"name":"OJ","_id":"cjlx9rtzo00127bag1whkdga5"},{"name":"C/C++","_id":"cjlx9ru0g00297bagjz3oz34i"},{"name":"系统分析与设计","_id":"cjlx9ru0o002n7bag9nynoomp"}],"Data":[],"Page":[{"title":"All categories","date":"2018-03-30T18:11:03.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: All categories\ndate: 2018-03-31 02:11:03\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2018-09-06T16:40:46.657Z","path":"categories/index.html","comments":1,"_id":"cjlx9rtyi00017bag7vag3vas","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All tags","date":"2018-03-30T18:09:33.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2018-03-31 02:09:33\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2018-09-06T16:40:46.665Z","path":"tags/index.html","comments":1,"_id":"cjlx9ru2b00667bagxadgmejz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Flask入门学习笔记","toc":true,"date":"2018-06-21T11:22:12.000Z","_content":"\n[前情链接](http://blog.zmj97.top/2018/04/15/系统分析与设计作业五/)\n\n","source":"_posts/Flask入门学习笔记.md","raw":"---\ntitle: Flask入门学习笔记\ntoc: true\ndate: 2018-06-21 19:22:12\ncategories:\n- Python\ntags:\n- Flask\n---\n\n[前情链接](http://blog.zmj97.top/2018/04/15/系统分析与设计作业五/)\n\n","slug":"Flask入门学习笔记","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rty900007bagqf9j86fw","content":"<p><a href=\"http://blog.zmj97.top/2018/04/15/系统分析与设计作业五/\">前情链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.zmj97.top/2018/04/15/系统分析与设计作业五/\">前情链接</a></p>\n"},{"title":"JavaScript原型链:prototype与__proto__","toc":false,"date":"2018-09-04T03:16:54.000Z","_content":"\n\n\n主要看了[这一篇](https://www.w3cschool.cn/javascript/javascript-5isn2lax.html)，讲解的很清晰，最主要的一点为：\n\n\n\n若：\n\n```js\nvar Person = function () { };\nvar p = new Person();\n```\n\n则：\n\n```js\np.__proto__ = Person.prototype;\n```\n\n当调用`p.xxx()`时，首先在`p`中找`xxx`这个属性，没有的话从`p`的`__proto__`(即`Person`的`prototype`)中寻找，如果没有，则继续向上寻找（`p.__proto__.__proto__`即`Person.prototype.__proto__`, ...）。\n\n\n\n\n\n例如下面这个例子：\n\n```js\nvar Person = function() {\n    Person.prototype.Say = function () {\n        alert(\"Person say\");\n    }\n}\n\nvar Programmer = function() {}\nProgrammer.prototype = new Person();\nvar p = new Programmer();\n```\n\n我们可以得出：\n\n`p.__proto__ = Programmer.prototype`\n\n`p.__proto__.__proto__ = Programmer.prototype.__proto__ = Person.prototype`\n\n所以在调用`p.Say()`方法时，现在`p`中寻找这个属性，如果没有就在`p.__proto__`中寻找，然后一步一步往上，最后在`Person.prototype`找到这个方法。\n\n\n\n","source":"_posts/JavaScript原型链-prototype与-proto.md","raw":"---\ntitle: 'JavaScript原型链:prototype与__proto__'\ntoc: false\ndate: 2018-09-04 11:16:54\ncategories:\n- Web\ntags:\n- JavaScript\n- prototype\n---\n\n\n\n主要看了[这一篇](https://www.w3cschool.cn/javascript/javascript-5isn2lax.html)，讲解的很清晰，最主要的一点为：\n\n\n\n若：\n\n```js\nvar Person = function () { };\nvar p = new Person();\n```\n\n则：\n\n```js\np.__proto__ = Person.prototype;\n```\n\n当调用`p.xxx()`时，首先在`p`中找`xxx`这个属性，没有的话从`p`的`__proto__`(即`Person`的`prototype`)中寻找，如果没有，则继续向上寻找（`p.__proto__.__proto__`即`Person.prototype.__proto__`, ...）。\n\n\n\n\n\n例如下面这个例子：\n\n```js\nvar Person = function() {\n    Person.prototype.Say = function () {\n        alert(\"Person say\");\n    }\n}\n\nvar Programmer = function() {}\nProgrammer.prototype = new Person();\nvar p = new Programmer();\n```\n\n我们可以得出：\n\n`p.__proto__ = Programmer.prototype`\n\n`p.__proto__.__proto__ = Programmer.prototype.__proto__ = Person.prototype`\n\n所以在调用`p.Say()`方法时，现在`p`中寻找这个属性，如果没有就在`p.__proto__`中寻找，然后一步一步往上，最后在`Person.prototype`找到这个方法。\n\n\n\n","slug":"JavaScript原型链-prototype与-proto","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtyj00027baglj0q6znn","content":"<p>主要看了<a href=\"https://www.w3cschool.cn/javascript/javascript-5isn2lax.html\" target=\"_blank\" rel=\"noopener\">这一篇</a>，讲解的很清晰，最主要的一点为：</p>\n<p>若：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br></pre></td></tr></table></figure>\n<p>则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.__proto__ = Person.prototype;</span><br></pre></td></tr></table></figure>\n<p>当调用<code>p.xxx()</code>时，首先在<code>p</code>中找<code>xxx</code>这个属性，没有的话从<code>p</code>的<code>__proto__</code>(即<code>Person</code>的<code>prototype</code>)中寻找，如果没有，则继续向上寻找（<code>p.__proto__.__proto__</code>即<code>Person.prototype.__proto__</code>, …）。</p>\n<p>例如下面这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Person.prototype.Say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Person say\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Programmer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Programmer.prototype = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Programmer();</span><br></pre></td></tr></table></figure>\n<p>我们可以得出：</p>\n<p><code>p.__proto__ = Programmer.prototype</code></p>\n<p><code>p.__proto__.__proto__ = Programmer.prototype.__proto__ = Person.prototype</code></p>\n<p>所以在调用<code>p.Say()</code>方法时，现在<code>p</code>中寻找这个属性，如果没有就在<code>p.__proto__</code>中寻找，然后一步一步往上，最后在<code>Person.prototype</code>找到这个方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>主要看了<a href=\"https://www.w3cschool.cn/javascript/javascript-5isn2lax.html\" target=\"_blank\" rel=\"noopener\">这一篇</a>，讲解的很清晰，最主要的一点为：</p>\n<p>若：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br></pre></td></tr></table></figure>\n<p>则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.__proto__ = Person.prototype;</span><br></pre></td></tr></table></figure>\n<p>当调用<code>p.xxx()</code>时，首先在<code>p</code>中找<code>xxx</code>这个属性，没有的话从<code>p</code>的<code>__proto__</code>(即<code>Person</code>的<code>prototype</code>)中寻找，如果没有，则继续向上寻找（<code>p.__proto__.__proto__</code>即<code>Person.prototype.__proto__</code>, …）。</p>\n<p>例如下面这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Person.prototype.Say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Person say\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Programmer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Programmer.prototype = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Programmer();</span><br></pre></td></tr></table></figure>\n<p>我们可以得出：</p>\n<p><code>p.__proto__ = Programmer.prototype</code></p>\n<p><code>p.__proto__.__proto__ = Programmer.prototype.__proto__ = Person.prototype</code></p>\n<p>所以在调用<code>p.Say()</code>方法时，现在<code>p</code>中寻找这个属性，如果没有就在<code>p.__proto__</code>中寻找，然后一步一步往上，最后在<code>Person.prototype</code>找到这个方法。</p>\n"},{"title":"HTML与CSS学习记录","toc":true,"date":"2018-09-10T06:04:59.000Z","_content":"\n\n\n《HTML与CSS进阶教程读书笔记》\n\n---\n\n\n\n# HTML基础知识\n\n## HTML与XHTML\n\nHTML指超文本标记语言，是构成网页文档的主要语言。我们常说的HTML指HTML4.01。\n\nXHTML指扩展的超文本标记语言，是XML风格的、更严格、更纯净的HTML。\n\n两者的主要区别：\n\n- XHTML标签必须闭合。\n- XHTML标签和属性必须小写。\n- XHTML标签属性必须加引号。\n- XHTML标签用id属性代替name属性。\n\n## id和class\n\n由于id属性具有唯一性，因此W3C建议，对于页面关键的结构或大结构，才能使用id属性，其他地方使用class属性。\n\n<u>因为搜索引擎是根据标签的语义和id属性来识别的，因此id属性的使用和命名都需要谨慎。</u>\n\n一般来说，定义多个class的目的在于：一个class抽取公共样式，一个class定义单独样式。\n\n## 标题栏小图标\n\n在`head`标签内加入：\n\n```html\n<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"图标路径.ico\" />\n```\n\n其中`rel`和`type`是固定属性不用更改，只需要修改图片路径即可。\n\n\n\n# 语义化\n\nHTML的精髓在于标签的语义。搜索引擎根据HTML代码识别页面结构。\n\n编写语意结构良好的页面的好处：\n\n- 利于开发调试和后期维护。\n- 利于搜索引擎优化。\n\n应优先使用正确的语义化标签，如果没有语义化标签可用，再考虑div或者span等无语义标签。\n\n## 标题语义化\n\nh1-h6是标题标签，相比于其他标签，它们在搜索引擎优化（SEO）中占有相当重要的地位。\n\n一般用到h4，h5和h6权重和普通标签差不多，很少使用。\n\n对于标题语义化，我们需要注意的是：\n\n- 一个页面只能有一个h1标签。\n- h1-h6之间不要出现断层。\n- 不要用标题标签来定义样式（如为了加粗字体而为文本加上标题标签）。\n- 不要用div来代替标题标签。\n\ndiv是无语义的标签，如果使用div代替标题标签会使网页在SEO中丢失大量权重。\n\n## 图片语义化\n\n### alt属性和title属性\n\nalt是给搜索引擎看的，title是给用户看的。\n\n搜索引擎根据alt属性或上下文判断图片内容。\n\n因此**img标签必须添加alt属性。**\n\n### figure元素和figcaption元素\n\n对于图片+图注的效果，使用figure和figcaption来增强图片语义化。\n\n例：\n\n```html\n<figure>\n    <img src=\"xxx\" alt=\"xxx\" />\n    <figcaption>这是一个图注</figcaption>\n</figure>\n```\n\n更详细的介绍可以看[这一篇博客](https://www.w3cplus.com/html5/quick-tip-the-right-way-to-use-figure-and-figcaption-elements.html)。\n\n## 表格语义化\n\n| 标签    | 说明             |\n| ------- | ---------------- |\n| table   | 表格             |\n| caption | 标题             |\n| thead   | 表头（语义划分） |\n| tbody   | 表身（语义划分） |\n| tfoot   | 表尾（语义划分） |\n| tr      | 行               |\n| th      | 表头单元格       |\n| td      | 表格单元格       |\n\n## 表单语义化\n\n### label标签\n\nlabel标签的for属性有两个作用：\n\n- 语义上绑定了label元素和表单元素。（\\<label for=\"*element_id*\">）\n- 当我们点击label中的文本时，其关联的表单元素也会获得焦点。\n\n例：\n\n```html\n<input id=\"rdo\" name=\"rdo\" type=\"radio\" /><label for=\"rdo\">单选框</label>\n```\n\n### fieldset标签和legend标签\n\nfieldset标签用于给表单元素进行分组并绘制一个边框，legend标签用于定义某一组表单的标题。\n\n例如这个[例子](http://www.runoob.com/tags/tag-fieldset.html)：\n\n```html\n<form>\n  <fieldset>\n    <legend>Personalia:</legend>\n    Name: <input type=\"text\"><br>\n    Email: <input type=\"text\"><br>\n    Date of birth: <input type=\"text\">\n  </fieldset>\n</form>\n```\n\n作用：\n\n- 增强表单语义。\n- 可以使用fieldset标签的disabled属性来禁用整个组中的表单元素。\n\n## 其他语义化\n\n### 换行符\\<br />\n\nW3C标准规定，\\<br />标签只能用于段落中的换行。即只能用于p标签内部。\n\n### 无序列表ul\n\n对于列表型数据，不建议使用div实现，而应用无序列表或有序列表实现。\n\n为了实现外观效果，一般使用无序列表而不是有序列表。\n\n### strong 标签和em标签\n\nW3C对这两个标签赋予了“强调”的语义。\n\n可以在CSS中重新定义它们的样式而不会改变它们的语义。\n\n### del标签和ins标签\n\n这两个标签一般是配合使用表示更新文本：“delete”和“insert”，被删除的文本和被更新的文本。\n\n一般会用CSS重新定义它们的样式。\n\n[实例链接](http://www.runoob.com/tags/tag-del.html)\n\n### img标签\n\n对于什么时候使用img标签，什么时候使用背景图片，应该根据HTML的语义来判断。\n\n- img标签：作为HTML的一部分，希望被搜索引擎识别。\n\n- 背景图片： 只起到修饰作用，不希望被搜索引擎识别。\n\n## 语义化验证\n\n通过去掉CSS样式，观察页面是否还有很好的可读性来判断一个页面是否语义良好。\n\n## HTML5舍弃的标签\n\n下边这些已经被舍弃的标签(仅为了定义样式的标签和很少使用或已经被新标签代替的标签)应停止使用：\n\n- \\<acronym>  定义首字母缩写，应用abbr代替。\n- \\<applet> 定义嵌入的applet，应用object代替。\n- \\<basefont>\n- \\<big>\n- \\<center>\n- \\<dir> 定义目录列表，应用ul代替。\n- \\<font>\n- \\<frame>\n- \\<frameset>\n- \\<noframes>\n- \\<strike>\n- \\<tt>\n\n# CSS基础知识\n\n## CSS单位\n\n### px\n\npixel，像素，一个图片或计算机屏幕中最小的点。\n\n### %\n\nCSS中支持百分比的属性：\n\n- **width、height、font-size**，它们的百分比是相对于父元素的“相同元素”的值来计算的。\n- **line-height**，它的百分比是相对于**父元素**的**font-size**值来计算的。\n- **vertical-align**，它的百分比是相对于**当前元素**继承的**line-height**值来计算的。\n\n### em\n\n1em等于当前元素的以px为单位的font-size值，\n\n若当前元素的font-size值没有定义，则从父元素继承，\n\n若当前元素的所有祖先元素都没有定义font-size，则继承浏览器默认的font-size值：16px。\n\n<u>使用em的小技巧：</u>首行缩进使用 `text-indent: 2em`实现。\n\n### rem\n\nCSS3新引入的单位，指相对根元素（即html元素）的字体大小。\n\n## CSS特性\n\n### 继承性\n\n指子元素继承了父元素的某些样式属性。\n\n在CSS中，具有继承性的样式有三大类：\n\n- **文本**相关属性： font--family，font-size，font-style，font-weight，font，line-height，text-align，text-indent，word-spacing。\n- **列表**相关属性： list-style-image，list-style-position，list-style-type，list-style。\n- **颜色**相关属性： color。\n\n### 层叠性\n\n“后者居上”原则。\n\nCSS的层叠性指样式的覆盖。对于具有**相同权重**的**相同属性**，以最后定义的值为准。\n\n## CSS优先级\n\n### 引用方式\n\n行内样式>(内部样式=外部样式)\n\n若同时存在权重相同内部样式和外部样式，则以最后引入的样式为准。\n\n### 继承方式\n\n以最近的祖先元素为准。\n\n### 指定样式\n\n常见的伪元素——:before、:after、:first-letter、:first-line。\n\n常见的伪类——:hover、:first-child等。\n\n常用的选择器优先级：行内样式>id选择器>class选择器>元素选择器。\n\n选择器权值表：\n\n| 选择器      | 权值 |\n| ----------- | ---- |\n| 通配符      | 0    |\n| 伪元素      | 1    |\n| 元素选择器  | 1    |\n| class选择器 | 10   |\n| 伪类        | 10   |\n| 属性选择器  | 10   |\n| id选择器    | 100  |\n| 行内样式    | 1000 |\n\n### 继承样式和和指定样式\n\n指定样式权重更高。\n\n### !important\n\n权值最高，不推荐使用。\n\n## CSS引入方式\n\n- 导入样式表（加载html后加载css，不推荐）\n- 外部样式表（link标签）\n- 内部样式表（style标签）\n- 行内样式表\n\n## CSS选择器\n\nCSS出去基本的选择器（元素选择器、id选择器、class选择器、群组或分组选择器），\n\n还有<u>层次选择器</u>：\n\n| 选择器 | 说明                                      |\n| ------ | ----------------------------------------- |\n| M N    | 后代选择器，选择M元素所有内部后代N元素    |\n| M>N    | 子代选择器，选择M元素所有内部子代N元素    |\n| M~N    | 兄弟选择器，选择M元素所有同级N元素        |\n| M+N    | 相邻选择器，选择M元素相邻的下一个同级元素 |\n\n# CSS规范\n\n## 命名规范\n\n### CSS文件命名\n\n开发阶段按照功能模块划分CSS文件。\n\n| 文件名      | 说明                                 |\n| ----------- | ------------------------------------ |\n| reset.css   | 重置样式，重置元素默认样式           |\n| global.css  | 全局样式，全站公用，定义页面基础样式 |\n| themes.css  | 主题样式，用于实现换肤功能           |\n| module.css  | 模块样式，用于模块的样式             |\n| master.css  | 母版样式，用于母版页的样式           |\n| columes.css | 专栏样式，用于专栏的样式             |\n| forms.css   | 表单样式，用于表单的样式             |\n| mend.css    | 补丁样式，用于维护、修改的样式       |\n| print.css   | 打印样式，用于打印的样式             |\n\n### id和class命名\n\n建议使用中划线命名，例如`column-title`。\n\n为了避免class命名的重复，一般取父元素的class名作为前缀，例如`column-title`。\n\n| 网页主体部分 | 命名                          |\n| ------------ | ----------------------------- |\n| 最外层       | wrapper(一般用于包裹整个页面) |\n| 头部         | header                        |\n| 内容         | content                       |\n| 侧栏         | sidebar                       |\n| 栏目         | column                        |\n| 热点         | hot                           |\n| 新闻         | news                          |\n| 下载         | download                      |\n| 标志         | logo                          |\n| 导航条       | nav                           |\n| 主体         | main                          |\n| 左侧         | main-left                     |\n| 右侧         | main-right                    |\n| 底部         | footer                        |\n| 友情链接     | friendlink                    |\n| 加入我们     | joinus                        |\n| 版权         | copyright                     |\n| 服务         | service                       |\n| 登录         | login                         |\n| 注册         | register                      |\n\n| 导航部分 | 命名          |\n| -------- | ------------- |\n| 主导航   | main-nav      |\n| 子导航   | sub-nav       |\n| 边导航   | side-nav      |\n| 左导航   | leftside-nav  |\n| 右导航   | rightside-nav |\n| 顶导航   | top-nav       |\n\n| 菜单部分 | 命名    |\n| -------- | ------- |\n| 菜单     | menu    |\n| 子菜单   | submenu |\n\n| 其他     | 命名          |\n| -------- | ------------- |\n| 标题     | title         |\n| 摘要     | summary       |\n| 登录条   | loginbar      |\n| 搜索     | search        |\n| 标签页   | tab           |\n| 广告     | banner        |\n| 小技巧   | tips          |\n| 图标     | icon          |\n| 法律声明 | siteinfolegal |\n| 网站地图 | sitemap       |\n| 工具条   | tool、toolbar |\n| 首页     | homepage      |\n| 子页     | subpage       |\n| 合作伙伴 | partner       |\n| 帮助     | help          |\n| 指南     | guide         |\n| 滚动     | scroll        |\n| 提示信息 | msg           |\n| 投票     | vote          |\n| 相关文章 | related       |\n| 文章列表 | list          |\n\n## 书写规范\n\n对于功能代码，应该集中放在一起，\n\n对于其他代码，应按照如下顺序：\n\n1. 影响文档流属性（布局属性）——display，position，float，clear等\n2. 自身盒模型属性——width，height，padding，margin，border，overflow等\n3. 文本性属性——font，line-height，text-align，text-indent，vertical-align等\n4. 装饰性属性——color，background-color，opacity等\n5. 其他属性——cursor，content，list-style，quotes等\n\n例如：\n\n```css\n#main {\n  /* 影响文档流属性 */\n  display: inline-block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  /* 盒子模型属性 */\n  width: 100px;\n  height: 100px;\n  border: 2px solid gray;\n  /* 文本性属性 */\n  font-size: 15px;\n  font-weight: bold;\n  text-indent: 2em;\n  /* 装饰性属性 */\n  color: white;\n  background-color: red;\n  /* 其他属性 */\n  cursor: pointer;\n}\n```\n\n## 注释规范\n\n由于压缩工具会删除所有的注释，因此有时为了保留版权声明等注释信息，需要在注释内容前加一个叹号，如`/*! 注释内容 */`，这样压缩工具就不会删除这条注释信息。\n\n### 顶部注释\n\n```css\n/*\n *@description:说明\n *@author:作者\n *@update:更新时间，如2018-09-10 17:42\n */\n```\n\n### 模块注释\n\n```css\n/* 导航部分，开始 */\n......\n/* 导航部分，结束 */\n```\n\n### 简单注释\n\n```css\n/* 单行注释 */\n```\n\n或者\n\n```css\n/*多行注释\n *多行注释\n *多行注释\n */\n```\n\n## CSS reset\n\n重置样式，去除元素在浏览器中的默认样式。\n\n是否使用CSS reset根据实际开发需求而定。\n\n# 盒子模型\n\n![标准盒子模型](https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=5ad0ba6a0c7b02080c9c37e752e9deeb/0824ab18972bd407012c41327d899e510eb30911.jpg)\n\n![IE盒子模型](https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=6cdf3ae9fbfaaf5184b689b9bc64b8d6/1b4c510fd9f9d72ac29d82d2d22a2834359bbb00.jpg)\n\n## 外边距叠加\n\n又称为“margin叠加”，指当两个外边距相遇时会“合二为一”。叠加后的外边距为两个外边距的最大值。\n\n<u>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</u>\n\n以下图片均来自[w3school](http://www.w3school.com.cn/css/css_margin_collapsing.asp)\n\n![同级元素](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_1.gif)\n\n![父子元素](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_2.gif)\n\n![空元素1](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_3.gif)\n\n![空元素2](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_4.gif)\n\n![外边距合并的意义](http://www.w3school.com.cn/i/ct_css_margin_collapsing.gif)\n\n## 负margin\n\n- 当margin-top或者margin-left为负数时，**当前元素**会被拉向指定方向。\n- 当margin-bottom或者margin-right为负数时，**后续元素**会被拉向指定方向。\n\n[这里有一篇文章](https://www.jianshu.com/p/549aaa5fabaa)讲得不错，可以参考一下。\n\n[圣杯布局、双飞翼布局](https://www.cnblogs.com/star91/p/5773436.html)就是利用这个实现的。\n\n## overflow\n\n当浮动引起父元素高度塌陷时，可以为父元素加上`overflow: hidden`来清除浮动。\n\n# display属性\n\n| 属性值       | 说明                               |\n| ------------ | ---------------------------------- |\n| inline       | 行内元素                           |\n| block        | 块元素                             |\n| inline-block | 行内块元素                         |\n| table        | 以表格形式显示，类似于table元素    |\n| table-row    | 以表格行形式显示，类似于tr元素     |\n| table-cell   | 以表格单元格形式显示，类似于td元素 |\n| none         | 隐藏元素                           |\n\n## 块元素\n\n- 独占一行\n- 内部可以容纳其他块元素或行元素\n- 可以定义width和height\n- 可以定义四个方向的margin\n\n## inline元素\n\n- 可以与其他行内元素位于同一行\n- 可以容纳行内元素，但不能容纳块元素\n- 无法定义width和height\n- 可以定义margin-left和margin-right，不能定义margin-top和margin-bottom\n\n## inline-block元素\n\n- 可以定义width和height\n- 可以与其他行内元素位于同一行\n\n常见的inline-block元素：img元素和input元素\n\n## display: table-cell\n\n可以用于实现：\n\n- [图片垂直居中](https://www.jianshu.com/p/a7ee7dd60166)于元素\n- 等高布局\n- 自动平均划分元素，并在同一行显示\n\n## 去除inline-block元素间距\n\n在父元素中添加`font-size: 0`\n\n# 文本效果\n\n| 文本属性        | 说明                         |\n| --------------- | ---------------------------- |\n| text-decoration | 下划线、删除线、顶划线       |\n| text-transform  | 文本大小写                   |\n| font-variant    | 将英文文本转换为小型大写字母 |\n| text-indent     | 段落首行缩进                 |\n| text-align      | 文本水平对齐                 |\n| vertical-align  | 文本垂直对齐                 |\n| line-height     | 行高                         |\n| letter-spacing  | 字距                         |\n| word-spacing    | 词距                         |\n\n## text-indent\n\n可以使用\t`text-indent: -9999px;`来隐藏文本。\n\n## text-align\n\n主要使用的值为left、right、center，对文字、inline元素、inline-block元素都起作用，对块元素不起作用。\n\n利用`margin: 0 auto`实现块元素的水平居中。\n\n`text-align: center`在父元素中定义，`margin: 0 auto`在当前元素中定义。\n\n## line-height\n\n关于顶线、中线、基线、底线可以自行查阅。\n\n行高（line-height）指的是两行基线之间的距离。\n\n- 将height和line-height设为相同值可以实现文字垂直居中。\n- 当取值为%或者em时，是相对与父元素的font-size计算的。\n- 当取值为无单位数字时，是相对于当前元素的font-size计算的。\n\n## vertical-align\n\nvertical-align对inline、inline-block、table-cell元素有效，对块元素无效。\n\n用于定义<u>周围的文字、inline元素、inline-block元素</u>相对于该元素**基线**的垂直对齐方式。\n\n可以取负长度值和百分比值。\n\n### 取值\n\n1. 负值 ： `vertical-align: -2px`指的是该元素相对于基线向下偏移2px；\n\n2. 百分比 ： 相对于当前元素继承的line-height值计算的，也是该元素相对于基线偏移的值；\n\n3. [关键字](http://www.runoob.com/cssref/pr-pos-vertical-align.html) （前四个比较常用）：\n\n   | 值           | 描述                                           |\n   | ------------ | ---------------------------------------------- |\n   | **top**      | 把元素的顶端与行中最高元素的顶端对齐           |\n   | **middle**   | 把此元素放置在父元素的中部。                   |\n   | **baseline** | 默认。元素放置在父元素的基线上。               |\n   | **bottom**   | 把元素的底端与行中最低的元素的顶端对齐。       |\n   | text-top     | 把元素的顶端与父元素字体的顶端对齐             |\n   | text-bottom  | 把元素的底端与父元素字体的底端对齐。           |\n   | sub          | 垂直对齐文本的下标。                           |\n   | super        | 垂直对齐文本的上标                             |\n   | inherit      | 规定应该从父元素继承 vertical-align 属性的值。 |\n\n### 应用\n\n- 为img添加`vertical-align: middle`可以实现图片与周围的文字居中对齐\n- 要使块元素（如div）也可以使用此属性，可以为其先定义`display: table-cell`\n\n# 表单效果\n\n## radio与checkbox\n\n默认情况下由于是基线对齐因此视觉上会感觉单选框或复选框旁边的文字比它们低，这个时候可以使用vertical-align来让他们垂直居中对齐。\n\n可以使用关键字，也可以使用数值。\n\n## textarea\n\n- 可以使用max-width和max-height来限制拖拽大小\n- 可以使用`resize: none`来禁止拖拽\n\n要使textarea在不同浏览器中具有相同的外观，可以：\n\n- 使用CSS的width和height定义大小\n- 使用`overflow: auto`来定义textarea滚动条自适应\n\n## 表单对齐\n\n书上给了**注册**的例子：\n\n![图片来源于网络](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536639853274&di=16c88d63b9118620ba546c2f6237b78c&imgtype=0&src=http%3A%2F%2Fpic.orsoon.com%2Fuploads%2Fallimg%2F24631428484696.png)\n\n实现方法：\n\n1. 每一行表单分为左栏加若干右栏\n   1. 所有行的左栏长度相等\n   2. 所有行的右栏所有盒子长度之和相等\n   3. 左栏一般为一个label，右栏为若干文本框\n2. 所有左栏和右栏盒子都设为左浮动\n3. 左栏添加属性`text-align: right`使得文字右对齐\n4. 每一行左栏盒子长度加上所有右栏盒子长度之和等于行宽\n5. 每一行由一个p包裹住，并为p添加`overflow: hidden`来清除浮动\n\n然后我又去看了一下各网站的**登录**界面，基本上是一个icon+一个input的模式：\n\n![图片来源于网络](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536641005969&di=02e6a2469281303e926eb8878cf64db9&imgtype=0&src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fexp%2Fw%3D480%2Fsign%3D00237679845494ee87220e111df7e0e1%2Fa686c9177f3e67093ac0b23933c79f3df9dc5530.jpg)\n\n\n\n实现方法：\n\n- icon使用`position: absolute`脱离文档流并盖在input上\n- input将padding-left调到合适大小使得输入框不被icon盖住\n\n#　浮动布局\n\n## 文档流\n\n简单来说就是元素在页面中出现的先后顺序。\n\n- 正常文档流 ： “normal flow”，指默认情况下页面元素的布局情况。\n- 脱离文档流：脱离正常文档流。要改变正常文档流，使用浮动和定位方法。\n\n## 浮动\n\n可以使元素移到左边或者右边，并且允许后边的文字和元素环绕着它。\n\n浮动后使用margin来定义和其他元素之间的间距。\n\n绝对定位的元素忽略float属性。\n\nfloat的取值表如下，默认为**none**：\n\n| 值      | 描述                                                 |\n| ------- | ---------------------------------------------------- |\n| left    | 元素向左浮动。                                       |\n| right   | 元素向右浮动。                                       |\n| none    | 默认值。元素不浮动，并会显示在其在文本中出现的位置。 |\n| inherit | 规定应该从父元素继承 float 属性的值。                |\n\n\n\n- 当一个元素添加float属性为left或者right时，它将变为block类型。\n- 浮动元素脱离正常文档流，若其height大于父元素的height或者父元素的height未定义，会造成父元素高度塌陷。可以为父元素添加`overflow: hidden`来解决。\n- 若父元素和子元素都是浮动元素，则父元素会自适应地包含子元素。\n\n- 若兄弟元素不是浮动元素，由于浮动元素脱离文档流，可能会出现覆盖等情况。\n\n## 清除浮动\n\n- `clear: both`，用于浮动元素后边的元素，表示两边不允许出现浮动元素。\n- `overflow: hidden`，用于浮动元素的父元素，但会隐藏超出父元素的内容部分。\n- 实际开发中，更经常使用`:after`伪元素结合`clear: both`来实现。\n- 为了兼容ie，为父元素添加`zoom: 1`来消除浮动。\n\n# 定位布局\n\n## [属性值](http://www.runoob.com/cssref/pr-class-position.html)\n\n| 值                                                           | 描述                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [static](http://www.runoob.com/css/css-positioning.html#position-static) | <u>默认值</u>。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。 |\n| [absolute](http://www.runoob.com/css/css-positioning.html#position-absolute) | 生成绝对定位的元素，相对于 <u>static 定位以外的第一个父元素</u>进行定位。元素的位置通过 \"left\", \"top\", \"right\" 以及 \"bottom\" 属性进行规定。 |\n| [fixed](http://www.runoob.com/css/css-positioning.html#position-fixed) | 生成固定定位的元素，相对于<u>浏览器窗口</u>进行定位。元素的位置通过 \"left\", \"top\", \"right\" 以及 \"bottom\" 属性进行规定。 |\n| [relative](http://www.runoob.com/css/css-positioning.html#position-relative) | 生成相对定位的元素，相对于<u>其正常位置</u>进行定位。因此，\"left:20\" 会向元素的 LEFT 位置添加 20 像素。 |\n| [sticky](http://www.runoob.com/css/css-positioning.html#position-sticky) | 粘性定位，该定位基于用户滚动的位置。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。**注意:** Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。 |\n| inherit                                                      | 规定应该从父元素继承 position 属性的值。                     |\n| initial                                                      | 设置该属性为默认值，详情查看 [CSS initial 关键字](http://www.runoob.com/cssref/css-inherit.html)。 |\n\n- absolute会将元素转换为块元素。\n- 若想要子元素相对于父元素定位，一般给父元素添加`position: relative`，给子元素定义`position: absolute`来实现。祖先元素同理。\n\n## z-index属性\n\n默认情况下设置z-index无效，只有当元素定义position为relative、absolute、fixed时才会激活，z-index值越大，其堆叠顺序越高，越靠上（z方向上的靠上）。\n\n# CSS图形\n\n由于图片大小比较大，数据传输量大且一张图片会引发一次HTTP请求，因此对徐图形效果，一般更倾向于用CSS实现。\n\n这里有一篇[CSS制作图形速查表](https://www.w3cplus.com/css/css-simple-shapes-cheat-sheet)总结得比较全面，可以参考。\n\n另外对于带有边框的图形，一般是用大小不同的两个相同图形实现，小的覆盖在大的上边。\n\n# 性能优化\n\n## 属性缩写\n\n- border：`border: 1px solid red`\n  - 若不想要底边框，可以加上`border-bottom: 0`\n  - 若只想要底边框，可以`border-bottom: 1px solid red`\n\n- padding： \n  - `padding: 10px`指上右下左均为10px\n  - `padding: 10px 20px`指上下为10px，左右为20px\n  - `padding: 10px 20px 30px 40px`的顺序为上右下左，从上开始按照顺时针顺序\n\n- margin： 类似于padding\n- background： `background: url('xxx.jpg') no-repeat 80px 40px`,最后为background-position\n- font： `font: \"微软雅黑\" 12px/1.5em bold`\n  - 顺序为`font-family`、`font-size`、`line-height`、`font-weight`\n  - 简写形式必须指定`font-family`和`font-size`的值，其他属性没有指定则为默认值\n  - 简写形式中`font-size`和`line-height`之间需要加入一个斜杠`/`\n\n- color： 十六进制的颜色值若每两位值相同，可以缩写一半，比如`color: #112233`可以缩写为`color: #123`\n\n##　语法压缩\n\n- 当一个CSS规则只有一两个属性的时候，使用横向书写\n- 可以省略最后一个属性的分号\n- background-image、cursor等属性url()中的路径不用加引号\n- 如果某一个属性值为0，则不需要加单位\n- 如果某一个属性值是以0为开头的小数，可以吧0省略\n- 使用群组选择器合并相同样式\n- 若同一个父元素的多个子元素都定义了相同的可继承属性，把这些属性定义在父元素中来精简代码\n\n## CSS压缩\n\n书中推荐了两个在线的压缩工具：[CSS Compressor](https://csscompressor.com) 和 [YUI Compressor](http://tool.oschina.net/jscompress)\n\n以YUI Compressor为例，它会对CSS文件执行如下操作：\n\n- 删除所有注释\n- 删除无用空白符\n- 删除结尾分号\n- 删除属性值为0的单位\n- 删除以0开头的小数前的0\n- 合并相似属性（属性缩写）\n- 将RGB颜色转换为十六进制颜色\n\n## 图片压缩\n\n书中推荐的图片压缩工具：\n\n在线的[JPEGmini](https://www.jpegmini.com)和[TinyPNG](https://tinypng.com)以及本地的[ImageOptim](https://imageoptim.com/versions.html)\n\n## 高性能的选择器\n\n浏览器对选择器规则是从右到左进行解析的。\n\nCSS选择的匹配效率：\n\n1. id选择器\n2. class选择器\n3. 元素选择器\n4. 相邻选择器\n5. 子选择器\n6. 后代选择器\n7. 通配符选择器\n8. 属性选择器\n9. 伪类选择器\n\n因此在使用选择器时应注意：\n\n- 尽量不要使用通配符\n- 不要在id选择器和class选择器前添加元素名\n- 选择器最好不要超过三层，靠右的选择条件应尽可能精确\n- 避免使用后代选择器，尽量少使用子选择器\n\n# CSS技巧\n\n## 水平居中\n\n- 文字、inline元素和inline-*元素： `text-align: center`\n- 块元素： `margin: 0 auto`\n\n## 垂直居中\n\n- 行内块元素使用`vertical-align: middle`\n- 块元素将display改为table-cell然后使用vertical-align\n- 多行文字使用一个标签将文字包起来并设为table-cell，然后再设置vertical-align\n- 单行文字设置line-height和height属性值相同来实现\n\n## CSS Sprite\n\n又称为CSS精灵或CSS**雪碧图**，它将零散的小背景图合并成一张大背景图，然后再利用background-position属性进行定位从而现实小背景图。\n\n使用CSS Sprite技术时，需要注意：\n\n- 在开发后期而不是开发前期使用此技术\n- 有条理地组织图片顺序，应将小背景图按照类别、风格、大小等分门别类地放好\n- 控制雪碧图的大小，当图片大小小于200KB时传输时间是差不多的，因此雪碧图应控制在200KB以内\n\n书中推荐了两个CSS Sprite工具：[CSS Sprite Generator](http://css.spritegen.com/) 和 [Sprite Cow](http://www.spritecow.com/)\n\n## Icon Font图标\n\n使用字体文件实现小图标效果，从而减少图片的使用。\n\n推荐的Icon Font网站：http://www.iconfont.cn/\n\n网站上就有[使用教程](http://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d0091c141&helptype=code)\n\n# 重要概念\n\n## 包含块\n\ncontaining block，决定一个元素大小和定位的元素。\n\n时视觉格式化模型中的一个重要概念，与CSS盒子模型类似。其作用主要是为其内部的后代元素提供一个参考。\n\n- 根元素（HTML元素）没有父元素，它存在的包含块被称为初始包含块\n- 定位为fixed的元素的包含块为浏览器窗口\n- 定位为是static和relative的元素的包含块是它最近的块级（block、inline-block或table-cell）祖先元素创建的\n- 定位为absolute的元素的包含块是它最近的定位不是static的祖先元素，可以是块元素也可以是行内元素\n\n## 层叠上下文\n\n![层叠级别图](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1537245373&di=c7455fbd6881b1a07ae8ac81a79f474e&imgtype=jpg&er=1&src=http%3A%2F%2Fwww.w3cplus.com%2Fsites%2Fdefault%2Ffiles%2Fblogs%2F2018%2F1808%2Fz-index-15.png)\n\n一个元素在z轴上的堆叠顺序：\n\n- 层叠级别越大越靠上\n- 同等层叠级别，后边的堆叠在前边的上边（后来者居上）\n- 不同的层叠上下文比较的是父级层叠上下文，与自身无关\n\n## BFC和IFC\n\nBFC： block formatting context， 块级格式上下文\n\nIFC： inline formatting context， 行级格式上下文\n\n若一个元素具备以下任何一个条件，则会创造创造一个新的BFC：\n\n- 根元素\n- float属性不是none\n- position属性是absolute或fixed\n- overflow属性值不是visible\n- display属性为inline-block、table-caption、table-cell\n\nW3C描述BFC的特点为：\n\n- 在一个BFC中，盒子从顶端开始垂直一个接着一个地排列。两个相邻盒子之间的垂直间距有margin决定。**同一个BFC中**，两个相邻块盒子之间**垂直方向上的外边距**会叠加。\n- 在一个BFC中，每一个盒子的左外边界（margin-left）会紧贴着容器的border-left，右边同理，即使存在浮动元素也是如此。\n\n可以得到结论：\n\n1. 在一个BFC内部，盒子会在垂直方向上一个接着一个地排列\n2. 在一个BFC内部，相邻的margin-top、margin-bottom会叠加\n3. 在一个BFC内部，每一个盒子的左外边界（margin-left）会紧贴着容器（包含盒子）的border-left，即使存在浮动元素也是如此\n4. 在一个BFC内部，如果存在内部元素是一个新的BFC，并且存在内部元素是浮动元素，则这个新的BFC的区域不会与浮动元素的区域重叠\n5. BFC就是页面上一个隔离的盒子，该盒子内部的子元素不会影响到外边的元素\n6. 计算一个BFC的高度时，其内部浮动元素的高度也会计算其中\n\nBFC的用途：\n\n- 创建BFC来避免垂直外边距叠加（例如使用div将一个盒子包起来并给这个div添加overflow属性）\n- 创建BFC来清除浮动（为父元素添加`overflow: hidden`，利用结论第六条）\n- 创建BFC来实现[自适应布局](https://blog.csdn.net/michael8512/article/details/76473835)\n\n\n\n---\n\n好了到这里，这本书就看完了，一些细节的东西了解到了很多，下面开始看html5+css3。\n\n\\- 2018 - 09 - 11 -","source":"_posts/HTML与CSS学习记录.md","raw":"---\ntitle: HTML与CSS学习记录\ntoc: true\ndate: 2018-09-10 14:04:59\ncategories:\n- Web\ntags:\n- HTML\n- CSS\n---\n\n\n\n《HTML与CSS进阶教程读书笔记》\n\n---\n\n\n\n# HTML基础知识\n\n## HTML与XHTML\n\nHTML指超文本标记语言，是构成网页文档的主要语言。我们常说的HTML指HTML4.01。\n\nXHTML指扩展的超文本标记语言，是XML风格的、更严格、更纯净的HTML。\n\n两者的主要区别：\n\n- XHTML标签必须闭合。\n- XHTML标签和属性必须小写。\n- XHTML标签属性必须加引号。\n- XHTML标签用id属性代替name属性。\n\n## id和class\n\n由于id属性具有唯一性，因此W3C建议，对于页面关键的结构或大结构，才能使用id属性，其他地方使用class属性。\n\n<u>因为搜索引擎是根据标签的语义和id属性来识别的，因此id属性的使用和命名都需要谨慎。</u>\n\n一般来说，定义多个class的目的在于：一个class抽取公共样式，一个class定义单独样式。\n\n## 标题栏小图标\n\n在`head`标签内加入：\n\n```html\n<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"图标路径.ico\" />\n```\n\n其中`rel`和`type`是固定属性不用更改，只需要修改图片路径即可。\n\n\n\n# 语义化\n\nHTML的精髓在于标签的语义。搜索引擎根据HTML代码识别页面结构。\n\n编写语意结构良好的页面的好处：\n\n- 利于开发调试和后期维护。\n- 利于搜索引擎优化。\n\n应优先使用正确的语义化标签，如果没有语义化标签可用，再考虑div或者span等无语义标签。\n\n## 标题语义化\n\nh1-h6是标题标签，相比于其他标签，它们在搜索引擎优化（SEO）中占有相当重要的地位。\n\n一般用到h4，h5和h6权重和普通标签差不多，很少使用。\n\n对于标题语义化，我们需要注意的是：\n\n- 一个页面只能有一个h1标签。\n- h1-h6之间不要出现断层。\n- 不要用标题标签来定义样式（如为了加粗字体而为文本加上标题标签）。\n- 不要用div来代替标题标签。\n\ndiv是无语义的标签，如果使用div代替标题标签会使网页在SEO中丢失大量权重。\n\n## 图片语义化\n\n### alt属性和title属性\n\nalt是给搜索引擎看的，title是给用户看的。\n\n搜索引擎根据alt属性或上下文判断图片内容。\n\n因此**img标签必须添加alt属性。**\n\n### figure元素和figcaption元素\n\n对于图片+图注的效果，使用figure和figcaption来增强图片语义化。\n\n例：\n\n```html\n<figure>\n    <img src=\"xxx\" alt=\"xxx\" />\n    <figcaption>这是一个图注</figcaption>\n</figure>\n```\n\n更详细的介绍可以看[这一篇博客](https://www.w3cplus.com/html5/quick-tip-the-right-way-to-use-figure-and-figcaption-elements.html)。\n\n## 表格语义化\n\n| 标签    | 说明             |\n| ------- | ---------------- |\n| table   | 表格             |\n| caption | 标题             |\n| thead   | 表头（语义划分） |\n| tbody   | 表身（语义划分） |\n| tfoot   | 表尾（语义划分） |\n| tr      | 行               |\n| th      | 表头单元格       |\n| td      | 表格单元格       |\n\n## 表单语义化\n\n### label标签\n\nlabel标签的for属性有两个作用：\n\n- 语义上绑定了label元素和表单元素。（\\<label for=\"*element_id*\">）\n- 当我们点击label中的文本时，其关联的表单元素也会获得焦点。\n\n例：\n\n```html\n<input id=\"rdo\" name=\"rdo\" type=\"radio\" /><label for=\"rdo\">单选框</label>\n```\n\n### fieldset标签和legend标签\n\nfieldset标签用于给表单元素进行分组并绘制一个边框，legend标签用于定义某一组表单的标题。\n\n例如这个[例子](http://www.runoob.com/tags/tag-fieldset.html)：\n\n```html\n<form>\n  <fieldset>\n    <legend>Personalia:</legend>\n    Name: <input type=\"text\"><br>\n    Email: <input type=\"text\"><br>\n    Date of birth: <input type=\"text\">\n  </fieldset>\n</form>\n```\n\n作用：\n\n- 增强表单语义。\n- 可以使用fieldset标签的disabled属性来禁用整个组中的表单元素。\n\n## 其他语义化\n\n### 换行符\\<br />\n\nW3C标准规定，\\<br />标签只能用于段落中的换行。即只能用于p标签内部。\n\n### 无序列表ul\n\n对于列表型数据，不建议使用div实现，而应用无序列表或有序列表实现。\n\n为了实现外观效果，一般使用无序列表而不是有序列表。\n\n### strong 标签和em标签\n\nW3C对这两个标签赋予了“强调”的语义。\n\n可以在CSS中重新定义它们的样式而不会改变它们的语义。\n\n### del标签和ins标签\n\n这两个标签一般是配合使用表示更新文本：“delete”和“insert”，被删除的文本和被更新的文本。\n\n一般会用CSS重新定义它们的样式。\n\n[实例链接](http://www.runoob.com/tags/tag-del.html)\n\n### img标签\n\n对于什么时候使用img标签，什么时候使用背景图片，应该根据HTML的语义来判断。\n\n- img标签：作为HTML的一部分，希望被搜索引擎识别。\n\n- 背景图片： 只起到修饰作用，不希望被搜索引擎识别。\n\n## 语义化验证\n\n通过去掉CSS样式，观察页面是否还有很好的可读性来判断一个页面是否语义良好。\n\n## HTML5舍弃的标签\n\n下边这些已经被舍弃的标签(仅为了定义样式的标签和很少使用或已经被新标签代替的标签)应停止使用：\n\n- \\<acronym>  定义首字母缩写，应用abbr代替。\n- \\<applet> 定义嵌入的applet，应用object代替。\n- \\<basefont>\n- \\<big>\n- \\<center>\n- \\<dir> 定义目录列表，应用ul代替。\n- \\<font>\n- \\<frame>\n- \\<frameset>\n- \\<noframes>\n- \\<strike>\n- \\<tt>\n\n# CSS基础知识\n\n## CSS单位\n\n### px\n\npixel，像素，一个图片或计算机屏幕中最小的点。\n\n### %\n\nCSS中支持百分比的属性：\n\n- **width、height、font-size**，它们的百分比是相对于父元素的“相同元素”的值来计算的。\n- **line-height**，它的百分比是相对于**父元素**的**font-size**值来计算的。\n- **vertical-align**，它的百分比是相对于**当前元素**继承的**line-height**值来计算的。\n\n### em\n\n1em等于当前元素的以px为单位的font-size值，\n\n若当前元素的font-size值没有定义，则从父元素继承，\n\n若当前元素的所有祖先元素都没有定义font-size，则继承浏览器默认的font-size值：16px。\n\n<u>使用em的小技巧：</u>首行缩进使用 `text-indent: 2em`实现。\n\n### rem\n\nCSS3新引入的单位，指相对根元素（即html元素）的字体大小。\n\n## CSS特性\n\n### 继承性\n\n指子元素继承了父元素的某些样式属性。\n\n在CSS中，具有继承性的样式有三大类：\n\n- **文本**相关属性： font--family，font-size，font-style，font-weight，font，line-height，text-align，text-indent，word-spacing。\n- **列表**相关属性： list-style-image，list-style-position，list-style-type，list-style。\n- **颜色**相关属性： color。\n\n### 层叠性\n\n“后者居上”原则。\n\nCSS的层叠性指样式的覆盖。对于具有**相同权重**的**相同属性**，以最后定义的值为准。\n\n## CSS优先级\n\n### 引用方式\n\n行内样式>(内部样式=外部样式)\n\n若同时存在权重相同内部样式和外部样式，则以最后引入的样式为准。\n\n### 继承方式\n\n以最近的祖先元素为准。\n\n### 指定样式\n\n常见的伪元素——:before、:after、:first-letter、:first-line。\n\n常见的伪类——:hover、:first-child等。\n\n常用的选择器优先级：行内样式>id选择器>class选择器>元素选择器。\n\n选择器权值表：\n\n| 选择器      | 权值 |\n| ----------- | ---- |\n| 通配符      | 0    |\n| 伪元素      | 1    |\n| 元素选择器  | 1    |\n| class选择器 | 10   |\n| 伪类        | 10   |\n| 属性选择器  | 10   |\n| id选择器    | 100  |\n| 行内样式    | 1000 |\n\n### 继承样式和和指定样式\n\n指定样式权重更高。\n\n### !important\n\n权值最高，不推荐使用。\n\n## CSS引入方式\n\n- 导入样式表（加载html后加载css，不推荐）\n- 外部样式表（link标签）\n- 内部样式表（style标签）\n- 行内样式表\n\n## CSS选择器\n\nCSS出去基本的选择器（元素选择器、id选择器、class选择器、群组或分组选择器），\n\n还有<u>层次选择器</u>：\n\n| 选择器 | 说明                                      |\n| ------ | ----------------------------------------- |\n| M N    | 后代选择器，选择M元素所有内部后代N元素    |\n| M>N    | 子代选择器，选择M元素所有内部子代N元素    |\n| M~N    | 兄弟选择器，选择M元素所有同级N元素        |\n| M+N    | 相邻选择器，选择M元素相邻的下一个同级元素 |\n\n# CSS规范\n\n## 命名规范\n\n### CSS文件命名\n\n开发阶段按照功能模块划分CSS文件。\n\n| 文件名      | 说明                                 |\n| ----------- | ------------------------------------ |\n| reset.css   | 重置样式，重置元素默认样式           |\n| global.css  | 全局样式，全站公用，定义页面基础样式 |\n| themes.css  | 主题样式，用于实现换肤功能           |\n| module.css  | 模块样式，用于模块的样式             |\n| master.css  | 母版样式，用于母版页的样式           |\n| columes.css | 专栏样式，用于专栏的样式             |\n| forms.css   | 表单样式，用于表单的样式             |\n| mend.css    | 补丁样式，用于维护、修改的样式       |\n| print.css   | 打印样式，用于打印的样式             |\n\n### id和class命名\n\n建议使用中划线命名，例如`column-title`。\n\n为了避免class命名的重复，一般取父元素的class名作为前缀，例如`column-title`。\n\n| 网页主体部分 | 命名                          |\n| ------------ | ----------------------------- |\n| 最外层       | wrapper(一般用于包裹整个页面) |\n| 头部         | header                        |\n| 内容         | content                       |\n| 侧栏         | sidebar                       |\n| 栏目         | column                        |\n| 热点         | hot                           |\n| 新闻         | news                          |\n| 下载         | download                      |\n| 标志         | logo                          |\n| 导航条       | nav                           |\n| 主体         | main                          |\n| 左侧         | main-left                     |\n| 右侧         | main-right                    |\n| 底部         | footer                        |\n| 友情链接     | friendlink                    |\n| 加入我们     | joinus                        |\n| 版权         | copyright                     |\n| 服务         | service                       |\n| 登录         | login                         |\n| 注册         | register                      |\n\n| 导航部分 | 命名          |\n| -------- | ------------- |\n| 主导航   | main-nav      |\n| 子导航   | sub-nav       |\n| 边导航   | side-nav      |\n| 左导航   | leftside-nav  |\n| 右导航   | rightside-nav |\n| 顶导航   | top-nav       |\n\n| 菜单部分 | 命名    |\n| -------- | ------- |\n| 菜单     | menu    |\n| 子菜单   | submenu |\n\n| 其他     | 命名          |\n| -------- | ------------- |\n| 标题     | title         |\n| 摘要     | summary       |\n| 登录条   | loginbar      |\n| 搜索     | search        |\n| 标签页   | tab           |\n| 广告     | banner        |\n| 小技巧   | tips          |\n| 图标     | icon          |\n| 法律声明 | siteinfolegal |\n| 网站地图 | sitemap       |\n| 工具条   | tool、toolbar |\n| 首页     | homepage      |\n| 子页     | subpage       |\n| 合作伙伴 | partner       |\n| 帮助     | help          |\n| 指南     | guide         |\n| 滚动     | scroll        |\n| 提示信息 | msg           |\n| 投票     | vote          |\n| 相关文章 | related       |\n| 文章列表 | list          |\n\n## 书写规范\n\n对于功能代码，应该集中放在一起，\n\n对于其他代码，应按照如下顺序：\n\n1. 影响文档流属性（布局属性）——display，position，float，clear等\n2. 自身盒模型属性——width，height，padding，margin，border，overflow等\n3. 文本性属性——font，line-height，text-align，text-indent，vertical-align等\n4. 装饰性属性——color，background-color，opacity等\n5. 其他属性——cursor，content，list-style，quotes等\n\n例如：\n\n```css\n#main {\n  /* 影响文档流属性 */\n  display: inline-block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  /* 盒子模型属性 */\n  width: 100px;\n  height: 100px;\n  border: 2px solid gray;\n  /* 文本性属性 */\n  font-size: 15px;\n  font-weight: bold;\n  text-indent: 2em;\n  /* 装饰性属性 */\n  color: white;\n  background-color: red;\n  /* 其他属性 */\n  cursor: pointer;\n}\n```\n\n## 注释规范\n\n由于压缩工具会删除所有的注释，因此有时为了保留版权声明等注释信息，需要在注释内容前加一个叹号，如`/*! 注释内容 */`，这样压缩工具就不会删除这条注释信息。\n\n### 顶部注释\n\n```css\n/*\n *@description:说明\n *@author:作者\n *@update:更新时间，如2018-09-10 17:42\n */\n```\n\n### 模块注释\n\n```css\n/* 导航部分，开始 */\n......\n/* 导航部分，结束 */\n```\n\n### 简单注释\n\n```css\n/* 单行注释 */\n```\n\n或者\n\n```css\n/*多行注释\n *多行注释\n *多行注释\n */\n```\n\n## CSS reset\n\n重置样式，去除元素在浏览器中的默认样式。\n\n是否使用CSS reset根据实际开发需求而定。\n\n# 盒子模型\n\n![标准盒子模型](https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=5ad0ba6a0c7b02080c9c37e752e9deeb/0824ab18972bd407012c41327d899e510eb30911.jpg)\n\n![IE盒子模型](https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=6cdf3ae9fbfaaf5184b689b9bc64b8d6/1b4c510fd9f9d72ac29d82d2d22a2834359bbb00.jpg)\n\n## 外边距叠加\n\n又称为“margin叠加”，指当两个外边距相遇时会“合二为一”。叠加后的外边距为两个外边距的最大值。\n\n<u>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</u>\n\n以下图片均来自[w3school](http://www.w3school.com.cn/css/css_margin_collapsing.asp)\n\n![同级元素](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_1.gif)\n\n![父子元素](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_2.gif)\n\n![空元素1](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_3.gif)\n\n![空元素2](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_4.gif)\n\n![外边距合并的意义](http://www.w3school.com.cn/i/ct_css_margin_collapsing.gif)\n\n## 负margin\n\n- 当margin-top或者margin-left为负数时，**当前元素**会被拉向指定方向。\n- 当margin-bottom或者margin-right为负数时，**后续元素**会被拉向指定方向。\n\n[这里有一篇文章](https://www.jianshu.com/p/549aaa5fabaa)讲得不错，可以参考一下。\n\n[圣杯布局、双飞翼布局](https://www.cnblogs.com/star91/p/5773436.html)就是利用这个实现的。\n\n## overflow\n\n当浮动引起父元素高度塌陷时，可以为父元素加上`overflow: hidden`来清除浮动。\n\n# display属性\n\n| 属性值       | 说明                               |\n| ------------ | ---------------------------------- |\n| inline       | 行内元素                           |\n| block        | 块元素                             |\n| inline-block | 行内块元素                         |\n| table        | 以表格形式显示，类似于table元素    |\n| table-row    | 以表格行形式显示，类似于tr元素     |\n| table-cell   | 以表格单元格形式显示，类似于td元素 |\n| none         | 隐藏元素                           |\n\n## 块元素\n\n- 独占一行\n- 内部可以容纳其他块元素或行元素\n- 可以定义width和height\n- 可以定义四个方向的margin\n\n## inline元素\n\n- 可以与其他行内元素位于同一行\n- 可以容纳行内元素，但不能容纳块元素\n- 无法定义width和height\n- 可以定义margin-left和margin-right，不能定义margin-top和margin-bottom\n\n## inline-block元素\n\n- 可以定义width和height\n- 可以与其他行内元素位于同一行\n\n常见的inline-block元素：img元素和input元素\n\n## display: table-cell\n\n可以用于实现：\n\n- [图片垂直居中](https://www.jianshu.com/p/a7ee7dd60166)于元素\n- 等高布局\n- 自动平均划分元素，并在同一行显示\n\n## 去除inline-block元素间距\n\n在父元素中添加`font-size: 0`\n\n# 文本效果\n\n| 文本属性        | 说明                         |\n| --------------- | ---------------------------- |\n| text-decoration | 下划线、删除线、顶划线       |\n| text-transform  | 文本大小写                   |\n| font-variant    | 将英文文本转换为小型大写字母 |\n| text-indent     | 段落首行缩进                 |\n| text-align      | 文本水平对齐                 |\n| vertical-align  | 文本垂直对齐                 |\n| line-height     | 行高                         |\n| letter-spacing  | 字距                         |\n| word-spacing    | 词距                         |\n\n## text-indent\n\n可以使用\t`text-indent: -9999px;`来隐藏文本。\n\n## text-align\n\n主要使用的值为left、right、center，对文字、inline元素、inline-block元素都起作用，对块元素不起作用。\n\n利用`margin: 0 auto`实现块元素的水平居中。\n\n`text-align: center`在父元素中定义，`margin: 0 auto`在当前元素中定义。\n\n## line-height\n\n关于顶线、中线、基线、底线可以自行查阅。\n\n行高（line-height）指的是两行基线之间的距离。\n\n- 将height和line-height设为相同值可以实现文字垂直居中。\n- 当取值为%或者em时，是相对与父元素的font-size计算的。\n- 当取值为无单位数字时，是相对于当前元素的font-size计算的。\n\n## vertical-align\n\nvertical-align对inline、inline-block、table-cell元素有效，对块元素无效。\n\n用于定义<u>周围的文字、inline元素、inline-block元素</u>相对于该元素**基线**的垂直对齐方式。\n\n可以取负长度值和百分比值。\n\n### 取值\n\n1. 负值 ： `vertical-align: -2px`指的是该元素相对于基线向下偏移2px；\n\n2. 百分比 ： 相对于当前元素继承的line-height值计算的，也是该元素相对于基线偏移的值；\n\n3. [关键字](http://www.runoob.com/cssref/pr-pos-vertical-align.html) （前四个比较常用）：\n\n   | 值           | 描述                                           |\n   | ------------ | ---------------------------------------------- |\n   | **top**      | 把元素的顶端与行中最高元素的顶端对齐           |\n   | **middle**   | 把此元素放置在父元素的中部。                   |\n   | **baseline** | 默认。元素放置在父元素的基线上。               |\n   | **bottom**   | 把元素的底端与行中最低的元素的顶端对齐。       |\n   | text-top     | 把元素的顶端与父元素字体的顶端对齐             |\n   | text-bottom  | 把元素的底端与父元素字体的底端对齐。           |\n   | sub          | 垂直对齐文本的下标。                           |\n   | super        | 垂直对齐文本的上标                             |\n   | inherit      | 规定应该从父元素继承 vertical-align 属性的值。 |\n\n### 应用\n\n- 为img添加`vertical-align: middle`可以实现图片与周围的文字居中对齐\n- 要使块元素（如div）也可以使用此属性，可以为其先定义`display: table-cell`\n\n# 表单效果\n\n## radio与checkbox\n\n默认情况下由于是基线对齐因此视觉上会感觉单选框或复选框旁边的文字比它们低，这个时候可以使用vertical-align来让他们垂直居中对齐。\n\n可以使用关键字，也可以使用数值。\n\n## textarea\n\n- 可以使用max-width和max-height来限制拖拽大小\n- 可以使用`resize: none`来禁止拖拽\n\n要使textarea在不同浏览器中具有相同的外观，可以：\n\n- 使用CSS的width和height定义大小\n- 使用`overflow: auto`来定义textarea滚动条自适应\n\n## 表单对齐\n\n书上给了**注册**的例子：\n\n![图片来源于网络](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536639853274&di=16c88d63b9118620ba546c2f6237b78c&imgtype=0&src=http%3A%2F%2Fpic.orsoon.com%2Fuploads%2Fallimg%2F24631428484696.png)\n\n实现方法：\n\n1. 每一行表单分为左栏加若干右栏\n   1. 所有行的左栏长度相等\n   2. 所有行的右栏所有盒子长度之和相等\n   3. 左栏一般为一个label，右栏为若干文本框\n2. 所有左栏和右栏盒子都设为左浮动\n3. 左栏添加属性`text-align: right`使得文字右对齐\n4. 每一行左栏盒子长度加上所有右栏盒子长度之和等于行宽\n5. 每一行由一个p包裹住，并为p添加`overflow: hidden`来清除浮动\n\n然后我又去看了一下各网站的**登录**界面，基本上是一个icon+一个input的模式：\n\n![图片来源于网络](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536641005969&di=02e6a2469281303e926eb8878cf64db9&imgtype=0&src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fexp%2Fw%3D480%2Fsign%3D00237679845494ee87220e111df7e0e1%2Fa686c9177f3e67093ac0b23933c79f3df9dc5530.jpg)\n\n\n\n实现方法：\n\n- icon使用`position: absolute`脱离文档流并盖在input上\n- input将padding-left调到合适大小使得输入框不被icon盖住\n\n#　浮动布局\n\n## 文档流\n\n简单来说就是元素在页面中出现的先后顺序。\n\n- 正常文档流 ： “normal flow”，指默认情况下页面元素的布局情况。\n- 脱离文档流：脱离正常文档流。要改变正常文档流，使用浮动和定位方法。\n\n## 浮动\n\n可以使元素移到左边或者右边，并且允许后边的文字和元素环绕着它。\n\n浮动后使用margin来定义和其他元素之间的间距。\n\n绝对定位的元素忽略float属性。\n\nfloat的取值表如下，默认为**none**：\n\n| 值      | 描述                                                 |\n| ------- | ---------------------------------------------------- |\n| left    | 元素向左浮动。                                       |\n| right   | 元素向右浮动。                                       |\n| none    | 默认值。元素不浮动，并会显示在其在文本中出现的位置。 |\n| inherit | 规定应该从父元素继承 float 属性的值。                |\n\n\n\n- 当一个元素添加float属性为left或者right时，它将变为block类型。\n- 浮动元素脱离正常文档流，若其height大于父元素的height或者父元素的height未定义，会造成父元素高度塌陷。可以为父元素添加`overflow: hidden`来解决。\n- 若父元素和子元素都是浮动元素，则父元素会自适应地包含子元素。\n\n- 若兄弟元素不是浮动元素，由于浮动元素脱离文档流，可能会出现覆盖等情况。\n\n## 清除浮动\n\n- `clear: both`，用于浮动元素后边的元素，表示两边不允许出现浮动元素。\n- `overflow: hidden`，用于浮动元素的父元素，但会隐藏超出父元素的内容部分。\n- 实际开发中，更经常使用`:after`伪元素结合`clear: both`来实现。\n- 为了兼容ie，为父元素添加`zoom: 1`来消除浮动。\n\n# 定位布局\n\n## [属性值](http://www.runoob.com/cssref/pr-class-position.html)\n\n| 值                                                           | 描述                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [static](http://www.runoob.com/css/css-positioning.html#position-static) | <u>默认值</u>。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。 |\n| [absolute](http://www.runoob.com/css/css-positioning.html#position-absolute) | 生成绝对定位的元素，相对于 <u>static 定位以外的第一个父元素</u>进行定位。元素的位置通过 \"left\", \"top\", \"right\" 以及 \"bottom\" 属性进行规定。 |\n| [fixed](http://www.runoob.com/css/css-positioning.html#position-fixed) | 生成固定定位的元素，相对于<u>浏览器窗口</u>进行定位。元素的位置通过 \"left\", \"top\", \"right\" 以及 \"bottom\" 属性进行规定。 |\n| [relative](http://www.runoob.com/css/css-positioning.html#position-relative) | 生成相对定位的元素，相对于<u>其正常位置</u>进行定位。因此，\"left:20\" 会向元素的 LEFT 位置添加 20 像素。 |\n| [sticky](http://www.runoob.com/css/css-positioning.html#position-sticky) | 粘性定位，该定位基于用户滚动的位置。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。**注意:** Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。 |\n| inherit                                                      | 规定应该从父元素继承 position 属性的值。                     |\n| initial                                                      | 设置该属性为默认值，详情查看 [CSS initial 关键字](http://www.runoob.com/cssref/css-inherit.html)。 |\n\n- absolute会将元素转换为块元素。\n- 若想要子元素相对于父元素定位，一般给父元素添加`position: relative`，给子元素定义`position: absolute`来实现。祖先元素同理。\n\n## z-index属性\n\n默认情况下设置z-index无效，只有当元素定义position为relative、absolute、fixed时才会激活，z-index值越大，其堆叠顺序越高，越靠上（z方向上的靠上）。\n\n# CSS图形\n\n由于图片大小比较大，数据传输量大且一张图片会引发一次HTTP请求，因此对徐图形效果，一般更倾向于用CSS实现。\n\n这里有一篇[CSS制作图形速查表](https://www.w3cplus.com/css/css-simple-shapes-cheat-sheet)总结得比较全面，可以参考。\n\n另外对于带有边框的图形，一般是用大小不同的两个相同图形实现，小的覆盖在大的上边。\n\n# 性能优化\n\n## 属性缩写\n\n- border：`border: 1px solid red`\n  - 若不想要底边框，可以加上`border-bottom: 0`\n  - 若只想要底边框，可以`border-bottom: 1px solid red`\n\n- padding： \n  - `padding: 10px`指上右下左均为10px\n  - `padding: 10px 20px`指上下为10px，左右为20px\n  - `padding: 10px 20px 30px 40px`的顺序为上右下左，从上开始按照顺时针顺序\n\n- margin： 类似于padding\n- background： `background: url('xxx.jpg') no-repeat 80px 40px`,最后为background-position\n- font： `font: \"微软雅黑\" 12px/1.5em bold`\n  - 顺序为`font-family`、`font-size`、`line-height`、`font-weight`\n  - 简写形式必须指定`font-family`和`font-size`的值，其他属性没有指定则为默认值\n  - 简写形式中`font-size`和`line-height`之间需要加入一个斜杠`/`\n\n- color： 十六进制的颜色值若每两位值相同，可以缩写一半，比如`color: #112233`可以缩写为`color: #123`\n\n##　语法压缩\n\n- 当一个CSS规则只有一两个属性的时候，使用横向书写\n- 可以省略最后一个属性的分号\n- background-image、cursor等属性url()中的路径不用加引号\n- 如果某一个属性值为0，则不需要加单位\n- 如果某一个属性值是以0为开头的小数，可以吧0省略\n- 使用群组选择器合并相同样式\n- 若同一个父元素的多个子元素都定义了相同的可继承属性，把这些属性定义在父元素中来精简代码\n\n## CSS压缩\n\n书中推荐了两个在线的压缩工具：[CSS Compressor](https://csscompressor.com) 和 [YUI Compressor](http://tool.oschina.net/jscompress)\n\n以YUI Compressor为例，它会对CSS文件执行如下操作：\n\n- 删除所有注释\n- 删除无用空白符\n- 删除结尾分号\n- 删除属性值为0的单位\n- 删除以0开头的小数前的0\n- 合并相似属性（属性缩写）\n- 将RGB颜色转换为十六进制颜色\n\n## 图片压缩\n\n书中推荐的图片压缩工具：\n\n在线的[JPEGmini](https://www.jpegmini.com)和[TinyPNG](https://tinypng.com)以及本地的[ImageOptim](https://imageoptim.com/versions.html)\n\n## 高性能的选择器\n\n浏览器对选择器规则是从右到左进行解析的。\n\nCSS选择的匹配效率：\n\n1. id选择器\n2. class选择器\n3. 元素选择器\n4. 相邻选择器\n5. 子选择器\n6. 后代选择器\n7. 通配符选择器\n8. 属性选择器\n9. 伪类选择器\n\n因此在使用选择器时应注意：\n\n- 尽量不要使用通配符\n- 不要在id选择器和class选择器前添加元素名\n- 选择器最好不要超过三层，靠右的选择条件应尽可能精确\n- 避免使用后代选择器，尽量少使用子选择器\n\n# CSS技巧\n\n## 水平居中\n\n- 文字、inline元素和inline-*元素： `text-align: center`\n- 块元素： `margin: 0 auto`\n\n## 垂直居中\n\n- 行内块元素使用`vertical-align: middle`\n- 块元素将display改为table-cell然后使用vertical-align\n- 多行文字使用一个标签将文字包起来并设为table-cell，然后再设置vertical-align\n- 单行文字设置line-height和height属性值相同来实现\n\n## CSS Sprite\n\n又称为CSS精灵或CSS**雪碧图**，它将零散的小背景图合并成一张大背景图，然后再利用background-position属性进行定位从而现实小背景图。\n\n使用CSS Sprite技术时，需要注意：\n\n- 在开发后期而不是开发前期使用此技术\n- 有条理地组织图片顺序，应将小背景图按照类别、风格、大小等分门别类地放好\n- 控制雪碧图的大小，当图片大小小于200KB时传输时间是差不多的，因此雪碧图应控制在200KB以内\n\n书中推荐了两个CSS Sprite工具：[CSS Sprite Generator](http://css.spritegen.com/) 和 [Sprite Cow](http://www.spritecow.com/)\n\n## Icon Font图标\n\n使用字体文件实现小图标效果，从而减少图片的使用。\n\n推荐的Icon Font网站：http://www.iconfont.cn/\n\n网站上就有[使用教程](http://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d0091c141&helptype=code)\n\n# 重要概念\n\n## 包含块\n\ncontaining block，决定一个元素大小和定位的元素。\n\n时视觉格式化模型中的一个重要概念，与CSS盒子模型类似。其作用主要是为其内部的后代元素提供一个参考。\n\n- 根元素（HTML元素）没有父元素，它存在的包含块被称为初始包含块\n- 定位为fixed的元素的包含块为浏览器窗口\n- 定位为是static和relative的元素的包含块是它最近的块级（block、inline-block或table-cell）祖先元素创建的\n- 定位为absolute的元素的包含块是它最近的定位不是static的祖先元素，可以是块元素也可以是行内元素\n\n## 层叠上下文\n\n![层叠级别图](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1537245373&di=c7455fbd6881b1a07ae8ac81a79f474e&imgtype=jpg&er=1&src=http%3A%2F%2Fwww.w3cplus.com%2Fsites%2Fdefault%2Ffiles%2Fblogs%2F2018%2F1808%2Fz-index-15.png)\n\n一个元素在z轴上的堆叠顺序：\n\n- 层叠级别越大越靠上\n- 同等层叠级别，后边的堆叠在前边的上边（后来者居上）\n- 不同的层叠上下文比较的是父级层叠上下文，与自身无关\n\n## BFC和IFC\n\nBFC： block formatting context， 块级格式上下文\n\nIFC： inline formatting context， 行级格式上下文\n\n若一个元素具备以下任何一个条件，则会创造创造一个新的BFC：\n\n- 根元素\n- float属性不是none\n- position属性是absolute或fixed\n- overflow属性值不是visible\n- display属性为inline-block、table-caption、table-cell\n\nW3C描述BFC的特点为：\n\n- 在一个BFC中，盒子从顶端开始垂直一个接着一个地排列。两个相邻盒子之间的垂直间距有margin决定。**同一个BFC中**，两个相邻块盒子之间**垂直方向上的外边距**会叠加。\n- 在一个BFC中，每一个盒子的左外边界（margin-left）会紧贴着容器的border-left，右边同理，即使存在浮动元素也是如此。\n\n可以得到结论：\n\n1. 在一个BFC内部，盒子会在垂直方向上一个接着一个地排列\n2. 在一个BFC内部，相邻的margin-top、margin-bottom会叠加\n3. 在一个BFC内部，每一个盒子的左外边界（margin-left）会紧贴着容器（包含盒子）的border-left，即使存在浮动元素也是如此\n4. 在一个BFC内部，如果存在内部元素是一个新的BFC，并且存在内部元素是浮动元素，则这个新的BFC的区域不会与浮动元素的区域重叠\n5. BFC就是页面上一个隔离的盒子，该盒子内部的子元素不会影响到外边的元素\n6. 计算一个BFC的高度时，其内部浮动元素的高度也会计算其中\n\nBFC的用途：\n\n- 创建BFC来避免垂直外边距叠加（例如使用div将一个盒子包起来并给这个div添加overflow属性）\n- 创建BFC来清除浮动（为父元素添加`overflow: hidden`，利用结论第六条）\n- 创建BFC来实现[自适应布局](https://blog.csdn.net/michael8512/article/details/76473835)\n\n\n\n---\n\n好了到这里，这本书就看完了，一些细节的东西了解到了很多，下面开始看html5+css3。\n\n\\- 2018 - 09 - 11 -","slug":"HTML与CSS学习记录","published":1,"updated":"2018-09-11T05:22:03.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtyp00057bag99map85p","content":"<p>《HTML与CSS进阶教程读书笔记》</p>\n<hr>\n<h1 id=\"HTML基础知识\"><a href=\"#HTML基础知识\" class=\"headerlink\" title=\"HTML基础知识\"></a>HTML基础知识</h1><h2 id=\"HTML与XHTML\"><a href=\"#HTML与XHTML\" class=\"headerlink\" title=\"HTML与XHTML\"></a>HTML与XHTML</h2><p>HTML指超文本标记语言，是构成网页文档的主要语言。我们常说的HTML指HTML4.01。</p>\n<p>XHTML指扩展的超文本标记语言，是XML风格的、更严格、更纯净的HTML。</p>\n<p>两者的主要区别：</p>\n<ul>\n<li>XHTML标签必须闭合。</li>\n<li>XHTML标签和属性必须小写。</li>\n<li>XHTML标签属性必须加引号。</li>\n<li>XHTML标签用id属性代替name属性。</li>\n</ul>\n<h2 id=\"id和class\"><a href=\"#id和class\" class=\"headerlink\" title=\"id和class\"></a>id和class</h2><p>由于id属性具有唯一性，因此W3C建议，对于页面关键的结构或大结构，才能使用id属性，其他地方使用class属性。</p>\n<p><u>因为搜索引擎是根据标签的语义和id属性来识别的，因此id属性的使用和命名都需要谨慎。</u></p>\n<p>一般来说，定义多个class的目的在于：一个class抽取公共样式，一个class定义单独样式。</p>\n<h2 id=\"标题栏小图标\"><a href=\"#标题栏小图标\" class=\"headerlink\" title=\"标题栏小图标\"></a>标题栏小图标</h2><p>在<code>head</code>标签内加入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"图标路径.ico\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中<code>rel</code>和<code>type</code>是固定属性不用更改，只需要修改图片路径即可。</p>\n<h1 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h1><p>HTML的精髓在于标签的语义。搜索引擎根据HTML代码识别页面结构。</p>\n<p>编写语意结构良好的页面的好处：</p>\n<ul>\n<li>利于开发调试和后期维护。</li>\n<li>利于搜索引擎优化。</li>\n</ul>\n<p>应优先使用正确的语义化标签，如果没有语义化标签可用，再考虑div或者span等无语义标签。</p>\n<h2 id=\"标题语义化\"><a href=\"#标题语义化\" class=\"headerlink\" title=\"标题语义化\"></a>标题语义化</h2><p>h1-h6是标题标签，相比于其他标签，它们在搜索引擎优化（SEO）中占有相当重要的地位。</p>\n<p>一般用到h4，h5和h6权重和普通标签差不多，很少使用。</p>\n<p>对于标题语义化，我们需要注意的是：</p>\n<ul>\n<li>一个页面只能有一个h1标签。</li>\n<li>h1-h6之间不要出现断层。</li>\n<li>不要用标题标签来定义样式（如为了加粗字体而为文本加上标题标签）。</li>\n<li>不要用div来代替标题标签。</li>\n</ul>\n<p>div是无语义的标签，如果使用div代替标题标签会使网页在SEO中丢失大量权重。</p>\n<h2 id=\"图片语义化\"><a href=\"#图片语义化\" class=\"headerlink\" title=\"图片语义化\"></a>图片语义化</h2><h3 id=\"alt属性和title属性\"><a href=\"#alt属性和title属性\" class=\"headerlink\" title=\"alt属性和title属性\"></a>alt属性和title属性</h3><p>alt是给搜索引擎看的，title是给用户看的。</p>\n<p>搜索引擎根据alt属性或上下文判断图片内容。</p>\n<p>因此<strong>img标签必须添加alt属性。</strong></p>\n<h3 id=\"figure元素和figcaption元素\"><a href=\"#figure元素和figcaption元素\" class=\"headerlink\" title=\"figure元素和figcaption元素\"></a>figure元素和figcaption元素</h3><p>对于图片+图注的效果，使用figure和figcaption来增强图片语义化。</p>\n<p>例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"xxx\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">figcaption</span>&gt;</span>这是一个图注<span class=\"tag\">&lt;/<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更详细的介绍可以看<a href=\"https://www.w3cplus.com/html5/quick-tip-the-right-way-to-use-figure-and-figcaption-elements.html\" target=\"_blank\" rel=\"noopener\">这一篇博客</a>。</p>\n<h2 id=\"表格语义化\"><a href=\"#表格语义化\" class=\"headerlink\" title=\"表格语义化\"></a>表格语义化</h2><table>\n<thead>\n<tr>\n<th>标签</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>table</td>\n<td>表格</td>\n</tr>\n<tr>\n<td>caption</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>thead</td>\n<td>表头（语义划分）</td>\n</tr>\n<tr>\n<td>tbody</td>\n<td>表身（语义划分）</td>\n</tr>\n<tr>\n<td>tfoot</td>\n<td>表尾（语义划分）</td>\n</tr>\n<tr>\n<td>tr</td>\n<td>行</td>\n</tr>\n<tr>\n<td>th</td>\n<td>表头单元格</td>\n</tr>\n<tr>\n<td>td</td>\n<td>表格单元格</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"表单语义化\"><a href=\"#表单语义化\" class=\"headerlink\" title=\"表单语义化\"></a>表单语义化</h2><h3 id=\"label标签\"><a href=\"#label标签\" class=\"headerlink\" title=\"label标签\"></a>label标签</h3><p>label标签的for属性有两个作用：</p>\n<ul>\n<li>语义上绑定了label元素和表单元素。（\\<label for=\"*element_id*\">）</label></li>\n<li>当我们点击label中的文本时，其关联的表单元素也会获得焦点。</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"rdo\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rdo\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"rdo\"</span>&gt;</span>单选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"fieldset标签和legend标签\"><a href=\"#fieldset标签和legend标签\" class=\"headerlink\" title=\"fieldset标签和legend标签\"></a>fieldset标签和legend标签</h3><p>fieldset标签用于给表单元素进行分组并绘制一个边框，legend标签用于定义某一组表单的标题。</p>\n<p>例如这个<a href=\"http://www.runoob.com/tags/tag-fieldset.html\" target=\"_blank\" rel=\"noopener\">例子</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Personalia:<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">    Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Email: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Date of birth: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<ul>\n<li>增强表单语义。</li>\n<li>可以使用fieldset标签的disabled属性来禁用整个组中的表单元素。</li>\n</ul>\n<h2 id=\"其他语义化\"><a href=\"#其他语义化\" class=\"headerlink\" title=\"其他语义化\"></a>其他语义化</h2><h3 id=\"换行符\"><a href=\"#换行符\" class=\"headerlink\" title=\"换行符\\\"></a>换行符\\<br></h3><p>W3C标准规定，\\<br>标签只能用于段落中的换行。即只能用于p标签内部。</p>\n<h3 id=\"无序列表ul\"><a href=\"#无序列表ul\" class=\"headerlink\" title=\"无序列表ul\"></a>无序列表ul</h3><p>对于列表型数据，不建议使用div实现，而应用无序列表或有序列表实现。</p>\n<p>为了实现外观效果，一般使用无序列表而不是有序列表。</p>\n<h3 id=\"strong-标签和em标签\"><a href=\"#strong-标签和em标签\" class=\"headerlink\" title=\"strong 标签和em标签\"></a>strong 标签和em标签</h3><p>W3C对这两个标签赋予了“强调”的语义。</p>\n<p>可以在CSS中重新定义它们的样式而不会改变它们的语义。</p>\n<h3 id=\"del标签和ins标签\"><a href=\"#del标签和ins标签\" class=\"headerlink\" title=\"del标签和ins标签\"></a>del标签和ins标签</h3><p>这两个标签一般是配合使用表示更新文本：“delete”和“insert”，被删除的文本和被更新的文本。</p>\n<p>一般会用CSS重新定义它们的样式。</p>\n<p><a href=\"http://www.runoob.com/tags/tag-del.html\" target=\"_blank\" rel=\"noopener\">实例链接</a></p>\n<h3 id=\"img标签\"><a href=\"#img标签\" class=\"headerlink\" title=\"img标签\"></a>img标签</h3><p>对于什么时候使用img标签，什么时候使用背景图片，应该根据HTML的语义来判断。</p>\n<ul>\n<li><p>img标签：作为HTML的一部分，希望被搜索引擎识别。</p>\n</li>\n<li><p>背景图片： 只起到修饰作用，不希望被搜索引擎识别。</p>\n</li>\n</ul>\n<h2 id=\"语义化验证\"><a href=\"#语义化验证\" class=\"headerlink\" title=\"语义化验证\"></a>语义化验证</h2><p>通过去掉CSS样式，观察页面是否还有很好的可读性来判断一个页面是否语义良好。</p>\n<h2 id=\"HTML5舍弃的标签\"><a href=\"#HTML5舍弃的标签\" class=\"headerlink\" title=\"HTML5舍弃的标签\"></a>HTML5舍弃的标签</h2><p>下边这些已经被舍弃的标签(仅为了定义样式的标签和很少使用或已经被新标签代替的标签)应停止使用：</p>\n<ul>\n<li>\\<acronym>  定义首字母缩写，应用abbr代替。</acronym></li>\n<li>\\<applet> 定义嵌入的applet，应用object代替。</applet></li>\n<li>\\<basefont></li>\n<li>\\<big></big></li>\n<li>\\<center></center></li>\n<li>\\<dir> 定义目录列表，应用ul代替。</dir></li>\n<li>\\<font></font></li>\n<li>\\<frame></li>\n<li>\\<frameset></frameset></li>\n<li>\\<noframes></noframes></li>\n<li>\\<strike></strike></li>\n<li>\\<tt></tt></li>\n</ul>\n<h1 id=\"CSS基础知识\"><a href=\"#CSS基础知识\" class=\"headerlink\" title=\"CSS基础知识\"></a>CSS基础知识</h1><h2 id=\"CSS单位\"><a href=\"#CSS单位\" class=\"headerlink\" title=\"CSS单位\"></a>CSS单位</h2><h3 id=\"px\"><a href=\"#px\" class=\"headerlink\" title=\"px\"></a>px</h3><p>pixel，像素，一个图片或计算机屏幕中最小的点。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"%\"></a>%</h3><p>CSS中支持百分比的属性：</p>\n<ul>\n<li><strong>width、height、font-size</strong>，它们的百分比是相对于父元素的“相同元素”的值来计算的。</li>\n<li><strong>line-height</strong>，它的百分比是相对于<strong>父元素</strong>的<strong>font-size</strong>值来计算的。</li>\n<li><strong>vertical-align</strong>，它的百分比是相对于<strong>当前元素</strong>继承的<strong>line-height</strong>值来计算的。</li>\n</ul>\n<h3 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h3><p>1em等于当前元素的以px为单位的font-size值，</p>\n<p>若当前元素的font-size值没有定义，则从父元素继承，</p>\n<p>若当前元素的所有祖先元素都没有定义font-size，则继承浏览器默认的font-size值：16px。</p>\n<p><u>使用em的小技巧：</u>首行缩进使用 <code>text-indent: 2em</code>实现。</p>\n<h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>CSS3新引入的单位，指相对根元素（即html元素）的字体大小。</p>\n<h2 id=\"CSS特性\"><a href=\"#CSS特性\" class=\"headerlink\" title=\"CSS特性\"></a>CSS特性</h2><h3 id=\"继承性\"><a href=\"#继承性\" class=\"headerlink\" title=\"继承性\"></a>继承性</h3><p>指子元素继承了父元素的某些样式属性。</p>\n<p>在CSS中，具有继承性的样式有三大类：</p>\n<ul>\n<li><strong>文本</strong>相关属性： font–family，font-size，font-style，font-weight，font，line-height，text-align，text-indent，word-spacing。</li>\n<li><strong>列表</strong>相关属性： list-style-image，list-style-position，list-style-type，list-style。</li>\n<li><strong>颜色</strong>相关属性： color。</li>\n</ul>\n<h3 id=\"层叠性\"><a href=\"#层叠性\" class=\"headerlink\" title=\"层叠性\"></a>层叠性</h3><p>“后者居上”原则。</p>\n<p>CSS的层叠性指样式的覆盖。对于具有<strong>相同权重</strong>的<strong>相同属性</strong>，以最后定义的值为准。</p>\n<h2 id=\"CSS优先级\"><a href=\"#CSS优先级\" class=\"headerlink\" title=\"CSS优先级\"></a>CSS优先级</h2><h3 id=\"引用方式\"><a href=\"#引用方式\" class=\"headerlink\" title=\"引用方式\"></a>引用方式</h3><p>行内样式&gt;(内部样式=外部样式)</p>\n<p>若同时存在权重相同内部样式和外部样式，则以最后引入的样式为准。</p>\n<h3 id=\"继承方式\"><a href=\"#继承方式\" class=\"headerlink\" title=\"继承方式\"></a>继承方式</h3><p>以最近的祖先元素为准。</p>\n<h3 id=\"指定样式\"><a href=\"#指定样式\" class=\"headerlink\" title=\"指定样式\"></a>指定样式</h3><p>常见的伪元素——:before、:after、:first-letter、:first-line。</p>\n<p>常见的伪类——:hover、:first-child等。</p>\n<p>常用的选择器优先级：行内样式&gt;id选择器&gt;class选择器&gt;元素选择器。</p>\n<p>选择器权值表：</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>权值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>通配符</td>\n<td>0</td>\n</tr>\n<tr>\n<td>伪元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>元素选择器</td>\n<td>1</td>\n</tr>\n<tr>\n<td>class选择器</td>\n<td>10</td>\n</tr>\n<tr>\n<td>伪类</td>\n<td>10</td>\n</tr>\n<tr>\n<td>属性选择器</td>\n<td>10</td>\n</tr>\n<tr>\n<td>id选择器</td>\n<td>100</td>\n</tr>\n<tr>\n<td>行内样式</td>\n<td>1000</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"继承样式和和指定样式\"><a href=\"#继承样式和和指定样式\" class=\"headerlink\" title=\"继承样式和和指定样式\"></a>继承样式和和指定样式</h3><p>指定样式权重更高。</p>\n<h3 id=\"important\"><a href=\"#important\" class=\"headerlink\" title=\"!important\"></a>!important</h3><p>权值最高，不推荐使用。</p>\n<h2 id=\"CSS引入方式\"><a href=\"#CSS引入方式\" class=\"headerlink\" title=\"CSS引入方式\"></a>CSS引入方式</h2><ul>\n<li>导入样式表（加载html后加载css，不推荐）</li>\n<li>外部样式表（link标签）</li>\n<li>内部样式表（style标签）</li>\n<li>行内样式表</li>\n</ul>\n<h2 id=\"CSS选择器\"><a href=\"#CSS选择器\" class=\"headerlink\" title=\"CSS选择器\"></a>CSS选择器</h2><p>CSS出去基本的选择器（元素选择器、id选择器、class选择器、群组或分组选择器），</p>\n<p>还有<u>层次选择器</u>：</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M N</td>\n<td>后代选择器，选择M元素所有内部后代N元素</td>\n</tr>\n<tr>\n<td>M&gt;N</td>\n<td>子代选择器，选择M元素所有内部子代N元素</td>\n</tr>\n<tr>\n<td>M~N</td>\n<td>兄弟选择器，选择M元素所有同级N元素</td>\n</tr>\n<tr>\n<td>M+N</td>\n<td>相邻选择器，选择M元素相邻的下一个同级元素</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"CSS规范\"><a href=\"#CSS规范\" class=\"headerlink\" title=\"CSS规范\"></a>CSS规范</h1><h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><h3 id=\"CSS文件命名\"><a href=\"#CSS文件命名\" class=\"headerlink\" title=\"CSS文件命名\"></a>CSS文件命名</h3><p>开发阶段按照功能模块划分CSS文件。</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reset.css</td>\n<td>重置样式，重置元素默认样式</td>\n</tr>\n<tr>\n<td>global.css</td>\n<td>全局样式，全站公用，定义页面基础样式</td>\n</tr>\n<tr>\n<td>themes.css</td>\n<td>主题样式，用于实现换肤功能</td>\n</tr>\n<tr>\n<td>module.css</td>\n<td>模块样式，用于模块的样式</td>\n</tr>\n<tr>\n<td>master.css</td>\n<td>母版样式，用于母版页的样式</td>\n</tr>\n<tr>\n<td>columes.css</td>\n<td>专栏样式，用于专栏的样式</td>\n</tr>\n<tr>\n<td>forms.css</td>\n<td>表单样式，用于表单的样式</td>\n</tr>\n<tr>\n<td>mend.css</td>\n<td>补丁样式，用于维护、修改的样式</td>\n</tr>\n<tr>\n<td>print.css</td>\n<td>打印样式，用于打印的样式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"id和class命名\"><a href=\"#id和class命名\" class=\"headerlink\" title=\"id和class命名\"></a>id和class命名</h3><p>建议使用中划线命名，例如<code>column-title</code>。</p>\n<p>为了避免class命名的重复，一般取父元素的class名作为前缀，例如<code>column-title</code>。</p>\n<table>\n<thead>\n<tr>\n<th>网页主体部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最外层</td>\n<td>wrapper(一般用于包裹整个页面)</td>\n</tr>\n<tr>\n<td>头部</td>\n<td>header</td>\n</tr>\n<tr>\n<td>内容</td>\n<td>content</td>\n</tr>\n<tr>\n<td>侧栏</td>\n<td>sidebar</td>\n</tr>\n<tr>\n<td>栏目</td>\n<td>column</td>\n</tr>\n<tr>\n<td>热点</td>\n<td>hot</td>\n</tr>\n<tr>\n<td>新闻</td>\n<td>news</td>\n</tr>\n<tr>\n<td>下载</td>\n<td>download</td>\n</tr>\n<tr>\n<td>标志</td>\n<td>logo</td>\n</tr>\n<tr>\n<td>导航条</td>\n<td>nav</td>\n</tr>\n<tr>\n<td>主体</td>\n<td>main</td>\n</tr>\n<tr>\n<td>左侧</td>\n<td>main-left</td>\n</tr>\n<tr>\n<td>右侧</td>\n<td>main-right</td>\n</tr>\n<tr>\n<td>底部</td>\n<td>footer</td>\n</tr>\n<tr>\n<td>友情链接</td>\n<td>friendlink</td>\n</tr>\n<tr>\n<td>加入我们</td>\n<td>joinus</td>\n</tr>\n<tr>\n<td>版权</td>\n<td>copyright</td>\n</tr>\n<tr>\n<td>服务</td>\n<td>service</td>\n</tr>\n<tr>\n<td>登录</td>\n<td>login</td>\n</tr>\n<tr>\n<td>注册</td>\n<td>register</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>导航部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主导航</td>\n<td>main-nav</td>\n</tr>\n<tr>\n<td>子导航</td>\n<td>sub-nav</td>\n</tr>\n<tr>\n<td>边导航</td>\n<td>side-nav</td>\n</tr>\n<tr>\n<td>左导航</td>\n<td>leftside-nav</td>\n</tr>\n<tr>\n<td>右导航</td>\n<td>rightside-nav</td>\n</tr>\n<tr>\n<td>顶导航</td>\n<td>top-nav</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>菜单部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>菜单</td>\n<td>menu</td>\n</tr>\n<tr>\n<td>子菜单</td>\n<td>submenu</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>其他</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>标题</td>\n<td>title</td>\n</tr>\n<tr>\n<td>摘要</td>\n<td>summary</td>\n</tr>\n<tr>\n<td>登录条</td>\n<td>loginbar</td>\n</tr>\n<tr>\n<td>搜索</td>\n<td>search</td>\n</tr>\n<tr>\n<td>标签页</td>\n<td>tab</td>\n</tr>\n<tr>\n<td>广告</td>\n<td>banner</td>\n</tr>\n<tr>\n<td>小技巧</td>\n<td>tips</td>\n</tr>\n<tr>\n<td>图标</td>\n<td>icon</td>\n</tr>\n<tr>\n<td>法律声明</td>\n<td>siteinfolegal</td>\n</tr>\n<tr>\n<td>网站地图</td>\n<td>sitemap</td>\n</tr>\n<tr>\n<td>工具条</td>\n<td>tool、toolbar</td>\n</tr>\n<tr>\n<td>首页</td>\n<td>homepage</td>\n</tr>\n<tr>\n<td>子页</td>\n<td>subpage</td>\n</tr>\n<tr>\n<td>合作伙伴</td>\n<td>partner</td>\n</tr>\n<tr>\n<td>帮助</td>\n<td>help</td>\n</tr>\n<tr>\n<td>指南</td>\n<td>guide</td>\n</tr>\n<tr>\n<td>滚动</td>\n<td>scroll</td>\n</tr>\n<tr>\n<td>提示信息</td>\n<td>msg</td>\n</tr>\n<tr>\n<td>投票</td>\n<td>vote</td>\n</tr>\n<tr>\n<td>相关文章</td>\n<td>related</td>\n</tr>\n<tr>\n<td>文章列表</td>\n<td>list</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"书写规范\"><a href=\"#书写规范\" class=\"headerlink\" title=\"书写规范\"></a>书写规范</h2><p>对于功能代码，应该集中放在一起，</p>\n<p>对于其他代码，应按照如下顺序：</p>\n<ol>\n<li>影响文档流属性（布局属性）——display，position，float，clear等</li>\n<li>自身盒模型属性——width，height，padding，margin，border，overflow等</li>\n<li>文本性属性——font，line-height，text-align，text-indent，vertical-align等</li>\n<li>装饰性属性——color，background-color，opacity等</li>\n<li>其他属性——cursor，content，list-style，quotes等</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 影响文档流属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 盒子模型属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid gray;</span><br><span class=\"line\">  <span class=\"comment\">/* 文本性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 装饰性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"comment\">/* 其他属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"注释规范\"><a href=\"#注释规范\" class=\"headerlink\" title=\"注释规范\"></a>注释规范</h2><p>由于压缩工具会删除所有的注释，因此有时为了保留版权声明等注释信息，需要在注释内容前加一个叹号，如<code>/*! 注释内容 */</code>，这样压缩工具就不会删除这条注释信息。</p>\n<h3 id=\"顶部注释\"><a href=\"#顶部注释\" class=\"headerlink\" title=\"顶部注释\"></a>顶部注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *@description:说明</span></span><br><span class=\"line\"><span class=\"comment\"> *@author:作者</span></span><br><span class=\"line\"><span class=\"comment\"> *@update:更新时间，如2018-09-10 17:42</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模块注释\"><a href=\"#模块注释\" class=\"headerlink\" title=\"模块注释\"></a>模块注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 导航部分，开始 */</span></span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"comment\">/* 导航部分，结束 */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"简单注释\"><a href=\"#简单注释\" class=\"headerlink\" title=\"简单注释\"></a>简单注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 单行注释 */</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> *多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> *多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-reset\"><a href=\"#CSS-reset\" class=\"headerlink\" title=\"CSS reset\"></a>CSS reset</h2><p>重置样式，去除元素在浏览器中的默认样式。</p>\n<p>是否使用CSS reset根据实际开发需求而定。</p>\n<h1 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h1><p><img src=\"https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=5ad0ba6a0c7b02080c9c37e752e9deeb/0824ab18972bd407012c41327d899e510eb30911.jpg\" alt=\"标准盒子模型\"></p>\n<p><img src=\"https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=6cdf3ae9fbfaaf5184b689b9bc64b8d6/1b4c510fd9f9d72ac29d82d2d22a2834359bbb00.jpg\" alt=\"IE盒子模型\"></p>\n<h2 id=\"外边距叠加\"><a href=\"#外边距叠加\" class=\"headerlink\" title=\"外边距叠加\"></a>外边距叠加</h2><p>又称为“margin叠加”，指当两个外边距相遇时会“合二为一”。叠加后的外边距为两个外边距的最大值。</p>\n<p><u>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</u></p>\n<p>以下图片均来自<a href=\"http://www.w3school.com.cn/css/css_margin_collapsing.asp\" target=\"_blank\" rel=\"noopener\">w3school</a></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_1.gif\" alt=\"同级元素\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_2.gif\" alt=\"父子元素\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_3.gif\" alt=\"空元素1\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_4.gif\" alt=\"空元素2\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing.gif\" alt=\"外边距合并的意义\"></p>\n<h2 id=\"负margin\"><a href=\"#负margin\" class=\"headerlink\" title=\"负margin\"></a>负margin</h2><ul>\n<li>当margin-top或者margin-left为负数时，<strong>当前元素</strong>会被拉向指定方向。</li>\n<li>当margin-bottom或者margin-right为负数时，<strong>后续元素</strong>会被拉向指定方向。</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/549aaa5fabaa\" target=\"_blank\" rel=\"noopener\">这里有一篇文章</a>讲得不错，可以参考一下。</p>\n<p><a href=\"https://www.cnblogs.com/star91/p/5773436.html\" target=\"_blank\" rel=\"noopener\">圣杯布局、双飞翼布局</a>就是利用这个实现的。</p>\n<h2 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow\"></a>overflow</h2><p>当浮动引起父元素高度塌陷时，可以为父元素加上<code>overflow: hidden</code>来清除浮动。</p>\n<h1 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h1><table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline</td>\n<td>行内元素</td>\n</tr>\n<tr>\n<td>block</td>\n<td>块元素</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>行内块元素</td>\n</tr>\n<tr>\n<td>table</td>\n<td>以表格形式显示，类似于table元素</td>\n</tr>\n<tr>\n<td>table-row</td>\n<td>以表格行形式显示，类似于tr元素</td>\n</tr>\n<tr>\n<td>table-cell</td>\n<td>以表格单元格形式显示，类似于td元素</td>\n</tr>\n<tr>\n<td>none</td>\n<td>隐藏元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"块元素\"><a href=\"#块元素\" class=\"headerlink\" title=\"块元素\"></a>块元素</h2><ul>\n<li>独占一行</li>\n<li>内部可以容纳其他块元素或行元素</li>\n<li>可以定义width和height</li>\n<li>可以定义四个方向的margin</li>\n</ul>\n<h2 id=\"inline元素\"><a href=\"#inline元素\" class=\"headerlink\" title=\"inline元素\"></a>inline元素</h2><ul>\n<li>可以与其他行内元素位于同一行</li>\n<li>可以容纳行内元素，但不能容纳块元素</li>\n<li>无法定义width和height</li>\n<li>可以定义margin-left和margin-right，不能定义margin-top和margin-bottom</li>\n</ul>\n<h2 id=\"inline-block元素\"><a href=\"#inline-block元素\" class=\"headerlink\" title=\"inline-block元素\"></a>inline-block元素</h2><ul>\n<li>可以定义width和height</li>\n<li>可以与其他行内元素位于同一行</li>\n</ul>\n<p>常见的inline-block元素：img元素和input元素</p>\n<h2 id=\"display-table-cell\"><a href=\"#display-table-cell\" class=\"headerlink\" title=\"display: table-cell\"></a>display: table-cell</h2><p>可以用于实现：</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/a7ee7dd60166\" target=\"_blank\" rel=\"noopener\">图片垂直居中</a>于元素</li>\n<li>等高布局</li>\n<li>自动平均划分元素，并在同一行显示</li>\n</ul>\n<h2 id=\"去除inline-block元素间距\"><a href=\"#去除inline-block元素间距\" class=\"headerlink\" title=\"去除inline-block元素间距\"></a>去除inline-block元素间距</h2><p>在父元素中添加<code>font-size: 0</code></p>\n<h1 id=\"文本效果\"><a href=\"#文本效果\" class=\"headerlink\" title=\"文本效果\"></a>文本效果</h1><table>\n<thead>\n<tr>\n<th>文本属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text-decoration</td>\n<td>下划线、删除线、顶划线</td>\n</tr>\n<tr>\n<td>text-transform</td>\n<td>文本大小写</td>\n</tr>\n<tr>\n<td>font-variant</td>\n<td>将英文文本转换为小型大写字母</td>\n</tr>\n<tr>\n<td>text-indent</td>\n<td>段落首行缩进</td>\n</tr>\n<tr>\n<td>text-align</td>\n<td>文本水平对齐</td>\n</tr>\n<tr>\n<td>vertical-align</td>\n<td>文本垂直对齐</td>\n</tr>\n<tr>\n<td>line-height</td>\n<td>行高</td>\n</tr>\n<tr>\n<td>letter-spacing</td>\n<td>字距</td>\n</tr>\n<tr>\n<td>word-spacing</td>\n<td>词距</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"text-indent\"><a href=\"#text-indent\" class=\"headerlink\" title=\"text-indent\"></a>text-indent</h2><p>可以使用    <code>text-indent: -9999px;</code>来隐藏文本。</p>\n<h2 id=\"text-align\"><a href=\"#text-align\" class=\"headerlink\" title=\"text-align\"></a>text-align</h2><p>主要使用的值为left、right、center，对文字、inline元素、inline-block元素都起作用，对块元素不起作用。</p>\n<p>利用<code>margin: 0 auto</code>实现块元素的水平居中。</p>\n<p><code>text-align: center</code>在父元素中定义，<code>margin: 0 auto</code>在当前元素中定义。</p>\n<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><p>关于顶线、中线、基线、底线可以自行查阅。</p>\n<p>行高（line-height）指的是两行基线之间的距离。</p>\n<ul>\n<li>将height和line-height设为相同值可以实现文字垂直居中。</li>\n<li>当取值为%或者em时，是相对与父元素的font-size计算的。</li>\n<li>当取值为无单位数字时，是相对于当前元素的font-size计算的。</li>\n</ul>\n<h2 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h2><p>vertical-align对inline、inline-block、table-cell元素有效，对块元素无效。</p>\n<p>用于定义<u>周围的文字、inline元素、inline-block元素</u>相对于该元素<strong>基线</strong>的垂直对齐方式。</p>\n<p>可以取负长度值和百分比值。</p>\n<h3 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h3><ol>\n<li><p>负值 ： <code>vertical-align: -2px</code>指的是该元素相对于基线向下偏移2px；</p>\n</li>\n<li><p>百分比 ： 相对于当前元素继承的line-height值计算的，也是该元素相对于基线偏移的值；</p>\n</li>\n<li><p><a href=\"http://www.runoob.com/cssref/pr-pos-vertical-align.html\" target=\"_blank\" rel=\"noopener\">关键字</a> （前四个比较常用）：</p>\n<p>| 值           | 描述                                           |<br>| ———— | ———————————————- |<br>| <strong>top</strong>      | 把元素的顶端与行中最高元素的顶端对齐           |<br>| <strong>middle</strong>   | 把此元素放置在父元素的中部。                   |<br>| <strong>baseline</strong> | 默认。元素放置在父元素的基线上。               |<br>| <strong>bottom</strong>   | 把元素的底端与行中最低的元素的顶端对齐。       |<br>| text-top     | 把元素的顶端与父元素字体的顶端对齐             |<br>| text-bottom  | 把元素的底端与父元素字体的底端对齐。           |<br>| sub          | 垂直对齐文本的下标。                           |<br>| super        | 垂直对齐文本的上标                             |<br>| inherit      | 规定应该从父元素继承 vertical-align 属性的值。 |</p>\n</li>\n</ol>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>为img添加<code>vertical-align: middle</code>可以实现图片与周围的文字居中对齐</li>\n<li>要使块元素（如div）也可以使用此属性，可以为其先定义<code>display: table-cell</code></li>\n</ul>\n<h1 id=\"表单效果\"><a href=\"#表单效果\" class=\"headerlink\" title=\"表单效果\"></a>表单效果</h1><h2 id=\"radio与checkbox\"><a href=\"#radio与checkbox\" class=\"headerlink\" title=\"radio与checkbox\"></a>radio与checkbox</h2><p>默认情况下由于是基线对齐因此视觉上会感觉单选框或复选框旁边的文字比它们低，这个时候可以使用vertical-align来让他们垂直居中对齐。</p>\n<p>可以使用关键字，也可以使用数值。</p>\n<h2 id=\"textarea\"><a href=\"#textarea\" class=\"headerlink\" title=\"textarea\"></a>textarea</h2><ul>\n<li>可以使用max-width和max-height来限制拖拽大小</li>\n<li>可以使用<code>resize: none</code>来禁止拖拽</li>\n</ul>\n<p>要使textarea在不同浏览器中具有相同的外观，可以：</p>\n<ul>\n<li>使用CSS的width和height定义大小</li>\n<li>使用<code>overflow: auto</code>来定义textarea滚动条自适应</li>\n</ul>\n<h2 id=\"表单对齐\"><a href=\"#表单对齐\" class=\"headerlink\" title=\"表单对齐\"></a>表单对齐</h2><p>书上给了<strong>注册</strong>的例子：</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536639853274&amp;di=16c88d63b9118620ba546c2f6237b78c&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.orsoon.com%2Fuploads%2Fallimg%2F24631428484696.png\" alt=\"图片来源于网络\"></p>\n<p>实现方法：</p>\n<ol>\n<li>每一行表单分为左栏加若干右栏<ol>\n<li>所有行的左栏长度相等</li>\n<li>所有行的右栏所有盒子长度之和相等</li>\n<li>左栏一般为一个label，右栏为若干文本框</li>\n</ol>\n</li>\n<li>所有左栏和右栏盒子都设为左浮动</li>\n<li>左栏添加属性<code>text-align: right</code>使得文字右对齐</li>\n<li>每一行左栏盒子长度加上所有右栏盒子长度之和等于行宽</li>\n<li>每一行由一个p包裹住，并为p添加<code>overflow: hidden</code>来清除浮动</li>\n</ol>\n<p>然后我又去看了一下各网站的<strong>登录</strong>界面，基本上是一个icon+一个input的模式：</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536641005969&amp;di=02e6a2469281303e926eb8878cf64db9&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fexp%2Fw%3D480%2Fsign%3D00237679845494ee87220e111df7e0e1%2Fa686c9177f3e67093ac0b23933c79f3df9dc5530.jpg\" alt=\"图片来源于网络\"></p>\n<p>实现方法：</p>\n<ul>\n<li>icon使用<code>position: absolute</code>脱离文档流并盖在input上</li>\n<li>input将padding-left调到合适大小使得输入框不被icon盖住</li>\n</ul>\n<p>#　浮动布局</p>\n<h2 id=\"文档流\"><a href=\"#文档流\" class=\"headerlink\" title=\"文档流\"></a>文档流</h2><p>简单来说就是元素在页面中出现的先后顺序。</p>\n<ul>\n<li>正常文档流 ： “normal flow”，指默认情况下页面元素的布局情况。</li>\n<li>脱离文档流：脱离正常文档流。要改变正常文档流，使用浮动和定位方法。</li>\n</ul>\n<h2 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h2><p>可以使元素移到左边或者右边，并且允许后边的文字和元素环绕着它。</p>\n<p>浮动后使用margin来定义和其他元素之间的间距。</p>\n<p>绝对定位的元素忽略float属性。</p>\n<p>float的取值表如下，默认为<strong>none</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>left</td>\n<td>元素向左浮动。</td>\n</tr>\n<tr>\n<td>right</td>\n<td>元素向右浮动。</td>\n</tr>\n<tr>\n<td>none</td>\n<td>默认值。元素不浮动，并会显示在其在文本中出现的位置。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 float 属性的值。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>当一个元素添加float属性为left或者right时，它将变为block类型。</li>\n<li>浮动元素脱离正常文档流，若其height大于父元素的height或者父元素的height未定义，会造成父元素高度塌陷。可以为父元素添加<code>overflow: hidden</code>来解决。</li>\n<li><p>若父元素和子元素都是浮动元素，则父元素会自适应地包含子元素。</p>\n</li>\n<li><p>若兄弟元素不是浮动元素，由于浮动元素脱离文档流，可能会出现覆盖等情况。</p>\n</li>\n</ul>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><ul>\n<li><code>clear: both</code>，用于浮动元素后边的元素，表示两边不允许出现浮动元素。</li>\n<li><code>overflow: hidden</code>，用于浮动元素的父元素，但会隐藏超出父元素的内容部分。</li>\n<li>实际开发中，更经常使用<code>:after</code>伪元素结合<code>clear: both</code>来实现。</li>\n<li>为了兼容ie，为父元素添加<code>zoom: 1</code>来消除浮动。</li>\n</ul>\n<h1 id=\"定位布局\"><a href=\"#定位布局\" class=\"headerlink\" title=\"定位布局\"></a>定位布局</h1><h2 id=\"属性值\"><a href=\"#属性值\" class=\"headerlink\" title=\"属性值\"></a><a href=\"http://www.runoob.com/cssref/pr-class-position.html\" target=\"_blank\" rel=\"noopener\">属性值</a></h2><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-static\" target=\"_blank\" rel=\"noopener\">static</a></td>\n<td><u>默认值</u>。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-absolute\" target=\"_blank\" rel=\"noopener\">absolute</a></td>\n<td>生成绝对定位的元素，相对于 <u>static 定位以外的第一个父元素</u>进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-fixed\" target=\"_blank\" rel=\"noopener\">fixed</a></td>\n<td>生成固定定位的元素，相对于<u>浏览器窗口</u>进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-relative\" target=\"_blank\" rel=\"noopener\">relative</a></td>\n<td>生成相对定位的元素，相对于<u>其正常位置</u>进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-sticky\" target=\"_blank\" rel=\"noopener\">sticky</a></td>\n<td>粘性定位，该定位基于用户滚动的位置。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。<strong>注意:</strong> Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 position 属性的值。</td>\n</tr>\n<tr>\n<td>initial</td>\n<td>设置该属性为默认值，详情查看 <a href=\"http://www.runoob.com/cssref/css-inherit.html\" target=\"_blank\" rel=\"noopener\">CSS initial 关键字</a>。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>absolute会将元素转换为块元素。</li>\n<li>若想要子元素相对于父元素定位，一般给父元素添加<code>position: relative</code>，给子元素定义<code>position: absolute</code>来实现。祖先元素同理。</li>\n</ul>\n<h2 id=\"z-index属性\"><a href=\"#z-index属性\" class=\"headerlink\" title=\"z-index属性\"></a>z-index属性</h2><p>默认情况下设置z-index无效，只有当元素定义position为relative、absolute、fixed时才会激活，z-index值越大，其堆叠顺序越高，越靠上（z方向上的靠上）。</p>\n<h1 id=\"CSS图形\"><a href=\"#CSS图形\" class=\"headerlink\" title=\"CSS图形\"></a>CSS图形</h1><p>由于图片大小比较大，数据传输量大且一张图片会引发一次HTTP请求，因此对徐图形效果，一般更倾向于用CSS实现。</p>\n<p>这里有一篇<a href=\"https://www.w3cplus.com/css/css-simple-shapes-cheat-sheet\" target=\"_blank\" rel=\"noopener\">CSS制作图形速查表</a>总结得比较全面，可以参考。</p>\n<p>另外对于带有边框的图形，一般是用大小不同的两个相同图形实现，小的覆盖在大的上边。</p>\n<h1 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h1><h2 id=\"属性缩写\"><a href=\"#属性缩写\" class=\"headerlink\" title=\"属性缩写\"></a>属性缩写</h2><ul>\n<li><p>border：<code>border: 1px solid red</code></p>\n<ul>\n<li>若不想要底边框，可以加上<code>border-bottom: 0</code></li>\n<li>若只想要底边框，可以<code>border-bottom: 1px solid red</code></li>\n</ul>\n</li>\n<li><p>padding： </p>\n<ul>\n<li><code>padding: 10px</code>指上右下左均为10px</li>\n<li><code>padding: 10px 20px</code>指上下为10px，左右为20px</li>\n<li><code>padding: 10px 20px 30px 40px</code>的顺序为上右下左，从上开始按照顺时针顺序</li>\n</ul>\n</li>\n<li><p>margin： 类似于padding</p>\n</li>\n<li>background： <code>background: url(&#39;xxx.jpg&#39;) no-repeat 80px 40px</code>,最后为background-position</li>\n<li><p>font： <code>font: &quot;微软雅黑&quot; 12px/1.5em bold</code></p>\n<ul>\n<li>顺序为<code>font-family</code>、<code>font-size</code>、<code>line-height</code>、<code>font-weight</code></li>\n<li>简写形式必须指定<code>font-family</code>和<code>font-size</code>的值，其他属性没有指定则为默认值</li>\n<li>简写形式中<code>font-size</code>和<code>line-height</code>之间需要加入一个斜杠<code>/</code></li>\n</ul>\n</li>\n<li><p>color： 十六进制的颜色值若每两位值相同，可以缩写一半，比如<code>color: #112233</code>可以缩写为<code>color: #123</code></p>\n</li>\n</ul>\n<p>##　语法压缩</p>\n<ul>\n<li>当一个CSS规则只有一两个属性的时候，使用横向书写</li>\n<li>可以省略最后一个属性的分号</li>\n<li>background-image、cursor等属性url()中的路径不用加引号</li>\n<li>如果某一个属性值为0，则不需要加单位</li>\n<li>如果某一个属性值是以0为开头的小数，可以吧0省略</li>\n<li>使用群组选择器合并相同样式</li>\n<li>若同一个父元素的多个子元素都定义了相同的可继承属性，把这些属性定义在父元素中来精简代码</li>\n</ul>\n<h2 id=\"CSS压缩\"><a href=\"#CSS压缩\" class=\"headerlink\" title=\"CSS压缩\"></a>CSS压缩</h2><p>书中推荐了两个在线的压缩工具：<a href=\"https://csscompressor.com\" target=\"_blank\" rel=\"noopener\">CSS Compressor</a> 和 <a href=\"http://tool.oschina.net/jscompress\" target=\"_blank\" rel=\"noopener\">YUI Compressor</a></p>\n<p>以YUI Compressor为例，它会对CSS文件执行如下操作：</p>\n<ul>\n<li>删除所有注释</li>\n<li>删除无用空白符</li>\n<li>删除结尾分号</li>\n<li>删除属性值为0的单位</li>\n<li>删除以0开头的小数前的0</li>\n<li>合并相似属性（属性缩写）</li>\n<li>将RGB颜色转换为十六进制颜色</li>\n</ul>\n<h2 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h2><p>书中推荐的图片压缩工具：</p>\n<p>在线的<a href=\"https://www.jpegmini.com\" target=\"_blank\" rel=\"noopener\">JPEGmini</a>和<a href=\"https://tinypng.com\" target=\"_blank\" rel=\"noopener\">TinyPNG</a>以及本地的<a href=\"https://imageoptim.com/versions.html\" target=\"_blank\" rel=\"noopener\">ImageOptim</a></p>\n<h2 id=\"高性能的选择器\"><a href=\"#高性能的选择器\" class=\"headerlink\" title=\"高性能的选择器\"></a>高性能的选择器</h2><p>浏览器对选择器规则是从右到左进行解析的。</p>\n<p>CSS选择的匹配效率：</p>\n<ol>\n<li>id选择器</li>\n<li>class选择器</li>\n<li>元素选择器</li>\n<li>相邻选择器</li>\n<li>子选择器</li>\n<li>后代选择器</li>\n<li>通配符选择器</li>\n<li>属性选择器</li>\n<li>伪类选择器</li>\n</ol>\n<p>因此在使用选择器时应注意：</p>\n<ul>\n<li>尽量不要使用通配符</li>\n<li>不要在id选择器和class选择器前添加元素名</li>\n<li>选择器最好不要超过三层，靠右的选择条件应尽可能精确</li>\n<li>避免使用后代选择器，尽量少使用子选择器</li>\n</ul>\n<h1 id=\"CSS技巧\"><a href=\"#CSS技巧\" class=\"headerlink\" title=\"CSS技巧\"></a>CSS技巧</h1><h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><ul>\n<li>文字、inline元素和inline-*元素： <code>text-align: center</code></li>\n<li>块元素： <code>margin: 0 auto</code></li>\n</ul>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2><ul>\n<li>行内块元素使用<code>vertical-align: middle</code></li>\n<li>块元素将display改为table-cell然后使用vertical-align</li>\n<li>多行文字使用一个标签将文字包起来并设为table-cell，然后再设置vertical-align</li>\n<li>单行文字设置line-height和height属性值相同来实现</li>\n</ul>\n<h2 id=\"CSS-Sprite\"><a href=\"#CSS-Sprite\" class=\"headerlink\" title=\"CSS Sprite\"></a>CSS Sprite</h2><p>又称为CSS精灵或CSS<strong>雪碧图</strong>，它将零散的小背景图合并成一张大背景图，然后再利用background-position属性进行定位从而现实小背景图。</p>\n<p>使用CSS Sprite技术时，需要注意：</p>\n<ul>\n<li>在开发后期而不是开发前期使用此技术</li>\n<li>有条理地组织图片顺序，应将小背景图按照类别、风格、大小等分门别类地放好</li>\n<li>控制雪碧图的大小，当图片大小小于200KB时传输时间是差不多的，因此雪碧图应控制在200KB以内</li>\n</ul>\n<p>书中推荐了两个CSS Sprite工具：<a href=\"http://css.spritegen.com/\" target=\"_blank\" rel=\"noopener\">CSS Sprite Generator</a> 和 <a href=\"http://www.spritecow.com/\" target=\"_blank\" rel=\"noopener\">Sprite Cow</a></p>\n<h2 id=\"Icon-Font图标\"><a href=\"#Icon-Font图标\" class=\"headerlink\" title=\"Icon Font图标\"></a>Icon Font图标</h2><p>使用字体文件实现小图标效果，从而减少图片的使用。</p>\n<p>推荐的Icon Font网站：<a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">http://www.iconfont.cn/</a></p>\n<p>网站上就有<a href=\"http://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d0091c141&amp;helptype=code\" target=\"_blank\" rel=\"noopener\">使用教程</a></p>\n<h1 id=\"重要概念\"><a href=\"#重要概念\" class=\"headerlink\" title=\"重要概念\"></a>重要概念</h1><h2 id=\"包含块\"><a href=\"#包含块\" class=\"headerlink\" title=\"包含块\"></a>包含块</h2><p>containing block，决定一个元素大小和定位的元素。</p>\n<p>时视觉格式化模型中的一个重要概念，与CSS盒子模型类似。其作用主要是为其内部的后代元素提供一个参考。</p>\n<ul>\n<li>根元素（HTML元素）没有父元素，它存在的包含块被称为初始包含块</li>\n<li>定位为fixed的元素的包含块为浏览器窗口</li>\n<li>定位为是static和relative的元素的包含块是它最近的块级（block、inline-block或table-cell）祖先元素创建的</li>\n<li>定位为absolute的元素的包含块是它最近的定位不是static的祖先元素，可以是块元素也可以是行内元素</li>\n</ul>\n<h2 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h2><p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1537245373&amp;di=c7455fbd6881b1a07ae8ac81a79f474e&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fwww.w3cplus.com%2Fsites%2Fdefault%2Ffiles%2Fblogs%2F2018%2F1808%2Fz-index-15.png\" alt=\"层叠级别图\"></p>\n<p>一个元素在z轴上的堆叠顺序：</p>\n<ul>\n<li>层叠级别越大越靠上</li>\n<li>同等层叠级别，后边的堆叠在前边的上边（后来者居上）</li>\n<li>不同的层叠上下文比较的是父级层叠上下文，与自身无关</li>\n</ul>\n<h2 id=\"BFC和IFC\"><a href=\"#BFC和IFC\" class=\"headerlink\" title=\"BFC和IFC\"></a>BFC和IFC</h2><p>BFC： block formatting context， 块级格式上下文</p>\n<p>IFC： inline formatting context， 行级格式上下文</p>\n<p>若一个元素具备以下任何一个条件，则会创造创造一个新的BFC：</p>\n<ul>\n<li>根元素</li>\n<li>float属性不是none</li>\n<li>position属性是absolute或fixed</li>\n<li>overflow属性值不是visible</li>\n<li>display属性为inline-block、table-caption、table-cell</li>\n</ul>\n<p>W3C描述BFC的特点为：</p>\n<ul>\n<li>在一个BFC中，盒子从顶端开始垂直一个接着一个地排列。两个相邻盒子之间的垂直间距有margin决定。<strong>同一个BFC中</strong>，两个相邻块盒子之间<strong>垂直方向上的外边距</strong>会叠加。</li>\n<li>在一个BFC中，每一个盒子的左外边界（margin-left）会紧贴着容器的border-left，右边同理，即使存在浮动元素也是如此。</li>\n</ul>\n<p>可以得到结论：</p>\n<ol>\n<li>在一个BFC内部，盒子会在垂直方向上一个接着一个地排列</li>\n<li>在一个BFC内部，相邻的margin-top、margin-bottom会叠加</li>\n<li>在一个BFC内部，每一个盒子的左外边界（margin-left）会紧贴着容器（包含盒子）的border-left，即使存在浮动元素也是如此</li>\n<li>在一个BFC内部，如果存在内部元素是一个新的BFC，并且存在内部元素是浮动元素，则这个新的BFC的区域不会与浮动元素的区域重叠</li>\n<li>BFC就是页面上一个隔离的盒子，该盒子内部的子元素不会影响到外边的元素</li>\n<li>计算一个BFC的高度时，其内部浮动元素的高度也会计算其中</li>\n</ol>\n<p>BFC的用途：</p>\n<ul>\n<li>创建BFC来避免垂直外边距叠加（例如使用div将一个盒子包起来并给这个div添加overflow属性）</li>\n<li>创建BFC来清除浮动（为父元素添加<code>overflow: hidden</code>，利用结论第六条）</li>\n<li>创建BFC来实现<a href=\"https://blog.csdn.net/michael8512/article/details/76473835\" target=\"_blank\" rel=\"noopener\">自适应布局</a></li>\n</ul>\n<hr>\n<p>好了到这里，这本书就看完了，一些细节的东西了解到了很多，下面开始看html5+css3。</p>\n<p>- 2018 - 09 - 11 -</p>\n","site":{"data":{}},"excerpt":"","more":"<p>《HTML与CSS进阶教程读书笔记》</p>\n<hr>\n<h1 id=\"HTML基础知识\"><a href=\"#HTML基础知识\" class=\"headerlink\" title=\"HTML基础知识\"></a>HTML基础知识</h1><h2 id=\"HTML与XHTML\"><a href=\"#HTML与XHTML\" class=\"headerlink\" title=\"HTML与XHTML\"></a>HTML与XHTML</h2><p>HTML指超文本标记语言，是构成网页文档的主要语言。我们常说的HTML指HTML4.01。</p>\n<p>XHTML指扩展的超文本标记语言，是XML风格的、更严格、更纯净的HTML。</p>\n<p>两者的主要区别：</p>\n<ul>\n<li>XHTML标签必须闭合。</li>\n<li>XHTML标签和属性必须小写。</li>\n<li>XHTML标签属性必须加引号。</li>\n<li>XHTML标签用id属性代替name属性。</li>\n</ul>\n<h2 id=\"id和class\"><a href=\"#id和class\" class=\"headerlink\" title=\"id和class\"></a>id和class</h2><p>由于id属性具有唯一性，因此W3C建议，对于页面关键的结构或大结构，才能使用id属性，其他地方使用class属性。</p>\n<p><u>因为搜索引擎是根据标签的语义和id属性来识别的，因此id属性的使用和命名都需要谨慎。</u></p>\n<p>一般来说，定义多个class的目的在于：一个class抽取公共样式，一个class定义单独样式。</p>\n<h2 id=\"标题栏小图标\"><a href=\"#标题栏小图标\" class=\"headerlink\" title=\"标题栏小图标\"></a>标题栏小图标</h2><p>在<code>head</code>标签内加入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"图标路径.ico\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中<code>rel</code>和<code>type</code>是固定属性不用更改，只需要修改图片路径即可。</p>\n<h1 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h1><p>HTML的精髓在于标签的语义。搜索引擎根据HTML代码识别页面结构。</p>\n<p>编写语意结构良好的页面的好处：</p>\n<ul>\n<li>利于开发调试和后期维护。</li>\n<li>利于搜索引擎优化。</li>\n</ul>\n<p>应优先使用正确的语义化标签，如果没有语义化标签可用，再考虑div或者span等无语义标签。</p>\n<h2 id=\"标题语义化\"><a href=\"#标题语义化\" class=\"headerlink\" title=\"标题语义化\"></a>标题语义化</h2><p>h1-h6是标题标签，相比于其他标签，它们在搜索引擎优化（SEO）中占有相当重要的地位。</p>\n<p>一般用到h4，h5和h6权重和普通标签差不多，很少使用。</p>\n<p>对于标题语义化，我们需要注意的是：</p>\n<ul>\n<li>一个页面只能有一个h1标签。</li>\n<li>h1-h6之间不要出现断层。</li>\n<li>不要用标题标签来定义样式（如为了加粗字体而为文本加上标题标签）。</li>\n<li>不要用div来代替标题标签。</li>\n</ul>\n<p>div是无语义的标签，如果使用div代替标题标签会使网页在SEO中丢失大量权重。</p>\n<h2 id=\"图片语义化\"><a href=\"#图片语义化\" class=\"headerlink\" title=\"图片语义化\"></a>图片语义化</h2><h3 id=\"alt属性和title属性\"><a href=\"#alt属性和title属性\" class=\"headerlink\" title=\"alt属性和title属性\"></a>alt属性和title属性</h3><p>alt是给搜索引擎看的，title是给用户看的。</p>\n<p>搜索引擎根据alt属性或上下文判断图片内容。</p>\n<p>因此<strong>img标签必须添加alt属性。</strong></p>\n<h3 id=\"figure元素和figcaption元素\"><a href=\"#figure元素和figcaption元素\" class=\"headerlink\" title=\"figure元素和figcaption元素\"></a>figure元素和figcaption元素</h3><p>对于图片+图注的效果，使用figure和figcaption来增强图片语义化。</p>\n<p>例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"xxx\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">figcaption</span>&gt;</span>这是一个图注<span class=\"tag\">&lt;/<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更详细的介绍可以看<a href=\"https://www.w3cplus.com/html5/quick-tip-the-right-way-to-use-figure-and-figcaption-elements.html\" target=\"_blank\" rel=\"noopener\">这一篇博客</a>。</p>\n<h2 id=\"表格语义化\"><a href=\"#表格语义化\" class=\"headerlink\" title=\"表格语义化\"></a>表格语义化</h2><table>\n<thead>\n<tr>\n<th>标签</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>table</td>\n<td>表格</td>\n</tr>\n<tr>\n<td>caption</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>thead</td>\n<td>表头（语义划分）</td>\n</tr>\n<tr>\n<td>tbody</td>\n<td>表身（语义划分）</td>\n</tr>\n<tr>\n<td>tfoot</td>\n<td>表尾（语义划分）</td>\n</tr>\n<tr>\n<td>tr</td>\n<td>行</td>\n</tr>\n<tr>\n<td>th</td>\n<td>表头单元格</td>\n</tr>\n<tr>\n<td>td</td>\n<td>表格单元格</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"表单语义化\"><a href=\"#表单语义化\" class=\"headerlink\" title=\"表单语义化\"></a>表单语义化</h2><h3 id=\"label标签\"><a href=\"#label标签\" class=\"headerlink\" title=\"label标签\"></a>label标签</h3><p>label标签的for属性有两个作用：</p>\n<ul>\n<li>语义上绑定了label元素和表单元素。（\\<label for=\"*element_id*\">）</label></li>\n<li>当我们点击label中的文本时，其关联的表单元素也会获得焦点。</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"rdo\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rdo\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"rdo\"</span>&gt;</span>单选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"fieldset标签和legend标签\"><a href=\"#fieldset标签和legend标签\" class=\"headerlink\" title=\"fieldset标签和legend标签\"></a>fieldset标签和legend标签</h3><p>fieldset标签用于给表单元素进行分组并绘制一个边框，legend标签用于定义某一组表单的标题。</p>\n<p>例如这个<a href=\"http://www.runoob.com/tags/tag-fieldset.html\" target=\"_blank\" rel=\"noopener\">例子</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Personalia:<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">    Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Email: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Date of birth: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<ul>\n<li>增强表单语义。</li>\n<li>可以使用fieldset标签的disabled属性来禁用整个组中的表单元素。</li>\n</ul>\n<h2 id=\"其他语义化\"><a href=\"#其他语义化\" class=\"headerlink\" title=\"其他语义化\"></a>其他语义化</h2><h3 id=\"换行符\"><a href=\"#换行符\" class=\"headerlink\" title=\"换行符\\\"></a>换行符\\<br></h3><p>W3C标准规定，\\<br>标签只能用于段落中的换行。即只能用于p标签内部。</p>\n<h3 id=\"无序列表ul\"><a href=\"#无序列表ul\" class=\"headerlink\" title=\"无序列表ul\"></a>无序列表ul</h3><p>对于列表型数据，不建议使用div实现，而应用无序列表或有序列表实现。</p>\n<p>为了实现外观效果，一般使用无序列表而不是有序列表。</p>\n<h3 id=\"strong-标签和em标签\"><a href=\"#strong-标签和em标签\" class=\"headerlink\" title=\"strong 标签和em标签\"></a>strong 标签和em标签</h3><p>W3C对这两个标签赋予了“强调”的语义。</p>\n<p>可以在CSS中重新定义它们的样式而不会改变它们的语义。</p>\n<h3 id=\"del标签和ins标签\"><a href=\"#del标签和ins标签\" class=\"headerlink\" title=\"del标签和ins标签\"></a>del标签和ins标签</h3><p>这两个标签一般是配合使用表示更新文本：“delete”和“insert”，被删除的文本和被更新的文本。</p>\n<p>一般会用CSS重新定义它们的样式。</p>\n<p><a href=\"http://www.runoob.com/tags/tag-del.html\" target=\"_blank\" rel=\"noopener\">实例链接</a></p>\n<h3 id=\"img标签\"><a href=\"#img标签\" class=\"headerlink\" title=\"img标签\"></a>img标签</h3><p>对于什么时候使用img标签，什么时候使用背景图片，应该根据HTML的语义来判断。</p>\n<ul>\n<li><p>img标签：作为HTML的一部分，希望被搜索引擎识别。</p>\n</li>\n<li><p>背景图片： 只起到修饰作用，不希望被搜索引擎识别。</p>\n</li>\n</ul>\n<h2 id=\"语义化验证\"><a href=\"#语义化验证\" class=\"headerlink\" title=\"语义化验证\"></a>语义化验证</h2><p>通过去掉CSS样式，观察页面是否还有很好的可读性来判断一个页面是否语义良好。</p>\n<h2 id=\"HTML5舍弃的标签\"><a href=\"#HTML5舍弃的标签\" class=\"headerlink\" title=\"HTML5舍弃的标签\"></a>HTML5舍弃的标签</h2><p>下边这些已经被舍弃的标签(仅为了定义样式的标签和很少使用或已经被新标签代替的标签)应停止使用：</p>\n<ul>\n<li>\\<acronym>  定义首字母缩写，应用abbr代替。</acronym></li>\n<li>\\<applet> 定义嵌入的applet，应用object代替。</applet></li>\n<li>\\<basefont></li>\n<li>\\<big></big></li>\n<li>\\<center></center></li>\n<li>\\<dir> 定义目录列表，应用ul代替。</dir></li>\n<li>\\<font></font></li>\n<li>\\<frame></li>\n<li>\\<frameset></frameset></li>\n<li>\\<noframes></noframes></li>\n<li>\\<strike></strike></li>\n<li>\\<tt></tt></li>\n</ul>\n<h1 id=\"CSS基础知识\"><a href=\"#CSS基础知识\" class=\"headerlink\" title=\"CSS基础知识\"></a>CSS基础知识</h1><h2 id=\"CSS单位\"><a href=\"#CSS单位\" class=\"headerlink\" title=\"CSS单位\"></a>CSS单位</h2><h3 id=\"px\"><a href=\"#px\" class=\"headerlink\" title=\"px\"></a>px</h3><p>pixel，像素，一个图片或计算机屏幕中最小的点。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"%\"></a>%</h3><p>CSS中支持百分比的属性：</p>\n<ul>\n<li><strong>width、height、font-size</strong>，它们的百分比是相对于父元素的“相同元素”的值来计算的。</li>\n<li><strong>line-height</strong>，它的百分比是相对于<strong>父元素</strong>的<strong>font-size</strong>值来计算的。</li>\n<li><strong>vertical-align</strong>，它的百分比是相对于<strong>当前元素</strong>继承的<strong>line-height</strong>值来计算的。</li>\n</ul>\n<h3 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h3><p>1em等于当前元素的以px为单位的font-size值，</p>\n<p>若当前元素的font-size值没有定义，则从父元素继承，</p>\n<p>若当前元素的所有祖先元素都没有定义font-size，则继承浏览器默认的font-size值：16px。</p>\n<p><u>使用em的小技巧：</u>首行缩进使用 <code>text-indent: 2em</code>实现。</p>\n<h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>CSS3新引入的单位，指相对根元素（即html元素）的字体大小。</p>\n<h2 id=\"CSS特性\"><a href=\"#CSS特性\" class=\"headerlink\" title=\"CSS特性\"></a>CSS特性</h2><h3 id=\"继承性\"><a href=\"#继承性\" class=\"headerlink\" title=\"继承性\"></a>继承性</h3><p>指子元素继承了父元素的某些样式属性。</p>\n<p>在CSS中，具有继承性的样式有三大类：</p>\n<ul>\n<li><strong>文本</strong>相关属性： font–family，font-size，font-style，font-weight，font，line-height，text-align，text-indent，word-spacing。</li>\n<li><strong>列表</strong>相关属性： list-style-image，list-style-position，list-style-type，list-style。</li>\n<li><strong>颜色</strong>相关属性： color。</li>\n</ul>\n<h3 id=\"层叠性\"><a href=\"#层叠性\" class=\"headerlink\" title=\"层叠性\"></a>层叠性</h3><p>“后者居上”原则。</p>\n<p>CSS的层叠性指样式的覆盖。对于具有<strong>相同权重</strong>的<strong>相同属性</strong>，以最后定义的值为准。</p>\n<h2 id=\"CSS优先级\"><a href=\"#CSS优先级\" class=\"headerlink\" title=\"CSS优先级\"></a>CSS优先级</h2><h3 id=\"引用方式\"><a href=\"#引用方式\" class=\"headerlink\" title=\"引用方式\"></a>引用方式</h3><p>行内样式&gt;(内部样式=外部样式)</p>\n<p>若同时存在权重相同内部样式和外部样式，则以最后引入的样式为准。</p>\n<h3 id=\"继承方式\"><a href=\"#继承方式\" class=\"headerlink\" title=\"继承方式\"></a>继承方式</h3><p>以最近的祖先元素为准。</p>\n<h3 id=\"指定样式\"><a href=\"#指定样式\" class=\"headerlink\" title=\"指定样式\"></a>指定样式</h3><p>常见的伪元素——:before、:after、:first-letter、:first-line。</p>\n<p>常见的伪类——:hover、:first-child等。</p>\n<p>常用的选择器优先级：行内样式&gt;id选择器&gt;class选择器&gt;元素选择器。</p>\n<p>选择器权值表：</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>权值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>通配符</td>\n<td>0</td>\n</tr>\n<tr>\n<td>伪元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>元素选择器</td>\n<td>1</td>\n</tr>\n<tr>\n<td>class选择器</td>\n<td>10</td>\n</tr>\n<tr>\n<td>伪类</td>\n<td>10</td>\n</tr>\n<tr>\n<td>属性选择器</td>\n<td>10</td>\n</tr>\n<tr>\n<td>id选择器</td>\n<td>100</td>\n</tr>\n<tr>\n<td>行内样式</td>\n<td>1000</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"继承样式和和指定样式\"><a href=\"#继承样式和和指定样式\" class=\"headerlink\" title=\"继承样式和和指定样式\"></a>继承样式和和指定样式</h3><p>指定样式权重更高。</p>\n<h3 id=\"important\"><a href=\"#important\" class=\"headerlink\" title=\"!important\"></a>!important</h3><p>权值最高，不推荐使用。</p>\n<h2 id=\"CSS引入方式\"><a href=\"#CSS引入方式\" class=\"headerlink\" title=\"CSS引入方式\"></a>CSS引入方式</h2><ul>\n<li>导入样式表（加载html后加载css，不推荐）</li>\n<li>外部样式表（link标签）</li>\n<li>内部样式表（style标签）</li>\n<li>行内样式表</li>\n</ul>\n<h2 id=\"CSS选择器\"><a href=\"#CSS选择器\" class=\"headerlink\" title=\"CSS选择器\"></a>CSS选择器</h2><p>CSS出去基本的选择器（元素选择器、id选择器、class选择器、群组或分组选择器），</p>\n<p>还有<u>层次选择器</u>：</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M N</td>\n<td>后代选择器，选择M元素所有内部后代N元素</td>\n</tr>\n<tr>\n<td>M&gt;N</td>\n<td>子代选择器，选择M元素所有内部子代N元素</td>\n</tr>\n<tr>\n<td>M~N</td>\n<td>兄弟选择器，选择M元素所有同级N元素</td>\n</tr>\n<tr>\n<td>M+N</td>\n<td>相邻选择器，选择M元素相邻的下一个同级元素</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"CSS规范\"><a href=\"#CSS规范\" class=\"headerlink\" title=\"CSS规范\"></a>CSS规范</h1><h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><h3 id=\"CSS文件命名\"><a href=\"#CSS文件命名\" class=\"headerlink\" title=\"CSS文件命名\"></a>CSS文件命名</h3><p>开发阶段按照功能模块划分CSS文件。</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reset.css</td>\n<td>重置样式，重置元素默认样式</td>\n</tr>\n<tr>\n<td>global.css</td>\n<td>全局样式，全站公用，定义页面基础样式</td>\n</tr>\n<tr>\n<td>themes.css</td>\n<td>主题样式，用于实现换肤功能</td>\n</tr>\n<tr>\n<td>module.css</td>\n<td>模块样式，用于模块的样式</td>\n</tr>\n<tr>\n<td>master.css</td>\n<td>母版样式，用于母版页的样式</td>\n</tr>\n<tr>\n<td>columes.css</td>\n<td>专栏样式，用于专栏的样式</td>\n</tr>\n<tr>\n<td>forms.css</td>\n<td>表单样式，用于表单的样式</td>\n</tr>\n<tr>\n<td>mend.css</td>\n<td>补丁样式，用于维护、修改的样式</td>\n</tr>\n<tr>\n<td>print.css</td>\n<td>打印样式，用于打印的样式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"id和class命名\"><a href=\"#id和class命名\" class=\"headerlink\" title=\"id和class命名\"></a>id和class命名</h3><p>建议使用中划线命名，例如<code>column-title</code>。</p>\n<p>为了避免class命名的重复，一般取父元素的class名作为前缀，例如<code>column-title</code>。</p>\n<table>\n<thead>\n<tr>\n<th>网页主体部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最外层</td>\n<td>wrapper(一般用于包裹整个页面)</td>\n</tr>\n<tr>\n<td>头部</td>\n<td>header</td>\n</tr>\n<tr>\n<td>内容</td>\n<td>content</td>\n</tr>\n<tr>\n<td>侧栏</td>\n<td>sidebar</td>\n</tr>\n<tr>\n<td>栏目</td>\n<td>column</td>\n</tr>\n<tr>\n<td>热点</td>\n<td>hot</td>\n</tr>\n<tr>\n<td>新闻</td>\n<td>news</td>\n</tr>\n<tr>\n<td>下载</td>\n<td>download</td>\n</tr>\n<tr>\n<td>标志</td>\n<td>logo</td>\n</tr>\n<tr>\n<td>导航条</td>\n<td>nav</td>\n</tr>\n<tr>\n<td>主体</td>\n<td>main</td>\n</tr>\n<tr>\n<td>左侧</td>\n<td>main-left</td>\n</tr>\n<tr>\n<td>右侧</td>\n<td>main-right</td>\n</tr>\n<tr>\n<td>底部</td>\n<td>footer</td>\n</tr>\n<tr>\n<td>友情链接</td>\n<td>friendlink</td>\n</tr>\n<tr>\n<td>加入我们</td>\n<td>joinus</td>\n</tr>\n<tr>\n<td>版权</td>\n<td>copyright</td>\n</tr>\n<tr>\n<td>服务</td>\n<td>service</td>\n</tr>\n<tr>\n<td>登录</td>\n<td>login</td>\n</tr>\n<tr>\n<td>注册</td>\n<td>register</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>导航部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主导航</td>\n<td>main-nav</td>\n</tr>\n<tr>\n<td>子导航</td>\n<td>sub-nav</td>\n</tr>\n<tr>\n<td>边导航</td>\n<td>side-nav</td>\n</tr>\n<tr>\n<td>左导航</td>\n<td>leftside-nav</td>\n</tr>\n<tr>\n<td>右导航</td>\n<td>rightside-nav</td>\n</tr>\n<tr>\n<td>顶导航</td>\n<td>top-nav</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>菜单部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>菜单</td>\n<td>menu</td>\n</tr>\n<tr>\n<td>子菜单</td>\n<td>submenu</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>其他</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>标题</td>\n<td>title</td>\n</tr>\n<tr>\n<td>摘要</td>\n<td>summary</td>\n</tr>\n<tr>\n<td>登录条</td>\n<td>loginbar</td>\n</tr>\n<tr>\n<td>搜索</td>\n<td>search</td>\n</tr>\n<tr>\n<td>标签页</td>\n<td>tab</td>\n</tr>\n<tr>\n<td>广告</td>\n<td>banner</td>\n</tr>\n<tr>\n<td>小技巧</td>\n<td>tips</td>\n</tr>\n<tr>\n<td>图标</td>\n<td>icon</td>\n</tr>\n<tr>\n<td>法律声明</td>\n<td>siteinfolegal</td>\n</tr>\n<tr>\n<td>网站地图</td>\n<td>sitemap</td>\n</tr>\n<tr>\n<td>工具条</td>\n<td>tool、toolbar</td>\n</tr>\n<tr>\n<td>首页</td>\n<td>homepage</td>\n</tr>\n<tr>\n<td>子页</td>\n<td>subpage</td>\n</tr>\n<tr>\n<td>合作伙伴</td>\n<td>partner</td>\n</tr>\n<tr>\n<td>帮助</td>\n<td>help</td>\n</tr>\n<tr>\n<td>指南</td>\n<td>guide</td>\n</tr>\n<tr>\n<td>滚动</td>\n<td>scroll</td>\n</tr>\n<tr>\n<td>提示信息</td>\n<td>msg</td>\n</tr>\n<tr>\n<td>投票</td>\n<td>vote</td>\n</tr>\n<tr>\n<td>相关文章</td>\n<td>related</td>\n</tr>\n<tr>\n<td>文章列表</td>\n<td>list</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"书写规范\"><a href=\"#书写规范\" class=\"headerlink\" title=\"书写规范\"></a>书写规范</h2><p>对于功能代码，应该集中放在一起，</p>\n<p>对于其他代码，应按照如下顺序：</p>\n<ol>\n<li>影响文档流属性（布局属性）——display，position，float，clear等</li>\n<li>自身盒模型属性——width，height，padding，margin，border，overflow等</li>\n<li>文本性属性——font，line-height，text-align，text-indent，vertical-align等</li>\n<li>装饰性属性——color，background-color，opacity等</li>\n<li>其他属性——cursor，content，list-style，quotes等</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 影响文档流属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 盒子模型属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid gray;</span><br><span class=\"line\">  <span class=\"comment\">/* 文本性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 装饰性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"comment\">/* 其他属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"注释规范\"><a href=\"#注释规范\" class=\"headerlink\" title=\"注释规范\"></a>注释规范</h2><p>由于压缩工具会删除所有的注释，因此有时为了保留版权声明等注释信息，需要在注释内容前加一个叹号，如<code>/*! 注释内容 */</code>，这样压缩工具就不会删除这条注释信息。</p>\n<h3 id=\"顶部注释\"><a href=\"#顶部注释\" class=\"headerlink\" title=\"顶部注释\"></a>顶部注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *@description:说明</span></span><br><span class=\"line\"><span class=\"comment\"> *@author:作者</span></span><br><span class=\"line\"><span class=\"comment\"> *@update:更新时间，如2018-09-10 17:42</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模块注释\"><a href=\"#模块注释\" class=\"headerlink\" title=\"模块注释\"></a>模块注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 导航部分，开始 */</span></span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"comment\">/* 导航部分，结束 */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"简单注释\"><a href=\"#简单注释\" class=\"headerlink\" title=\"简单注释\"></a>简单注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 单行注释 */</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> *多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> *多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-reset\"><a href=\"#CSS-reset\" class=\"headerlink\" title=\"CSS reset\"></a>CSS reset</h2><p>重置样式，去除元素在浏览器中的默认样式。</p>\n<p>是否使用CSS reset根据实际开发需求而定。</p>\n<h1 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h1><p><img src=\"https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=5ad0ba6a0c7b02080c9c37e752e9deeb/0824ab18972bd407012c41327d899e510eb30911.jpg\" alt=\"标准盒子模型\"></p>\n<p><img src=\"https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=6cdf3ae9fbfaaf5184b689b9bc64b8d6/1b4c510fd9f9d72ac29d82d2d22a2834359bbb00.jpg\" alt=\"IE盒子模型\"></p>\n<h2 id=\"外边距叠加\"><a href=\"#外边距叠加\" class=\"headerlink\" title=\"外边距叠加\"></a>外边距叠加</h2><p>又称为“margin叠加”，指当两个外边距相遇时会“合二为一”。叠加后的外边距为两个外边距的最大值。</p>\n<p><u>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</u></p>\n<p>以下图片均来自<a href=\"http://www.w3school.com.cn/css/css_margin_collapsing.asp\" target=\"_blank\" rel=\"noopener\">w3school</a></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_1.gif\" alt=\"同级元素\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_2.gif\" alt=\"父子元素\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_3.gif\" alt=\"空元素1\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_4.gif\" alt=\"空元素2\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing.gif\" alt=\"外边距合并的意义\"></p>\n<h2 id=\"负margin\"><a href=\"#负margin\" class=\"headerlink\" title=\"负margin\"></a>负margin</h2><ul>\n<li>当margin-top或者margin-left为负数时，<strong>当前元素</strong>会被拉向指定方向。</li>\n<li>当margin-bottom或者margin-right为负数时，<strong>后续元素</strong>会被拉向指定方向。</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/549aaa5fabaa\" target=\"_blank\" rel=\"noopener\">这里有一篇文章</a>讲得不错，可以参考一下。</p>\n<p><a href=\"https://www.cnblogs.com/star91/p/5773436.html\" target=\"_blank\" rel=\"noopener\">圣杯布局、双飞翼布局</a>就是利用这个实现的。</p>\n<h2 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow\"></a>overflow</h2><p>当浮动引起父元素高度塌陷时，可以为父元素加上<code>overflow: hidden</code>来清除浮动。</p>\n<h1 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h1><table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline</td>\n<td>行内元素</td>\n</tr>\n<tr>\n<td>block</td>\n<td>块元素</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>行内块元素</td>\n</tr>\n<tr>\n<td>table</td>\n<td>以表格形式显示，类似于table元素</td>\n</tr>\n<tr>\n<td>table-row</td>\n<td>以表格行形式显示，类似于tr元素</td>\n</tr>\n<tr>\n<td>table-cell</td>\n<td>以表格单元格形式显示，类似于td元素</td>\n</tr>\n<tr>\n<td>none</td>\n<td>隐藏元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"块元素\"><a href=\"#块元素\" class=\"headerlink\" title=\"块元素\"></a>块元素</h2><ul>\n<li>独占一行</li>\n<li>内部可以容纳其他块元素或行元素</li>\n<li>可以定义width和height</li>\n<li>可以定义四个方向的margin</li>\n</ul>\n<h2 id=\"inline元素\"><a href=\"#inline元素\" class=\"headerlink\" title=\"inline元素\"></a>inline元素</h2><ul>\n<li>可以与其他行内元素位于同一行</li>\n<li>可以容纳行内元素，但不能容纳块元素</li>\n<li>无法定义width和height</li>\n<li>可以定义margin-left和margin-right，不能定义margin-top和margin-bottom</li>\n</ul>\n<h2 id=\"inline-block元素\"><a href=\"#inline-block元素\" class=\"headerlink\" title=\"inline-block元素\"></a>inline-block元素</h2><ul>\n<li>可以定义width和height</li>\n<li>可以与其他行内元素位于同一行</li>\n</ul>\n<p>常见的inline-block元素：img元素和input元素</p>\n<h2 id=\"display-table-cell\"><a href=\"#display-table-cell\" class=\"headerlink\" title=\"display: table-cell\"></a>display: table-cell</h2><p>可以用于实现：</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/a7ee7dd60166\" target=\"_blank\" rel=\"noopener\">图片垂直居中</a>于元素</li>\n<li>等高布局</li>\n<li>自动平均划分元素，并在同一行显示</li>\n</ul>\n<h2 id=\"去除inline-block元素间距\"><a href=\"#去除inline-block元素间距\" class=\"headerlink\" title=\"去除inline-block元素间距\"></a>去除inline-block元素间距</h2><p>在父元素中添加<code>font-size: 0</code></p>\n<h1 id=\"文本效果\"><a href=\"#文本效果\" class=\"headerlink\" title=\"文本效果\"></a>文本效果</h1><table>\n<thead>\n<tr>\n<th>文本属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text-decoration</td>\n<td>下划线、删除线、顶划线</td>\n</tr>\n<tr>\n<td>text-transform</td>\n<td>文本大小写</td>\n</tr>\n<tr>\n<td>font-variant</td>\n<td>将英文文本转换为小型大写字母</td>\n</tr>\n<tr>\n<td>text-indent</td>\n<td>段落首行缩进</td>\n</tr>\n<tr>\n<td>text-align</td>\n<td>文本水平对齐</td>\n</tr>\n<tr>\n<td>vertical-align</td>\n<td>文本垂直对齐</td>\n</tr>\n<tr>\n<td>line-height</td>\n<td>行高</td>\n</tr>\n<tr>\n<td>letter-spacing</td>\n<td>字距</td>\n</tr>\n<tr>\n<td>word-spacing</td>\n<td>词距</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"text-indent\"><a href=\"#text-indent\" class=\"headerlink\" title=\"text-indent\"></a>text-indent</h2><p>可以使用    <code>text-indent: -9999px;</code>来隐藏文本。</p>\n<h2 id=\"text-align\"><a href=\"#text-align\" class=\"headerlink\" title=\"text-align\"></a>text-align</h2><p>主要使用的值为left、right、center，对文字、inline元素、inline-block元素都起作用，对块元素不起作用。</p>\n<p>利用<code>margin: 0 auto</code>实现块元素的水平居中。</p>\n<p><code>text-align: center</code>在父元素中定义，<code>margin: 0 auto</code>在当前元素中定义。</p>\n<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><p>关于顶线、中线、基线、底线可以自行查阅。</p>\n<p>行高（line-height）指的是两行基线之间的距离。</p>\n<ul>\n<li>将height和line-height设为相同值可以实现文字垂直居中。</li>\n<li>当取值为%或者em时，是相对与父元素的font-size计算的。</li>\n<li>当取值为无单位数字时，是相对于当前元素的font-size计算的。</li>\n</ul>\n<h2 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h2><p>vertical-align对inline、inline-block、table-cell元素有效，对块元素无效。</p>\n<p>用于定义<u>周围的文字、inline元素、inline-block元素</u>相对于该元素<strong>基线</strong>的垂直对齐方式。</p>\n<p>可以取负长度值和百分比值。</p>\n<h3 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h3><ol>\n<li><p>负值 ： <code>vertical-align: -2px</code>指的是该元素相对于基线向下偏移2px；</p>\n</li>\n<li><p>百分比 ： 相对于当前元素继承的line-height值计算的，也是该元素相对于基线偏移的值；</p>\n</li>\n<li><p><a href=\"http://www.runoob.com/cssref/pr-pos-vertical-align.html\" target=\"_blank\" rel=\"noopener\">关键字</a> （前四个比较常用）：</p>\n<p>| 值           | 描述                                           |<br>| ———— | ———————————————- |<br>| <strong>top</strong>      | 把元素的顶端与行中最高元素的顶端对齐           |<br>| <strong>middle</strong>   | 把此元素放置在父元素的中部。                   |<br>| <strong>baseline</strong> | 默认。元素放置在父元素的基线上。               |<br>| <strong>bottom</strong>   | 把元素的底端与行中最低的元素的顶端对齐。       |<br>| text-top     | 把元素的顶端与父元素字体的顶端对齐             |<br>| text-bottom  | 把元素的底端与父元素字体的底端对齐。           |<br>| sub          | 垂直对齐文本的下标。                           |<br>| super        | 垂直对齐文本的上标                             |<br>| inherit      | 规定应该从父元素继承 vertical-align 属性的值。 |</p>\n</li>\n</ol>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>为img添加<code>vertical-align: middle</code>可以实现图片与周围的文字居中对齐</li>\n<li>要使块元素（如div）也可以使用此属性，可以为其先定义<code>display: table-cell</code></li>\n</ul>\n<h1 id=\"表单效果\"><a href=\"#表单效果\" class=\"headerlink\" title=\"表单效果\"></a>表单效果</h1><h2 id=\"radio与checkbox\"><a href=\"#radio与checkbox\" class=\"headerlink\" title=\"radio与checkbox\"></a>radio与checkbox</h2><p>默认情况下由于是基线对齐因此视觉上会感觉单选框或复选框旁边的文字比它们低，这个时候可以使用vertical-align来让他们垂直居中对齐。</p>\n<p>可以使用关键字，也可以使用数值。</p>\n<h2 id=\"textarea\"><a href=\"#textarea\" class=\"headerlink\" title=\"textarea\"></a>textarea</h2><ul>\n<li>可以使用max-width和max-height来限制拖拽大小</li>\n<li>可以使用<code>resize: none</code>来禁止拖拽</li>\n</ul>\n<p>要使textarea在不同浏览器中具有相同的外观，可以：</p>\n<ul>\n<li>使用CSS的width和height定义大小</li>\n<li>使用<code>overflow: auto</code>来定义textarea滚动条自适应</li>\n</ul>\n<h2 id=\"表单对齐\"><a href=\"#表单对齐\" class=\"headerlink\" title=\"表单对齐\"></a>表单对齐</h2><p>书上给了<strong>注册</strong>的例子：</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536639853274&amp;di=16c88d63b9118620ba546c2f6237b78c&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.orsoon.com%2Fuploads%2Fallimg%2F24631428484696.png\" alt=\"图片来源于网络\"></p>\n<p>实现方法：</p>\n<ol>\n<li>每一行表单分为左栏加若干右栏<ol>\n<li>所有行的左栏长度相等</li>\n<li>所有行的右栏所有盒子长度之和相等</li>\n<li>左栏一般为一个label，右栏为若干文本框</li>\n</ol>\n</li>\n<li>所有左栏和右栏盒子都设为左浮动</li>\n<li>左栏添加属性<code>text-align: right</code>使得文字右对齐</li>\n<li>每一行左栏盒子长度加上所有右栏盒子长度之和等于行宽</li>\n<li>每一行由一个p包裹住，并为p添加<code>overflow: hidden</code>来清除浮动</li>\n</ol>\n<p>然后我又去看了一下各网站的<strong>登录</strong>界面，基本上是一个icon+一个input的模式：</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536641005969&amp;di=02e6a2469281303e926eb8878cf64db9&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fexp%2Fw%3D480%2Fsign%3D00237679845494ee87220e111df7e0e1%2Fa686c9177f3e67093ac0b23933c79f3df9dc5530.jpg\" alt=\"图片来源于网络\"></p>\n<p>实现方法：</p>\n<ul>\n<li>icon使用<code>position: absolute</code>脱离文档流并盖在input上</li>\n<li>input将padding-left调到合适大小使得输入框不被icon盖住</li>\n</ul>\n<p>#　浮动布局</p>\n<h2 id=\"文档流\"><a href=\"#文档流\" class=\"headerlink\" title=\"文档流\"></a>文档流</h2><p>简单来说就是元素在页面中出现的先后顺序。</p>\n<ul>\n<li>正常文档流 ： “normal flow”，指默认情况下页面元素的布局情况。</li>\n<li>脱离文档流：脱离正常文档流。要改变正常文档流，使用浮动和定位方法。</li>\n</ul>\n<h2 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h2><p>可以使元素移到左边或者右边，并且允许后边的文字和元素环绕着它。</p>\n<p>浮动后使用margin来定义和其他元素之间的间距。</p>\n<p>绝对定位的元素忽略float属性。</p>\n<p>float的取值表如下，默认为<strong>none</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>left</td>\n<td>元素向左浮动。</td>\n</tr>\n<tr>\n<td>right</td>\n<td>元素向右浮动。</td>\n</tr>\n<tr>\n<td>none</td>\n<td>默认值。元素不浮动，并会显示在其在文本中出现的位置。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 float 属性的值。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>当一个元素添加float属性为left或者right时，它将变为block类型。</li>\n<li>浮动元素脱离正常文档流，若其height大于父元素的height或者父元素的height未定义，会造成父元素高度塌陷。可以为父元素添加<code>overflow: hidden</code>来解决。</li>\n<li><p>若父元素和子元素都是浮动元素，则父元素会自适应地包含子元素。</p>\n</li>\n<li><p>若兄弟元素不是浮动元素，由于浮动元素脱离文档流，可能会出现覆盖等情况。</p>\n</li>\n</ul>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><ul>\n<li><code>clear: both</code>，用于浮动元素后边的元素，表示两边不允许出现浮动元素。</li>\n<li><code>overflow: hidden</code>，用于浮动元素的父元素，但会隐藏超出父元素的内容部分。</li>\n<li>实际开发中，更经常使用<code>:after</code>伪元素结合<code>clear: both</code>来实现。</li>\n<li>为了兼容ie，为父元素添加<code>zoom: 1</code>来消除浮动。</li>\n</ul>\n<h1 id=\"定位布局\"><a href=\"#定位布局\" class=\"headerlink\" title=\"定位布局\"></a>定位布局</h1><h2 id=\"属性值\"><a href=\"#属性值\" class=\"headerlink\" title=\"属性值\"></a><a href=\"http://www.runoob.com/cssref/pr-class-position.html\" target=\"_blank\" rel=\"noopener\">属性值</a></h2><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-static\" target=\"_blank\" rel=\"noopener\">static</a></td>\n<td><u>默认值</u>。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-absolute\" target=\"_blank\" rel=\"noopener\">absolute</a></td>\n<td>生成绝对定位的元素，相对于 <u>static 定位以外的第一个父元素</u>进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-fixed\" target=\"_blank\" rel=\"noopener\">fixed</a></td>\n<td>生成固定定位的元素，相对于<u>浏览器窗口</u>进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-relative\" target=\"_blank\" rel=\"noopener\">relative</a></td>\n<td>生成相对定位的元素，相对于<u>其正常位置</u>进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-sticky\" target=\"_blank\" rel=\"noopener\">sticky</a></td>\n<td>粘性定位，该定位基于用户滚动的位置。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。<strong>注意:</strong> Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 position 属性的值。</td>\n</tr>\n<tr>\n<td>initial</td>\n<td>设置该属性为默认值，详情查看 <a href=\"http://www.runoob.com/cssref/css-inherit.html\" target=\"_blank\" rel=\"noopener\">CSS initial 关键字</a>。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>absolute会将元素转换为块元素。</li>\n<li>若想要子元素相对于父元素定位，一般给父元素添加<code>position: relative</code>，给子元素定义<code>position: absolute</code>来实现。祖先元素同理。</li>\n</ul>\n<h2 id=\"z-index属性\"><a href=\"#z-index属性\" class=\"headerlink\" title=\"z-index属性\"></a>z-index属性</h2><p>默认情况下设置z-index无效，只有当元素定义position为relative、absolute、fixed时才会激活，z-index值越大，其堆叠顺序越高，越靠上（z方向上的靠上）。</p>\n<h1 id=\"CSS图形\"><a href=\"#CSS图形\" class=\"headerlink\" title=\"CSS图形\"></a>CSS图形</h1><p>由于图片大小比较大，数据传输量大且一张图片会引发一次HTTP请求，因此对徐图形效果，一般更倾向于用CSS实现。</p>\n<p>这里有一篇<a href=\"https://www.w3cplus.com/css/css-simple-shapes-cheat-sheet\" target=\"_blank\" rel=\"noopener\">CSS制作图形速查表</a>总结得比较全面，可以参考。</p>\n<p>另外对于带有边框的图形，一般是用大小不同的两个相同图形实现，小的覆盖在大的上边。</p>\n<h1 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h1><h2 id=\"属性缩写\"><a href=\"#属性缩写\" class=\"headerlink\" title=\"属性缩写\"></a>属性缩写</h2><ul>\n<li><p>border：<code>border: 1px solid red</code></p>\n<ul>\n<li>若不想要底边框，可以加上<code>border-bottom: 0</code></li>\n<li>若只想要底边框，可以<code>border-bottom: 1px solid red</code></li>\n</ul>\n</li>\n<li><p>padding： </p>\n<ul>\n<li><code>padding: 10px</code>指上右下左均为10px</li>\n<li><code>padding: 10px 20px</code>指上下为10px，左右为20px</li>\n<li><code>padding: 10px 20px 30px 40px</code>的顺序为上右下左，从上开始按照顺时针顺序</li>\n</ul>\n</li>\n<li><p>margin： 类似于padding</p>\n</li>\n<li>background： <code>background: url(&#39;xxx.jpg&#39;) no-repeat 80px 40px</code>,最后为background-position</li>\n<li><p>font： <code>font: &quot;微软雅黑&quot; 12px/1.5em bold</code></p>\n<ul>\n<li>顺序为<code>font-family</code>、<code>font-size</code>、<code>line-height</code>、<code>font-weight</code></li>\n<li>简写形式必须指定<code>font-family</code>和<code>font-size</code>的值，其他属性没有指定则为默认值</li>\n<li>简写形式中<code>font-size</code>和<code>line-height</code>之间需要加入一个斜杠<code>/</code></li>\n</ul>\n</li>\n<li><p>color： 十六进制的颜色值若每两位值相同，可以缩写一半，比如<code>color: #112233</code>可以缩写为<code>color: #123</code></p>\n</li>\n</ul>\n<p>##　语法压缩</p>\n<ul>\n<li>当一个CSS规则只有一两个属性的时候，使用横向书写</li>\n<li>可以省略最后一个属性的分号</li>\n<li>background-image、cursor等属性url()中的路径不用加引号</li>\n<li>如果某一个属性值为0，则不需要加单位</li>\n<li>如果某一个属性值是以0为开头的小数，可以吧0省略</li>\n<li>使用群组选择器合并相同样式</li>\n<li>若同一个父元素的多个子元素都定义了相同的可继承属性，把这些属性定义在父元素中来精简代码</li>\n</ul>\n<h2 id=\"CSS压缩\"><a href=\"#CSS压缩\" class=\"headerlink\" title=\"CSS压缩\"></a>CSS压缩</h2><p>书中推荐了两个在线的压缩工具：<a href=\"https://csscompressor.com\" target=\"_blank\" rel=\"noopener\">CSS Compressor</a> 和 <a href=\"http://tool.oschina.net/jscompress\" target=\"_blank\" rel=\"noopener\">YUI Compressor</a></p>\n<p>以YUI Compressor为例，它会对CSS文件执行如下操作：</p>\n<ul>\n<li>删除所有注释</li>\n<li>删除无用空白符</li>\n<li>删除结尾分号</li>\n<li>删除属性值为0的单位</li>\n<li>删除以0开头的小数前的0</li>\n<li>合并相似属性（属性缩写）</li>\n<li>将RGB颜色转换为十六进制颜色</li>\n</ul>\n<h2 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h2><p>书中推荐的图片压缩工具：</p>\n<p>在线的<a href=\"https://www.jpegmini.com\" target=\"_blank\" rel=\"noopener\">JPEGmini</a>和<a href=\"https://tinypng.com\" target=\"_blank\" rel=\"noopener\">TinyPNG</a>以及本地的<a href=\"https://imageoptim.com/versions.html\" target=\"_blank\" rel=\"noopener\">ImageOptim</a></p>\n<h2 id=\"高性能的选择器\"><a href=\"#高性能的选择器\" class=\"headerlink\" title=\"高性能的选择器\"></a>高性能的选择器</h2><p>浏览器对选择器规则是从右到左进行解析的。</p>\n<p>CSS选择的匹配效率：</p>\n<ol>\n<li>id选择器</li>\n<li>class选择器</li>\n<li>元素选择器</li>\n<li>相邻选择器</li>\n<li>子选择器</li>\n<li>后代选择器</li>\n<li>通配符选择器</li>\n<li>属性选择器</li>\n<li>伪类选择器</li>\n</ol>\n<p>因此在使用选择器时应注意：</p>\n<ul>\n<li>尽量不要使用通配符</li>\n<li>不要在id选择器和class选择器前添加元素名</li>\n<li>选择器最好不要超过三层，靠右的选择条件应尽可能精确</li>\n<li>避免使用后代选择器，尽量少使用子选择器</li>\n</ul>\n<h1 id=\"CSS技巧\"><a href=\"#CSS技巧\" class=\"headerlink\" title=\"CSS技巧\"></a>CSS技巧</h1><h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><ul>\n<li>文字、inline元素和inline-*元素： <code>text-align: center</code></li>\n<li>块元素： <code>margin: 0 auto</code></li>\n</ul>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2><ul>\n<li>行内块元素使用<code>vertical-align: middle</code></li>\n<li>块元素将display改为table-cell然后使用vertical-align</li>\n<li>多行文字使用一个标签将文字包起来并设为table-cell，然后再设置vertical-align</li>\n<li>单行文字设置line-height和height属性值相同来实现</li>\n</ul>\n<h2 id=\"CSS-Sprite\"><a href=\"#CSS-Sprite\" class=\"headerlink\" title=\"CSS Sprite\"></a>CSS Sprite</h2><p>又称为CSS精灵或CSS<strong>雪碧图</strong>，它将零散的小背景图合并成一张大背景图，然后再利用background-position属性进行定位从而现实小背景图。</p>\n<p>使用CSS Sprite技术时，需要注意：</p>\n<ul>\n<li>在开发后期而不是开发前期使用此技术</li>\n<li>有条理地组织图片顺序，应将小背景图按照类别、风格、大小等分门别类地放好</li>\n<li>控制雪碧图的大小，当图片大小小于200KB时传输时间是差不多的，因此雪碧图应控制在200KB以内</li>\n</ul>\n<p>书中推荐了两个CSS Sprite工具：<a href=\"http://css.spritegen.com/\" target=\"_blank\" rel=\"noopener\">CSS Sprite Generator</a> 和 <a href=\"http://www.spritecow.com/\" target=\"_blank\" rel=\"noopener\">Sprite Cow</a></p>\n<h2 id=\"Icon-Font图标\"><a href=\"#Icon-Font图标\" class=\"headerlink\" title=\"Icon Font图标\"></a>Icon Font图标</h2><p>使用字体文件实现小图标效果，从而减少图片的使用。</p>\n<p>推荐的Icon Font网站：<a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">http://www.iconfont.cn/</a></p>\n<p>网站上就有<a href=\"http://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d0091c141&amp;helptype=code\" target=\"_blank\" rel=\"noopener\">使用教程</a></p>\n<h1 id=\"重要概念\"><a href=\"#重要概念\" class=\"headerlink\" title=\"重要概念\"></a>重要概念</h1><h2 id=\"包含块\"><a href=\"#包含块\" class=\"headerlink\" title=\"包含块\"></a>包含块</h2><p>containing block，决定一个元素大小和定位的元素。</p>\n<p>时视觉格式化模型中的一个重要概念，与CSS盒子模型类似。其作用主要是为其内部的后代元素提供一个参考。</p>\n<ul>\n<li>根元素（HTML元素）没有父元素，它存在的包含块被称为初始包含块</li>\n<li>定位为fixed的元素的包含块为浏览器窗口</li>\n<li>定位为是static和relative的元素的包含块是它最近的块级（block、inline-block或table-cell）祖先元素创建的</li>\n<li>定位为absolute的元素的包含块是它最近的定位不是static的祖先元素，可以是块元素也可以是行内元素</li>\n</ul>\n<h2 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h2><p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1537245373&amp;di=c7455fbd6881b1a07ae8ac81a79f474e&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fwww.w3cplus.com%2Fsites%2Fdefault%2Ffiles%2Fblogs%2F2018%2F1808%2Fz-index-15.png\" alt=\"层叠级别图\"></p>\n<p>一个元素在z轴上的堆叠顺序：</p>\n<ul>\n<li>层叠级别越大越靠上</li>\n<li>同等层叠级别，后边的堆叠在前边的上边（后来者居上）</li>\n<li>不同的层叠上下文比较的是父级层叠上下文，与自身无关</li>\n</ul>\n<h2 id=\"BFC和IFC\"><a href=\"#BFC和IFC\" class=\"headerlink\" title=\"BFC和IFC\"></a>BFC和IFC</h2><p>BFC： block formatting context， 块级格式上下文</p>\n<p>IFC： inline formatting context， 行级格式上下文</p>\n<p>若一个元素具备以下任何一个条件，则会创造创造一个新的BFC：</p>\n<ul>\n<li>根元素</li>\n<li>float属性不是none</li>\n<li>position属性是absolute或fixed</li>\n<li>overflow属性值不是visible</li>\n<li>display属性为inline-block、table-caption、table-cell</li>\n</ul>\n<p>W3C描述BFC的特点为：</p>\n<ul>\n<li>在一个BFC中，盒子从顶端开始垂直一个接着一个地排列。两个相邻盒子之间的垂直间距有margin决定。<strong>同一个BFC中</strong>，两个相邻块盒子之间<strong>垂直方向上的外边距</strong>会叠加。</li>\n<li>在一个BFC中，每一个盒子的左外边界（margin-left）会紧贴着容器的border-left，右边同理，即使存在浮动元素也是如此。</li>\n</ul>\n<p>可以得到结论：</p>\n<ol>\n<li>在一个BFC内部，盒子会在垂直方向上一个接着一个地排列</li>\n<li>在一个BFC内部，相邻的margin-top、margin-bottom会叠加</li>\n<li>在一个BFC内部，每一个盒子的左外边界（margin-left）会紧贴着容器（包含盒子）的border-left，即使存在浮动元素也是如此</li>\n<li>在一个BFC内部，如果存在内部元素是一个新的BFC，并且存在内部元素是浮动元素，则这个新的BFC的区域不会与浮动元素的区域重叠</li>\n<li>BFC就是页面上一个隔离的盒子，该盒子内部的子元素不会影响到外边的元素</li>\n<li>计算一个BFC的高度时，其内部浮动元素的高度也会计算其中</li>\n</ol>\n<p>BFC的用途：</p>\n<ul>\n<li>创建BFC来避免垂直外边距叠加（例如使用div将一个盒子包起来并给这个div添加overflow属性）</li>\n<li>创建BFC来清除浮动（为父元素添加<code>overflow: hidden</code>，利用结论第六条）</li>\n<li>创建BFC来实现<a href=\"https://blog.csdn.net/michael8512/article/details/76473835\" target=\"_blank\" rel=\"noopener\">自适应布局</a></li>\n</ul>\n<hr>\n<p>好了到这里，这本书就看完了，一些细节的东西了解到了很多，下面开始看html5+css3。</p>\n<p>- 2018 - 09 - 11 -</p>\n"},{"title":"TensorFlow基础知识","date":"2018-03-31T06:13:12.000Z","_content":"\n\n\n**TensorFlow**是一个采用**数据流图（data flow graphs）**，用于数值计算的开源软件库。\n\n下图就是一个**数据流图**。数据流图是一个用来描述数学计算的由**“结点”（nodes）和“线”(edges)**组成的**有向图**。\n\n**“节点”** 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点或者是输出（push out）的终点，以及读取/写入持久变量（persistent variable）的终点。\n\n**“线”**表示“节点”之间的输入/输出关系。这些数据“线”可以输运**“张量”（tensor）**，即大小可动态调整的多维数据数组。\n\n一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。\n\n![Tensors Flowing](http://www.tensorfly.cn/images/tensors_flowing.gif)\n\n# 开始学习\n\n[官方基础知识链接](http://www.tensorfly.cn/tfdoc/get_started/basic_usage.html)\n\n- 使用图 (graph) 来表示计算任务.\n- 在被称之为 `会话 (Session)` 的上下文 (context) 中执行图.\n- 使用 tensor 表示数据.\n- 通过 `变量 (Variable)` 维护状态.\n- 使用 feed 和 fetch 可以为任意的操作(arbitrary operation) 赋值或者从其中获取数据.\n- 图中的节点被称之为 *op* (operation 的缩写). 一个 op 获得 0 个或多个 `Tensor`, 执行计算,\n  产生 0 个或多个 `Tensor`. 每个 Tensor 是一个类型化的多维数组.\n\n## 构建图（创造节点）\n\n```python\nimport tensorflow as tf\n\n# 创建一个常量 op, 产生一个 1x2 矩阵. 这个 op 被作为一个节点\n# 加到默认图中.\n#\n# 构造器的返回值代表该常量 op 的返回值.\nmatrix1 = tf.constant([[3., 3.]])\n\n# 创建另外一个常量 op, 产生一个 2x1 矩阵.\nmatrix2 = tf.constant([[2.],[2.]])\n\n# 创建一个矩阵乘法 matmul op , 把 'matrix1' 和 'matrix2' 作为输入.\n# 返回值 'product' 代表矩阵乘法的结果.\nproduct = tf.matmul(matrix1, matrix2)\n```\n\n## 启动图\n\n```python\n# 启动默认图.\nsess = tf.Session()\n\n# 调用 sess 的 'run()' 方法来执行矩阵乘法 op, 传入 'product' 作为该方法的参数. \n# 上面提到, 'product' 代表了矩阵乘法 op 的输出, 传入它是向方法表明, 我们希望取回\n# 矩阵乘法 op 的输出.\n#\n# 整个执行过程是自动化的, 会话负责传递 op 所需的全部输入. op 通常是并发执行的.\n# \n# 函数调用 'run(product)' 触发了图中三个 op (两个常量 op 和一个矩阵乘法 op) 的执行.\n#\n# 返回值 'result' 是一个 numpy `ndarray` 对象.\nresult = sess.run(product)\nprint result\n# ==> [[ 12.]]\n\n# 任务完成, 关闭会话.\nsess.close()\n```\n\n也可以：\n\n```python\nwith tf.Session() as sess:\n  result = sess.run([product])\n  print result\n```\n\n## Tensor\n\nTensorFlow 程序使用 tensor 数据结构来代表所有的数据, 计算图中, 操作间传递的数据都是 tensor.\n可以把 TensorFlow tensor 看作是一个 n 维的数组或列表. 一个 tensor 包含一个静态类型 rank, 和\n一个 shape. \n\n## 变量\n\n变量维护图执行过程中的状态信息。\n\n启动图后, 变量必须先经过`初始化` (init) op 初始化,\n\n必须增加一个`初始化` op 到图中：`init_op = tf.initialize_all_variables()`\n\n启动图后首先运行 'init' op：`sess.run(init_op)`\n\n## Fetch\n\n为了取回操作的输出内容, 可以在使用 `Session` 对象的 `run()` 调用 执行图时, 传入一些 tensor来取回结果。\n\n## Feed\n\nTensorFlow 还提供了 feed 机制, 该机制可以临时替代图中的任意操作中的 tensor,可以对图中任何操作提交补丁, 直接插入一个 tensor。\n\n最常见的用例是将某些特殊的操作指定为 \"feed\" 操作,标记的方法是使用 tf.placeholder() 为这些操作创建占位符. \n\n```python\ninput1 = tf.placeholder(tf.types.float32)\ninput2 = tf.placeholder(tf.types.float32)\noutput = tf.mul(input1, input2)\n\nwith tf.Session() as sess:\n  print sess.run([output], feed_dict={input1:[7.], input2:[2.]})\n```\n\n","source":"_posts/TensorFlow基础知识.md","raw":"---\ntitle: TensorFlow基础知识\ndate: 2018-03-31 14:13:12\ncategories: \n- deep learning\ntags:\n- TensorFlow\n---\n\n\n\n**TensorFlow**是一个采用**数据流图（data flow graphs）**，用于数值计算的开源软件库。\n\n下图就是一个**数据流图**。数据流图是一个用来描述数学计算的由**“结点”（nodes）和“线”(edges)**组成的**有向图**。\n\n**“节点”** 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点或者是输出（push out）的终点，以及读取/写入持久变量（persistent variable）的终点。\n\n**“线”**表示“节点”之间的输入/输出关系。这些数据“线”可以输运**“张量”（tensor）**，即大小可动态调整的多维数据数组。\n\n一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。\n\n![Tensors Flowing](http://www.tensorfly.cn/images/tensors_flowing.gif)\n\n# 开始学习\n\n[官方基础知识链接](http://www.tensorfly.cn/tfdoc/get_started/basic_usage.html)\n\n- 使用图 (graph) 来表示计算任务.\n- 在被称之为 `会话 (Session)` 的上下文 (context) 中执行图.\n- 使用 tensor 表示数据.\n- 通过 `变量 (Variable)` 维护状态.\n- 使用 feed 和 fetch 可以为任意的操作(arbitrary operation) 赋值或者从其中获取数据.\n- 图中的节点被称之为 *op* (operation 的缩写). 一个 op 获得 0 个或多个 `Tensor`, 执行计算,\n  产生 0 个或多个 `Tensor`. 每个 Tensor 是一个类型化的多维数组.\n\n## 构建图（创造节点）\n\n```python\nimport tensorflow as tf\n\n# 创建一个常量 op, 产生一个 1x2 矩阵. 这个 op 被作为一个节点\n# 加到默认图中.\n#\n# 构造器的返回值代表该常量 op 的返回值.\nmatrix1 = tf.constant([[3., 3.]])\n\n# 创建另外一个常量 op, 产生一个 2x1 矩阵.\nmatrix2 = tf.constant([[2.],[2.]])\n\n# 创建一个矩阵乘法 matmul op , 把 'matrix1' 和 'matrix2' 作为输入.\n# 返回值 'product' 代表矩阵乘法的结果.\nproduct = tf.matmul(matrix1, matrix2)\n```\n\n## 启动图\n\n```python\n# 启动默认图.\nsess = tf.Session()\n\n# 调用 sess 的 'run()' 方法来执行矩阵乘法 op, 传入 'product' 作为该方法的参数. \n# 上面提到, 'product' 代表了矩阵乘法 op 的输出, 传入它是向方法表明, 我们希望取回\n# 矩阵乘法 op 的输出.\n#\n# 整个执行过程是自动化的, 会话负责传递 op 所需的全部输入. op 通常是并发执行的.\n# \n# 函数调用 'run(product)' 触发了图中三个 op (两个常量 op 和一个矩阵乘法 op) 的执行.\n#\n# 返回值 'result' 是一个 numpy `ndarray` 对象.\nresult = sess.run(product)\nprint result\n# ==> [[ 12.]]\n\n# 任务完成, 关闭会话.\nsess.close()\n```\n\n也可以：\n\n```python\nwith tf.Session() as sess:\n  result = sess.run([product])\n  print result\n```\n\n## Tensor\n\nTensorFlow 程序使用 tensor 数据结构来代表所有的数据, 计算图中, 操作间传递的数据都是 tensor.\n可以把 TensorFlow tensor 看作是一个 n 维的数组或列表. 一个 tensor 包含一个静态类型 rank, 和\n一个 shape. \n\n## 变量\n\n变量维护图执行过程中的状态信息。\n\n启动图后, 变量必须先经过`初始化` (init) op 初始化,\n\n必须增加一个`初始化` op 到图中：`init_op = tf.initialize_all_variables()`\n\n启动图后首先运行 'init' op：`sess.run(init_op)`\n\n## Fetch\n\n为了取回操作的输出内容, 可以在使用 `Session` 对象的 `run()` 调用 执行图时, 传入一些 tensor来取回结果。\n\n## Feed\n\nTensorFlow 还提供了 feed 机制, 该机制可以临时替代图中的任意操作中的 tensor,可以对图中任何操作提交补丁, 直接插入一个 tensor。\n\n最常见的用例是将某些特殊的操作指定为 \"feed\" 操作,标记的方法是使用 tf.placeholder() 为这些操作创建占位符. \n\n```python\ninput1 = tf.placeholder(tf.types.float32)\ninput2 = tf.placeholder(tf.types.float32)\noutput = tf.mul(input1, input2)\n\nwith tf.Session() as sess:\n  print sess.run([output], feed_dict={input1:[7.], input2:[2.]})\n```\n\n","slug":"TensorFlow基础知识","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtyr00067bag7paot0jv","content":"<p><strong>TensorFlow</strong>是一个采用<strong>数据流图（data flow graphs）</strong>，用于数值计算的开源软件库。</p>\n<p>下图就是一个<strong>数据流图</strong>。数据流图是一个用来描述数学计算的由<strong>“结点”（nodes）和“线”(edges)</strong>组成的<strong>有向图</strong>。</p>\n<p><strong>“节点”</strong> 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点或者是输出（push out）的终点，以及读取/写入持久变量（persistent variable）的终点。</p>\n<p><strong>“线”</strong>表示“节点”之间的输入/输出关系。这些数据“线”可以输运<strong>“张量”（tensor）</strong>，即大小可动态调整的多维数据数组。</p>\n<p>一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。</p>\n<p><img src=\"http://www.tensorfly.cn/images/tensors_flowing.gif\" alt=\"Tensors Flowing\"></p>\n<h1 id=\"开始学习\"><a href=\"#开始学习\" class=\"headerlink\" title=\"开始学习\"></a>开始学习</h1><p><a href=\"http://www.tensorfly.cn/tfdoc/get_started/basic_usage.html\" target=\"_blank\" rel=\"noopener\">官方基础知识链接</a></p>\n<ul>\n<li>使用图 (graph) 来表示计算任务.</li>\n<li>在被称之为 <code>会话 (Session)</code> 的上下文 (context) 中执行图.</li>\n<li>使用 tensor 表示数据.</li>\n<li>通过 <code>变量 (Variable)</code> 维护状态.</li>\n<li>使用 feed 和 fetch 可以为任意的操作(arbitrary operation) 赋值或者从其中获取数据.</li>\n<li>图中的节点被称之为 <em>op</em> (operation 的缩写). 一个 op 获得 0 个或多个 <code>Tensor</code>, 执行计算,<br>产生 0 个或多个 <code>Tensor</code>. 每个 Tensor 是一个类型化的多维数组.</li>\n</ul>\n<h2 id=\"构建图（创造节点）\"><a href=\"#构建图（创造节点）\" class=\"headerlink\" title=\"构建图（创造节点）\"></a>构建图（创造节点）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个常量 op, 产生一个 1x2 矩阵. 这个 op 被作为一个节点</span></span><br><span class=\"line\"><span class=\"comment\"># 加到默认图中.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 构造器的返回值代表该常量 op 的返回值.</span></span><br><span class=\"line\">matrix1 = tf.constant([[<span class=\"number\">3.</span>, <span class=\"number\">3.</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建另外一个常量 op, 产生一个 2x1 矩阵.</span></span><br><span class=\"line\">matrix2 = tf.constant([[<span class=\"number\">2.</span>],[<span class=\"number\">2.</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个矩阵乘法 matmul op , 把 'matrix1' 和 'matrix2' 作为输入.</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值 'product' 代表矩阵乘法的结果.</span></span><br><span class=\"line\">product = tf.matmul(matrix1, matrix2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动图\"><a href=\"#启动图\" class=\"headerlink\" title=\"启动图\"></a>启动图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动默认图.</span></span><br><span class=\"line\">sess = tf.Session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用 sess 的 'run()' 方法来执行矩阵乘法 op, 传入 'product' 作为该方法的参数. </span></span><br><span class=\"line\"><span class=\"comment\"># 上面提到, 'product' 代表了矩阵乘法 op 的输出, 传入它是向方法表明, 我们希望取回</span></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘法 op 的输出.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 整个执行过程是自动化的, 会话负责传递 op 所需的全部输入. op 通常是并发执行的.</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># 函数调用 'run(product)' 触发了图中三个 op (两个常量 op 和一个矩阵乘法 op) 的执行.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值 'result' 是一个 numpy `ndarray` 对象.</span></span><br><span class=\"line\">result = sess.run(product)</span><br><span class=\"line\"><span class=\"keyword\">print</span> result</span><br><span class=\"line\"><span class=\"comment\"># ==&gt; [[ 12.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 任务完成, 关闭会话.</span></span><br><span class=\"line\">sess.close()</span><br></pre></td></tr></table></figure>\n<p>也可以：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">  result = sess.run([product])</span><br><span class=\"line\">  <span class=\"keyword\">print</span> result</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tensor\"><a href=\"#Tensor\" class=\"headerlink\" title=\"Tensor\"></a>Tensor</h2><p>TensorFlow 程序使用 tensor 数据结构来代表所有的数据, 计算图中, 操作间传递的数据都是 tensor.<br>可以把 TensorFlow tensor 看作是一个 n 维的数组或列表. 一个 tensor 包含一个静态类型 rank, 和<br>一个 shape. </p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量维护图执行过程中的状态信息。</p>\n<p>启动图后, 变量必须先经过<code>初始化</code> (init) op 初始化,</p>\n<p>必须增加一个<code>初始化</code> op 到图中：<code>init_op = tf.initialize_all_variables()</code></p>\n<p>启动图后首先运行 ‘init’ op：<code>sess.run(init_op)</code></p>\n<h2 id=\"Fetch\"><a href=\"#Fetch\" class=\"headerlink\" title=\"Fetch\"></a>Fetch</h2><p>为了取回操作的输出内容, 可以在使用 <code>Session</code> 对象的 <code>run()</code> 调用 执行图时, 传入一些 tensor来取回结果。</p>\n<h2 id=\"Feed\"><a href=\"#Feed\" class=\"headerlink\" title=\"Feed\"></a>Feed</h2><p>TensorFlow 还提供了 feed 机制, 该机制可以临时替代图中的任意操作中的 tensor,可以对图中任何操作提交补丁, 直接插入一个 tensor。</p>\n<p>最常见的用例是将某些特殊的操作指定为 “feed” 操作,标记的方法是使用 tf.placeholder() 为这些操作创建占位符. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input1 = tf.placeholder(tf.types.float32)</span><br><span class=\"line\">input2 = tf.placeholder(tf.types.float32)</span><br><span class=\"line\">output = tf.mul(input1, input2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">  <span class=\"keyword\">print</span> sess.run([output], feed_dict=&#123;input1:[<span class=\"number\">7.</span>], input2:[<span class=\"number\">2.</span>]&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>TensorFlow</strong>是一个采用<strong>数据流图（data flow graphs）</strong>，用于数值计算的开源软件库。</p>\n<p>下图就是一个<strong>数据流图</strong>。数据流图是一个用来描述数学计算的由<strong>“结点”（nodes）和“线”(edges)</strong>组成的<strong>有向图</strong>。</p>\n<p><strong>“节点”</strong> 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点或者是输出（push out）的终点，以及读取/写入持久变量（persistent variable）的终点。</p>\n<p><strong>“线”</strong>表示“节点”之间的输入/输出关系。这些数据“线”可以输运<strong>“张量”（tensor）</strong>，即大小可动态调整的多维数据数组。</p>\n<p>一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。</p>\n<p><img src=\"http://www.tensorfly.cn/images/tensors_flowing.gif\" alt=\"Tensors Flowing\"></p>\n<h1 id=\"开始学习\"><a href=\"#开始学习\" class=\"headerlink\" title=\"开始学习\"></a>开始学习</h1><p><a href=\"http://www.tensorfly.cn/tfdoc/get_started/basic_usage.html\" target=\"_blank\" rel=\"noopener\">官方基础知识链接</a></p>\n<ul>\n<li>使用图 (graph) 来表示计算任务.</li>\n<li>在被称之为 <code>会话 (Session)</code> 的上下文 (context) 中执行图.</li>\n<li>使用 tensor 表示数据.</li>\n<li>通过 <code>变量 (Variable)</code> 维护状态.</li>\n<li>使用 feed 和 fetch 可以为任意的操作(arbitrary operation) 赋值或者从其中获取数据.</li>\n<li>图中的节点被称之为 <em>op</em> (operation 的缩写). 一个 op 获得 0 个或多个 <code>Tensor</code>, 执行计算,<br>产生 0 个或多个 <code>Tensor</code>. 每个 Tensor 是一个类型化的多维数组.</li>\n</ul>\n<h2 id=\"构建图（创造节点）\"><a href=\"#构建图（创造节点）\" class=\"headerlink\" title=\"构建图（创造节点）\"></a>构建图（创造节点）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个常量 op, 产生一个 1x2 矩阵. 这个 op 被作为一个节点</span></span><br><span class=\"line\"><span class=\"comment\"># 加到默认图中.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 构造器的返回值代表该常量 op 的返回值.</span></span><br><span class=\"line\">matrix1 = tf.constant([[<span class=\"number\">3.</span>, <span class=\"number\">3.</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建另外一个常量 op, 产生一个 2x1 矩阵.</span></span><br><span class=\"line\">matrix2 = tf.constant([[<span class=\"number\">2.</span>],[<span class=\"number\">2.</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个矩阵乘法 matmul op , 把 'matrix1' 和 'matrix2' 作为输入.</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值 'product' 代表矩阵乘法的结果.</span></span><br><span class=\"line\">product = tf.matmul(matrix1, matrix2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动图\"><a href=\"#启动图\" class=\"headerlink\" title=\"启动图\"></a>启动图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动默认图.</span></span><br><span class=\"line\">sess = tf.Session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用 sess 的 'run()' 方法来执行矩阵乘法 op, 传入 'product' 作为该方法的参数. </span></span><br><span class=\"line\"><span class=\"comment\"># 上面提到, 'product' 代表了矩阵乘法 op 的输出, 传入它是向方法表明, 我们希望取回</span></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘法 op 的输出.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 整个执行过程是自动化的, 会话负责传递 op 所需的全部输入. op 通常是并发执行的.</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># 函数调用 'run(product)' 触发了图中三个 op (两个常量 op 和一个矩阵乘法 op) 的执行.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值 'result' 是一个 numpy `ndarray` 对象.</span></span><br><span class=\"line\">result = sess.run(product)</span><br><span class=\"line\"><span class=\"keyword\">print</span> result</span><br><span class=\"line\"><span class=\"comment\"># ==&gt; [[ 12.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 任务完成, 关闭会话.</span></span><br><span class=\"line\">sess.close()</span><br></pre></td></tr></table></figure>\n<p>也可以：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">  result = sess.run([product])</span><br><span class=\"line\">  <span class=\"keyword\">print</span> result</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tensor\"><a href=\"#Tensor\" class=\"headerlink\" title=\"Tensor\"></a>Tensor</h2><p>TensorFlow 程序使用 tensor 数据结构来代表所有的数据, 计算图中, 操作间传递的数据都是 tensor.<br>可以把 TensorFlow tensor 看作是一个 n 维的数组或列表. 一个 tensor 包含一个静态类型 rank, 和<br>一个 shape. </p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量维护图执行过程中的状态信息。</p>\n<p>启动图后, 变量必须先经过<code>初始化</code> (init) op 初始化,</p>\n<p>必须增加一个<code>初始化</code> op 到图中：<code>init_op = tf.initialize_all_variables()</code></p>\n<p>启动图后首先运行 ‘init’ op：<code>sess.run(init_op)</code></p>\n<h2 id=\"Fetch\"><a href=\"#Fetch\" class=\"headerlink\" title=\"Fetch\"></a>Fetch</h2><p>为了取回操作的输出内容, 可以在使用 <code>Session</code> 对象的 <code>run()</code> 调用 执行图时, 传入一些 tensor来取回结果。</p>\n<h2 id=\"Feed\"><a href=\"#Feed\" class=\"headerlink\" title=\"Feed\"></a>Feed</h2><p>TensorFlow 还提供了 feed 机制, 该机制可以临时替代图中的任意操作中的 tensor,可以对图中任何操作提交补丁, 直接插入一个 tensor。</p>\n<p>最常见的用例是将某些特殊的操作指定为 “feed” 操作,标记的方法是使用 tf.placeholder() 为这些操作创建占位符. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input1 = tf.placeholder(tf.types.float32)</span><br><span class=\"line\">input2 = tf.placeholder(tf.types.float32)</span><br><span class=\"line\">output = tf.mul(input1, input2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">  <span class=\"keyword\">print</span> sess.run([output], feed_dict=&#123;input1:[<span class=\"number\">7.</span>], input2:[<span class=\"number\">2.</span>]&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"TensorFlow训练MNIST报错ResourceExhaustedError","date":"2018-04-01T04:35:44.000Z","_content":"\n\n\n在最后测试的一步报错：\n\n```shell\nResourceExhaustedError (see above for traceback): OOM when allocating tensor\n```\n\n搜索了一下才知道是GPU显存不足（emmmm....）造成的，可以把最后测试的那行代码改为将测试集分成几个小部分分别测试最后再求精度的平均值：\n\n```python\naccuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))\ngood = 0\ntotal = 0\nfor i in range(10):\n    testSet = mnist.test.next_batch(50)\n    good += accuracy_sum.eval(feed_dict={ x: testSet[0], y_: testSet[1], keep_prob: 1.0})\n    total += testSet[0].shape[0]\nprint (\"test accuracy %g\"%(good/total))\n```\n\n","source":"_posts/TensorFlow训练MNIST报错ResourceExhaustedError.md","raw":"---\ntitle: TensorFlow训练MNIST报错ResourceExhaustedError\ndate: 2018-04-01 12:35:44\ncategories: \n- deep learning\ntags:\n- MNIST\n- TensorFlow\n---\n\n\n\n在最后测试的一步报错：\n\n```shell\nResourceExhaustedError (see above for traceback): OOM when allocating tensor\n```\n\n搜索了一下才知道是GPU显存不足（emmmm....）造成的，可以把最后测试的那行代码改为将测试集分成几个小部分分别测试最后再求精度的平均值：\n\n```python\naccuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))\ngood = 0\ntotal = 0\nfor i in range(10):\n    testSet = mnist.test.next_batch(50)\n    good += accuracy_sum.eval(feed_dict={ x: testSet[0], y_: testSet[1], keep_prob: 1.0})\n    total += testSet[0].shape[0]\nprint (\"test accuracy %g\"%(good/total))\n```\n\n","slug":"TensorFlow训练MNIST报错ResourceExhaustedError","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtys00077bagvgfoj28e","content":"<p>在最后测试的一步报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResourceExhaustedError (see above for traceback): OOM when allocating tensor</span><br></pre></td></tr></table></figure>\n<p>搜索了一下才知道是GPU显存不足（emmmm….）造成的，可以把最后测试的那行代码改为将测试集分成几个小部分分别测试最后再求精度的平均值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))</span><br><span class=\"line\">good = <span class=\"number\">0</span></span><br><span class=\"line\">total = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    testSet = mnist.test.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">    good += accuracy_sum.eval(feed_dict=&#123; x: testSet[<span class=\"number\">0</span>], y_: testSet[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">    total += testSet[<span class=\"number\">0</span>].shape[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"test accuracy %g\"</span>%(good/total))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在最后测试的一步报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResourceExhaustedError (see above for traceback): OOM when allocating tensor</span><br></pre></td></tr></table></figure>\n<p>搜索了一下才知道是GPU显存不足（emmmm….）造成的，可以把最后测试的那行代码改为将测试集分成几个小部分分别测试最后再求精度的平均值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))</span><br><span class=\"line\">good = <span class=\"number\">0</span></span><br><span class=\"line\">total = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    testSet = mnist.test.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">    good += accuracy_sum.eval(feed_dict=&#123; x: testSet[<span class=\"number\">0</span>], y_: testSet[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">    total += testSet[<span class=\"number\">0</span>].shape[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"test accuracy %g\"</span>%(good/total))</span><br></pre></td></tr></table></figure>\n"},{"title":"hexo创建的tags和categories页面为空的解决办法","toc":false,"date":"2018-04-15T18:26:10.000Z","_content":"\n\n\n主题：landscape\n\n添加type以及menu后仍然显示空白的解决办法：\n\n打开landscape/_partial/article.ejs，\n\n在`<div class=\"article-entry\" itemprop=\"articleBody\">`的div内添加：\n\n```ejs\n<% if (page.type === \"tags\") { %>\n  <div class=\"tag-cloud\">\n    <div class=\"tag-cloud-title\">\n    <%- \"TOTAl : \" + site.tags.length %>\n    </div>\n\n    <div class=\"tag-cloud-tags\">\n    <%- tagcloud({\n      min_font: 12,\n      max_font: 30,\n      amount: 200,\n      color: true,\n      start_color: '#555',\n      end_color: '#111'\n      }) %>\n    </div>\n  </div>\n\n  <% } else if (page.type === 'categories') { %>\n\n  <div class=\"category-all-page\">\n    <div class=\"category-all-title\">\n    <%- \"TOTAL : \" + site.categories.length %>\n    </div>\n\n    <div class=\"category-all\">\n    <%- list_categories() %>\n    </div>\n\n  </div>\n<% } %>\n```\n\n重新打开即可看到正常显示的标签和分类页。\n\n\n\n修改categories页面样式（也可以自己设计修改）：\n\n打开landscape/source/css/_partial/article.styl，在尾部添加：\n\n```css\n.category-all-page {\n  a:link {\n    font-size: 14px;\n    color: #333;\n    text-decoration: none;\n  }\n  a:hover {\n    font-size: 14px;\n    color: #d8d;\n    text-decoration: none;\n    font-weight: bold;\n  }\n  .category-all-title { text-align: left; }\n\n  .category-all { \n    margin-top: 20px; \n  }\n\n  .category-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  .category-list-item { \n    text-align: center;\n    display: inline-block;\n    margin: 8px; \n    padding: 8px;\n    width: 150px;\n    position: relative;\n    background-color: rgba(237, 237, 237, 0.53);\n    border-radius: 1px;\n    box-shadow:0px 0px  0px 1px #ccc;\n  }\n\n  .category-list-link {\n  \tcolor: #333;\n  }\n\n  .category-list-count {\n    color: #333;\n    &:before {\n      display: inline;\n      content: \" (\"\n    }\n    &:after {\n      display: inline;\n      content: \") \"\n    }\n  }\n\n  .category-list-child { padding-left: 10px; color: #333;}\n}\n\n\n```\n\n","source":"_posts/hexo创建的tags和categories页面为空的解决办法.md","raw":"---\ntitle: hexo创建的tags和categories页面为空的解决办法\ntoc: false\ndate: 2018-04-16 02:26:10\ncategories:\n- methods\ntags:\n- hexo\n---\n\n\n\n主题：landscape\n\n添加type以及menu后仍然显示空白的解决办法：\n\n打开landscape/_partial/article.ejs，\n\n在`<div class=\"article-entry\" itemprop=\"articleBody\">`的div内添加：\n\n```ejs\n<% if (page.type === \"tags\") { %>\n  <div class=\"tag-cloud\">\n    <div class=\"tag-cloud-title\">\n    <%- \"TOTAl : \" + site.tags.length %>\n    </div>\n\n    <div class=\"tag-cloud-tags\">\n    <%- tagcloud({\n      min_font: 12,\n      max_font: 30,\n      amount: 200,\n      color: true,\n      start_color: '#555',\n      end_color: '#111'\n      }) %>\n    </div>\n  </div>\n\n  <% } else if (page.type === 'categories') { %>\n\n  <div class=\"category-all-page\">\n    <div class=\"category-all-title\">\n    <%- \"TOTAL : \" + site.categories.length %>\n    </div>\n\n    <div class=\"category-all\">\n    <%- list_categories() %>\n    </div>\n\n  </div>\n<% } %>\n```\n\n重新打开即可看到正常显示的标签和分类页。\n\n\n\n修改categories页面样式（也可以自己设计修改）：\n\n打开landscape/source/css/_partial/article.styl，在尾部添加：\n\n```css\n.category-all-page {\n  a:link {\n    font-size: 14px;\n    color: #333;\n    text-decoration: none;\n  }\n  a:hover {\n    font-size: 14px;\n    color: #d8d;\n    text-decoration: none;\n    font-weight: bold;\n  }\n  .category-all-title { text-align: left; }\n\n  .category-all { \n    margin-top: 20px; \n  }\n\n  .category-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  .category-list-item { \n    text-align: center;\n    display: inline-block;\n    margin: 8px; \n    padding: 8px;\n    width: 150px;\n    position: relative;\n    background-color: rgba(237, 237, 237, 0.53);\n    border-radius: 1px;\n    box-shadow:0px 0px  0px 1px #ccc;\n  }\n\n  .category-list-link {\n  \tcolor: #333;\n  }\n\n  .category-list-count {\n    color: #333;\n    &:before {\n      display: inline;\n      content: \" (\"\n    }\n    &:after {\n      display: inline;\n      content: \") \"\n    }\n  }\n\n  .category-list-child { padding-left: 10px; color: #333;}\n}\n\n\n```\n\n","slug":"hexo创建的tags和categories页面为空的解决办法","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtyw000b7bagvfq4usnh","content":"<p>主题：landscape</p>\n<p>添加type以及menu后仍然显示空白的解决办法：</p>\n<p>打开landscape/_partial/article.ejs，</p>\n<p>在<code>&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</code>的div内添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (page.type === &quot;tags&quot;) &#123; %&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tag-cloud&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;tag-cloud-title&quot;&gt;</span><br><span class=\"line\">    &lt;%- &quot;TOTAl : &quot; + site.tags.length %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;tag-cloud-tags&quot;&gt;</span><br><span class=\"line\">    &lt;%- tagcloud(&#123;</span><br><span class=\"line\">      min_font: 12,</span><br><span class=\"line\">      max_font: 30,</span><br><span class=\"line\">      amount: 200,</span><br><span class=\"line\">      color: true,</span><br><span class=\"line\">      start_color: &apos;#555&apos;,</span><br><span class=\"line\">      end_color: &apos;#111&apos;</span><br><span class=\"line\">      &#125;) %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% &#125; else if (page.type === &apos;categories&apos;) &#123; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div class=&quot;category-all-page&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;category-all-title&quot;&gt;</span><br><span class=\"line\">    &lt;%- &quot;TOTAL : &quot; + site.categories.length %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;category-all&quot;&gt;</span><br><span class=\"line\">    &lt;%- list_categories() %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>重新打开即可看到正常显示的标签和分类页。</p>\n<p>修改categories页面样式（也可以自己设计修改）：</p>\n<p>打开landscape/source/css/_partial/article.styl，在尾部添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.category-all-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">a</span>:link &#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#d8d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.category-all-title</span> &#123; <span class=\"attribute\">text-align</span>: left; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-all</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-item</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">8px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(237, 237, 237, 0.53);</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>:<span class=\"number\">0px</span> <span class=\"number\">0px</span>  <span class=\"number\">0px</span> <span class=\"number\">1px</span> <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-link</span> &#123;</span><br><span class=\"line\">  \t<span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-count</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">inline</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">content</span>: \" (\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;<span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">      <span class=\"attribute\">content</span>: <span class=\"string\">\") \"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-child</span> &#123; <span class=\"attribute\">padding-left</span>: <span class=\"number\">10px</span>; <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>主题：landscape</p>\n<p>添加type以及menu后仍然显示空白的解决办法：</p>\n<p>打开landscape/_partial/article.ejs，</p>\n<p>在<code>&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</code>的div内添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (page.type === &quot;tags&quot;) &#123; %&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tag-cloud&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;tag-cloud-title&quot;&gt;</span><br><span class=\"line\">    &lt;%- &quot;TOTAl : &quot; + site.tags.length %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;tag-cloud-tags&quot;&gt;</span><br><span class=\"line\">    &lt;%- tagcloud(&#123;</span><br><span class=\"line\">      min_font: 12,</span><br><span class=\"line\">      max_font: 30,</span><br><span class=\"line\">      amount: 200,</span><br><span class=\"line\">      color: true,</span><br><span class=\"line\">      start_color: &apos;#555&apos;,</span><br><span class=\"line\">      end_color: &apos;#111&apos;</span><br><span class=\"line\">      &#125;) %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% &#125; else if (page.type === &apos;categories&apos;) &#123; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div class=&quot;category-all-page&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;category-all-title&quot;&gt;</span><br><span class=\"line\">    &lt;%- &quot;TOTAL : &quot; + site.categories.length %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;category-all&quot;&gt;</span><br><span class=\"line\">    &lt;%- list_categories() %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>重新打开即可看到正常显示的标签和分类页。</p>\n<p>修改categories页面样式（也可以自己设计修改）：</p>\n<p>打开landscape/source/css/_partial/article.styl，在尾部添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.category-all-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">a</span>:link &#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#d8d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.category-all-title</span> &#123; <span class=\"attribute\">text-align</span>: left; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-all</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-item</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">8px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(237, 237, 237, 0.53);</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>:<span class=\"number\">0px</span> <span class=\"number\">0px</span>  <span class=\"number\">0px</span> <span class=\"number\">1px</span> <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-link</span> &#123;</span><br><span class=\"line\">  \t<span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-count</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">inline</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">content</span>: \" (\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;<span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">      <span class=\"attribute\">content</span>: <span class=\"string\">\") \"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-child</span> &#123; <span class=\"attribute\">padding-left</span>: <span class=\"number\">10px</span>; <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"PAT刷题记录","toc":true,"date":"2018-07-19T14:54:17.000Z","_content":"\n\n\nOJ：[牛客网](https://www.nowcoder.com/pat)\n\n---\n\n\n\n## 1001 A+B Format (20)\n\n**题目描述**\n\n> Calculate a + b and output the sum in standard format -- that is, the digits must be separated into groups of three by commas (unless there are less than four digits).\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a pair of integers a and b where -1000000 <= a, b <= 1000000.  The numbers are separated by a space.\n\n**输出描述**\n\n> For each test case, you should output the sum of a and b in one line.  The sum must be written in the standard format.\n\n**输入例子**\n\n> -1000000 9\n\n**输出例子**\n\n> -999,991\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int digit[10];\n    for (int i = 0; i < 10; i++) digit[i] = -1;\n    int a,b,re;\n    cin >> a >> b;\n    re = a + b;\n    if (re < 0) {\n        cout<<'-';\n        re = -re;\n    }\n    int i = 0;\n    while(re) {\n        digit[i] = (re%10);\n        re/=10;\n        i++;\n    }\n    for (int k = i-1; k >=0; k--) {\n        cout<<digit[k];\n        if (k%3 == 0 && k>0) cout<<',';\n    }\n    return 0;\n}\n```\n\n\n\n## 1002 A+B for Polynomials (25)\n\n**题目描述**\n\n> This time, you are supposed to find A+B where A and B are two polynomials.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:\n> K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively.  It is given that 1 <= K <= 10，0 <= NK < ... < N2 < N1 <=1000.\n\n**输出描述**\n\n> For each test case you should output the sum of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  **Please be accurate to 1 decimal place.**\n\n**输入例子**\n\n> 2 1 2.4 0 3.2\n> 2 2 1.5 1 0.5\n\n**输出例子**\n\n> 3 2 1.5 1 2.9 0 3.2\n\n**实现代码**\n\n注意保留小数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\nstruct item\n{\n\tint n;\n\tfloat value;\n\titem(int a, float b) {n=a,value=b;}\n};\n\nint main() {\n\tvector<item> polynomials;\n\tint k;\n\n\tcin>>k;\n\tint tmp_n;\n\tfloat tmp_value;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tpolynomials.push_back(item(tmp_n,tmp_value));\n\t}\n\n\tcin>>k;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tbool hasItem = false;\n\t\tfor (int i = 0; i < polynomials.size(); i++) {\n\t\t\tif (polynomials[i].n == tmp_n) {\n\t\t\t\thasItem = true;\n\t\t\t\tpolynomials[i].value+=tmp_value;\n\t\t\t\tif (polynomials[i].value == 0)\n\t\t\t\t\tpolynomials.erase(polynomials.begin()+i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\t\n\t\tif (!hasItem) polynomials.push_back(item(tmp_n,tmp_value));\t\n\t}\n\n\tfor (int k = 0; k < polynomials.size(); k++) {\n\t\tfor (int i = 0; i < polynomials.size()-1; i++) {\n\t\t\tif (polynomials[i].n < polynomials[i+1].n) {\n\t\t\t\titem tmp_item = polynomials[i];\n\t\t\t\tpolynomials[i] = polynomials[i+1];\n\t\t\t\tpolynomials[i+1] = tmp_item;\n\t\t\t}\n\t\t}\n\t}\n\n\tcout<<polynomials.size();\n\tfor (int i = 0; i < polynomials.size(); i++)\n\t\tprintf(\" %d %.1f\", polynomials[i].n, polynomials[i].value);\n\n\treturn 0;\n}\n```\n\n\n\n## 1003 Emergency (25)\n\n**题目描述**\n\n> As an emergency rescue team leader of a city, you are given a special map of your country.  The map shows several scattered cities connected by some roads.  Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map.  When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.\n\n**输入描述**\n\n> Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (<= 500) - the number of cities (and the cities are numbered from 0 to N-1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively.  The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city.  Then M lines follow, each describes a road with three integers c1, c2 and L, which are the pair of cities connected by a road and the length of that road, respectively.  \n> It is guaranteed that there exists at least one path from C1 to C2.\n\n**输出描述**\n\n> For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2, and the maximum amount of rescue teams you can possibly gather.\n>\n> All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.\n\n**输入例子**\n\n> 5 6 0 2\n> 1 2 1 5 3\n> 0 1 1\n> 0 2 2\n> 0 3 1\n> 1 2 1\n> 2 4 1\n> 3 4 1\n\n**输出例子**\n\n> 2 4\n\n**实现代码**\n\ndijkstra最短路\n\n```c++\n#include <iostream>\n#include <vector>\n#include <climits>\nusing namespace std;\n\nstruct road\n{\n\tint endCity;\n\tint length;\n\troad(int e, int l) {endCity = e, length = l;}\n};\n\n\nint main() {\n\tint n,m,c1,c2;\n\tcin>>n>>m>>c1>>c2;\n\tvector<int> teamsCount;\n\n\tint tmp1,tmp2,tmp3;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>tmp1;\n\t\tteamsCount.push_back(tmp1);\n\t}\n\n\tvector<vector<road> > roads(n);\n\tfor (int i = 0; i < m; i++) {\n\t\tcin>>tmp1>>tmp2>>tmp3;\n\t\troads[tmp1].push_back(road(tmp2,tmp3));\n\t\troads[tmp2].push_back(road(tmp1,tmp3));\n\t}\n\n\tvector<int> maxTeams(n);\n\tfor (int i = 0; i < n; i++) maxTeams[i] = 0;\n\tmaxTeams[c1] = teamsCount[c1];\n\n\tvector<int> minLen(n);\n\tfor (int i = 0; i < n; i++) minLen[i] = INT_MAX;\n\tminLen[c1] = 0;\n\n\tint currentCity = c1;\n\tvector<int> minLenRoadCount(n);\n\tfor (int i = 0; i < n; i++) minLenRoadCount[i] = 1;\n\n\tvector<bool> visited(n);\n\tfor (int i = 0; i < n; i++) visited[i] = false;\n\tvisited[c1] = true;\n\twhile (currentCity != c2) {\n\t\tint len = roads[currentCity].size();\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tif (visited[roads[currentCity][i].endCity]) continue;\n\t\t\tint endCity = roads[currentCity][i].endCity;\n\t\t\tint length = roads[currentCity][i].length;\n\t\t\tif (minLen[endCity] > minLen[currentCity] + length) {\n\t\t\t\tminLen[endCity] = minLen[currentCity] + length;\n\t\t\t\tminLenRoadCount[endCity] = 1;\n\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];\n\t\t\t} else if (minLen[endCity] == minLen[currentCity] + length) {\n\t\t\t\tminLenRoadCount[endCity]++;\n\t\t\t\tif (maxTeams[endCity] < maxTeams[currentCity] + teamsCount[endCity])\n\t\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];\n\t\t\t}\n\t\t}\n\n\t\tint min = INT_MAX;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (visited[i]) continue;\n\t\t\tif (minLen[i] < min) {\n\t\t\t\tmin = minLen[i];\n\t\t\t\tcurrentCity = i;\n\t\t\t}\n\t\t}\n\t\tvisited[currentCity] = true;\n\t}\n\n\tcout<<minLenRoadCount[c2]<<' '<<maxTeams[c2];\n\n\treturn 0;\n}\n```\n\n\n\n## 1004 Counting Leaves (30)\n\n**题目描述**\n\n> A family hierarchy is usually presented by a pedigree tree.  Your job is to count those family members who have no child.\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a line containing 0 < N < 100, the number of nodes in a tree, and M (< N), the number of non-leaf nodes.  Then M lines follow, each in the format:\n>\n> ID K ID[1] ID[2] ... ID[K]\n>\n> where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID's of its children.  For the sake of simplicity, let us fix the root ID to be 01.\n\n**输出描述**\n\n> For each test case, you are supposed to count those family members who have no child **for every seniority level** starting from the root.  The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.\n> The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child.  Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node.  Then we should output \"0 1\" in a line.\n\n**输入例子**\n\n> 2 1\n> 01 1 02\n\n**输出例子**\n\n> 0 1\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\n#define MAX_NODES 100\n\nstruct node\n{\n\tint id = -1;\n\tint childs_count = 0;\n\tvector<int> childs;\n};\n\nint main() {\n\tint n,m;\n\tcin>>n>>m;\n\tnode nodes[MAX_NODES];\n\n\tint id,k,tmp;\n\twhile (m--) {\n\t\tcin>>id>>k;\n\t\tnodes[id].id = id;\n\t\tnodes[id].childs_count = k;\n\t\twhile (k--) {\n\t\t\tcin>>tmp;\n\t\t\t(nodes[id].childs).push_back(tmp);\n\t\t}\n\t}\n\n\tvector<int> this_level, next_level;\n\tthis_level.push_back(1);\n\twhile (1) {\n\t\tint count_output = 0;\n\t\tfor (int i = 0; i < this_level.size(); i++) {\n\t\t\tif (nodes[this_level[i]].childs_count == 0) count_output++;\n\t\t\telse next_level.insert(next_level.begin(),nodes[this_level[i]].childs.begin(),nodes[this_level[i]].childs.end());\n\t\t}\n\t\tcout<<count_output;\n\t\tif (next_level.empty()) break;\n\t\tcout<<' ';\n\t\tthis_level = next_level;\n\t\tnext_level.clear();\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1005 Spell It Right (20)\n\n**题目描述**\n\n> Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies one line which contains an N (<= 10^100).\n\n**输出描述**\n\n> For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.\n\n**输入例子**\n\n> 12345\n\n**输出例子**\n\n> one five\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string n;\n    cin>>n;\n    int len = n.size();\n    int re = 0;\n    for (int i = 0; i < len; i++) re+=(n[i]-'0');\n    string english[10] = {\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\"};\n    int digit[100], re_len = 0;\n    while (re) {\n        digit[re_len] = (re%10);\n        re/=10;\n        re_len++;\n    }\n    for (int i = re_len-1; i >= 0; i--) {\n        cout<<english[digit[i]];\n        if (i != 0) cout<<' ';\n    }\n    return 0;\n}\n```\n\n\n\n## 1006 Sign In and Sign Out (25)\n\n**题目描述**\n\n> At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door.  Given the records of signing in's and out's, you are supposed to find the ones who have unlocked and locked the door on that day.\n\n**输入描述**\n\n> Each input file contains one test case. Each case contains the records for one day.  The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:\n>\n> ID_number Sign_in_time Sign_out_time\n>\n> where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.\n\n**输出描述**\n\n> For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day.  The two ID numbers must be separated by one space.\n> Note:  It is guaranteed that the records are consistent.  That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.\n\n**输入例子**\n\n> 3\n> CS301111 15:30:28 17:00:10\n> SC3021234 08:00:00 11:25:25\n> CS301133 21:45:00 21:58:40\n\n**输出例子**\n\n> SC3021234 CS301133\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <string>\nusing namespace std;\n\nbool a_larger_than_b(string a, string b) {\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] < b[i]) return false;\n        if (a[i] > b[i]) return true;\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    cin>>n;\n    string id,in,out;\n    string result_in_id, result_in_time, result_out_id, result_out_time;\n    cin>>id>>in>>out;\n    result_in_id = result_out_id = id;\n    result_in_time = in;\n    result_out_time = out;\n    n--;\n    while (n--) {\n        cin>>id>>in>>out;\n        if (a_larger_than_b(result_in_time,in)) {\n            result_in_id = id;\n            result_in_time = in;\n        }\n        if (a_larger_than_b(out,result_out_time)) {\n            result_out_id = id;\n            result_out_time = out;\n        }\n    }\n    cout<<result_in_id<<' '<<result_out_id;\n    return 0;\n}\n```\n\n\n\n## 1007 Maximum Subsequence Sum (25)\n\n**题目描述**\n\n> Given a sequence of K integers { N1\n> , N2\n> , ..., NK\n>  }.  A continuous subsequence is defined to be { Ni\n> , Ni+1\n> , ..., Nj\n>  } where 1 <= i <= j <= K.  The *Maximum Subsequence*\n>  is the continuous subsequence which has the largest sum of its\n> elements.  For example, given sequence { -2, 11, -4, 13, -5, -2 }, its\n> maximum subsequence is { 11, -4, 13 } with the largest sum being 20.\n>\n> Now you are supposed to find the largest sum, together with the first\n> and the last numbers of the maximum subsequence.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies two lines.  The first line contains a positive integer K (<= 10000).  The second line contains K numbers, separated by a space.\n\n**输出描述**\n\n> For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line.  In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case).  If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.\n\n**输入例子**\n\n> 10\n> -10 1 2 3 4 -5 -23 3 7 -21\n\n**输出例子**\n\n> 10 1 4\n\n**实现代码**\n\n<u>和为负的子序列一定不会是最大和子序列的开头。</u>\n\n当当前和小于0时，使用临时\"first number\"记录下一个数，\n\n更新最大和时，当前数为“last number”， 临时“first number”中存储的值为“first number”的值。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nint main() {\n\tint n;\n\tcin>>n;\n\tint* nums = new int[n];\n\tbool allNegative = true;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>nums[i];\n\t\tif (nums[i] >= 0) allNegative = false;\n\t}\n\n\tif (allNegative) {\n\t\tcout<<0<<' '<<nums[0]<<' '<<nums[n-1];\n\t} else {\n\t\tint maxSum = 0, currentSum = 0;\n\t\tint firstNum = nums[0], lastNum = nums[0];\n\t\tint firstNumCurrent = firstNum;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcurrentSum+=nums[i];\n\t\t\tif (currentSum < 0) {\n\t\t\t\tcurrentSum = 0;\n\t\t\t\tfirstNumCurrent = nums[i+1];\n\t\t\t} else if (currentSum > maxSum) {\n\t\t\t\tmaxSum = currentSum;\n\t\t\t\tfirstNum = firstNumCurrent;\n\t\t\t\tlastNum = nums[i];\n\t\t\t}\n\t\t}\n\t\tcout<<maxSum<<' '<<firstNum<<' '<<lastNum;\n\t}\n\n\tdelete nums;\n\n\treturn 0;\n}\n```\n\n\n\n## 1008 Elevator (20)\n\n**题目描述**\n\n> The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.\n> For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.\n\n**输入描述**\n\n> Each input file contains one test case. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100.\n\n**输出描述**\n\n> For each test case, print the total time on a single line.\n\n**输入例子**\n\n> 3 2 3 1\n\n**输出例子**\n\n> 41\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 0, b, n, re = 0;\n    cin >> n;\n    while (n--) {\n        cin >> b;\n        if (b > a) {\n            re+=((b-a)*6);\n        } else {\n            re+=((a-b)*4);\n        }\n        re+=5;\n        a = b;\n    }\n    cout<<re;\n    return 0;\n}\n```\n\n\n\n## 1009 Product of Polynomials (25)\n\n**题目描述**\n\n> This time, you are supposed to find A*B where A and B are two polynomials.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:\n> K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively.  It is given that 1 <= K <= 10, 0 <= NK < ... < N2 < N1 <=1000.\n\n**输出描述**\n\n> For each test case you should output the product of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  Please be accurate up to 1 decimal place.\n\n**输入例子**\n\n> 2 1 2.4 0 3.2\n> 2 2 1.5 1 0.5\n\n**输出例子**\n\n> 3 3 3.6 2 6.0 1 1.6\n\n**实现代码**\n\n把[1002 A+B for Polynomials (25)](#1002-A-B-for-Polynomials-25)稍微改一下就好。\n\n使用`float`虽然算出来明明是对的但是过不了牛客的测试，全部换成`double`就好了，不知道是什么问题。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\nstruct item\n{\n\tint n;\n\tdouble value;\n\titem(int a, double b) {n=a,value=b;}\n};\n\nint main() {\n\tvector<item> polynomials, result;\n\tint k;\n\n\tcin>>k;\n\tint tmp_n;\n\tdouble tmp_value;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tpolynomials.push_back(item(tmp_n,tmp_value));\n\t}\n\n\tcin>>k;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tfor (int k = 0; k < polynomials.size(); k++) {\n\t\t\tbool hasItem = false;\n\t\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\t\tif (result[i].n == tmp_n+polynomials[k].n) {\n\t\t\t\t\thasItem = true;\n\t\t\t\t\tresult[i].value+=(tmp_value*polynomials[k].value);\n\t\t\t\t\tif (result[i].value == 0)\n\t\t\t\t\t\tresult.erase(result.begin()+i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\tif (!hasItem) result.push_back(item(tmp_n+polynomials[k].n,tmp_value*polynomials[k].value));\n\t\t}\n\t}\n\n\tfor (int k = 0; k < result.size(); k++) {\n\t\tfor (int i = 0; i < result.size()-1; i++) {\n\t\t\tif (result[i].n < result[i+1].n) {\n\t\t\t\titem tmp_item = result[i];\n\t\t\t\tresult[i] = result[i+1];\n\t\t\t\tresult[i+1] = tmp_item;\n\t\t\t}\n\t\t}\n\t}\n\n\tcout<<result.size();\n\tfor (int i = 0; i < result.size(); i++)\n\t\tprintf(\" %d %.1f\", result[i].n, result[i].value);\n\n\treturn 0;\n}\n```\n\n\n\n## 1015 Reversible Primes (20)\n\n**题目描述**\n\n> A *reversible prime*\n>  in any number system is a prime whose \"reverse\" in that\n> number system is also a prime. For example in the decimal system 73 is a\n> reversible prime because its reverse 37 is also a prime.\n>\n> \n>\n> Now given any two positive integers N (< 105\n> ) and D (1 < D <= 10), you are supposed to tell if N is a\n> reversible prime with radix D.\n\n**输入描述**\n\n> The input file consists of several test cases.  Each case occupies a line which contains two integers N and D.  The input is finished by a negative N.\n\n**输出描述**\n\n> For each test case, print in one line \"Yes\" if N is a reversible prime with radix D, or \"No\" if not.\n\n**输入例子**\n\n> 73 10\n> 23 2\n> 23 10\n> -2\n\n**输出例子**\n\n> Yes\n> Yes\n> No\n\n**实现代码**\n\n求N以及N在D进制下反转后是否均为质数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint reverseWithRadix(int n, int d) {\n\tvector<int> remainers;\n\twhile (n > 0) {\n\t\tremainers.push_back(n%d);\n\t\tn/=d;\n\t}\n\tint re = 0;\n\tint bit_count = remainers.size();\n\tfor (int i = 0; i < bit_count; i++)\n\t\tre+=(pow(d,bit_count-i-1)*remainers[i]);\n\treturn re;\n}\n\nbool isPrime(int n) {\n\tif (n == 1) return false;\n\tif (n < 4) return true;\n\tif (n % 2 == 0) return false;\n\tint sqrt_n = sqrt(n) + 1;\n\tfor (int i = 3; i <= sqrt_n; i+=2) {\n\t\tif (n % i == 0) return false;\n\t}\n\treturn true;\n}\n\nint main() {\n\tint n,d;\n\twhile (1) {\n\t\tcin>>n;\n\t\tif (n < 0) break;\n\t\tcin>>d;\n\t\tif (isPrime(n) && isPrime(reverseWithRadix(n,d))) cout<<\"Yes\"<<endl;\n\t\telse cout<<\"No\"<<endl;\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n## 1020 Tree Traversals (25)\n\n**题目描述**\n\n> Suppose that all the keys in a binary tree are distinct positive integers.  Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line gives a positive integer N (<=30), the total number of nodes in the binary tree.  The second line gives the **postorder** sequence and the third line gives the **inorder** sequence.  All the numbers in a line are separated by a space.\n\n**输出描述**\n\n> For each test case, print in one line the level order traversal sequence of the corresponding binary tree.  All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> 7\n> 2 3 1 5 7 6 4\n> 1 2 3 4 5 6 7\n\n**输出例子**\n\n> 4 1 6 3 5 7 2\n\npostorder: 后序遍历\n\ninorder: 中序遍历\n\nlevel order: 层序遍历（从根开始,依次向下,对于每一层从左向右遍历）\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nstruct node\n{\n\tnode* left;\n\tnode* right;\n\tint value;\n};\n\n\nnode* binaryTreeRoot(int* postorder, int* inorder, int len) {\n\tif (len <= 0) return NULL;\n\n\tnode* root = new node;\n\troot->value = *(postorder+len-1);\n\n\tint pos = 0;\n\tfor (; pos < len; pos++)\n\t\tif (*(inorder+pos) == root->value) break;\n\n\troot->left = binaryTreeRoot(postorder, inorder, pos);\n\tint rightLen = len - pos - 1;\n\troot->right = binaryTreeRoot(postorder+pos, inorder+pos+1, rightLen);\n\n\treturn root;\n}\n\nvoid deleteNodes(node* root) {\n\tif (root == NULL) return;\n\tdeleteNodes(root->left);\n\tdeleteNodes(root->right);\n\tdelete root;\n}\n\nint main() {\n\tint n;\n\tcin>>n;\n\tint* postorderNodes = new int[n];\n\tint* inorderNodes = new int[n];\n\tfor (int i = 0; i < n; i++) cin>>postorderNodes[i];\n\tfor (int i = 0; i < n; i++) cin>>inorderNodes[i];\n\n\tnode* root = binaryTreeRoot(postorderNodes, inorderNodes, n);\n\tif (!root) return 0;\n\n\tqueue<node*> levelNodes;\n\tlevelNodes.push(root);\n\twhile (1) {\n\t\tnode* tmp = levelNodes.front();\n\t\tif (tmp->left) levelNodes.push(tmp->left);\n\t\tif (tmp->right) levelNodes.push(tmp->right);\n\t\tcout<<tmp->value;\n\t\tlevelNodes.pop();\n\t\tif (!levelNodes.empty()) cout<<' ';\n\t\telse break;\n\t}\n\n\tdeleteNodes(root);\n\tdelete postorderNodes;\n\tdelete inorderNodes;\n\n\treturn 0;\n}\n```\n\n\n\n## 1023 Have Fun with Numbers (20)\n\n**题目描述**\n\n> Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication.  Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation.  Check to see the result if we double it again!\n>\n> Now you are suppose to check if there are more numbers with this property.  That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains one positive integer with no more than 20 digits.\n\n**输出描述**\n\n> For each test case, first print in a line \"Yes\" if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or \"No\" if not.  Then in the next line, print the doubled number.\n\n**输入例子**\n\n> 1234567899\n\n**输出例子**\n\n> Yes\n> 2469135798\n\n**实现代码**\n\n若双倍后多一位则为No;\n\n使用`digit_count[i]`保存数字`i`（0-9）的个数，\n\n再减去双倍后各个数字的个数，若每一个`digit_count[i]`均为0则为Yes,否则为No。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\n#include <stack>\n#include <climits>\nusing namespace std;\n\n\n\nint main() {\n\tint digit_count[10];\n\tfor (int i = 0; i < 10; i++) digit_count[i] = 0;\n\tstring s;\n\tcin>>s;\n\tint k = s.size();\n\tvector<int> digits;\n\tfor (int i = 0; i < k; i++) {\n\t\tint digit = s[i]-'0';\n\t\tdigits.push_back(digit);\n\t\tdigit_count[digit]++;\n\t}\n\tint carry = 0;\n\tfor (int i = k-1; i >= 0; i--) {\n\t\tdigits[i] = 2*digits[i] + carry;\n\t\tcarry = digits[i] / 10;\n\t\tdigits[i] %= 10;\n\t\tdigit_count[digits[i]]--;\n\t}\n\tif (carry) {\n\t\tcout<<\"No\\n\"<<carry;\n\t\tfor (int i = 0; i < k; i++) cout<<digits[i];\n\t\treturn 0;\n\t}\n\tbool result = true;\n\tfor (int i = 0; i < 10; i++)\n\t\tif (digit_count[i] != 0) {\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\tif (result) cout<<\"Yes\\n\";\n\telse cout<<\"No\\n\";\n\tfor (int i = 0; i < k; i++) cout<<digits[i];\n\n\treturn 0;\n}\n\n```\n\n\n\n\n\n## 1027 Colors in Mars (20)\n\n**题目描述**\n\n> People in Mars represent the colors in their computers in a similar way as the Earth people.  That is, a color is represented by a 6-digit number, where the first 2 digits are for Red, the middle 2 digits for Green, and the last 2 digits  for Blue.  The only difference is that they use radix 13 (0-9 and A-C) instead of 16.  Now given a color in three decimal numbers (each between 0 and 168), you are supposed to output their Mars RGB values.\n\n**输入描述**\n\n> Each input file contains one test case which occupies a line containing the three decimal color values.\n\n**输出描述**\n\n> For each test case you should output the Mars RGB value in the following format: first output \"#\", then followed by a 6-digit number where all the English characters must be upper-cased.  If a single color is only 1-digit long, you must print a \"0\" to the left.\n\n**输入例子**\n\n> 15 43 71\n\n**输出例子**\n\n> \\#123456\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout<<'#';\n    int n;\n    for (int i = 0; i < 3; i++) {\n        cin>>n;\n        int tmp = n/13;\n        if (tmp > 9) cout<<char((tmp-10)+'A');\n        else cout<<tmp;\n        tmp = n%13;\n        if (tmp > 9) cout<<char((tmp-10)+'A');\n        else cout<<tmp;\n    }\n    return 0;\n}\n```\n\n\n\n## 1028 List Sorting (25)\n\n**题目描述**\n\n> Excel can sort records according to any column.  Now you are supposed to imitate this function.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains two integers N (<=100000) and C, where N is the number of records and C is the column that you are supposed to sort the records with.  Then N lines follow, each contains a record of a student.  A student's record consists of his or her distinct ID (a 6-digit number), name (a string with no more than 8 characters without space), and grade (an integer between 0 and 100, inclusive).\n\n**输出描述**\n\n> For each test case, output the sorting result in N lines.  That is, if C = 1 then the records must be sorted in increasing order according to ID's; if C = 2 then the records must be sorted in non-decreasing order according to names; and if C = 3 then the records must be sorted in non-decreasing order according to grades.  **If there are several students who have the same name or grade, they must be sorted according to their ID's in increasing order.**\n\n**输入例子**\n\n> 3 1\n> 000007 James 85\n> 000010 Amy 90\n> 000001 Zoe 60\n\n**输出例子**\n\n> 000001 Zoe 60\n> 000007 James 85\n> 000010 Amy 90\n\n**实现代码**\n\n利用结构体，使用sort函数排序。\n\n```c++\n#include <iostream>\n#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\nusing namespace std;\n\nstruct student\n{\n\tstring id;\n\tstring name;\n\tint grade;\n\tstudent(string i, string n, int g) {id = i, name = n, grade = g;}\n};\n\nbool cmp1(student a, student b) {\n\treturn a.id < b.id;\n}\n\nbool cmp2(student a, student b) {\n\treturn (a.name == b.name)?(a.id < b.id):(a.name < b.name);\n}\n\nbool cmp3(student a, student b) {\n\treturn (a.grade == b.grade)?(a.id < b.id):(a.grade < b.grade);\n}\n\nint main() {\n\tint n,c;\n\tcin>>n>>c;\n\tvector<student> students;\n\n\tstring id,name;\n\tint grade;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>id>>name>>grade;\n\t\tstudents.push_back(student(id,name,grade));\n\t}\n\n\tif (c == 1) sort(students.begin(),students.end(),cmp1);\n\telse if (c == 2) sort(students.begin(),students.end(),cmp2);\n\telse sort(students.begin(),students.end(),cmp3);\n\n\tif (n > 0) cout<<students[0].id<<' '<<students[0].name<<' '<<students[0].grade;\n\tfor (int i = 1; i < n; i++) {\n\t\tcout<<\"\\n\"<<students[i].id<<' '<<students[i].name<<' '<<students[i].grade;\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1029 Median (25)\n\n**题目描述**\n\n> Given an increasing sequence S of N integers, the *median* is the number at the middle position.  For example, the median of S1={11, 12, 13, 14} is 12, and the median of S2={9, 10, 15, 16, 17} is 15.  The median of two sequences is defined to be the median of the nondecreasing sequence which contains all the elements of both sequences.  For example, the median of S1 and S2 is 13.\n> Given two increasing sequences of integers, you are asked to find their median.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case occupies 2 lines, each gives the information of a sequence.  For each sequence, the first positive integer N (<=1000000) is the size of that sequence.  Then N integers follow, separated by a space.  It is guaranteed that all the integers are in the range of **long int**.\n\n**输出描述**\n\n> For each test case you should output the median of the two given sequences in a line.\n\n**输入例子**\n\n> 4 11 12 13 14\n> 5 9 10 15 16 17\n\n**输出例子**\n\n> 13\n\n**实现代码**\n\n用两个数组存储两组数据，每组数据一个pos，比较两个pos出的数值大小，较小值的pos向后移，直到找到中位数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nint main() {\n\tint m,n;\n\tcin>>m;\n\tint* firstSequence = new int[m];\n\tfor (int i = 0; i < m; i++) cin>>firstSequence[i];\n\tcin>>n;\n\tint* secondSequence = new int[n];\n\tfor (int i = 0; i < n; i++) cin>>secondSequence[i];\n\n\tint firstPos = 0, secondPos = 0;\n\tfor (int i = int((m+n+1)/2); i > 0; i--) {\n\t\tif (i == 1) {\n\t\t\tif (firstPos == m) cout<<secondSequence[secondPos];\n\t\t\telse if (secondPos == n) cout<<firstSequence[firstPos];\n\t\t\telse if (firstSequence[firstPos] < secondSequence[secondPos]) cout<<firstSequence[firstPos];\n\t\t\telse cout<<secondSequence[secondPos];\n\t\t} else {\n\t\t\tif (firstPos == m) secondPos++;\n\t\t\telse if (secondPos == n) firstPos++;\n\t\t\telse if (firstSequence[firstPos] < secondSequence[secondPos]) firstPos++;\n\t\t\telse secondPos++;\n\t\t}\n\t}\n\n\tdelete firstSequence;\n\tdelete secondSequence;\n\n\treturn 0;\n}\n```\n\n\n\n## 1030 Travel Plan (30)\n\n**题目描述**\n\n> A traveler's map gives the distances between cities along the highways, together with the cost of each highway. \n>  Now you are supposed to write a program to help a traveler to decide the shortest path between his/her starting city and the destination.\n>  If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.\n>\n>  DECLARE: The test data in PAT is wrong,we strengthened the test data.If the same code got passed in pat,it may not be able to get passed in NOWCODER,please check your code.(This means that our test data is no problem,I guarantee.)\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a line containing 4 positive integers N, M, S, and D, where N (<=500) is the number of cities (and hence the cities are numbered from 0 to N-1); M is the number of highways; S and D are the starting and the destination cities, respectively. Then M lines follow, each provides the information of a highway, in the format:\n>  City1 City2 Distance Cost\n>\n>  where the numbers are all integers no more than 500, and are separated by a space.\n\n**输出描述**\n\n> For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.\n\n**输入例子**\n\n> 4 5 0 3\n>\n> 0 1 1 20\n>\n> 1 3 2 30\n>\n> 0 3 4 10\n>\n> 0 2 2 20\n>\n> 2 3 1 20\n\n**输出例子**\n\n> 0 2 3 3 40\n\n**实现代码**\n\n最短路问题，用Dijkstra（迪杰斯特拉）算法解即可。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\n#include <stack>\n#include <climits>\nusing namespace std;\n\nstruct highway\n{\n\tint endCity;\n\tint distance;\n\tint cost;\n\thighway(int e, int d, int c) {endCity=e,distance=d,cost=c;}\n};\n\n\nint main() {\n\t// N为城市数，M为公路数，S为开始城市，D为结束城市\n\tint N,M,S,D;\n\tcin>>N>>M>>S>>D;\n\n\t// highways(i) 为与城市i相连的所有公路\n\tvector<vector<highway> > highways(N);\n\tbool* visited = new bool[N];\n\tint* distance = new int[N];\n\tint* cost = new int[N];\n\tint* lastCity = new int[N];\n\tfor (int i = 0; i < N; i++) \n\t\tvisited[i] = false, distance[i] = cost[i] = INT_MAX;\n\n\t// 读入数据，更新highways\n\tint tmp_city_1, tmp_city_2, tmp_distance, tmp_cost;\n\twhile (M--) {\n\t\tcin>>tmp_city_1>>tmp_city_2>>tmp_distance>>tmp_cost;\n\t\thighways[tmp_city_1].push_back(highway(tmp_city_2,tmp_distance,tmp_cost));\n\t\thighways[tmp_city_2].push_back(highway(tmp_city_1,tmp_distance,tmp_cost));\n\t}\n\n\t// dijkstra\n\tint currentCity = S;\n\tvisited[S] = true, distance[S] = cost[S] = 0, lastCity[S] = S;\n\twhile (currentCity != D) {\n\t\tfor (int i = 0; i < highways[currentCity].size(); i++) {\n\t\t\tint tmp_endCity = highways[currentCity][i].endCity, \n\t\t\t\ttmp_distance = highways[currentCity][i].distance,\n\t\t\t\ttmp_cost = highways[currentCity][i].cost;\t\t\t\t\n\t\t\tif (visited[tmp_endCity]) continue;\n\t\t\tif (distance[currentCity] + tmp_distance < distance[tmp_endCity] ||\n\t\t\t\t(distance[currentCity] + tmp_distance == distance[tmp_endCity] && \n\t\t\t\t cost[currentCity] + tmp_cost < cost[tmp_endCity])) {\n\t\t\t\tdistance[tmp_endCity] = distance[currentCity] + tmp_distance;\n\t\t\t\tcost[tmp_endCity] = cost[currentCity] + tmp_cost;\n\t\t\t\tlastCity[tmp_endCity] = currentCity;\n\t\t\t}\n\t\t}\n\t\tint minDistance = INT_MAX;\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tif (visited[i]) continue;\n\t\t\tif (distance[i] < minDistance) minDistance=distance[i],currentCity = i;\n\t\t}\n\t\t// 添加离起始点最短的点到已访问集\n\t\tvisited[currentCity] = true;\n\t}\n\n\t// 逆序列逆向输出即为最短路径\n\tstack<int> pathStack;\n\tpathStack.push(D);\n\tcurrentCity = D;\n\twhile (currentCity != S) {\n\t\tcurrentCity = lastCity[currentCity];\n\t\tpathStack.push(currentCity);\n\t}\n\n\twhile (!pathStack.empty()) {\n\t\tcout<<pathStack.top()<<' ';\n\t\tpathStack.pop();\n\t}\n\tcout<<distance[D]<<' '<<cost[D];\n\n\tdelete visited,distance,cost,lastCity;\n\treturn 0;\n}\n\n```\n\n\n\n## 1035 Password (20)\n\n**题目描述**\n\n> To prepare for PAT, the judge sometimes has to generate random passwords for the users.  The problem is that there are always some confusing passwords since it is hard to distinguish 1 (one) from l (L in lowercase), or 0 (zero) from O (o in uppercase).  One solution is to replace 1 (one) by @, 0 (zero) by %, l by L, and O by o.  Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a positive integer N (<= 1000), followed by N lines of accounts.  Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.\n\n**输出描述**\n\n> For each test case, first print the number M of accounts that have been modified, then print in the following M lines the modified accounts info, that is, the user names and the corresponding modified passwords.  The accounts must be printed in the same order as they are read in.  If no account is modified, print in one line \"There are N accounts and no account is modified\" where N is the total number of accounts.  However, if N is one, you must print \"There is 1 account and no account is modified\" instead.\n\n**输入例子**\n\n> 3\n> Team000002 Rlsp0dfa\n> Team000003 perfectpwd\n> Team000001 R1spOdfa\n\n**输出例子**\n\n> 2\n> Team000002 RLsp%dfa\n> Team000001 R@spodfa\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\nusing namespace std;\n\nstruct account\n{\n\tstring id;\n\tstring password;\n\taccount(string i, string p) {id = i, password = p;}\n};\n\nint main() {\n\tint n;\n\tcin>>n;\n\tvector<account> result;\n\n\tstring id,password;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>id>>password;\n\t\tif (password.find_first_of('0') == string::npos &&\n\t\t\tpassword.find_first_of('O') == string::npos &&\n\t\t\tpassword.find_first_of('1') == string::npos &&\n\t\t\tpassword.find_first_of('l') == string::npos)\n\t\t\tcontinue;\n\t\tfor (int s = 0; s < password.size(); s++) {\n\t\t\tif (password[s] == '0') password[s] = '%';\n\t\t\tif (password[s] == 'O') password[s] = 'o';\n\t\t\tif (password[s] == '1') password[s] = '@';\n\t\t\tif (password[s] == 'l') password[s] = 'L';\n\t\t}\n\t\tresult.push_back(account(id,password));\n\t}\n\n\tint result_len = result.size();\n\tif (n == 1 && result_len == 0) {\n\t\tcout<<\"There is 1 account and no account is modified\";\n\t} else if (result_len == 0) {\n\t\tcout<<\"There are \"<<n<<\" accounts and no account is modified\";\n\t} else {\n\t\tcout<<result_len;\n\t\tfor (int i = 0; i < result_len; i++) {\n\t\t\tcout<<\"\\n\"<<result[i].id<<' '<<result[i].password;\n\t\t}\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n\n\n## 1036 Boys vs Girls (25)\n\n**题目描述**\n\n> This time you are asked to tell the difference between the lowest grade of all the male students and the highest grade of all the female students.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a positive integer N, followed by N lines of student information.  Each line contains a student's name, gender, ID and grade, separated by a space, where name and ID are strings of no more than 10 characters with no space, gender is either F (female) or M (male), and grade is an integer between 0 and 100.  It is guaranteed that all the grades are distinct.\n\n**输出描述**\n\n> For each test case, output in 3 lines.  The first line gives the name and ID of the female student with the highest grade, and the second line gives that of the male student with the lowest grade.  The third line gives the difference gradeF-gradeM.  If one such kind of student is missing, output \"Absent\" in the corresponding line, and output \"NA\" in the third line instead.\n\n**输入例子**\n\n> 3\n> Joe M Math990112 89\n> Mike M CS991301 100\n> Mary F EE990830 95\n\n**输出例子**\n\n> Mary EE990830\n> Joe Math990112\n> 6\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\nusing namespace std;\n\nint main() {\n\tint n;\n\tcin>>n;\n\tstring re_male_name, re_male_id;\n\tstring re_female_name, re_female_id;\n\tint re_male_grade = 101, re_female_grade = -1;\n\n\tstring name, gender, id;\n\tint grade;\n\twhile(n--) {\n\t\tcin>>name>>gender>>id>>grade;\n\t\tif (gender==\"M\") {\n\t\t\tif (grade < re_male_grade) {\n\t\t\t\tre_male_name = name;\n\t\t\t\tre_male_id = id;\n\t\t\t\tre_male_grade = grade;\n\t\t\t}\n\t\t} else {\n\t\t\tif (grade > re_female_grade) {\n\t\t\t\tre_female_name = name;\n\t\t\t\tre_female_id = id;\n\t\t\t\tre_female_grade = grade;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (re_female_name==\"\") cout<<\"Absent\"<<endl;\n\telse cout<<re_female_name<<' '<<re_female_id<<endl;\n\tif (re_male_name==\"\") cout<<\"Absent\"<<endl;\n\telse cout<<re_male_name<<' '<<re_male_id<<endl;\n\tif (re_female_name==\"\" || re_male_name==\"\") cout<<\"NA\";\n\telse cout<<re_female_grade - re_male_grade;\n\t\n\treturn 0;\n\n}\n```\n\n\n\n## 1037 Magic Coupon (25)\n\n**题目描述**\n\n> The magic shop in Mars is offering some magic coupons.  Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may get N times the value of that product back!  What is more, the shop also offers some bonus product for free.  However, if you apply a coupon with a positive N to this bonus product, you will have to pay the shop N times the value of the bonus product... but hey, magically, they have some coupons with negative N's! \n> For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M\\$) where a negative value corresponds to a bonus product.  You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; coupon 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back.  On the other hand, if you apply coupon 3 to product 4, you will have to pay M\\$12 to the shop.\n> Each coupon and each product may be selected at most once.  Your task is to get as much money back as possible.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains the number of coupons NC, followed by a line with NC coupon integers.  Then the next line contains the number of products NP, followed by a line with NP product values.  Here 1<= NC, NP <= 105, and it is guaranteed that all the numbers will not exceed 230.\n\n**输出描述**\n\n> For each test case, simply print in a line the maximum amount of money you can get back.\n\n**输入例子**\n\n> 4\n> 1 2 4 -1\n> 4\n> 7 6 -2 -3\n\n**输出例子**\n\n> 43\n\n**实现代码**\n\n\n\n\n\n## 1054 The Dominant Color (20)\n\n**题目描述**\n\n> Behind the scenes in the computer's memory, color is always talked about as a series of 24 bits of information for each pixel.  In an image, the color with the largest proportional area is called the dominant color.  **A *strictly* dominant color takes more than half of the total area.**  Now given an image of resolution M by N (for example, 800x600), you are supposed to point out the strictly dominant color.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains 2 positive numbers: M (<=800) and N (<=600) which are the resolutions of the image.  Then N lines follow, each contains M digital colors in the range [0, 224).  It is guaranteed that the strictly dominant color exists for each input image.  All the numbers in a line are separated by a space.\n\n**输出描述**\n\n> For each test case, simply print the dominant color in a line.\n\n**输入例子**\n\n> 5 3\n> 0 0 255 16777215 24\n> 24 24 0 0 24\n> 24 0 24 24 24\n\n**输出例子**\n\n>  24\n\n首先要注意到dominant color是超过半数的，刚开始只想到了排序后最中间的数一定为结果，但是要存储的数据太多，后来看了[参考链接](https://blog.csdn.net/zhu_liangwei/article/details/9734671)，学会了下边这个方法。\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int m, n, all_count, tmp, re = -1, count = 0;\n    cin>>m>>n;\n    all_count = m*n;\n    while (all_count--) {\n        cin>>tmp;\n        if (count == 0) re = tmp;\n        if (re == tmp) count++;\n        else count--;\n    }\n    cout<<re;\n    return 0;\n}\n```\n\n## 1081 Rational Sum (20)\n\n**题目描述**\n\n> Given N rational numbers in the form \"numerator/denominator\", you are supposed to calculate their sum.\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a positive integer N (<=100), followed in the next line N rational numbers \"a1/b1 a2/b2 ...\" where all the numerators and denominators are in the range of \"long int\".  If there is a negative number, then the sign must appear in front of the numerator.\n\n**输出描述**\n\n> For each test case, output the sum in the simplest form \"integer numerator/denominator\" where \"integer\" is the integer part of the sum, \"numerator\" < \"denominator\", and the numerator and the denominator have no common factor.  You must output only the fractional part if the integer part is 0.\n\n**输入例子**\n\n> 5\n> 2/5 4/15 1/30 -2/60 8/3\n\n**输出例子**\n\n> 3 1/3\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\nusing namespace std;\n\nlong long gcd(long long a, long long b) {\n    return ((b==0)?abs(a):gcd(b,a%b));\n}\n\nint main() {\n    long long n, tmp_gcd;\n    cin>>n;\n    char c;\n    long long re_integer = 0, re_numerator, re_denominator;\n    cin>>re_numerator>>c>>re_denominator;\n    tmp_gcd = gcd(re_numerator,re_denominator);\n    re_numerator/=tmp_gcd,re_denominator/=tmp_gcd;\n    re_integer += int(re_numerator/re_denominator);\n    re_numerator%=re_denominator;\n    while(--n) {\n        long long tmp_nu, tmp_de, tmp_nu_re, tmp_de_re;\n        cin>>tmp_nu>>c>>tmp_de;\n        tmp_de_re = tmp_de * re_denominator;\n        tmp_nu_re = tmp_nu * re_denominator + tmp_de * re_numerator;\n        tmp_gcd = gcd(tmp_de_re,tmp_nu_re);\n        tmp_de_re/=tmp_gcd,tmp_nu_re/=tmp_gcd;\n        re_integer += int(tmp_nu_re/tmp_de_re);\n        re_numerator = tmp_nu_re % tmp_de_re;\n        re_denominator = tmp_de_re;\n    }\n    if (re_integer == 0 && re_numerator == 0) cout<<0;\n    else if (re_integer == 0) {\n    \tcout<<re_numerator<<'/'<<re_denominator;\n\t} else if (re_numerator == 0) {\n\t\tcout<<re_integer;\n\t} else {\n\t\tcout<<re_integer<<' '<<re_numerator<<'/'<<re_denominator;\n\t}\n    return 0;\n}\n```\n\n\n\n## 1082 Read Number in Chinese (25)\n\n**题目描述**\n\n> Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way.  Output \"Fu\" first if it is negative.  For example, -123456789 is read as \"Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu\".  Note: zero (\"ling\") must be handled correctly according to the Chinese tradition.  For example, 100800 is \"yi Shi Wan ling ba Bai\".\n\n**输入描述**\n\n> Each input file contains one test case, which gives an integer with no more than 9 digits.\n\n**输出描述**\n\n> For each test case, print in a line the Chinese way of reading the number.  The characters are separated by a space and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> -123456789\n\n**输出例子**\n\n> Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu\n\n**实现代码**\n\n首先按照数字单位的顺序添加到结果容器中，然后遍历结果容器，如果有连续重复的\"ling\"只留一个，如果\"Wan\"前有“ling”去掉0，如果\"Wan\"直接跟在“Yi”后边将“Wan”换成“ling”。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n\tstring units[] = {\"\",\"Shi\",\"Bai\",\"Qian\",\"Wan\",\"Shi\",\"Bai\",\"Qian\",\"Yi\"};\n\tstring digits[] = {\"ling\",\"yi\",\"er\",\"san\",\"si\",\"wu\",\"liu\",\"qi\",\"ba\",\"jiu\"};\n\tvector<string> re;\n\tint n;\n\tcin>>n;\n\tif (n < 0) {\n\t\tre.push_back(\"Fu\");\n\t\tn = -n;\n\t}\n\tif (n == 0) {\n\t\tcout<<\"ling\";\n\t\treturn 0;\n\t}\n\tvector<int> n_digits;\n\twhile (n > 0) {\n\t\tn_digits.push_back(n%10);\n\t\tn/=10;\n\t}\n\tint len = n_digits.size();\n\tfor (int i = len-1; i >= 0; i--) {\n\t\tre.push_back(digits[n_digits[i]]);\n\t\tif (i==4 || n_digits[i] != 0 && i>0) re.push_back(units[i]);\n\t}\n\tvector<string>::iterator iter = re.begin()+1;\n\twhile (iter < re.end()) {\n\t\tif (*(iter)==\"ling\" && *(iter-1)==\"ling\")\n\t\t\tre.erase(iter);\n\t\telse if (*(iter)==\"Wan\" && *(iter-1)==\"ling\")\n\t\t\tre.erase((iter--)-1);\n\t\telse if (*(iter)==\"Wan\" && *(iter-1)==\"Yi\")\n\t\t\t*(iter++) = \"ling\";\n\t\telse\n\t\t\titer++;\n\t}\n\tif (re.size()>1 && re[re.size()-1]==\"ling\") re.erase(re.end()-1);\n\tcout<<re[0];\n\tfor (int i = 1; i < re.size(); i++) cout<<' '<<re[i];\n\t\t\n\treturn 0;\n}\n\n```\n\n\n\n## 1083 List Grades (25)\n\n**题目描述**\n\n> Given a list of N student records with name, ID and grade.  You are supposed to sort the records with respect to the grade in non-increasing order, and output those student records of which the grades are in a given interval.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case is given in the following format:\n> N\n> name[1] ID[1] grade[1]\n> name[2] ID[2] grade[2]\n> ... ...\n> name[N] ID[N] grade[N]\n> grade1 grade2\n>\n> where name[i] and ID[i] are strings of no more than 10 characters with no space, grade[i] is an integer in [0, 100], grade1 and grade2 are the boundaries of the grade's interval.  It is guaranteed that all the grades are *distinct*.\n\n**输出描述**\n\n> For each test case you should output the student records of which the grades are in the given interval [grade1, grade2] and are in non-increasing order.  Each student record occupies a line with the student's name and ID, separated by one space.  If there is no student's grade in that interval, output \"NONE\" instead.\n\n**输入例子**\n\n> 4\n> Tom CS000001 59\n> Joe Math990112 89\n> Mike CS991301 100\n> Mary EE990830 95\n> 60 100\n\n**输出例子**\n\n> Mike CS991301\n> Mary EE990830\n> Joe Math990112\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\n\nstruct student\n{\n\tstring name;\n\tstring id;\n\tint grade;\n\tstudent(string n,string i, int g) {\n\t\tname = n;\n\t\tid = i;\n\t\tgrade = g;\n\t}\n};\n\nint main() {\n\tint n;\n\tcin>>n;\n\tvector<student> re;\n\n\tstring name,id;\n\tint grade;\n\twhile(n--) {\n\t\tcin>>name>>id>>grade;\n\t\tstudent tmp(name,id,grade);\n\t\tre.push_back(tmp);\n\t}\n\tint min_grade,max_grade;\n\tcin>>min_grade>>max_grade;\n\n\tvector<student>::iterator iter = re.begin();\n\twhile (iter != re.end()) {\n\t\tif ((*iter).grade < min_grade || (*iter).grade > max_grade)\n\t\t\tre.erase(iter);\n\t\telse\n\t\t\titer++;\n\t}\n\n\tfor (int k = 0 ; k < re.size(); k++) {\n\t\tfor (int i = 0 ; i < re.size()-1; i++) {\n\t\t\tif (re[i].grade < re[i+1].grade) {\n\t\t\t\tstudent tmp(re[i].name,re[i].id,re[i].grade);\n\t\t\t\tre[i] = re[i+1];\n\t\t\t\tre[i+1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (re.empty()) cout<<\"NONE\";\n\telse {\n\t\tcout<<re[0].name<<' '<<re[0].id;\n\t\tfor (int i = 1; i < re.size(); i++)\n\t\t\tcout<<\"\\n\"<<re[i].name<<' '<<re[i].id;\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1086 Tree Traversals Again (25)\n\n**题目描述**\n\n> An inorder binary tree traversal can be implemented in a non-recursive way with a stack.  For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop().  Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations.  Your task is to give the postorder traversal sequence of this tree.\n>\n> ![](/images/pat_1086.jpg)\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains a positive integer N (<=30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N).  Then 2N lines follow, each describes a stack operation in the format: \"Push X\" where X is the index of the node being pushed onto the stack; or \"Pop\" meaning to pop one node from the stack.\n\n**输出描述**\n\n> For each test case, print the postorder traversal sequence of the corresponding tree in one line.  A solution is guaranteed to exist.  All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> 6\n> Push 1\n> Push 2\n> Push 3\n> Pop\n> Pop\n> Push 4\n> Pop\n> Pop\n> Push 5\n> Push 6\n> Pop\n> Pop\n\n**输出例子**\n\n> 3 4 2 6 5 1\n\n**实现代码**\n\n以上述例子为例，按顺序排下来123456为前序，使用栈的pop顺序为中序，利用前序和中序可以得到后序。\n\n注意1-N为标号，每次push的为值，值有可能重复，但是push顺序为标号1-N。\n\n可以用下边这个测试用例测试：\n\n> //输入\n>\n> 19\n> Push 4\n> Push 11\n> Push 7\n> Push 12\n> Pop\n> Pop\n> Pop\n> Push 14\n> Push 17\n> Pop\n> Pop\n> Push 6\n> Push 18\n> Pop\n> Push 8\n> Pop\n> Pop\n> Push 4\n> Pop\n> Pop\n> Push 11\n> Push 16\n> Push 11\n> Push 12\n> Pop\n> Push 2\n> Pop\n> Pop\n> Pop\n> Push 7\n> Push 4\n> Pop\n> Pop\n> Push 12\n> Pop\n> Pop\n> Push 11\n> Pop\n>\n> // 输出\n>\n> 12 7 17 8 18 4 6 14 11 2 12 11 4 12 7 16 11 11 4 \n\n我的代码如下：\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <stack>\nusing namespace std;\n\nvector<int> post;\nvoid generatePostOrder(vector<int> pre, vector<int> in, int len) {\n\tif (len <= 0) return;\n\tif (len == 1) {\n\t\tpost.push_back(pre[0]);\n\t\treturn;\n\t}\n\tint root_num = pre[0], root_pos_of_in = 0;\n\tfor (; root_pos_of_in < len; root_pos_of_in++) {\n\t\tif (in[root_pos_of_in] == root_num) break;\n\t}\n\tint left_len = root_pos_of_in;\n\tint right_len = len - left_len - 1;\n\tvector<int> pre_left,pre_right,in_left,in_right;\n\tpre_left.assign(pre.begin()+1, pre.begin()+1+left_len);\n\tpre_right.assign(pre.begin()+1+left_len, pre.end());\n\tin_left.assign(in.begin(),in.begin()+left_len);\n\tin_right.assign(in.begin()+left_len+1, in.end());\n\tgeneratePostOrder(pre_left,in_left,left_len);\n\tgeneratePostOrder(pre_right,in_right,right_len);\n\tpost.push_back(root_num);\n}\n\nint main() {\n\tint n, tmp;\n\tcin>>n;\n\tstring op;\n\tvector<int> pre,in,value;\n\tstack<int> tmp_stack;\n\tint index = 0;\n\tfor (int i = 0; i < 2*n; i++) {\n\t\tcin>>op;\n\t\tif (op == \"Push\") {\n\t\t\tcin>>tmp;\n\t\t\tvalue.push_back(tmp);\n\t\t\ttmp_stack.push(index);\n\t\t\tpre.push_back(index++);\n\t\t} else {\n\t\t\tin.push_back(tmp_stack.top());\n\t\t\ttmp_stack.pop();\n\t\t}\n\t}\n\tgeneratePostOrder(pre,in,n);\n\tif (n > 0) cout<<value[post[0]];\n\tfor (int i = 1; i < n; i++) {\n\t\tcout<<\" \"<<value[post[i]];\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n\n\n\n\n## 10xx\n\n**题目描述**\n\n> \n\n**输入描述**\n\n> \n\n**输出描述**\n\n> \n\n**输入例子**\n\n> \n\n**输出例子**\n\n> \n\n**实现代码**\n\n","source":"_posts/PAT刷题记录.md","raw":"---\ntitle: PAT刷题记录\ntoc: true\ndate: 2018-07-19 22:54:17\ncategories: OJ\ntags:\n- PAT\n- 刷题\n---\n\n\n\nOJ：[牛客网](https://www.nowcoder.com/pat)\n\n---\n\n\n\n## 1001 A+B Format (20)\n\n**题目描述**\n\n> Calculate a + b and output the sum in standard format -- that is, the digits must be separated into groups of three by commas (unless there are less than four digits).\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a pair of integers a and b where -1000000 <= a, b <= 1000000.  The numbers are separated by a space.\n\n**输出描述**\n\n> For each test case, you should output the sum of a and b in one line.  The sum must be written in the standard format.\n\n**输入例子**\n\n> -1000000 9\n\n**输出例子**\n\n> -999,991\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int digit[10];\n    for (int i = 0; i < 10; i++) digit[i] = -1;\n    int a,b,re;\n    cin >> a >> b;\n    re = a + b;\n    if (re < 0) {\n        cout<<'-';\n        re = -re;\n    }\n    int i = 0;\n    while(re) {\n        digit[i] = (re%10);\n        re/=10;\n        i++;\n    }\n    for (int k = i-1; k >=0; k--) {\n        cout<<digit[k];\n        if (k%3 == 0 && k>0) cout<<',';\n    }\n    return 0;\n}\n```\n\n\n\n## 1002 A+B for Polynomials (25)\n\n**题目描述**\n\n> This time, you are supposed to find A+B where A and B are two polynomials.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:\n> K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively.  It is given that 1 <= K <= 10，0 <= NK < ... < N2 < N1 <=1000.\n\n**输出描述**\n\n> For each test case you should output the sum of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  **Please be accurate to 1 decimal place.**\n\n**输入例子**\n\n> 2 1 2.4 0 3.2\n> 2 2 1.5 1 0.5\n\n**输出例子**\n\n> 3 2 1.5 1 2.9 0 3.2\n\n**实现代码**\n\n注意保留小数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\nstruct item\n{\n\tint n;\n\tfloat value;\n\titem(int a, float b) {n=a,value=b;}\n};\n\nint main() {\n\tvector<item> polynomials;\n\tint k;\n\n\tcin>>k;\n\tint tmp_n;\n\tfloat tmp_value;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tpolynomials.push_back(item(tmp_n,tmp_value));\n\t}\n\n\tcin>>k;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tbool hasItem = false;\n\t\tfor (int i = 0; i < polynomials.size(); i++) {\n\t\t\tif (polynomials[i].n == tmp_n) {\n\t\t\t\thasItem = true;\n\t\t\t\tpolynomials[i].value+=tmp_value;\n\t\t\t\tif (polynomials[i].value == 0)\n\t\t\t\t\tpolynomials.erase(polynomials.begin()+i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\t\n\t\tif (!hasItem) polynomials.push_back(item(tmp_n,tmp_value));\t\n\t}\n\n\tfor (int k = 0; k < polynomials.size(); k++) {\n\t\tfor (int i = 0; i < polynomials.size()-1; i++) {\n\t\t\tif (polynomials[i].n < polynomials[i+1].n) {\n\t\t\t\titem tmp_item = polynomials[i];\n\t\t\t\tpolynomials[i] = polynomials[i+1];\n\t\t\t\tpolynomials[i+1] = tmp_item;\n\t\t\t}\n\t\t}\n\t}\n\n\tcout<<polynomials.size();\n\tfor (int i = 0; i < polynomials.size(); i++)\n\t\tprintf(\" %d %.1f\", polynomials[i].n, polynomials[i].value);\n\n\treturn 0;\n}\n```\n\n\n\n## 1003 Emergency (25)\n\n**题目描述**\n\n> As an emergency rescue team leader of a city, you are given a special map of your country.  The map shows several scattered cities connected by some roads.  Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map.  When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.\n\n**输入描述**\n\n> Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (<= 500) - the number of cities (and the cities are numbered from 0 to N-1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively.  The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city.  Then M lines follow, each describes a road with three integers c1, c2 and L, which are the pair of cities connected by a road and the length of that road, respectively.  \n> It is guaranteed that there exists at least one path from C1 to C2.\n\n**输出描述**\n\n> For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2, and the maximum amount of rescue teams you can possibly gather.\n>\n> All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.\n\n**输入例子**\n\n> 5 6 0 2\n> 1 2 1 5 3\n> 0 1 1\n> 0 2 2\n> 0 3 1\n> 1 2 1\n> 2 4 1\n> 3 4 1\n\n**输出例子**\n\n> 2 4\n\n**实现代码**\n\ndijkstra最短路\n\n```c++\n#include <iostream>\n#include <vector>\n#include <climits>\nusing namespace std;\n\nstruct road\n{\n\tint endCity;\n\tint length;\n\troad(int e, int l) {endCity = e, length = l;}\n};\n\n\nint main() {\n\tint n,m,c1,c2;\n\tcin>>n>>m>>c1>>c2;\n\tvector<int> teamsCount;\n\n\tint tmp1,tmp2,tmp3;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>tmp1;\n\t\tteamsCount.push_back(tmp1);\n\t}\n\n\tvector<vector<road> > roads(n);\n\tfor (int i = 0; i < m; i++) {\n\t\tcin>>tmp1>>tmp2>>tmp3;\n\t\troads[tmp1].push_back(road(tmp2,tmp3));\n\t\troads[tmp2].push_back(road(tmp1,tmp3));\n\t}\n\n\tvector<int> maxTeams(n);\n\tfor (int i = 0; i < n; i++) maxTeams[i] = 0;\n\tmaxTeams[c1] = teamsCount[c1];\n\n\tvector<int> minLen(n);\n\tfor (int i = 0; i < n; i++) minLen[i] = INT_MAX;\n\tminLen[c1] = 0;\n\n\tint currentCity = c1;\n\tvector<int> minLenRoadCount(n);\n\tfor (int i = 0; i < n; i++) minLenRoadCount[i] = 1;\n\n\tvector<bool> visited(n);\n\tfor (int i = 0; i < n; i++) visited[i] = false;\n\tvisited[c1] = true;\n\twhile (currentCity != c2) {\n\t\tint len = roads[currentCity].size();\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tif (visited[roads[currentCity][i].endCity]) continue;\n\t\t\tint endCity = roads[currentCity][i].endCity;\n\t\t\tint length = roads[currentCity][i].length;\n\t\t\tif (minLen[endCity] > minLen[currentCity] + length) {\n\t\t\t\tminLen[endCity] = minLen[currentCity] + length;\n\t\t\t\tminLenRoadCount[endCity] = 1;\n\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];\n\t\t\t} else if (minLen[endCity] == minLen[currentCity] + length) {\n\t\t\t\tminLenRoadCount[endCity]++;\n\t\t\t\tif (maxTeams[endCity] < maxTeams[currentCity] + teamsCount[endCity])\n\t\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];\n\t\t\t}\n\t\t}\n\n\t\tint min = INT_MAX;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (visited[i]) continue;\n\t\t\tif (minLen[i] < min) {\n\t\t\t\tmin = minLen[i];\n\t\t\t\tcurrentCity = i;\n\t\t\t}\n\t\t}\n\t\tvisited[currentCity] = true;\n\t}\n\n\tcout<<minLenRoadCount[c2]<<' '<<maxTeams[c2];\n\n\treturn 0;\n}\n```\n\n\n\n## 1004 Counting Leaves (30)\n\n**题目描述**\n\n> A family hierarchy is usually presented by a pedigree tree.  Your job is to count those family members who have no child.\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a line containing 0 < N < 100, the number of nodes in a tree, and M (< N), the number of non-leaf nodes.  Then M lines follow, each in the format:\n>\n> ID K ID[1] ID[2] ... ID[K]\n>\n> where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID's of its children.  For the sake of simplicity, let us fix the root ID to be 01.\n\n**输出描述**\n\n> For each test case, you are supposed to count those family members who have no child **for every seniority level** starting from the root.  The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.\n> The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child.  Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node.  Then we should output \"0 1\" in a line.\n\n**输入例子**\n\n> 2 1\n> 01 1 02\n\n**输出例子**\n\n> 0 1\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\n#define MAX_NODES 100\n\nstruct node\n{\n\tint id = -1;\n\tint childs_count = 0;\n\tvector<int> childs;\n};\n\nint main() {\n\tint n,m;\n\tcin>>n>>m;\n\tnode nodes[MAX_NODES];\n\n\tint id,k,tmp;\n\twhile (m--) {\n\t\tcin>>id>>k;\n\t\tnodes[id].id = id;\n\t\tnodes[id].childs_count = k;\n\t\twhile (k--) {\n\t\t\tcin>>tmp;\n\t\t\t(nodes[id].childs).push_back(tmp);\n\t\t}\n\t}\n\n\tvector<int> this_level, next_level;\n\tthis_level.push_back(1);\n\twhile (1) {\n\t\tint count_output = 0;\n\t\tfor (int i = 0; i < this_level.size(); i++) {\n\t\t\tif (nodes[this_level[i]].childs_count == 0) count_output++;\n\t\t\telse next_level.insert(next_level.begin(),nodes[this_level[i]].childs.begin(),nodes[this_level[i]].childs.end());\n\t\t}\n\t\tcout<<count_output;\n\t\tif (next_level.empty()) break;\n\t\tcout<<' ';\n\t\tthis_level = next_level;\n\t\tnext_level.clear();\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1005 Spell It Right (20)\n\n**题目描述**\n\n> Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies one line which contains an N (<= 10^100).\n\n**输出描述**\n\n> For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.\n\n**输入例子**\n\n> 12345\n\n**输出例子**\n\n> one five\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string n;\n    cin>>n;\n    int len = n.size();\n    int re = 0;\n    for (int i = 0; i < len; i++) re+=(n[i]-'0');\n    string english[10] = {\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\"};\n    int digit[100], re_len = 0;\n    while (re) {\n        digit[re_len] = (re%10);\n        re/=10;\n        re_len++;\n    }\n    for (int i = re_len-1; i >= 0; i--) {\n        cout<<english[digit[i]];\n        if (i != 0) cout<<' ';\n    }\n    return 0;\n}\n```\n\n\n\n## 1006 Sign In and Sign Out (25)\n\n**题目描述**\n\n> At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door.  Given the records of signing in's and out's, you are supposed to find the ones who have unlocked and locked the door on that day.\n\n**输入描述**\n\n> Each input file contains one test case. Each case contains the records for one day.  The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:\n>\n> ID_number Sign_in_time Sign_out_time\n>\n> where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.\n\n**输出描述**\n\n> For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day.  The two ID numbers must be separated by one space.\n> Note:  It is guaranteed that the records are consistent.  That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.\n\n**输入例子**\n\n> 3\n> CS301111 15:30:28 17:00:10\n> SC3021234 08:00:00 11:25:25\n> CS301133 21:45:00 21:58:40\n\n**输出例子**\n\n> SC3021234 CS301133\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <string>\nusing namespace std;\n\nbool a_larger_than_b(string a, string b) {\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] < b[i]) return false;\n        if (a[i] > b[i]) return true;\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    cin>>n;\n    string id,in,out;\n    string result_in_id, result_in_time, result_out_id, result_out_time;\n    cin>>id>>in>>out;\n    result_in_id = result_out_id = id;\n    result_in_time = in;\n    result_out_time = out;\n    n--;\n    while (n--) {\n        cin>>id>>in>>out;\n        if (a_larger_than_b(result_in_time,in)) {\n            result_in_id = id;\n            result_in_time = in;\n        }\n        if (a_larger_than_b(out,result_out_time)) {\n            result_out_id = id;\n            result_out_time = out;\n        }\n    }\n    cout<<result_in_id<<' '<<result_out_id;\n    return 0;\n}\n```\n\n\n\n## 1007 Maximum Subsequence Sum (25)\n\n**题目描述**\n\n> Given a sequence of K integers { N1\n> , N2\n> , ..., NK\n>  }.  A continuous subsequence is defined to be { Ni\n> , Ni+1\n> , ..., Nj\n>  } where 1 <= i <= j <= K.  The *Maximum Subsequence*\n>  is the continuous subsequence which has the largest sum of its\n> elements.  For example, given sequence { -2, 11, -4, 13, -5, -2 }, its\n> maximum subsequence is { 11, -4, 13 } with the largest sum being 20.\n>\n> Now you are supposed to find the largest sum, together with the first\n> and the last numbers of the maximum subsequence.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies two lines.  The first line contains a positive integer K (<= 10000).  The second line contains K numbers, separated by a space.\n\n**输出描述**\n\n> For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line.  In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case).  If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.\n\n**输入例子**\n\n> 10\n> -10 1 2 3 4 -5 -23 3 7 -21\n\n**输出例子**\n\n> 10 1 4\n\n**实现代码**\n\n<u>和为负的子序列一定不会是最大和子序列的开头。</u>\n\n当当前和小于0时，使用临时\"first number\"记录下一个数，\n\n更新最大和时，当前数为“last number”， 临时“first number”中存储的值为“first number”的值。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nint main() {\n\tint n;\n\tcin>>n;\n\tint* nums = new int[n];\n\tbool allNegative = true;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>nums[i];\n\t\tif (nums[i] >= 0) allNegative = false;\n\t}\n\n\tif (allNegative) {\n\t\tcout<<0<<' '<<nums[0]<<' '<<nums[n-1];\n\t} else {\n\t\tint maxSum = 0, currentSum = 0;\n\t\tint firstNum = nums[0], lastNum = nums[0];\n\t\tint firstNumCurrent = firstNum;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcurrentSum+=nums[i];\n\t\t\tif (currentSum < 0) {\n\t\t\t\tcurrentSum = 0;\n\t\t\t\tfirstNumCurrent = nums[i+1];\n\t\t\t} else if (currentSum > maxSum) {\n\t\t\t\tmaxSum = currentSum;\n\t\t\t\tfirstNum = firstNumCurrent;\n\t\t\t\tlastNum = nums[i];\n\t\t\t}\n\t\t}\n\t\tcout<<maxSum<<' '<<firstNum<<' '<<lastNum;\n\t}\n\n\tdelete nums;\n\n\treturn 0;\n}\n```\n\n\n\n## 1008 Elevator (20)\n\n**题目描述**\n\n> The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.\n> For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.\n\n**输入描述**\n\n> Each input file contains one test case. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100.\n\n**输出描述**\n\n> For each test case, print the total time on a single line.\n\n**输入例子**\n\n> 3 2 3 1\n\n**输出例子**\n\n> 41\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 0, b, n, re = 0;\n    cin >> n;\n    while (n--) {\n        cin >> b;\n        if (b > a) {\n            re+=((b-a)*6);\n        } else {\n            re+=((a-b)*4);\n        }\n        re+=5;\n        a = b;\n    }\n    cout<<re;\n    return 0;\n}\n```\n\n\n\n## 1009 Product of Polynomials (25)\n\n**题目描述**\n\n> This time, you are supposed to find A*B where A and B are two polynomials.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:\n> K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively.  It is given that 1 <= K <= 10, 0 <= NK < ... < N2 < N1 <=1000.\n\n**输出描述**\n\n> For each test case you should output the product of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  Please be accurate up to 1 decimal place.\n\n**输入例子**\n\n> 2 1 2.4 0 3.2\n> 2 2 1.5 1 0.5\n\n**输出例子**\n\n> 3 3 3.6 2 6.0 1 1.6\n\n**实现代码**\n\n把[1002 A+B for Polynomials (25)](#1002-A-B-for-Polynomials-25)稍微改一下就好。\n\n使用`float`虽然算出来明明是对的但是过不了牛客的测试，全部换成`double`就好了，不知道是什么问题。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\nstruct item\n{\n\tint n;\n\tdouble value;\n\titem(int a, double b) {n=a,value=b;}\n};\n\nint main() {\n\tvector<item> polynomials, result;\n\tint k;\n\n\tcin>>k;\n\tint tmp_n;\n\tdouble tmp_value;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tpolynomials.push_back(item(tmp_n,tmp_value));\n\t}\n\n\tcin>>k;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tfor (int k = 0; k < polynomials.size(); k++) {\n\t\t\tbool hasItem = false;\n\t\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\t\tif (result[i].n == tmp_n+polynomials[k].n) {\n\t\t\t\t\thasItem = true;\n\t\t\t\t\tresult[i].value+=(tmp_value*polynomials[k].value);\n\t\t\t\t\tif (result[i].value == 0)\n\t\t\t\t\t\tresult.erase(result.begin()+i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\tif (!hasItem) result.push_back(item(tmp_n+polynomials[k].n,tmp_value*polynomials[k].value));\n\t\t}\n\t}\n\n\tfor (int k = 0; k < result.size(); k++) {\n\t\tfor (int i = 0; i < result.size()-1; i++) {\n\t\t\tif (result[i].n < result[i+1].n) {\n\t\t\t\titem tmp_item = result[i];\n\t\t\t\tresult[i] = result[i+1];\n\t\t\t\tresult[i+1] = tmp_item;\n\t\t\t}\n\t\t}\n\t}\n\n\tcout<<result.size();\n\tfor (int i = 0; i < result.size(); i++)\n\t\tprintf(\" %d %.1f\", result[i].n, result[i].value);\n\n\treturn 0;\n}\n```\n\n\n\n## 1015 Reversible Primes (20)\n\n**题目描述**\n\n> A *reversible prime*\n>  in any number system is a prime whose \"reverse\" in that\n> number system is also a prime. For example in the decimal system 73 is a\n> reversible prime because its reverse 37 is also a prime.\n>\n> \n>\n> Now given any two positive integers N (< 105\n> ) and D (1 < D <= 10), you are supposed to tell if N is a\n> reversible prime with radix D.\n\n**输入描述**\n\n> The input file consists of several test cases.  Each case occupies a line which contains two integers N and D.  The input is finished by a negative N.\n\n**输出描述**\n\n> For each test case, print in one line \"Yes\" if N is a reversible prime with radix D, or \"No\" if not.\n\n**输入例子**\n\n> 73 10\n> 23 2\n> 23 10\n> -2\n\n**输出例子**\n\n> Yes\n> Yes\n> No\n\n**实现代码**\n\n求N以及N在D进制下反转后是否均为质数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint reverseWithRadix(int n, int d) {\n\tvector<int> remainers;\n\twhile (n > 0) {\n\t\tremainers.push_back(n%d);\n\t\tn/=d;\n\t}\n\tint re = 0;\n\tint bit_count = remainers.size();\n\tfor (int i = 0; i < bit_count; i++)\n\t\tre+=(pow(d,bit_count-i-1)*remainers[i]);\n\treturn re;\n}\n\nbool isPrime(int n) {\n\tif (n == 1) return false;\n\tif (n < 4) return true;\n\tif (n % 2 == 0) return false;\n\tint sqrt_n = sqrt(n) + 1;\n\tfor (int i = 3; i <= sqrt_n; i+=2) {\n\t\tif (n % i == 0) return false;\n\t}\n\treturn true;\n}\n\nint main() {\n\tint n,d;\n\twhile (1) {\n\t\tcin>>n;\n\t\tif (n < 0) break;\n\t\tcin>>d;\n\t\tif (isPrime(n) && isPrime(reverseWithRadix(n,d))) cout<<\"Yes\"<<endl;\n\t\telse cout<<\"No\"<<endl;\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n## 1020 Tree Traversals (25)\n\n**题目描述**\n\n> Suppose that all the keys in a binary tree are distinct positive integers.  Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line gives a positive integer N (<=30), the total number of nodes in the binary tree.  The second line gives the **postorder** sequence and the third line gives the **inorder** sequence.  All the numbers in a line are separated by a space.\n\n**输出描述**\n\n> For each test case, print in one line the level order traversal sequence of the corresponding binary tree.  All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> 7\n> 2 3 1 5 7 6 4\n> 1 2 3 4 5 6 7\n\n**输出例子**\n\n> 4 1 6 3 5 7 2\n\npostorder: 后序遍历\n\ninorder: 中序遍历\n\nlevel order: 层序遍历（从根开始,依次向下,对于每一层从左向右遍历）\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nstruct node\n{\n\tnode* left;\n\tnode* right;\n\tint value;\n};\n\n\nnode* binaryTreeRoot(int* postorder, int* inorder, int len) {\n\tif (len <= 0) return NULL;\n\n\tnode* root = new node;\n\troot->value = *(postorder+len-1);\n\n\tint pos = 0;\n\tfor (; pos < len; pos++)\n\t\tif (*(inorder+pos) == root->value) break;\n\n\troot->left = binaryTreeRoot(postorder, inorder, pos);\n\tint rightLen = len - pos - 1;\n\troot->right = binaryTreeRoot(postorder+pos, inorder+pos+1, rightLen);\n\n\treturn root;\n}\n\nvoid deleteNodes(node* root) {\n\tif (root == NULL) return;\n\tdeleteNodes(root->left);\n\tdeleteNodes(root->right);\n\tdelete root;\n}\n\nint main() {\n\tint n;\n\tcin>>n;\n\tint* postorderNodes = new int[n];\n\tint* inorderNodes = new int[n];\n\tfor (int i = 0; i < n; i++) cin>>postorderNodes[i];\n\tfor (int i = 0; i < n; i++) cin>>inorderNodes[i];\n\n\tnode* root = binaryTreeRoot(postorderNodes, inorderNodes, n);\n\tif (!root) return 0;\n\n\tqueue<node*> levelNodes;\n\tlevelNodes.push(root);\n\twhile (1) {\n\t\tnode* tmp = levelNodes.front();\n\t\tif (tmp->left) levelNodes.push(tmp->left);\n\t\tif (tmp->right) levelNodes.push(tmp->right);\n\t\tcout<<tmp->value;\n\t\tlevelNodes.pop();\n\t\tif (!levelNodes.empty()) cout<<' ';\n\t\telse break;\n\t}\n\n\tdeleteNodes(root);\n\tdelete postorderNodes;\n\tdelete inorderNodes;\n\n\treturn 0;\n}\n```\n\n\n\n## 1023 Have Fun with Numbers (20)\n\n**题目描述**\n\n> Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication.  Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation.  Check to see the result if we double it again!\n>\n> Now you are suppose to check if there are more numbers with this property.  That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains one positive integer with no more than 20 digits.\n\n**输出描述**\n\n> For each test case, first print in a line \"Yes\" if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or \"No\" if not.  Then in the next line, print the doubled number.\n\n**输入例子**\n\n> 1234567899\n\n**输出例子**\n\n> Yes\n> 2469135798\n\n**实现代码**\n\n若双倍后多一位则为No;\n\n使用`digit_count[i]`保存数字`i`（0-9）的个数，\n\n再减去双倍后各个数字的个数，若每一个`digit_count[i]`均为0则为Yes,否则为No。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\n#include <stack>\n#include <climits>\nusing namespace std;\n\n\n\nint main() {\n\tint digit_count[10];\n\tfor (int i = 0; i < 10; i++) digit_count[i] = 0;\n\tstring s;\n\tcin>>s;\n\tint k = s.size();\n\tvector<int> digits;\n\tfor (int i = 0; i < k; i++) {\n\t\tint digit = s[i]-'0';\n\t\tdigits.push_back(digit);\n\t\tdigit_count[digit]++;\n\t}\n\tint carry = 0;\n\tfor (int i = k-1; i >= 0; i--) {\n\t\tdigits[i] = 2*digits[i] + carry;\n\t\tcarry = digits[i] / 10;\n\t\tdigits[i] %= 10;\n\t\tdigit_count[digits[i]]--;\n\t}\n\tif (carry) {\n\t\tcout<<\"No\\n\"<<carry;\n\t\tfor (int i = 0; i < k; i++) cout<<digits[i];\n\t\treturn 0;\n\t}\n\tbool result = true;\n\tfor (int i = 0; i < 10; i++)\n\t\tif (digit_count[i] != 0) {\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\tif (result) cout<<\"Yes\\n\";\n\telse cout<<\"No\\n\";\n\tfor (int i = 0; i < k; i++) cout<<digits[i];\n\n\treturn 0;\n}\n\n```\n\n\n\n\n\n## 1027 Colors in Mars (20)\n\n**题目描述**\n\n> People in Mars represent the colors in their computers in a similar way as the Earth people.  That is, a color is represented by a 6-digit number, where the first 2 digits are for Red, the middle 2 digits for Green, and the last 2 digits  for Blue.  The only difference is that they use radix 13 (0-9 and A-C) instead of 16.  Now given a color in three decimal numbers (each between 0 and 168), you are supposed to output their Mars RGB values.\n\n**输入描述**\n\n> Each input file contains one test case which occupies a line containing the three decimal color values.\n\n**输出描述**\n\n> For each test case you should output the Mars RGB value in the following format: first output \"#\", then followed by a 6-digit number where all the English characters must be upper-cased.  If a single color is only 1-digit long, you must print a \"0\" to the left.\n\n**输入例子**\n\n> 15 43 71\n\n**输出例子**\n\n> \\#123456\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout<<'#';\n    int n;\n    for (int i = 0; i < 3; i++) {\n        cin>>n;\n        int tmp = n/13;\n        if (tmp > 9) cout<<char((tmp-10)+'A');\n        else cout<<tmp;\n        tmp = n%13;\n        if (tmp > 9) cout<<char((tmp-10)+'A');\n        else cout<<tmp;\n    }\n    return 0;\n}\n```\n\n\n\n## 1028 List Sorting (25)\n\n**题目描述**\n\n> Excel can sort records according to any column.  Now you are supposed to imitate this function.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains two integers N (<=100000) and C, where N is the number of records and C is the column that you are supposed to sort the records with.  Then N lines follow, each contains a record of a student.  A student's record consists of his or her distinct ID (a 6-digit number), name (a string with no more than 8 characters without space), and grade (an integer between 0 and 100, inclusive).\n\n**输出描述**\n\n> For each test case, output the sorting result in N lines.  That is, if C = 1 then the records must be sorted in increasing order according to ID's; if C = 2 then the records must be sorted in non-decreasing order according to names; and if C = 3 then the records must be sorted in non-decreasing order according to grades.  **If there are several students who have the same name or grade, they must be sorted according to their ID's in increasing order.**\n\n**输入例子**\n\n> 3 1\n> 000007 James 85\n> 000010 Amy 90\n> 000001 Zoe 60\n\n**输出例子**\n\n> 000001 Zoe 60\n> 000007 James 85\n> 000010 Amy 90\n\n**实现代码**\n\n利用结构体，使用sort函数排序。\n\n```c++\n#include <iostream>\n#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\nusing namespace std;\n\nstruct student\n{\n\tstring id;\n\tstring name;\n\tint grade;\n\tstudent(string i, string n, int g) {id = i, name = n, grade = g;}\n};\n\nbool cmp1(student a, student b) {\n\treturn a.id < b.id;\n}\n\nbool cmp2(student a, student b) {\n\treturn (a.name == b.name)?(a.id < b.id):(a.name < b.name);\n}\n\nbool cmp3(student a, student b) {\n\treturn (a.grade == b.grade)?(a.id < b.id):(a.grade < b.grade);\n}\n\nint main() {\n\tint n,c;\n\tcin>>n>>c;\n\tvector<student> students;\n\n\tstring id,name;\n\tint grade;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>id>>name>>grade;\n\t\tstudents.push_back(student(id,name,grade));\n\t}\n\n\tif (c == 1) sort(students.begin(),students.end(),cmp1);\n\telse if (c == 2) sort(students.begin(),students.end(),cmp2);\n\telse sort(students.begin(),students.end(),cmp3);\n\n\tif (n > 0) cout<<students[0].id<<' '<<students[0].name<<' '<<students[0].grade;\n\tfor (int i = 1; i < n; i++) {\n\t\tcout<<\"\\n\"<<students[i].id<<' '<<students[i].name<<' '<<students[i].grade;\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1029 Median (25)\n\n**题目描述**\n\n> Given an increasing sequence S of N integers, the *median* is the number at the middle position.  For example, the median of S1={11, 12, 13, 14} is 12, and the median of S2={9, 10, 15, 16, 17} is 15.  The median of two sequences is defined to be the median of the nondecreasing sequence which contains all the elements of both sequences.  For example, the median of S1 and S2 is 13.\n> Given two increasing sequences of integers, you are asked to find their median.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case occupies 2 lines, each gives the information of a sequence.  For each sequence, the first positive integer N (<=1000000) is the size of that sequence.  Then N integers follow, separated by a space.  It is guaranteed that all the integers are in the range of **long int**.\n\n**输出描述**\n\n> For each test case you should output the median of the two given sequences in a line.\n\n**输入例子**\n\n> 4 11 12 13 14\n> 5 9 10 15 16 17\n\n**输出例子**\n\n> 13\n\n**实现代码**\n\n用两个数组存储两组数据，每组数据一个pos，比较两个pos出的数值大小，较小值的pos向后移，直到找到中位数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nint main() {\n\tint m,n;\n\tcin>>m;\n\tint* firstSequence = new int[m];\n\tfor (int i = 0; i < m; i++) cin>>firstSequence[i];\n\tcin>>n;\n\tint* secondSequence = new int[n];\n\tfor (int i = 0; i < n; i++) cin>>secondSequence[i];\n\n\tint firstPos = 0, secondPos = 0;\n\tfor (int i = int((m+n+1)/2); i > 0; i--) {\n\t\tif (i == 1) {\n\t\t\tif (firstPos == m) cout<<secondSequence[secondPos];\n\t\t\telse if (secondPos == n) cout<<firstSequence[firstPos];\n\t\t\telse if (firstSequence[firstPos] < secondSequence[secondPos]) cout<<firstSequence[firstPos];\n\t\t\telse cout<<secondSequence[secondPos];\n\t\t} else {\n\t\t\tif (firstPos == m) secondPos++;\n\t\t\telse if (secondPos == n) firstPos++;\n\t\t\telse if (firstSequence[firstPos] < secondSequence[secondPos]) firstPos++;\n\t\t\telse secondPos++;\n\t\t}\n\t}\n\n\tdelete firstSequence;\n\tdelete secondSequence;\n\n\treturn 0;\n}\n```\n\n\n\n## 1030 Travel Plan (30)\n\n**题目描述**\n\n> A traveler's map gives the distances between cities along the highways, together with the cost of each highway. \n>  Now you are supposed to write a program to help a traveler to decide the shortest path between his/her starting city and the destination.\n>  If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.\n>\n>  DECLARE: The test data in PAT is wrong,we strengthened the test data.If the same code got passed in pat,it may not be able to get passed in NOWCODER,please check your code.(This means that our test data is no problem,I guarantee.)\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a line containing 4 positive integers N, M, S, and D, where N (<=500) is the number of cities (and hence the cities are numbered from 0 to N-1); M is the number of highways; S and D are the starting and the destination cities, respectively. Then M lines follow, each provides the information of a highway, in the format:\n>  City1 City2 Distance Cost\n>\n>  where the numbers are all integers no more than 500, and are separated by a space.\n\n**输出描述**\n\n> For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.\n\n**输入例子**\n\n> 4 5 0 3\n>\n> 0 1 1 20\n>\n> 1 3 2 30\n>\n> 0 3 4 10\n>\n> 0 2 2 20\n>\n> 2 3 1 20\n\n**输出例子**\n\n> 0 2 3 3 40\n\n**实现代码**\n\n最短路问题，用Dijkstra（迪杰斯特拉）算法解即可。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\n#include <stack>\n#include <climits>\nusing namespace std;\n\nstruct highway\n{\n\tint endCity;\n\tint distance;\n\tint cost;\n\thighway(int e, int d, int c) {endCity=e,distance=d,cost=c;}\n};\n\n\nint main() {\n\t// N为城市数，M为公路数，S为开始城市，D为结束城市\n\tint N,M,S,D;\n\tcin>>N>>M>>S>>D;\n\n\t// highways(i) 为与城市i相连的所有公路\n\tvector<vector<highway> > highways(N);\n\tbool* visited = new bool[N];\n\tint* distance = new int[N];\n\tint* cost = new int[N];\n\tint* lastCity = new int[N];\n\tfor (int i = 0; i < N; i++) \n\t\tvisited[i] = false, distance[i] = cost[i] = INT_MAX;\n\n\t// 读入数据，更新highways\n\tint tmp_city_1, tmp_city_2, tmp_distance, tmp_cost;\n\twhile (M--) {\n\t\tcin>>tmp_city_1>>tmp_city_2>>tmp_distance>>tmp_cost;\n\t\thighways[tmp_city_1].push_back(highway(tmp_city_2,tmp_distance,tmp_cost));\n\t\thighways[tmp_city_2].push_back(highway(tmp_city_1,tmp_distance,tmp_cost));\n\t}\n\n\t// dijkstra\n\tint currentCity = S;\n\tvisited[S] = true, distance[S] = cost[S] = 0, lastCity[S] = S;\n\twhile (currentCity != D) {\n\t\tfor (int i = 0; i < highways[currentCity].size(); i++) {\n\t\t\tint tmp_endCity = highways[currentCity][i].endCity, \n\t\t\t\ttmp_distance = highways[currentCity][i].distance,\n\t\t\t\ttmp_cost = highways[currentCity][i].cost;\t\t\t\t\n\t\t\tif (visited[tmp_endCity]) continue;\n\t\t\tif (distance[currentCity] + tmp_distance < distance[tmp_endCity] ||\n\t\t\t\t(distance[currentCity] + tmp_distance == distance[tmp_endCity] && \n\t\t\t\t cost[currentCity] + tmp_cost < cost[tmp_endCity])) {\n\t\t\t\tdistance[tmp_endCity] = distance[currentCity] + tmp_distance;\n\t\t\t\tcost[tmp_endCity] = cost[currentCity] + tmp_cost;\n\t\t\t\tlastCity[tmp_endCity] = currentCity;\n\t\t\t}\n\t\t}\n\t\tint minDistance = INT_MAX;\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tif (visited[i]) continue;\n\t\t\tif (distance[i] < minDistance) minDistance=distance[i],currentCity = i;\n\t\t}\n\t\t// 添加离起始点最短的点到已访问集\n\t\tvisited[currentCity] = true;\n\t}\n\n\t// 逆序列逆向输出即为最短路径\n\tstack<int> pathStack;\n\tpathStack.push(D);\n\tcurrentCity = D;\n\twhile (currentCity != S) {\n\t\tcurrentCity = lastCity[currentCity];\n\t\tpathStack.push(currentCity);\n\t}\n\n\twhile (!pathStack.empty()) {\n\t\tcout<<pathStack.top()<<' ';\n\t\tpathStack.pop();\n\t}\n\tcout<<distance[D]<<' '<<cost[D];\n\n\tdelete visited,distance,cost,lastCity;\n\treturn 0;\n}\n\n```\n\n\n\n## 1035 Password (20)\n\n**题目描述**\n\n> To prepare for PAT, the judge sometimes has to generate random passwords for the users.  The problem is that there are always some confusing passwords since it is hard to distinguish 1 (one) from l (L in lowercase), or 0 (zero) from O (o in uppercase).  One solution is to replace 1 (one) by @, 0 (zero) by %, l by L, and O by o.  Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a positive integer N (<= 1000), followed by N lines of accounts.  Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.\n\n**输出描述**\n\n> For each test case, first print the number M of accounts that have been modified, then print in the following M lines the modified accounts info, that is, the user names and the corresponding modified passwords.  The accounts must be printed in the same order as they are read in.  If no account is modified, print in one line \"There are N accounts and no account is modified\" where N is the total number of accounts.  However, if N is one, you must print \"There is 1 account and no account is modified\" instead.\n\n**输入例子**\n\n> 3\n> Team000002 Rlsp0dfa\n> Team000003 perfectpwd\n> Team000001 R1spOdfa\n\n**输出例子**\n\n> 2\n> Team000002 RLsp%dfa\n> Team000001 R@spodfa\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\nusing namespace std;\n\nstruct account\n{\n\tstring id;\n\tstring password;\n\taccount(string i, string p) {id = i, password = p;}\n};\n\nint main() {\n\tint n;\n\tcin>>n;\n\tvector<account> result;\n\n\tstring id,password;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>id>>password;\n\t\tif (password.find_first_of('0') == string::npos &&\n\t\t\tpassword.find_first_of('O') == string::npos &&\n\t\t\tpassword.find_first_of('1') == string::npos &&\n\t\t\tpassword.find_first_of('l') == string::npos)\n\t\t\tcontinue;\n\t\tfor (int s = 0; s < password.size(); s++) {\n\t\t\tif (password[s] == '0') password[s] = '%';\n\t\t\tif (password[s] == 'O') password[s] = 'o';\n\t\t\tif (password[s] == '1') password[s] = '@';\n\t\t\tif (password[s] == 'l') password[s] = 'L';\n\t\t}\n\t\tresult.push_back(account(id,password));\n\t}\n\n\tint result_len = result.size();\n\tif (n == 1 && result_len == 0) {\n\t\tcout<<\"There is 1 account and no account is modified\";\n\t} else if (result_len == 0) {\n\t\tcout<<\"There are \"<<n<<\" accounts and no account is modified\";\n\t} else {\n\t\tcout<<result_len;\n\t\tfor (int i = 0; i < result_len; i++) {\n\t\t\tcout<<\"\\n\"<<result[i].id<<' '<<result[i].password;\n\t\t}\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n\n\n## 1036 Boys vs Girls (25)\n\n**题目描述**\n\n> This time you are asked to tell the difference between the lowest grade of all the male students and the highest grade of all the female students.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a positive integer N, followed by N lines of student information.  Each line contains a student's name, gender, ID and grade, separated by a space, where name and ID are strings of no more than 10 characters with no space, gender is either F (female) or M (male), and grade is an integer between 0 and 100.  It is guaranteed that all the grades are distinct.\n\n**输出描述**\n\n> For each test case, output in 3 lines.  The first line gives the name and ID of the female student with the highest grade, and the second line gives that of the male student with the lowest grade.  The third line gives the difference gradeF-gradeM.  If one such kind of student is missing, output \"Absent\" in the corresponding line, and output \"NA\" in the third line instead.\n\n**输入例子**\n\n> 3\n> Joe M Math990112 89\n> Mike M CS991301 100\n> Mary F EE990830 95\n\n**输出例子**\n\n> Mary EE990830\n> Joe Math990112\n> 6\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\nusing namespace std;\n\nint main() {\n\tint n;\n\tcin>>n;\n\tstring re_male_name, re_male_id;\n\tstring re_female_name, re_female_id;\n\tint re_male_grade = 101, re_female_grade = -1;\n\n\tstring name, gender, id;\n\tint grade;\n\twhile(n--) {\n\t\tcin>>name>>gender>>id>>grade;\n\t\tif (gender==\"M\") {\n\t\t\tif (grade < re_male_grade) {\n\t\t\t\tre_male_name = name;\n\t\t\t\tre_male_id = id;\n\t\t\t\tre_male_grade = grade;\n\t\t\t}\n\t\t} else {\n\t\t\tif (grade > re_female_grade) {\n\t\t\t\tre_female_name = name;\n\t\t\t\tre_female_id = id;\n\t\t\t\tre_female_grade = grade;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (re_female_name==\"\") cout<<\"Absent\"<<endl;\n\telse cout<<re_female_name<<' '<<re_female_id<<endl;\n\tif (re_male_name==\"\") cout<<\"Absent\"<<endl;\n\telse cout<<re_male_name<<' '<<re_male_id<<endl;\n\tif (re_female_name==\"\" || re_male_name==\"\") cout<<\"NA\";\n\telse cout<<re_female_grade - re_male_grade;\n\t\n\treturn 0;\n\n}\n```\n\n\n\n## 1037 Magic Coupon (25)\n\n**题目描述**\n\n> The magic shop in Mars is offering some magic coupons.  Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may get N times the value of that product back!  What is more, the shop also offers some bonus product for free.  However, if you apply a coupon with a positive N to this bonus product, you will have to pay the shop N times the value of the bonus product... but hey, magically, they have some coupons with negative N's! \n> For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M\\$) where a negative value corresponds to a bonus product.  You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; coupon 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back.  On the other hand, if you apply coupon 3 to product 4, you will have to pay M\\$12 to the shop.\n> Each coupon and each product may be selected at most once.  Your task is to get as much money back as possible.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains the number of coupons NC, followed by a line with NC coupon integers.  Then the next line contains the number of products NP, followed by a line with NP product values.  Here 1<= NC, NP <= 105, and it is guaranteed that all the numbers will not exceed 230.\n\n**输出描述**\n\n> For each test case, simply print in a line the maximum amount of money you can get back.\n\n**输入例子**\n\n> 4\n> 1 2 4 -1\n> 4\n> 7 6 -2 -3\n\n**输出例子**\n\n> 43\n\n**实现代码**\n\n\n\n\n\n## 1054 The Dominant Color (20)\n\n**题目描述**\n\n> Behind the scenes in the computer's memory, color is always talked about as a series of 24 bits of information for each pixel.  In an image, the color with the largest proportional area is called the dominant color.  **A *strictly* dominant color takes more than half of the total area.**  Now given an image of resolution M by N (for example, 800x600), you are supposed to point out the strictly dominant color.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains 2 positive numbers: M (<=800) and N (<=600) which are the resolutions of the image.  Then N lines follow, each contains M digital colors in the range [0, 224).  It is guaranteed that the strictly dominant color exists for each input image.  All the numbers in a line are separated by a space.\n\n**输出描述**\n\n> For each test case, simply print the dominant color in a line.\n\n**输入例子**\n\n> 5 3\n> 0 0 255 16777215 24\n> 24 24 0 0 24\n> 24 0 24 24 24\n\n**输出例子**\n\n>  24\n\n首先要注意到dominant color是超过半数的，刚开始只想到了排序后最中间的数一定为结果，但是要存储的数据太多，后来看了[参考链接](https://blog.csdn.net/zhu_liangwei/article/details/9734671)，学会了下边这个方法。\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int m, n, all_count, tmp, re = -1, count = 0;\n    cin>>m>>n;\n    all_count = m*n;\n    while (all_count--) {\n        cin>>tmp;\n        if (count == 0) re = tmp;\n        if (re == tmp) count++;\n        else count--;\n    }\n    cout<<re;\n    return 0;\n}\n```\n\n## 1081 Rational Sum (20)\n\n**题目描述**\n\n> Given N rational numbers in the form \"numerator/denominator\", you are supposed to calculate their sum.\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a positive integer N (<=100), followed in the next line N rational numbers \"a1/b1 a2/b2 ...\" where all the numerators and denominators are in the range of \"long int\".  If there is a negative number, then the sign must appear in front of the numerator.\n\n**输出描述**\n\n> For each test case, output the sum in the simplest form \"integer numerator/denominator\" where \"integer\" is the integer part of the sum, \"numerator\" < \"denominator\", and the numerator and the denominator have no common factor.  You must output only the fractional part if the integer part is 0.\n\n**输入例子**\n\n> 5\n> 2/5 4/15 1/30 -2/60 8/3\n\n**输出例子**\n\n> 3 1/3\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\nusing namespace std;\n\nlong long gcd(long long a, long long b) {\n    return ((b==0)?abs(a):gcd(b,a%b));\n}\n\nint main() {\n    long long n, tmp_gcd;\n    cin>>n;\n    char c;\n    long long re_integer = 0, re_numerator, re_denominator;\n    cin>>re_numerator>>c>>re_denominator;\n    tmp_gcd = gcd(re_numerator,re_denominator);\n    re_numerator/=tmp_gcd,re_denominator/=tmp_gcd;\n    re_integer += int(re_numerator/re_denominator);\n    re_numerator%=re_denominator;\n    while(--n) {\n        long long tmp_nu, tmp_de, tmp_nu_re, tmp_de_re;\n        cin>>tmp_nu>>c>>tmp_de;\n        tmp_de_re = tmp_de * re_denominator;\n        tmp_nu_re = tmp_nu * re_denominator + tmp_de * re_numerator;\n        tmp_gcd = gcd(tmp_de_re,tmp_nu_re);\n        tmp_de_re/=tmp_gcd,tmp_nu_re/=tmp_gcd;\n        re_integer += int(tmp_nu_re/tmp_de_re);\n        re_numerator = tmp_nu_re % tmp_de_re;\n        re_denominator = tmp_de_re;\n    }\n    if (re_integer == 0 && re_numerator == 0) cout<<0;\n    else if (re_integer == 0) {\n    \tcout<<re_numerator<<'/'<<re_denominator;\n\t} else if (re_numerator == 0) {\n\t\tcout<<re_integer;\n\t} else {\n\t\tcout<<re_integer<<' '<<re_numerator<<'/'<<re_denominator;\n\t}\n    return 0;\n}\n```\n\n\n\n## 1082 Read Number in Chinese (25)\n\n**题目描述**\n\n> Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way.  Output \"Fu\" first if it is negative.  For example, -123456789 is read as \"Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu\".  Note: zero (\"ling\") must be handled correctly according to the Chinese tradition.  For example, 100800 is \"yi Shi Wan ling ba Bai\".\n\n**输入描述**\n\n> Each input file contains one test case, which gives an integer with no more than 9 digits.\n\n**输出描述**\n\n> For each test case, print in a line the Chinese way of reading the number.  The characters are separated by a space and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> -123456789\n\n**输出例子**\n\n> Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu\n\n**实现代码**\n\n首先按照数字单位的顺序添加到结果容器中，然后遍历结果容器，如果有连续重复的\"ling\"只留一个，如果\"Wan\"前有“ling”去掉0，如果\"Wan\"直接跟在“Yi”后边将“Wan”换成“ling”。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n\tstring units[] = {\"\",\"Shi\",\"Bai\",\"Qian\",\"Wan\",\"Shi\",\"Bai\",\"Qian\",\"Yi\"};\n\tstring digits[] = {\"ling\",\"yi\",\"er\",\"san\",\"si\",\"wu\",\"liu\",\"qi\",\"ba\",\"jiu\"};\n\tvector<string> re;\n\tint n;\n\tcin>>n;\n\tif (n < 0) {\n\t\tre.push_back(\"Fu\");\n\t\tn = -n;\n\t}\n\tif (n == 0) {\n\t\tcout<<\"ling\";\n\t\treturn 0;\n\t}\n\tvector<int> n_digits;\n\twhile (n > 0) {\n\t\tn_digits.push_back(n%10);\n\t\tn/=10;\n\t}\n\tint len = n_digits.size();\n\tfor (int i = len-1; i >= 0; i--) {\n\t\tre.push_back(digits[n_digits[i]]);\n\t\tif (i==4 || n_digits[i] != 0 && i>0) re.push_back(units[i]);\n\t}\n\tvector<string>::iterator iter = re.begin()+1;\n\twhile (iter < re.end()) {\n\t\tif (*(iter)==\"ling\" && *(iter-1)==\"ling\")\n\t\t\tre.erase(iter);\n\t\telse if (*(iter)==\"Wan\" && *(iter-1)==\"ling\")\n\t\t\tre.erase((iter--)-1);\n\t\telse if (*(iter)==\"Wan\" && *(iter-1)==\"Yi\")\n\t\t\t*(iter++) = \"ling\";\n\t\telse\n\t\t\titer++;\n\t}\n\tif (re.size()>1 && re[re.size()-1]==\"ling\") re.erase(re.end()-1);\n\tcout<<re[0];\n\tfor (int i = 1; i < re.size(); i++) cout<<' '<<re[i];\n\t\t\n\treturn 0;\n}\n\n```\n\n\n\n## 1083 List Grades (25)\n\n**题目描述**\n\n> Given a list of N student records with name, ID and grade.  You are supposed to sort the records with respect to the grade in non-increasing order, and output those student records of which the grades are in a given interval.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case is given in the following format:\n> N\n> name[1] ID[1] grade[1]\n> name[2] ID[2] grade[2]\n> ... ...\n> name[N] ID[N] grade[N]\n> grade1 grade2\n>\n> where name[i] and ID[i] are strings of no more than 10 characters with no space, grade[i] is an integer in [0, 100], grade1 and grade2 are the boundaries of the grade's interval.  It is guaranteed that all the grades are *distinct*.\n\n**输出描述**\n\n> For each test case you should output the student records of which the grades are in the given interval [grade1, grade2] and are in non-increasing order.  Each student record occupies a line with the student's name and ID, separated by one space.  If there is no student's grade in that interval, output \"NONE\" instead.\n\n**输入例子**\n\n> 4\n> Tom CS000001 59\n> Joe Math990112 89\n> Mike CS991301 100\n> Mary EE990830 95\n> 60 100\n\n**输出例子**\n\n> Mike CS991301\n> Mary EE990830\n> Joe Math990112\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\n\nstruct student\n{\n\tstring name;\n\tstring id;\n\tint grade;\n\tstudent(string n,string i, int g) {\n\t\tname = n;\n\t\tid = i;\n\t\tgrade = g;\n\t}\n};\n\nint main() {\n\tint n;\n\tcin>>n;\n\tvector<student> re;\n\n\tstring name,id;\n\tint grade;\n\twhile(n--) {\n\t\tcin>>name>>id>>grade;\n\t\tstudent tmp(name,id,grade);\n\t\tre.push_back(tmp);\n\t}\n\tint min_grade,max_grade;\n\tcin>>min_grade>>max_grade;\n\n\tvector<student>::iterator iter = re.begin();\n\twhile (iter != re.end()) {\n\t\tif ((*iter).grade < min_grade || (*iter).grade > max_grade)\n\t\t\tre.erase(iter);\n\t\telse\n\t\t\titer++;\n\t}\n\n\tfor (int k = 0 ; k < re.size(); k++) {\n\t\tfor (int i = 0 ; i < re.size()-1; i++) {\n\t\t\tif (re[i].grade < re[i+1].grade) {\n\t\t\t\tstudent tmp(re[i].name,re[i].id,re[i].grade);\n\t\t\t\tre[i] = re[i+1];\n\t\t\t\tre[i+1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (re.empty()) cout<<\"NONE\";\n\telse {\n\t\tcout<<re[0].name<<' '<<re[0].id;\n\t\tfor (int i = 1; i < re.size(); i++)\n\t\t\tcout<<\"\\n\"<<re[i].name<<' '<<re[i].id;\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1086 Tree Traversals Again (25)\n\n**题目描述**\n\n> An inorder binary tree traversal can be implemented in a non-recursive way with a stack.  For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop().  Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations.  Your task is to give the postorder traversal sequence of this tree.\n>\n> ![](/images/pat_1086.jpg)\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains a positive integer N (<=30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N).  Then 2N lines follow, each describes a stack operation in the format: \"Push X\" where X is the index of the node being pushed onto the stack; or \"Pop\" meaning to pop one node from the stack.\n\n**输出描述**\n\n> For each test case, print the postorder traversal sequence of the corresponding tree in one line.  A solution is guaranteed to exist.  All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> 6\n> Push 1\n> Push 2\n> Push 3\n> Pop\n> Pop\n> Push 4\n> Pop\n> Pop\n> Push 5\n> Push 6\n> Pop\n> Pop\n\n**输出例子**\n\n> 3 4 2 6 5 1\n\n**实现代码**\n\n以上述例子为例，按顺序排下来123456为前序，使用栈的pop顺序为中序，利用前序和中序可以得到后序。\n\n注意1-N为标号，每次push的为值，值有可能重复，但是push顺序为标号1-N。\n\n可以用下边这个测试用例测试：\n\n> //输入\n>\n> 19\n> Push 4\n> Push 11\n> Push 7\n> Push 12\n> Pop\n> Pop\n> Pop\n> Push 14\n> Push 17\n> Pop\n> Pop\n> Push 6\n> Push 18\n> Pop\n> Push 8\n> Pop\n> Pop\n> Push 4\n> Pop\n> Pop\n> Push 11\n> Push 16\n> Push 11\n> Push 12\n> Pop\n> Push 2\n> Pop\n> Pop\n> Pop\n> Push 7\n> Push 4\n> Pop\n> Pop\n> Push 12\n> Pop\n> Pop\n> Push 11\n> Pop\n>\n> // 输出\n>\n> 12 7 17 8 18 4 6 14 11 2 12 11 4 12 7 16 11 11 4 \n\n我的代码如下：\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <stack>\nusing namespace std;\n\nvector<int> post;\nvoid generatePostOrder(vector<int> pre, vector<int> in, int len) {\n\tif (len <= 0) return;\n\tif (len == 1) {\n\t\tpost.push_back(pre[0]);\n\t\treturn;\n\t}\n\tint root_num = pre[0], root_pos_of_in = 0;\n\tfor (; root_pos_of_in < len; root_pos_of_in++) {\n\t\tif (in[root_pos_of_in] == root_num) break;\n\t}\n\tint left_len = root_pos_of_in;\n\tint right_len = len - left_len - 1;\n\tvector<int> pre_left,pre_right,in_left,in_right;\n\tpre_left.assign(pre.begin()+1, pre.begin()+1+left_len);\n\tpre_right.assign(pre.begin()+1+left_len, pre.end());\n\tin_left.assign(in.begin(),in.begin()+left_len);\n\tin_right.assign(in.begin()+left_len+1, in.end());\n\tgeneratePostOrder(pre_left,in_left,left_len);\n\tgeneratePostOrder(pre_right,in_right,right_len);\n\tpost.push_back(root_num);\n}\n\nint main() {\n\tint n, tmp;\n\tcin>>n;\n\tstring op;\n\tvector<int> pre,in,value;\n\tstack<int> tmp_stack;\n\tint index = 0;\n\tfor (int i = 0; i < 2*n; i++) {\n\t\tcin>>op;\n\t\tif (op == \"Push\") {\n\t\t\tcin>>tmp;\n\t\t\tvalue.push_back(tmp);\n\t\t\ttmp_stack.push(index);\n\t\t\tpre.push_back(index++);\n\t\t} else {\n\t\t\tin.push_back(tmp_stack.top());\n\t\t\ttmp_stack.pop();\n\t\t}\n\t}\n\tgeneratePostOrder(pre,in,n);\n\tif (n > 0) cout<<value[post[0]];\n\tfor (int i = 1; i < n; i++) {\n\t\tcout<<\" \"<<value[post[i]];\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n\n\n\n\n## 10xx\n\n**题目描述**\n\n> \n\n**输入描述**\n\n> \n\n**输出描述**\n\n> \n\n**输入例子**\n\n> \n\n**输出例子**\n\n> \n\n**实现代码**\n\n","slug":"PAT刷题记录","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtz0000c7bag1qbyhgts","content":"<p>OJ：<a href=\"https://www.nowcoder.com/pat\" target=\"_blank\" rel=\"noopener\">牛客网</a></p>\n<hr>\n<h2 id=\"1001-A-B-Format-20\"><a href=\"#1001-A-B-Format-20\" class=\"headerlink\" title=\"1001 A+B Format (20)\"></a>1001 A+B Format (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Calculate a + b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a pair of integers a and b where -1000000 &lt;= a, b &lt;= 1000000.  The numbers are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, you should output the sum of a and b in one line.  The sum must be written in the standard format.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>-1000000 9</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>-999,991</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> digit[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) digit[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,re;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    re = a + b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">'-'</span>;</span><br><span class=\"line\">        re = -re;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(re) &#123;</span><br><span class=\"line\">        digit[i] = (re%<span class=\"number\">10</span>);</span><br><span class=\"line\">        re/=<span class=\"number\">10</span>;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i<span class=\"number\">-1</span>; k &gt;=<span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;digit[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k%<span class=\"number\">3</span> == <span class=\"number\">0</span> &amp;&amp; k&gt;<span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">','</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1002-A-B-for-Polynomials-25\"><a href=\"#1002-A-B-for-Polynomials-25\" class=\"headerlink\" title=\"1002 A+B for Polynomials (25)\"></a>1002 A+B for Polynomials (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time, you are supposed to find A+B where A and B are two polynomials.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:<br>K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively.  It is given that 1 &lt;= K &lt;= 10，0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the sum of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  <strong>Please be accurate to 1 decimal place.</strong></p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 2 1.5 1 2.9 0 3.2</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>注意保留小数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">item</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> value;</span><br><span class=\"line\">\titem(<span class=\"keyword\">int</span> a, <span class=\"keyword\">float</span> b) &#123;n=a,value=b;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;item&gt; polynomials;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_n;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> tmp_value;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\tpolynomials.push_back(item(tmp_n,tmp_value));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> hasItem = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (polynomials[i].n == tmp_n) &#123;</span><br><span class=\"line\">\t\t\t\thasItem = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\tpolynomials[i].value+=tmp_value;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (polynomials[i].value == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\tpolynomials.erase(polynomials.begin()+i);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasItem) polynomials.push_back(item(tmp_n,tmp_value));\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; polynomials.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (polynomials[i].n &lt; polynomials[i+<span class=\"number\">1</span>].n) &#123;</span><br><span class=\"line\">\t\t\t\titem tmp_item = polynomials[i];</span><br><span class=\"line\">\t\t\t\tpolynomials[i] = polynomials[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tpolynomials[i+<span class=\"number\">1</span>] = tmp_item;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;polynomials.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size(); i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %.1f\"</span>, polynomials[i].n, polynomials[i].value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1003-Emergency-25\"><a href=\"#1003-Emergency-25\" class=\"headerlink\" title=\"1003 Emergency (25)\"></a>1003 Emergency (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>As an emergency rescue team leader of a city, you are given a special map of your country.  The map shows several scattered cities connected by some roads.  Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map.  When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (&lt;= 500) - the number of cities (and the cities are numbered from 0 to N-1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively.  The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city.  Then M lines follow, each describes a road with three integers c1, c2 and L, which are the pair of cities connected by a road and the length of that road, respectively.<br>It is guaranteed that there exists at least one path from C1 to C2.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2, and the maximum amount of rescue teams you can possibly gather.</p>\n<p>All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5 6 0 2<br>1 2 1 5 3<br>0 1 1<br>0 2 2<br>0 3 1<br>1 2 1<br>2 4 1<br>3 4 1</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>2 4</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>dijkstra最短路</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">road</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> endCity;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length;</span><br><span class=\"line\">\troad(<span class=\"keyword\">int</span> e, <span class=\"keyword\">int</span> l) &#123;endCity = e, length = l;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m,c1,c2;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;c1&gt;&gt;c2;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; teamsCount;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp1,tmp2,tmp3;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp1;</span><br><span class=\"line\">\t\tteamsCount.push_back(tmp1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;road&gt; &gt; roads(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp1&gt;&gt;tmp2&gt;&gt;tmp3;</span><br><span class=\"line\">\t\troads[tmp1].push_back(road(tmp2,tmp3));</span><br><span class=\"line\">\t\troads[tmp2].push_back(road(tmp1,tmp3));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; maxTeams(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) maxTeams[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tmaxTeams[c1] = teamsCount[c1];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minLen(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) minLen[i] = INT_MAX;</span><br><span class=\"line\">\tminLen[c1] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> currentCity = c1;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minLenRoadCount(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) minLenRoadCount[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; visited(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tvisited[c1] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != c2) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = roads[currentCity].size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[roads[currentCity][i].endCity]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> endCity = roads[currentCity][i].endCity;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> length = roads[currentCity][i].length;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (minLen[endCity] &gt; minLen[currentCity] + length) &#123;</span><br><span class=\"line\">\t\t\t\tminLen[endCity] = minLen[currentCity] + length;</span><br><span class=\"line\">\t\t\t\tminLenRoadCount[endCity] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (minLen[endCity] == minLen[currentCity] + length) &#123;</span><br><span class=\"line\">\t\t\t\tminLenRoadCount[endCity]++;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (maxTeams[endCity] &lt; maxTeams[currentCity] + teamsCount[endCity])</span><br><span class=\"line\">\t\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> min = INT_MAX;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (minLen[i] &lt; min) &#123;</span><br><span class=\"line\">\t\t\t\tmin = minLen[i];</span><br><span class=\"line\">\t\t\t\tcurrentCity = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tvisited[currentCity] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;minLenRoadCount[c2]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;maxTeams[c2];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1004-Counting-Leaves-30\"><a href=\"#1004-Counting-Leaves-30\" class=\"headerlink\" title=\"1004 Counting Leaves (30)\"></a>1004 Counting Leaves (30)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A family hierarchy is usually presented by a pedigree tree.  Your job is to count those family members who have no child.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a line containing 0 &lt; N &lt; 100, the number of nodes in a tree, and M (&lt; N), the number of non-leaf nodes.  Then M lines follow, each in the format:</p>\n<p>ID K ID[1] ID[2] … ID[K]</p>\n<p>where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID’s of its children.  For the sake of simplicity, let us fix the root ID to be 01.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, you are supposed to count those family members who have no child <strong>for every seniority level</strong> starting from the root.  The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.<br>The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child.  Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node.  Then we should output “0 1” in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1<br>01 1 02</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>0 1</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_NODES 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> childs_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; childs;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">\tnode nodes[MAX_NODES];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id,k,tmp;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;k;</span><br><span class=\"line\">\t\tnodes[id].id = id;</span><br><span class=\"line\">\t\tnodes[id].childs_count = k;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">\t\t\t(nodes[id].childs).push_back(tmp);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; this_level, next_level;</span><br><span class=\"line\">\tthis_level.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count_output = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; this_level.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nodes[this_level[i]].childs_count == <span class=\"number\">0</span>) count_output++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> next_level.insert(next_level.begin(),nodes[this_level[i]].childs.begin(),nodes[this_level[i]].childs.end());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;count_output;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (next_level.empty()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\tthis_level = next_level;</span><br><span class=\"line\">\t\tnext_level.clear();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1005-Spell-It-Right-20\"><a href=\"#1005-Spell-It-Right-20\" class=\"headerlink\" title=\"1005 Spell It Right (20)\"></a>1005 Spell It Right (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies one line which contains an N (&lt;= 10^100).</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>12345</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>one five</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = n.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) re+=(n[i]-<span class=\"string\">'0'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">string</span> english[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"zero\"</span>,<span class=\"string\">\"one\"</span>,<span class=\"string\">\"two\"</span>,<span class=\"string\">\"three\"</span>,<span class=\"string\">\"four\"</span>,<span class=\"string\">\"five\"</span>,<span class=\"string\">\"six\"</span>,<span class=\"string\">\"seven\"</span>,<span class=\"string\">\"eight\"</span>,<span class=\"string\">\"nine\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> digit[<span class=\"number\">100</span>], re_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (re) &#123;</span><br><span class=\"line\">        digit[re_len] = (re%<span class=\"number\">10</span>);</span><br><span class=\"line\">        re/=<span class=\"number\">10</span>;</span><br><span class=\"line\">        re_len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = re_len<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;english[digit[i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1006-Sign-In-and-Sign-Out-25\"><a href=\"#1006-Sign-In-and-Sign-Out-25\" class=\"headerlink\" title=\"1006 Sign In and Sign Out (25)\"></a>1006 Sign In and Sign Out (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door.  Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case contains the records for one day.  The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:</p>\n<p>ID_number Sign_in_time Sign_out_time</p>\n<p>where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day.  The two ID numbers must be separated by one space.<br>Note:  It is guaranteed that the records are consistent.  That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>CS301111 15:30:28 17:00:10<br>SC3021234 08:00:00 11:25:25<br>CS301133 21:45:00 21:58:40</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>SC3021234 CS301133</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">a_larger_than_b</span><span class=\"params\">(<span class=\"built_in\">string</span> a, <span class=\"built_in\">string</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; b[i]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] &gt; b[i]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> id,in,out;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> result_in_id, result_in_time, result_out_id, result_out_time;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;in&gt;&gt;out;</span><br><span class=\"line\">    result_in_id = result_out_id = id;</span><br><span class=\"line\">    result_in_time = in;</span><br><span class=\"line\">    result_out_time = out;</span><br><span class=\"line\">    n--;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;in&gt;&gt;out;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a_larger_than_b(result_in_time,in)) &#123;</span><br><span class=\"line\">            result_in_id = id;</span><br><span class=\"line\">            result_in_time = in;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a_larger_than_b(out,result_out_time)) &#123;</span><br><span class=\"line\">            result_out_id = id;</span><br><span class=\"line\">            result_out_time = out;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;result_in_id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;result_out_id;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1007-Maximum-Subsequence-Sum-25\"><a href=\"#1007-Maximum-Subsequence-Sum-25\" class=\"headerlink\" title=\"1007 Maximum Subsequence Sum (25)\"></a>1007 Maximum Subsequence Sum (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a sequence of K integers { N1<br>, N2<br>, …, NK<br> }.  A continuous subsequence is defined to be { Ni<br>, Ni+1<br>, …, Nj<br> } where 1 &lt;= i &lt;= j &lt;= K.  The <em>Maximum Subsequence</em><br> is the continuous subsequence which has the largest sum of its<br>elements.  For example, given sequence { -2, 11, -4, 13, -5, -2 }, its<br>maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>\n<p>Now you are supposed to find the largest sum, together with the first<br>and the last numbers of the maximum subsequence.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies two lines.  The first line contains a positive integer K (&lt;= 10000).  The second line contains K numbers, separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line.  In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case).  If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>10<br>-10 1 2 3 4 -5 -23 3 7 -21</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>10 1 4</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p><u>和为负的子序列一定不会是最大和子序列的开头。</u></p>\n<p>当当前和小于0时，使用临时”first number”记录下一个数，</p>\n<p>更新最大和时，当前数为“last number”， 临时“first number”中存储的值为“first number”的值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* nums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> allNegative = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;nums[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nums[i] &gt;= <span class=\"number\">0</span>) allNegative = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (allNegative) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;nums[<span class=\"number\">0</span>]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;nums[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>, currentSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> firstNum = nums[<span class=\"number\">0</span>], lastNum = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> firstNumCurrent = firstNum;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tcurrentSum+=nums[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (currentSum &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tfirstNumCurrent = nums[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSum &gt; maxSum) &#123;</span><br><span class=\"line\">\t\t\t\tmaxSum = currentSum;</span><br><span class=\"line\">\t\t\t\tfirstNum = firstNumCurrent;</span><br><span class=\"line\">\t\t\t\tlastNum = nums[i];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;maxSum&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;firstNum&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;lastNum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> nums;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1008-Elevator-20\"><a href=\"#1008-Elevator-20\" class=\"headerlink\" title=\"1008 Elevator (20)\"></a>1008 Elevator (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.<br>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print the total time on a single line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3 2 3 1</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>41</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b, n, re = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; b;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &gt; a) &#123;</span><br><span class=\"line\">            re+=((b-a)*<span class=\"number\">6</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            re+=((a-b)*<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        re+=<span class=\"number\">5</span>;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;re;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1009-Product-of-Polynomials-25\"><a href=\"#1009-Product-of-Polynomials-25\" class=\"headerlink\" title=\"1009 Product of Polynomials (25)\"></a>1009 Product of Polynomials (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time, you are supposed to find A*B where A and B are two polynomials.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:<br>K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively.  It is given that 1 &lt;= K &lt;= 10, 0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the product of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  Please be accurate up to 1 decimal place.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 3 3.6 2 6.0 1 1.6</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>把<a href=\"#1002-A-B-for-Polynomials-25\">1002 A+B for Polynomials (25)</a>稍微改一下就好。</p>\n<p>使用<code>float</code>虽然算出来明明是对的但是过不了牛客的测试，全部换成<code>double</code>就好了，不知道是什么问题。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">item</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> value;</span><br><span class=\"line\">\titem(<span class=\"keyword\">int</span> a, <span class=\"keyword\">double</span> b) &#123;n=a,value=b;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;item&gt; polynomials, result;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_n;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> tmp_value;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\tpolynomials.push_back(item(tmp_n,tmp_value));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; polynomials.size(); k++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">bool</span> hasItem = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (result[i].n == tmp_n+polynomials[k].n) &#123;</span><br><span class=\"line\">\t\t\t\t\thasItem = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t\tresult[i].value+=(tmp_value*polynomials[k].value);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (result[i].value == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\t\tresult.erase(result.begin()+i);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!hasItem) result.push_back(item(tmp_n+polynomials[k].n,tmp_value*polynomials[k].value));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; result.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result[i].n &lt; result[i+<span class=\"number\">1</span>].n) &#123;</span><br><span class=\"line\">\t\t\t\titem tmp_item = result[i];</span><br><span class=\"line\">\t\t\t\tresult[i] = result[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tresult[i+<span class=\"number\">1</span>] = tmp_item;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;result.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size(); i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %.1f\"</span>, result[i].n, result[i].value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1015-Reversible-Primes-20\"><a href=\"#1015-Reversible-Primes-20\" class=\"headerlink\" title=\"1015 Reversible Primes (20)\"></a>1015 Reversible Primes (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A <em>reversible prime</em><br> in any number system is a prime whose “reverse” in that<br>number system is also a prime. For example in the decimal system 73 is a<br>reversible prime because its reverse 37 is also a prime.</p>\n<p>Now given any two positive integers N (&lt; 105<br>) and D (1 &lt; D &lt;= 10), you are supposed to tell if N is a<br>reversible prime with radix D.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>The input file consists of several test cases.  Each case occupies a line which contains two integers N and D.  The input is finished by a negative N.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line “Yes” if N is a reversible prime with radix D, or “No” if not.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>73 10<br>23 2<br>23 10<br>-2</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Yes<br>Yes<br>No</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>求N以及N在D进制下反转后是否均为质数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">reverseWithRadix</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; remainers;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tremainers.push_back(n%d);</span><br><span class=\"line\">\t\tn/=d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> re = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bit_count = remainers.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bit_count; i++)</span><br><span class=\"line\">\t\tre+=(<span class=\"built_in\">pow</span>(d,bit_count-i<span class=\"number\">-1</span>)*remainers[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">4</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sqrt_n = <span class=\"built_in\">sqrt</span>(n) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= sqrt_n; i+=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,d;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isPrime(n) &amp;&amp; isPrime(reverseWithRadix(n,d))) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Yes\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1020-Tree-Traversals-25\"><a href=\"#1020-Tree-Traversals-25\" class=\"headerlink\" title=\"1020 Tree Traversals (25)\"></a>1020 Tree Traversals (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Suppose that all the keys in a binary tree are distinct positive integers.  Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line gives a positive integer N (&lt;=30), the total number of nodes in the binary tree.  The second line gives the <strong>postorder</strong> sequence and the third line gives the <strong>inorder</strong> sequence.  All the numbers in a line are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line the level order traversal sequence of the corresponding binary tree.  All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>7<br>2 3 1 5 7 6 4<br>1 2 3 4 5 6 7</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>4 1 6 3 5 7 2</p>\n</blockquote>\n<p>postorder: 后序遍历</p>\n<p>inorder: 中序遍历</p>\n<p>level order: 层序遍历（从根开始,依次向下,对于每一层从左向右遍历）</p>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tnode* left;</span><br><span class=\"line\">\tnode* right;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">node* <span class=\"title\">binaryTreeRoot</span><span class=\"params\">(<span class=\"keyword\">int</span>* postorder, <span class=\"keyword\">int</span>* inorder, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnode* root = <span class=\"keyword\">new</span> node;</span><br><span class=\"line\">\troot-&gt;value = *(postorder+len<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; pos &lt; len; pos++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (*(inorder+pos) == root-&gt;value) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\troot-&gt;left = binaryTreeRoot(postorder, inorder, pos);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> rightLen = len - pos - <span class=\"number\">1</span>;</span><br><span class=\"line\">\troot-&gt;right = binaryTreeRoot(postorder+pos, inorder+pos+<span class=\"number\">1</span>, rightLen);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteNodes</span><span class=\"params\">(node* root)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tdeleteNodes(root-&gt;left);</span><br><span class=\"line\">\tdeleteNodes(root-&gt;right);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* postorderNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* inorderNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;postorderNodes[i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;inorderNodes[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\tnode* root = binaryTreeRoot(postorderNodes, inorderNodes, n);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>&lt;node*&gt; levelNodes;</span><br><span class=\"line\">\tlevelNodes.push(root);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tnode* tmp = levelNodes.front();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tmp-&gt;left) levelNodes.push(tmp-&gt;left);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tmp-&gt;right) levelNodes.push(tmp-&gt;right);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;tmp-&gt;value;</span><br><span class=\"line\">\t\tlevelNodes.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!levelNodes.empty()) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdeleteNodes(root);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> postorderNodes;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> inorderNodes;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1023-Have-Fun-with-Numbers-20\"><a href=\"#1023-Have-Fun-with-Numbers-20\" class=\"headerlink\" title=\"1023 Have Fun with Numbers (20)\"></a>1023 Have Fun with Numbers (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication.  Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation.  Check to see the result if we double it again!</p>\n<p>Now you are suppose to check if there are more numbers with this property.  That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains one positive integer with no more than 20 digits.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, first print in a line “Yes” if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or “No” if not.  Then in the next line, print the doubled number.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>1234567899</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Yes<br>2469135798</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>若双倍后多一位则为No;</p>\n<p>使用<code>digit_count[i]</code>保存数字<code>i</code>（0-9）的个数，</p>\n<p>再减去双倍后各个数字的个数，若每一个<code>digit_count[i]</code>均为0则为Yes,否则为No。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> digit_count[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) digit_count[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;s;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = s.size();</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; digits;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> digit = s[i]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\tdigits.push_back(digit);</span><br><span class=\"line\">\t\tdigit_count[digit]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = k<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\tdigits[i] = <span class=\"number\">2</span>*digits[i] + carry;</span><br><span class=\"line\">\t\tcarry = digits[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tdigits[i] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tdigit_count[digits[i]]--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (carry) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\\n\"</span>&lt;&lt;carry;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) <span class=\"built_in\">cout</span>&lt;&lt;digits[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (digit_count[i] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tresult = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (result) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Yes\\n\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\\n\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) <span class=\"built_in\">cout</span>&lt;&lt;digits[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1027-Colors-in-Mars-20\"><a href=\"#1027-Colors-in-Mars-20\" class=\"headerlink\" title=\"1027 Colors in Mars (20)\"></a>1027 Colors in Mars (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>People in Mars represent the colors in their computers in a similar way as the Earth people.  That is, a color is represented by a 6-digit number, where the first 2 digits are for Red, the middle 2 digits for Green, and the last 2 digits  for Blue.  The only difference is that they use radix 13 (0-9 and A-C) instead of 16.  Now given a color in three decimal numbers (each between 0 and 168), you are supposed to output their Mars RGB values.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case which occupies a line containing the three decimal color values.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the Mars RGB value in the following format: first output “#”, then followed by a 6-digit number where all the English characters must be upper-cased.  If a single color is only 1-digit long, you must print a “0” to the left.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>15 43 71</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>#123456</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">'#'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = n/<span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp &gt; <span class=\"number\">9</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"keyword\">char</span>((tmp<span class=\"number\">-10</span>)+<span class=\"string\">'A'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;tmp;</span><br><span class=\"line\">        tmp = n%<span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp &gt; <span class=\"number\">9</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"keyword\">char</span>((tmp<span class=\"number\">-10</span>)+<span class=\"string\">'A'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1028-List-Sorting-25\"><a href=\"#1028-List-Sorting-25\" class=\"headerlink\" title=\"1028 List Sorting (25)\"></a>1028 List Sorting (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Excel can sort records according to any column.  Now you are supposed to imitate this function.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains two integers N (&lt;=100000) and C, where N is the number of records and C is the column that you are supposed to sort the records with.  Then N lines follow, each contains a record of a student.  A student’s record consists of his or her distinct ID (a 6-digit number), name (a string with no more than 8 characters without space), and grade (an integer between 0 and 100, inclusive).</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output the sorting result in N lines.  That is, if C = 1 then the records must be sorted in increasing order according to ID’s; if C = 2 then the records must be sorted in non-decreasing order according to names; and if C = 3 then the records must be sorted in non-decreasing order according to grades.  <strong>If there are several students who have the same name or grade, they must be sorted according to their ID’s in increasing order.</strong></p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3 1<br>000007 James 85<br>000010 Amy 90<br>000001 Zoe 60</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>000001 Zoe 60<br>000007 James 85<br>000010 Amy 90</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>利用结构体，使用sort函数排序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\tstudent(<span class=\"built_in\">string</span> i, <span class=\"built_in\">string</span> n, <span class=\"keyword\">int</span> g) &#123;id = i, name = n, grade = g;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp1</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.id &lt; b.id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp2</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a.name == b.name)?(a.id &lt; b.id):(a.name &lt; b.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp3</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a.grade == b.grade)?(a.id &lt; b.id):(a.grade &lt; b.grade);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,c;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;c;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt; students;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id,name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;name&gt;&gt;grade;</span><br><span class=\"line\">\t\tstudents.push_back(student(id,name,grade));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c == <span class=\"number\">1</span>) sort(students.begin(),students.end(),cmp1);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"number\">2</span>) sort(students.begin(),students.end(),cmp2);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> sort(students.begin(),students.end(),cmp3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;students[<span class=\"number\">0</span>].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[<span class=\"number\">0</span>].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[<span class=\"number\">0</span>].grade;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;students[i].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[i].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[i].grade;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1029-Median-25\"><a href=\"#1029-Median-25\" class=\"headerlink\" title=\"1029 Median (25)\"></a>1029 Median (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given an increasing sequence S of N integers, the <em>median</em> is the number at the middle position.  For example, the median of S1={11, 12, 13, 14} is 12, and the median of S2={9, 10, 15, 16, 17} is 15.  The median of two sequences is defined to be the median of the nondecreasing sequence which contains all the elements of both sequences.  For example, the median of S1 and S2 is 13.<br>Given two increasing sequences of integers, you are asked to find their median.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case occupies 2 lines, each gives the information of a sequence.  For each sequence, the first positive integer N (&lt;=1000000) is the size of that sequence.  Then N integers follow, separated by a space.  It is guaranteed that all the integers are in the range of <strong>long int</strong>.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the median of the two given sequences in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4 11 12 13 14<br>5 9 10 15 16 17</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>13</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>用两个数组存储两组数据，每组数据一个pos，比较两个pos出的数值大小，较小值的pos向后移，直到找到中位数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* firstSequence = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) <span class=\"built_in\">cin</span>&gt;&gt;firstSequence[i];</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* secondSequence = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;secondSequence[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> firstPos = <span class=\"number\">0</span>, secondPos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"keyword\">int</span>((m+n+<span class=\"number\">1</span>)/<span class=\"number\">2</span>); i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (firstPos == m) <span class=\"built_in\">cout</span>&lt;&lt;secondSequence[secondPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondPos == n) <span class=\"built_in\">cout</span>&lt;&lt;firstSequence[firstPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstSequence[firstPos] &lt; secondSequence[secondPos]) <span class=\"built_in\">cout</span>&lt;&lt;firstSequence[firstPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;secondSequence[secondPos];</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (firstPos == m) secondPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondPos == n) firstPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstSequence[firstPos] &lt; secondSequence[secondPos]) firstPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> secondPos++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> firstSequence;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> secondSequence;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1030-Travel-Plan-30\"><a href=\"#1030-Travel-Plan-30\" class=\"headerlink\" title=\"1030 Travel Plan (30)\"></a>1030 Travel Plan (30)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A traveler’s map gives the distances between cities along the highways, together with the cost of each highway.<br> Now you are supposed to write a program to help a traveler to decide the shortest path between his/her starting city and the destination.<br> If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.</p>\n<p> DECLARE: The test data in PAT is wrong,we strengthened the test data.If the same code got passed in pat,it may not be able to get passed in NOWCODER,please check your code.(This means that our test data is no problem,I guarantee.)</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a line containing 4 positive integers N, M, S, and D, where N (&lt;=500) is the number of cities (and hence the cities are numbered from 0 to N-1); M is the number of highways; S and D are the starting and the destination cities, respectively. Then M lines follow, each provides the information of a highway, in the format:<br> City1 City2 Distance Cost</p>\n<p> where the numbers are all integers no more than 500, and are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4 5 0 3</p>\n<p>0 1 1 20</p>\n<p>1 3 2 30</p>\n<p>0 3 4 10</p>\n<p>0 2 2 20</p>\n<p>2 3 1 20</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>0 2 3 3 40</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>最短路问题，用Dijkstra（迪杰斯特拉）算法解即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">highway</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> endCity;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> distance;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">\thighway(<span class=\"keyword\">int</span> e, <span class=\"keyword\">int</span> d, <span class=\"keyword\">int</span> c) &#123;endCity=e,distance=d,cost=c;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// N为城市数，M为公路数，S为开始城市，D为结束城市</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> N,M,S,D;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;N&gt;&gt;M&gt;&gt;S&gt;&gt;D;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// highways(i) 为与城市i相连的所有公路</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;highway&gt; &gt; highways(N);</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span>* visited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* distance = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* cost = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* lastCity = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </span><br><span class=\"line\">\t\tvisited[i] = <span class=\"literal\">false</span>, distance[i] = cost[i] = INT_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读入数据，更新highways</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_city_1, tmp_city_2, tmp_distance, tmp_cost;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (M--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_city_1&gt;&gt;tmp_city_2&gt;&gt;tmp_distance&gt;&gt;tmp_cost;</span><br><span class=\"line\">\t\thighways[tmp_city_1].push_back(highway(tmp_city_2,tmp_distance,tmp_cost));</span><br><span class=\"line\">\t\thighways[tmp_city_2].push_back(highway(tmp_city_1,tmp_distance,tmp_cost));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// dijkstra</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> currentCity = S;</span><br><span class=\"line\">\tvisited[S] = <span class=\"literal\">true</span>, distance[S] = cost[S] = <span class=\"number\">0</span>, lastCity[S] = S;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != D) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; highways[currentCity].size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> tmp_endCity = highways[currentCity][i].endCity, </span><br><span class=\"line\">\t\t\t\ttmp_distance = highways[currentCity][i].distance,</span><br><span class=\"line\">\t\t\t\ttmp_cost = highways[currentCity][i].cost;\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[tmp_endCity]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distance[currentCity] + tmp_distance &lt; distance[tmp_endCity] ||</span><br><span class=\"line\">\t\t\t\t(distance[currentCity] + tmp_distance == distance[tmp_endCity] &amp;&amp; </span><br><span class=\"line\">\t\t\t\t cost[currentCity] + tmp_cost &lt; cost[tmp_endCity])) &#123;</span><br><span class=\"line\">\t\t\t\tdistance[tmp_endCity] = distance[currentCity] + tmp_distance;</span><br><span class=\"line\">\t\t\t\tcost[tmp_endCity] = cost[currentCity] + tmp_cost;</span><br><span class=\"line\">\t\t\t\tlastCity[tmp_endCity] = currentCity;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> minDistance = INT_MAX;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distance[i] &lt; minDistance) minDistance=distance[i],currentCity = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加离起始点最短的点到已访问集</span></span><br><span class=\"line\">\t\tvisited[currentCity] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 逆序列逆向输出即为最短路径</span></span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; pathStack;</span><br><span class=\"line\">\tpathStack.push(D);</span><br><span class=\"line\">\tcurrentCity = D;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != S) &#123;</span><br><span class=\"line\">\t\tcurrentCity = lastCity[currentCity];</span><br><span class=\"line\">\t\tpathStack.push(currentCity);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!pathStack.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;pathStack.top()&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\tpathStack.pop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;distance[D]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;cost[D];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> visited,distance,cost,lastCity;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1035-Password-20\"><a href=\"#1035-Password-20\" class=\"headerlink\" title=\"1035 Password (20)\"></a>1035 Password (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>To prepare for PAT, the judge sometimes has to generate random passwords for the users.  The problem is that there are always some confusing passwords since it is hard to distinguish 1 (one) from l (L in lowercase), or 0 (zero) from O (o in uppercase).  One solution is to replace 1 (one) by @, 0 (zero) by %, l by L, and O by o.  Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a positive integer N (&lt;= 1000), followed by N lines of accounts.  Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, first print the number M of accounts that have been modified, then print in the following M lines the modified accounts info, that is, the user names and the corresponding modified passwords.  The accounts must be printed in the same order as they are read in.  If no account is modified, print in one line “There are N accounts and no account is modified” where N is the total number of accounts.  However, if N is one, you must print “There is 1 account and no account is modified” instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>Team000002 Rlsp0dfa<br>Team000003 perfectpwd<br>Team000001 R1spOdfa</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>2<br>Team000002 RLsp%dfa<br>Team000001 R@spodfa</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">account</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> password;</span><br><span class=\"line\">\taccount(<span class=\"built_in\">string</span> i, <span class=\"built_in\">string</span> p) &#123;id = i, password = p;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;account&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id,password;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;password;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (password.find_first_of(<span class=\"string\">'0'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'O'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'1'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'l'</span>) == <span class=\"built_in\">string</span>::npos)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; password.size(); s++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'0'</span>) password[s] = <span class=\"string\">'%'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'O'</span>) password[s] = <span class=\"string\">'o'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'1'</span>) password[s] = <span class=\"string\">'@'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'l'</span>) password[s] = <span class=\"string\">'L'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tresult.push_back(account(id,password));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result_len = result.size();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> &amp;&amp; result_len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"There is 1 account and no account is modified\"</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result_len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"There are \"</span>&lt;&lt;n&lt;&lt;<span class=\"string\">\" accounts and no account is modified\"</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;result_len;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result_len; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;result[i].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;result[i].password;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1036-Boys-vs-Girls-25\"><a href=\"#1036-Boys-vs-Girls-25\" class=\"headerlink\" title=\"1036 Boys vs Girls (25)\"></a>1036 Boys vs Girls (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time you are asked to tell the difference between the lowest grade of all the male students and the highest grade of all the female students.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a positive integer N, followed by N lines of student information.  Each line contains a student’s name, gender, ID and grade, separated by a space, where name and ID are strings of no more than 10 characters with no space, gender is either F (female) or M (male), and grade is an integer between 0 and 100.  It is guaranteed that all the grades are distinct.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in 3 lines.  The first line gives the name and ID of the female student with the highest grade, and the second line gives that of the male student with the lowest grade.  The third line gives the difference gradeF-gradeM.  If one such kind of student is missing, output “Absent” in the corresponding line, and output “NA” in the third line instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>Joe M Math990112 89<br>Mike M CS991301 100<br>Mary F EE990830 95</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Mary EE990830<br>Joe Math990112<br>6</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> re_male_name, re_male_id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> re_female_name, re_female_id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> re_male_grade = <span class=\"number\">101</span>, re_female_grade = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name, gender, id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;name&gt;&gt;gender&gt;&gt;id&gt;&gt;grade;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (gender==<span class=\"string\">\"M\"</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grade &lt; re_male_grade) &#123;</span><br><span class=\"line\">\t\t\t\tre_male_name = name;</span><br><span class=\"line\">\t\t\t\tre_male_id = id;</span><br><span class=\"line\">\t\t\t\tre_male_grade = grade;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grade &gt; re_female_grade) &#123;</span><br><span class=\"line\">\t\t\t\tre_female_name = name;</span><br><span class=\"line\">\t\t\t\tre_female_id = id;</span><br><span class=\"line\">\t\t\t\tre_female_grade = grade;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_female_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Absent\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_female_name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_female_id&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_male_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Absent\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_male_name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_male_id&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_female_name==<span class=\"string\">\"\"</span> || re_male_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NA\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_female_grade - re_male_grade;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1037-Magic-Coupon-25\"><a href=\"#1037-Magic-Coupon-25\" class=\"headerlink\" title=\"1037 Magic Coupon (25)\"></a>1037 Magic Coupon (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>The magic shop in Mars is offering some magic coupons.  Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may get N times the value of that product back!  What is more, the shop also offers some bonus product for free.  However, if you apply a coupon with a positive N to this bonus product, you will have to pay the shop N times the value of the bonus product… but hey, magically, they have some coupons with negative N’s!<br>For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M\\$) where a negative value corresponds to a bonus product.  You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; coupon 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back.  On the other hand, if you apply coupon 3 to product 4, you will have to pay M\\$12 to the shop.<br>Each coupon and each product may be selected at most once.  Your task is to get as much money back as possible.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains the number of coupons NC, followed by a line with NC coupon integers.  Then the next line contains the number of products NP, followed by a line with NP product values.  Here 1&lt;= NC, NP &lt;= 105, and it is guaranteed that all the numbers will not exceed 230.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, simply print in a line the maximum amount of money you can get back.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4<br>1 2 4 -1<br>4<br>7 6 -2 -3</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>43</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<h2 id=\"1054-The-Dominant-Color-20\"><a href=\"#1054-The-Dominant-Color-20\" class=\"headerlink\" title=\"1054 The Dominant Color (20)\"></a>1054 The Dominant Color (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Behind the scenes in the computer’s memory, color is always talked about as a series of 24 bits of information for each pixel.  In an image, the color with the largest proportional area is called the dominant color.  <strong>A <em>strictly</em> dominant color takes more than half of the total area.</strong>  Now given an image of resolution M by N (for example, 800x600), you are supposed to point out the strictly dominant color.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains 2 positive numbers: M (&lt;=800) and N (&lt;=600) which are the resolutions of the image.  Then N lines follow, each contains M digital colors in the range [0, 224).  It is guaranteed that the strictly dominant color exists for each input image.  All the numbers in a line are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, simply print the dominant color in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5 3<br>0 0 255 16777215 24<br>24 24 0 0 24<br>24 0 24 24 24</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p> 24</p>\n</blockquote>\n<p>首先要注意到dominant color是超过半数的，刚开始只想到了排序后最中间的数一定为结果，但是要存储的数据太多，后来看了<a href=\"https://blog.csdn.net/zhu_liangwei/article/details/9734671\" target=\"_blank\" rel=\"noopener\">参考链接</a>，学会了下边这个方法。</p>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m, n, all_count, tmp, re = <span class=\"number\">-1</span>, count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class=\"line\">    all_count = m*n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (all_count--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) re = tmp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (re == tmp) count++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;re;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1081-Rational-Sum-20\"><a href=\"#1081-Rational-Sum-20\" class=\"headerlink\" title=\"1081 Rational Sum (20)\"></a>1081 Rational Sum (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given N rational numbers in the form “numerator/denominator”, you are supposed to calculate their sum.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a positive integer N (&lt;=100), followed in the next line N rational numbers “a1/b1 a2/b2 …” where all the numerators and denominators are in the range of “long int”.  If there is a negative number, then the sign must appear in front of the numerator.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output the sum in the simplest form “integer numerator/denominator” where “integer” is the integer part of the sum, “numerator” &lt; “denominator”, and the numerator and the denominator have no common factor.  You must output only the fractional part if the integer part is 0.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5<br>2/5 4/15 1/30 -2/60 8/3</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 1/3</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((b==<span class=\"number\">0</span>)?<span class=\"built_in\">abs</span>(a):gcd(b,a%b));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n, tmp_gcd;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> re_integer = <span class=\"number\">0</span>, re_numerator, re_denominator;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;re_numerator&gt;&gt;c&gt;&gt;re_denominator;</span><br><span class=\"line\">    tmp_gcd = gcd(re_numerator,re_denominator);</span><br><span class=\"line\">    re_numerator/=tmp_gcd,re_denominator/=tmp_gcd;</span><br><span class=\"line\">    re_integer += <span class=\"keyword\">int</span>(re_numerator/re_denominator);</span><br><span class=\"line\">    re_numerator%=re_denominator;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp_nu, tmp_de, tmp_nu_re, tmp_de_re;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;tmp_nu&gt;&gt;c&gt;&gt;tmp_de;</span><br><span class=\"line\">        tmp_de_re = tmp_de * re_denominator;</span><br><span class=\"line\">        tmp_nu_re = tmp_nu * re_denominator + tmp_de * re_numerator;</span><br><span class=\"line\">        tmp_gcd = gcd(tmp_de_re,tmp_nu_re);</span><br><span class=\"line\">        tmp_de_re/=tmp_gcd,tmp_nu_re/=tmp_gcd;</span><br><span class=\"line\">        re_integer += <span class=\"keyword\">int</span>(tmp_nu_re/tmp_de_re);</span><br><span class=\"line\">        re_numerator = tmp_nu_re % tmp_de_re;</span><br><span class=\"line\">        re_denominator = tmp_de_re;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re_integer == <span class=\"number\">0</span> &amp;&amp; re_numerator == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (re_integer == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;re_numerator&lt;&lt;<span class=\"string\">'/'</span>&lt;&lt;re_denominator;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (re_numerator == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re_integer;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re_integer&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_numerator&lt;&lt;<span class=\"string\">'/'</span>&lt;&lt;re_denominator;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1082-Read-Number-in-Chinese-25\"><a href=\"#1082-Read-Number-in-Chinese-25\" class=\"headerlink\" title=\"1082 Read Number in Chinese (25)\"></a>1082 Read Number in Chinese (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way.  Output “Fu” first if it is negative.  For example, -123456789 is read as “Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu”.  Note: zero (“ling”) must be handled correctly according to the Chinese tradition.  For example, 100800 is “yi Shi Wan ling ba Bai”.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case, which gives an integer with no more than 9 digits.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in a line the Chinese way of reading the number.  The characters are separated by a space and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>-123456789</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>首先按照数字单位的顺序添加到结果容器中，然后遍历结果容器，如果有连续重复的”ling”只留一个，如果”Wan”前有“ling”去掉0，如果”Wan”直接跟在“Yi”后边将“Wan”换成“ling”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> units[] = &#123;<span class=\"string\">\"\"</span>,<span class=\"string\">\"Shi\"</span>,<span class=\"string\">\"Bai\"</span>,<span class=\"string\">\"Qian\"</span>,<span class=\"string\">\"Wan\"</span>,<span class=\"string\">\"Shi\"</span>,<span class=\"string\">\"Bai\"</span>,<span class=\"string\">\"Qian\"</span>,<span class=\"string\">\"Yi\"</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> digits[] = &#123;<span class=\"string\">\"ling\"</span>,<span class=\"string\">\"yi\"</span>,<span class=\"string\">\"er\"</span>,<span class=\"string\">\"san\"</span>,<span class=\"string\">\"si\"</span>,<span class=\"string\">\"wu\"</span>,<span class=\"string\">\"liu\"</span>,<span class=\"string\">\"qi\"</span>,<span class=\"string\">\"ba\"</span>,<span class=\"string\">\"jiu\"</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; re;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tre.push_back(<span class=\"string\">\"Fu\"</span>);</span><br><span class=\"line\">\t\tn = -n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"ling\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; n_digits;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tn_digits.push_back(n%<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tn/=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = n_digits.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = len<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\tre.push_back(digits[n_digits[i]]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i==<span class=\"number\">4</span> || n_digits[i] != <span class=\"number\">0</span> &amp;&amp; i&gt;<span class=\"number\">0</span>) re.push_back(units[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;::iterator iter = re.begin()+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (iter &lt; re.end()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"ling\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"ling\"</span>)</span><br><span class=\"line\">\t\t\tre.erase(iter);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"Wan\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"ling\"</span>)</span><br><span class=\"line\">\t\t\tre.erase((iter--)<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"Wan\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"Yi\"</span>)</span><br><span class=\"line\">\t\t\t*(iter++) = <span class=\"string\">\"ling\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\titer++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re.size()&gt;<span class=\"number\">1</span> &amp;&amp; re[re.size()<span class=\"number\">-1</span>]==<span class=\"string\">\"ling\"</span>) re.erase(re.end()<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;re[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; re.size(); i++) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[i];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1083-List-Grades-25\"><a href=\"#1083-List-Grades-25\" class=\"headerlink\" title=\"1083 List Grades (25)\"></a>1083 List Grades (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a list of N student records with name, ID and grade.  You are supposed to sort the records with respect to the grade in non-increasing order, and output those student records of which the grades are in a given interval.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case is given in the following format:<br>N<br>name[1] ID[1] grade[1]<br>name[2] ID[2] grade[2]<br>… …<br>name[N] ID[N] grade[N]<br>grade1 grade2</p>\n<p>where name[i] and ID[i] are strings of no more than 10 characters with no space, grade[i] is an integer in [0, 100], grade1 and grade2 are the boundaries of the grade’s interval.  It is guaranteed that all the grades are <em>distinct</em>.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the student records of which the grades are in the given interval [grade1, grade2] and are in non-increasing order.  Each student record occupies a line with the student’s name and ID, separated by one space.  If there is no student’s grade in that interval, output “NONE” instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4<br>Tom CS000001 59<br>Joe Math990112 89<br>Mike CS991301 100<br>Mary EE990830 95<br>60 100</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Mike CS991301<br>Mary EE990830<br>Joe Math990112</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\tstudent(<span class=\"built_in\">string</span> n,<span class=\"built_in\">string</span> i, <span class=\"keyword\">int</span> g) &#123;</span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tid = i;</span><br><span class=\"line\">\t\tgrade = g;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt; re;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name,id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;name&gt;&gt;id&gt;&gt;grade;</span><br><span class=\"line\">\t\t<span class=\"function\">student <span class=\"title\">tmp</span><span class=\"params\">(name,id,grade)</span></span>;</span><br><span class=\"line\">\t\tre.push_back(tmp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> min_grade,max_grade;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;min_grade&gt;&gt;max_grade;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt;::iterator iter = re.begin();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (iter != re.end()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((*iter).grade &lt; min_grade || (*iter).grade &gt; max_grade)</span><br><span class=\"line\">\t\t\tre.erase(iter);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\titer++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span> ; k &lt; re.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; re.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (re[i].grade &lt; re[i+<span class=\"number\">1</span>].grade) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"function\">student <span class=\"title\">tmp</span><span class=\"params\">(re[i].name,re[i].id,re[i].grade)</span></span>;</span><br><span class=\"line\">\t\t\t\tre[i] = re[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tre[i+<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re.empty()) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NONE\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re[<span class=\"number\">0</span>].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[<span class=\"number\">0</span>].id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; re.size(); i++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;re[i].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[i].id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1086-Tree-Traversals-Again-25\"><a href=\"#1086-Tree-Traversals-Again-25\" class=\"headerlink\" title=\"1086 Tree Traversals Again (25)\"></a>1086 Tree Traversals Again (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>An inorder binary tree traversal can be implemented in a non-recursive way with a stack.  For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop().  Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations.  Your task is to give the postorder traversal sequence of this tree.</p>\n<p><img src=\"/images/pat_1086.jpg\" alt=\"\"></p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains a positive integer N (&lt;=30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N).  Then 2N lines follow, each describes a stack operation in the format: “Push X” where X is the index of the node being pushed onto the stack; or “Pop” meaning to pop one node from the stack.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print the postorder traversal sequence of the corresponding tree in one line.  A solution is guaranteed to exist.  All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>6<br>Push 1<br>Push 2<br>Push 3<br>Pop<br>Pop<br>Push 4<br>Pop<br>Pop<br>Push 5<br>Push 6<br>Pop<br>Pop</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 4 2 6 5 1</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>以上述例子为例，按顺序排下来123456为前序，使用栈的pop顺序为中序，利用前序和中序可以得到后序。</p>\n<p>注意1-N为标号，每次push的为值，值有可能重复，但是push顺序为标号1-N。</p>\n<p>可以用下边这个测试用例测试：</p>\n<blockquote>\n<p>//输入</p>\n<p>19<br>Push 4<br>Push 11<br>Push 7<br>Push 12<br>Pop<br>Pop<br>Pop<br>Push 14<br>Push 17<br>Pop<br>Pop<br>Push 6<br>Push 18<br>Pop<br>Push 8<br>Pop<br>Pop<br>Push 4<br>Pop<br>Pop<br>Push 11<br>Push 16<br>Push 11<br>Push 12<br>Pop<br>Push 2<br>Pop<br>Pop<br>Pop<br>Push 7<br>Push 4<br>Pop<br>Pop<br>Push 12<br>Pop<br>Pop<br>Push 11<br>Pop</p>\n<p>// 输出</p>\n<p>12 7 17 8 18 4 6 14 11 2 12 11 4 12 7 16 11 11 4 </p>\n</blockquote>\n<p>我的代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; post;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePostOrder</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; in, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tpost.push_back(pre[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> root_num = pre[<span class=\"number\">0</span>], root_pos_of_in = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; root_pos_of_in &lt; len; root_pos_of_in++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (in[root_pos_of_in] == root_num) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> left_len = root_pos_of_in;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> right_len = len - left_len - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre_left,pre_right,in_left,in_right;</span><br><span class=\"line\">\tpre_left.assign(pre.begin()+<span class=\"number\">1</span>, pre.begin()+<span class=\"number\">1</span>+left_len);</span><br><span class=\"line\">\tpre_right.assign(pre.begin()+<span class=\"number\">1</span>+left_len, pre.end());</span><br><span class=\"line\">\tin_left.assign(in.begin(),in.begin()+left_len);</span><br><span class=\"line\">\tin_right.assign(in.begin()+left_len+<span class=\"number\">1</span>, in.end());</span><br><span class=\"line\">\tgeneratePostOrder(pre_left,in_left,left_len);</span><br><span class=\"line\">\tgeneratePostOrder(pre_right,in_right,right_len);</span><br><span class=\"line\">\tpost.push_back(root_num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, tmp;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> op;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre,in,value;</span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; tmp_stack;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>*n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;op;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (op == <span class=\"string\">\"Push\"</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">\t\t\tvalue.push_back(tmp);</span><br><span class=\"line\">\t\t\ttmp_stack.push(index);</span><br><span class=\"line\">\t\t\tpre.push_back(index++);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tin.push_back(tmp_stack.top());</span><br><span class=\"line\">\t\t\ttmp_stack.pop();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgeneratePostOrder(pre,in,n);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;value[post[<span class=\"number\">0</span>]];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;value[post[i]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10xx\"><a href=\"#10xx\" class=\"headerlink\" title=\"10xx\"></a>10xx</h2><p><strong>题目描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>实现代码</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>OJ：<a href=\"https://www.nowcoder.com/pat\" target=\"_blank\" rel=\"noopener\">牛客网</a></p>\n<hr>\n<h2 id=\"1001-A-B-Format-20\"><a href=\"#1001-A-B-Format-20\" class=\"headerlink\" title=\"1001 A+B Format (20)\"></a>1001 A+B Format (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Calculate a + b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a pair of integers a and b where -1000000 &lt;= a, b &lt;= 1000000.  The numbers are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, you should output the sum of a and b in one line.  The sum must be written in the standard format.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>-1000000 9</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>-999,991</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> digit[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) digit[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,re;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    re = a + b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">'-'</span>;</span><br><span class=\"line\">        re = -re;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(re) &#123;</span><br><span class=\"line\">        digit[i] = (re%<span class=\"number\">10</span>);</span><br><span class=\"line\">        re/=<span class=\"number\">10</span>;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i<span class=\"number\">-1</span>; k &gt;=<span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;digit[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k%<span class=\"number\">3</span> == <span class=\"number\">0</span> &amp;&amp; k&gt;<span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">','</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1002-A-B-for-Polynomials-25\"><a href=\"#1002-A-B-for-Polynomials-25\" class=\"headerlink\" title=\"1002 A+B for Polynomials (25)\"></a>1002 A+B for Polynomials (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time, you are supposed to find A+B where A and B are two polynomials.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:<br>K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively.  It is given that 1 &lt;= K &lt;= 10，0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the sum of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  <strong>Please be accurate to 1 decimal place.</strong></p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 2 1.5 1 2.9 0 3.2</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>注意保留小数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">item</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> value;</span><br><span class=\"line\">\titem(<span class=\"keyword\">int</span> a, <span class=\"keyword\">float</span> b) &#123;n=a,value=b;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;item&gt; polynomials;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_n;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> tmp_value;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\tpolynomials.push_back(item(tmp_n,tmp_value));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> hasItem = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (polynomials[i].n == tmp_n) &#123;</span><br><span class=\"line\">\t\t\t\thasItem = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\tpolynomials[i].value+=tmp_value;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (polynomials[i].value == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\tpolynomials.erase(polynomials.begin()+i);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasItem) polynomials.push_back(item(tmp_n,tmp_value));\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; polynomials.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (polynomials[i].n &lt; polynomials[i+<span class=\"number\">1</span>].n) &#123;</span><br><span class=\"line\">\t\t\t\titem tmp_item = polynomials[i];</span><br><span class=\"line\">\t\t\t\tpolynomials[i] = polynomials[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tpolynomials[i+<span class=\"number\">1</span>] = tmp_item;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;polynomials.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size(); i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %.1f\"</span>, polynomials[i].n, polynomials[i].value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1003-Emergency-25\"><a href=\"#1003-Emergency-25\" class=\"headerlink\" title=\"1003 Emergency (25)\"></a>1003 Emergency (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>As an emergency rescue team leader of a city, you are given a special map of your country.  The map shows several scattered cities connected by some roads.  Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map.  When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (&lt;= 500) - the number of cities (and the cities are numbered from 0 to N-1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively.  The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city.  Then M lines follow, each describes a road with three integers c1, c2 and L, which are the pair of cities connected by a road and the length of that road, respectively.<br>It is guaranteed that there exists at least one path from C1 to C2.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2, and the maximum amount of rescue teams you can possibly gather.</p>\n<p>All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5 6 0 2<br>1 2 1 5 3<br>0 1 1<br>0 2 2<br>0 3 1<br>1 2 1<br>2 4 1<br>3 4 1</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>2 4</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>dijkstra最短路</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">road</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> endCity;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length;</span><br><span class=\"line\">\troad(<span class=\"keyword\">int</span> e, <span class=\"keyword\">int</span> l) &#123;endCity = e, length = l;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m,c1,c2;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;c1&gt;&gt;c2;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; teamsCount;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp1,tmp2,tmp3;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp1;</span><br><span class=\"line\">\t\tteamsCount.push_back(tmp1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;road&gt; &gt; roads(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp1&gt;&gt;tmp2&gt;&gt;tmp3;</span><br><span class=\"line\">\t\troads[tmp1].push_back(road(tmp2,tmp3));</span><br><span class=\"line\">\t\troads[tmp2].push_back(road(tmp1,tmp3));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; maxTeams(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) maxTeams[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tmaxTeams[c1] = teamsCount[c1];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minLen(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) minLen[i] = INT_MAX;</span><br><span class=\"line\">\tminLen[c1] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> currentCity = c1;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minLenRoadCount(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) minLenRoadCount[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; visited(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tvisited[c1] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != c2) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = roads[currentCity].size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[roads[currentCity][i].endCity]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> endCity = roads[currentCity][i].endCity;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> length = roads[currentCity][i].length;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (minLen[endCity] &gt; minLen[currentCity] + length) &#123;</span><br><span class=\"line\">\t\t\t\tminLen[endCity] = minLen[currentCity] + length;</span><br><span class=\"line\">\t\t\t\tminLenRoadCount[endCity] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (minLen[endCity] == minLen[currentCity] + length) &#123;</span><br><span class=\"line\">\t\t\t\tminLenRoadCount[endCity]++;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (maxTeams[endCity] &lt; maxTeams[currentCity] + teamsCount[endCity])</span><br><span class=\"line\">\t\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> min = INT_MAX;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (minLen[i] &lt; min) &#123;</span><br><span class=\"line\">\t\t\t\tmin = minLen[i];</span><br><span class=\"line\">\t\t\t\tcurrentCity = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tvisited[currentCity] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;minLenRoadCount[c2]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;maxTeams[c2];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1004-Counting-Leaves-30\"><a href=\"#1004-Counting-Leaves-30\" class=\"headerlink\" title=\"1004 Counting Leaves (30)\"></a>1004 Counting Leaves (30)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A family hierarchy is usually presented by a pedigree tree.  Your job is to count those family members who have no child.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a line containing 0 &lt; N &lt; 100, the number of nodes in a tree, and M (&lt; N), the number of non-leaf nodes.  Then M lines follow, each in the format:</p>\n<p>ID K ID[1] ID[2] … ID[K]</p>\n<p>where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID’s of its children.  For the sake of simplicity, let us fix the root ID to be 01.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, you are supposed to count those family members who have no child <strong>for every seniority level</strong> starting from the root.  The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.<br>The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child.  Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node.  Then we should output “0 1” in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1<br>01 1 02</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>0 1</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_NODES 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> childs_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; childs;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">\tnode nodes[MAX_NODES];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id,k,tmp;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;k;</span><br><span class=\"line\">\t\tnodes[id].id = id;</span><br><span class=\"line\">\t\tnodes[id].childs_count = k;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">\t\t\t(nodes[id].childs).push_back(tmp);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; this_level, next_level;</span><br><span class=\"line\">\tthis_level.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count_output = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; this_level.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nodes[this_level[i]].childs_count == <span class=\"number\">0</span>) count_output++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> next_level.insert(next_level.begin(),nodes[this_level[i]].childs.begin(),nodes[this_level[i]].childs.end());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;count_output;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (next_level.empty()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\tthis_level = next_level;</span><br><span class=\"line\">\t\tnext_level.clear();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1005-Spell-It-Right-20\"><a href=\"#1005-Spell-It-Right-20\" class=\"headerlink\" title=\"1005 Spell It Right (20)\"></a>1005 Spell It Right (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies one line which contains an N (&lt;= 10^100).</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>12345</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>one five</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = n.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) re+=(n[i]-<span class=\"string\">'0'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">string</span> english[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"zero\"</span>,<span class=\"string\">\"one\"</span>,<span class=\"string\">\"two\"</span>,<span class=\"string\">\"three\"</span>,<span class=\"string\">\"four\"</span>,<span class=\"string\">\"five\"</span>,<span class=\"string\">\"six\"</span>,<span class=\"string\">\"seven\"</span>,<span class=\"string\">\"eight\"</span>,<span class=\"string\">\"nine\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> digit[<span class=\"number\">100</span>], re_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (re) &#123;</span><br><span class=\"line\">        digit[re_len] = (re%<span class=\"number\">10</span>);</span><br><span class=\"line\">        re/=<span class=\"number\">10</span>;</span><br><span class=\"line\">        re_len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = re_len<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;english[digit[i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1006-Sign-In-and-Sign-Out-25\"><a href=\"#1006-Sign-In-and-Sign-Out-25\" class=\"headerlink\" title=\"1006 Sign In and Sign Out (25)\"></a>1006 Sign In and Sign Out (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door.  Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case contains the records for one day.  The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:</p>\n<p>ID_number Sign_in_time Sign_out_time</p>\n<p>where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day.  The two ID numbers must be separated by one space.<br>Note:  It is guaranteed that the records are consistent.  That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>CS301111 15:30:28 17:00:10<br>SC3021234 08:00:00 11:25:25<br>CS301133 21:45:00 21:58:40</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>SC3021234 CS301133</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">a_larger_than_b</span><span class=\"params\">(<span class=\"built_in\">string</span> a, <span class=\"built_in\">string</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; b[i]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] &gt; b[i]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> id,in,out;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> result_in_id, result_in_time, result_out_id, result_out_time;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;in&gt;&gt;out;</span><br><span class=\"line\">    result_in_id = result_out_id = id;</span><br><span class=\"line\">    result_in_time = in;</span><br><span class=\"line\">    result_out_time = out;</span><br><span class=\"line\">    n--;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;in&gt;&gt;out;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a_larger_than_b(result_in_time,in)) &#123;</span><br><span class=\"line\">            result_in_id = id;</span><br><span class=\"line\">            result_in_time = in;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a_larger_than_b(out,result_out_time)) &#123;</span><br><span class=\"line\">            result_out_id = id;</span><br><span class=\"line\">            result_out_time = out;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;result_in_id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;result_out_id;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1007-Maximum-Subsequence-Sum-25\"><a href=\"#1007-Maximum-Subsequence-Sum-25\" class=\"headerlink\" title=\"1007 Maximum Subsequence Sum (25)\"></a>1007 Maximum Subsequence Sum (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a sequence of K integers { N1<br>, N2<br>, …, NK<br> }.  A continuous subsequence is defined to be { Ni<br>, Ni+1<br>, …, Nj<br> } where 1 &lt;= i &lt;= j &lt;= K.  The <em>Maximum Subsequence</em><br> is the continuous subsequence which has the largest sum of its<br>elements.  For example, given sequence { -2, 11, -4, 13, -5, -2 }, its<br>maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>\n<p>Now you are supposed to find the largest sum, together with the first<br>and the last numbers of the maximum subsequence.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies two lines.  The first line contains a positive integer K (&lt;= 10000).  The second line contains K numbers, separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line.  In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case).  If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>10<br>-10 1 2 3 4 -5 -23 3 7 -21</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>10 1 4</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p><u>和为负的子序列一定不会是最大和子序列的开头。</u></p>\n<p>当当前和小于0时，使用临时”first number”记录下一个数，</p>\n<p>更新最大和时，当前数为“last number”， 临时“first number”中存储的值为“first number”的值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* nums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> allNegative = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;nums[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nums[i] &gt;= <span class=\"number\">0</span>) allNegative = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (allNegative) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;nums[<span class=\"number\">0</span>]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;nums[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>, currentSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> firstNum = nums[<span class=\"number\">0</span>], lastNum = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> firstNumCurrent = firstNum;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tcurrentSum+=nums[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (currentSum &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tfirstNumCurrent = nums[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSum &gt; maxSum) &#123;</span><br><span class=\"line\">\t\t\t\tmaxSum = currentSum;</span><br><span class=\"line\">\t\t\t\tfirstNum = firstNumCurrent;</span><br><span class=\"line\">\t\t\t\tlastNum = nums[i];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;maxSum&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;firstNum&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;lastNum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> nums;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1008-Elevator-20\"><a href=\"#1008-Elevator-20\" class=\"headerlink\" title=\"1008 Elevator (20)\"></a>1008 Elevator (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.<br>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print the total time on a single line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3 2 3 1</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>41</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b, n, re = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; b;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &gt; a) &#123;</span><br><span class=\"line\">            re+=((b-a)*<span class=\"number\">6</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            re+=((a-b)*<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        re+=<span class=\"number\">5</span>;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;re;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1009-Product-of-Polynomials-25\"><a href=\"#1009-Product-of-Polynomials-25\" class=\"headerlink\" title=\"1009 Product of Polynomials (25)\"></a>1009 Product of Polynomials (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time, you are supposed to find A*B where A and B are two polynomials.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:<br>K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively.  It is given that 1 &lt;= K &lt;= 10, 0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the product of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  Please be accurate up to 1 decimal place.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 3 3.6 2 6.0 1 1.6</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>把<a href=\"#1002-A-B-for-Polynomials-25\">1002 A+B for Polynomials (25)</a>稍微改一下就好。</p>\n<p>使用<code>float</code>虽然算出来明明是对的但是过不了牛客的测试，全部换成<code>double</code>就好了，不知道是什么问题。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">item</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> value;</span><br><span class=\"line\">\titem(<span class=\"keyword\">int</span> a, <span class=\"keyword\">double</span> b) &#123;n=a,value=b;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;item&gt; polynomials, result;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_n;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> tmp_value;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\tpolynomials.push_back(item(tmp_n,tmp_value));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; polynomials.size(); k++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">bool</span> hasItem = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (result[i].n == tmp_n+polynomials[k].n) &#123;</span><br><span class=\"line\">\t\t\t\t\thasItem = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t\tresult[i].value+=(tmp_value*polynomials[k].value);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (result[i].value == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\t\tresult.erase(result.begin()+i);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!hasItem) result.push_back(item(tmp_n+polynomials[k].n,tmp_value*polynomials[k].value));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; result.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result[i].n &lt; result[i+<span class=\"number\">1</span>].n) &#123;</span><br><span class=\"line\">\t\t\t\titem tmp_item = result[i];</span><br><span class=\"line\">\t\t\t\tresult[i] = result[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tresult[i+<span class=\"number\">1</span>] = tmp_item;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;result.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size(); i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %.1f\"</span>, result[i].n, result[i].value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1015-Reversible-Primes-20\"><a href=\"#1015-Reversible-Primes-20\" class=\"headerlink\" title=\"1015 Reversible Primes (20)\"></a>1015 Reversible Primes (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A <em>reversible prime</em><br> in any number system is a prime whose “reverse” in that<br>number system is also a prime. For example in the decimal system 73 is a<br>reversible prime because its reverse 37 is also a prime.</p>\n<p>Now given any two positive integers N (&lt; 105<br>) and D (1 &lt; D &lt;= 10), you are supposed to tell if N is a<br>reversible prime with radix D.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>The input file consists of several test cases.  Each case occupies a line which contains two integers N and D.  The input is finished by a negative N.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line “Yes” if N is a reversible prime with radix D, or “No” if not.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>73 10<br>23 2<br>23 10<br>-2</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Yes<br>Yes<br>No</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>求N以及N在D进制下反转后是否均为质数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">reverseWithRadix</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; remainers;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tremainers.push_back(n%d);</span><br><span class=\"line\">\t\tn/=d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> re = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bit_count = remainers.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bit_count; i++)</span><br><span class=\"line\">\t\tre+=(<span class=\"built_in\">pow</span>(d,bit_count-i<span class=\"number\">-1</span>)*remainers[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">4</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sqrt_n = <span class=\"built_in\">sqrt</span>(n) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= sqrt_n; i+=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,d;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isPrime(n) &amp;&amp; isPrime(reverseWithRadix(n,d))) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Yes\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1020-Tree-Traversals-25\"><a href=\"#1020-Tree-Traversals-25\" class=\"headerlink\" title=\"1020 Tree Traversals (25)\"></a>1020 Tree Traversals (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Suppose that all the keys in a binary tree are distinct positive integers.  Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line gives a positive integer N (&lt;=30), the total number of nodes in the binary tree.  The second line gives the <strong>postorder</strong> sequence and the third line gives the <strong>inorder</strong> sequence.  All the numbers in a line are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line the level order traversal sequence of the corresponding binary tree.  All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>7<br>2 3 1 5 7 6 4<br>1 2 3 4 5 6 7</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>4 1 6 3 5 7 2</p>\n</blockquote>\n<p>postorder: 后序遍历</p>\n<p>inorder: 中序遍历</p>\n<p>level order: 层序遍历（从根开始,依次向下,对于每一层从左向右遍历）</p>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tnode* left;</span><br><span class=\"line\">\tnode* right;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">node* <span class=\"title\">binaryTreeRoot</span><span class=\"params\">(<span class=\"keyword\">int</span>* postorder, <span class=\"keyword\">int</span>* inorder, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnode* root = <span class=\"keyword\">new</span> node;</span><br><span class=\"line\">\troot-&gt;value = *(postorder+len<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; pos &lt; len; pos++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (*(inorder+pos) == root-&gt;value) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\troot-&gt;left = binaryTreeRoot(postorder, inorder, pos);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> rightLen = len - pos - <span class=\"number\">1</span>;</span><br><span class=\"line\">\troot-&gt;right = binaryTreeRoot(postorder+pos, inorder+pos+<span class=\"number\">1</span>, rightLen);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteNodes</span><span class=\"params\">(node* root)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tdeleteNodes(root-&gt;left);</span><br><span class=\"line\">\tdeleteNodes(root-&gt;right);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* postorderNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* inorderNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;postorderNodes[i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;inorderNodes[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\tnode* root = binaryTreeRoot(postorderNodes, inorderNodes, n);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>&lt;node*&gt; levelNodes;</span><br><span class=\"line\">\tlevelNodes.push(root);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tnode* tmp = levelNodes.front();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tmp-&gt;left) levelNodes.push(tmp-&gt;left);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tmp-&gt;right) levelNodes.push(tmp-&gt;right);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;tmp-&gt;value;</span><br><span class=\"line\">\t\tlevelNodes.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!levelNodes.empty()) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdeleteNodes(root);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> postorderNodes;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> inorderNodes;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1023-Have-Fun-with-Numbers-20\"><a href=\"#1023-Have-Fun-with-Numbers-20\" class=\"headerlink\" title=\"1023 Have Fun with Numbers (20)\"></a>1023 Have Fun with Numbers (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication.  Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation.  Check to see the result if we double it again!</p>\n<p>Now you are suppose to check if there are more numbers with this property.  That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains one positive integer with no more than 20 digits.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, first print in a line “Yes” if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or “No” if not.  Then in the next line, print the doubled number.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>1234567899</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Yes<br>2469135798</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>若双倍后多一位则为No;</p>\n<p>使用<code>digit_count[i]</code>保存数字<code>i</code>（0-9）的个数，</p>\n<p>再减去双倍后各个数字的个数，若每一个<code>digit_count[i]</code>均为0则为Yes,否则为No。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> digit_count[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) digit_count[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;s;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = s.size();</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; digits;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> digit = s[i]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\tdigits.push_back(digit);</span><br><span class=\"line\">\t\tdigit_count[digit]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = k<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\tdigits[i] = <span class=\"number\">2</span>*digits[i] + carry;</span><br><span class=\"line\">\t\tcarry = digits[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tdigits[i] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tdigit_count[digits[i]]--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (carry) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\\n\"</span>&lt;&lt;carry;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) <span class=\"built_in\">cout</span>&lt;&lt;digits[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (digit_count[i] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tresult = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (result) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Yes\\n\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\\n\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) <span class=\"built_in\">cout</span>&lt;&lt;digits[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1027-Colors-in-Mars-20\"><a href=\"#1027-Colors-in-Mars-20\" class=\"headerlink\" title=\"1027 Colors in Mars (20)\"></a>1027 Colors in Mars (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>People in Mars represent the colors in their computers in a similar way as the Earth people.  That is, a color is represented by a 6-digit number, where the first 2 digits are for Red, the middle 2 digits for Green, and the last 2 digits  for Blue.  The only difference is that they use radix 13 (0-9 and A-C) instead of 16.  Now given a color in three decimal numbers (each between 0 and 168), you are supposed to output their Mars RGB values.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case which occupies a line containing the three decimal color values.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the Mars RGB value in the following format: first output “#”, then followed by a 6-digit number where all the English characters must be upper-cased.  If a single color is only 1-digit long, you must print a “0” to the left.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>15 43 71</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>#123456</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">'#'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = n/<span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp &gt; <span class=\"number\">9</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"keyword\">char</span>((tmp<span class=\"number\">-10</span>)+<span class=\"string\">'A'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;tmp;</span><br><span class=\"line\">        tmp = n%<span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp &gt; <span class=\"number\">9</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"keyword\">char</span>((tmp<span class=\"number\">-10</span>)+<span class=\"string\">'A'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1028-List-Sorting-25\"><a href=\"#1028-List-Sorting-25\" class=\"headerlink\" title=\"1028 List Sorting (25)\"></a>1028 List Sorting (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Excel can sort records according to any column.  Now you are supposed to imitate this function.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains two integers N (&lt;=100000) and C, where N is the number of records and C is the column that you are supposed to sort the records with.  Then N lines follow, each contains a record of a student.  A student’s record consists of his or her distinct ID (a 6-digit number), name (a string with no more than 8 characters without space), and grade (an integer between 0 and 100, inclusive).</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output the sorting result in N lines.  That is, if C = 1 then the records must be sorted in increasing order according to ID’s; if C = 2 then the records must be sorted in non-decreasing order according to names; and if C = 3 then the records must be sorted in non-decreasing order according to grades.  <strong>If there are several students who have the same name or grade, they must be sorted according to their ID’s in increasing order.</strong></p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3 1<br>000007 James 85<br>000010 Amy 90<br>000001 Zoe 60</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>000001 Zoe 60<br>000007 James 85<br>000010 Amy 90</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>利用结构体，使用sort函数排序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\tstudent(<span class=\"built_in\">string</span> i, <span class=\"built_in\">string</span> n, <span class=\"keyword\">int</span> g) &#123;id = i, name = n, grade = g;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp1</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.id &lt; b.id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp2</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a.name == b.name)?(a.id &lt; b.id):(a.name &lt; b.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp3</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a.grade == b.grade)?(a.id &lt; b.id):(a.grade &lt; b.grade);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,c;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;c;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt; students;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id,name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;name&gt;&gt;grade;</span><br><span class=\"line\">\t\tstudents.push_back(student(id,name,grade));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c == <span class=\"number\">1</span>) sort(students.begin(),students.end(),cmp1);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"number\">2</span>) sort(students.begin(),students.end(),cmp2);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> sort(students.begin(),students.end(),cmp3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;students[<span class=\"number\">0</span>].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[<span class=\"number\">0</span>].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[<span class=\"number\">0</span>].grade;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;students[i].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[i].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[i].grade;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1029-Median-25\"><a href=\"#1029-Median-25\" class=\"headerlink\" title=\"1029 Median (25)\"></a>1029 Median (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given an increasing sequence S of N integers, the <em>median</em> is the number at the middle position.  For example, the median of S1={11, 12, 13, 14} is 12, and the median of S2={9, 10, 15, 16, 17} is 15.  The median of two sequences is defined to be the median of the nondecreasing sequence which contains all the elements of both sequences.  For example, the median of S1 and S2 is 13.<br>Given two increasing sequences of integers, you are asked to find their median.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case occupies 2 lines, each gives the information of a sequence.  For each sequence, the first positive integer N (&lt;=1000000) is the size of that sequence.  Then N integers follow, separated by a space.  It is guaranteed that all the integers are in the range of <strong>long int</strong>.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the median of the two given sequences in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4 11 12 13 14<br>5 9 10 15 16 17</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>13</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>用两个数组存储两组数据，每组数据一个pos，比较两个pos出的数值大小，较小值的pos向后移，直到找到中位数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* firstSequence = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) <span class=\"built_in\">cin</span>&gt;&gt;firstSequence[i];</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* secondSequence = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;secondSequence[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> firstPos = <span class=\"number\">0</span>, secondPos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"keyword\">int</span>((m+n+<span class=\"number\">1</span>)/<span class=\"number\">2</span>); i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (firstPos == m) <span class=\"built_in\">cout</span>&lt;&lt;secondSequence[secondPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondPos == n) <span class=\"built_in\">cout</span>&lt;&lt;firstSequence[firstPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstSequence[firstPos] &lt; secondSequence[secondPos]) <span class=\"built_in\">cout</span>&lt;&lt;firstSequence[firstPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;secondSequence[secondPos];</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (firstPos == m) secondPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondPos == n) firstPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstSequence[firstPos] &lt; secondSequence[secondPos]) firstPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> secondPos++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> firstSequence;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> secondSequence;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1030-Travel-Plan-30\"><a href=\"#1030-Travel-Plan-30\" class=\"headerlink\" title=\"1030 Travel Plan (30)\"></a>1030 Travel Plan (30)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A traveler’s map gives the distances between cities along the highways, together with the cost of each highway.<br> Now you are supposed to write a program to help a traveler to decide the shortest path between his/her starting city and the destination.<br> If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.</p>\n<p> DECLARE: The test data in PAT is wrong,we strengthened the test data.If the same code got passed in pat,it may not be able to get passed in NOWCODER,please check your code.(This means that our test data is no problem,I guarantee.)</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a line containing 4 positive integers N, M, S, and D, where N (&lt;=500) is the number of cities (and hence the cities are numbered from 0 to N-1); M is the number of highways; S and D are the starting and the destination cities, respectively. Then M lines follow, each provides the information of a highway, in the format:<br> City1 City2 Distance Cost</p>\n<p> where the numbers are all integers no more than 500, and are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4 5 0 3</p>\n<p>0 1 1 20</p>\n<p>1 3 2 30</p>\n<p>0 3 4 10</p>\n<p>0 2 2 20</p>\n<p>2 3 1 20</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>0 2 3 3 40</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>最短路问题，用Dijkstra（迪杰斯特拉）算法解即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">highway</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> endCity;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> distance;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">\thighway(<span class=\"keyword\">int</span> e, <span class=\"keyword\">int</span> d, <span class=\"keyword\">int</span> c) &#123;endCity=e,distance=d,cost=c;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// N为城市数，M为公路数，S为开始城市，D为结束城市</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> N,M,S,D;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;N&gt;&gt;M&gt;&gt;S&gt;&gt;D;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// highways(i) 为与城市i相连的所有公路</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;highway&gt; &gt; highways(N);</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span>* visited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* distance = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* cost = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* lastCity = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </span><br><span class=\"line\">\t\tvisited[i] = <span class=\"literal\">false</span>, distance[i] = cost[i] = INT_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读入数据，更新highways</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_city_1, tmp_city_2, tmp_distance, tmp_cost;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (M--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_city_1&gt;&gt;tmp_city_2&gt;&gt;tmp_distance&gt;&gt;tmp_cost;</span><br><span class=\"line\">\t\thighways[tmp_city_1].push_back(highway(tmp_city_2,tmp_distance,tmp_cost));</span><br><span class=\"line\">\t\thighways[tmp_city_2].push_back(highway(tmp_city_1,tmp_distance,tmp_cost));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// dijkstra</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> currentCity = S;</span><br><span class=\"line\">\tvisited[S] = <span class=\"literal\">true</span>, distance[S] = cost[S] = <span class=\"number\">0</span>, lastCity[S] = S;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != D) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; highways[currentCity].size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> tmp_endCity = highways[currentCity][i].endCity, </span><br><span class=\"line\">\t\t\t\ttmp_distance = highways[currentCity][i].distance,</span><br><span class=\"line\">\t\t\t\ttmp_cost = highways[currentCity][i].cost;\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[tmp_endCity]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distance[currentCity] + tmp_distance &lt; distance[tmp_endCity] ||</span><br><span class=\"line\">\t\t\t\t(distance[currentCity] + tmp_distance == distance[tmp_endCity] &amp;&amp; </span><br><span class=\"line\">\t\t\t\t cost[currentCity] + tmp_cost &lt; cost[tmp_endCity])) &#123;</span><br><span class=\"line\">\t\t\t\tdistance[tmp_endCity] = distance[currentCity] + tmp_distance;</span><br><span class=\"line\">\t\t\t\tcost[tmp_endCity] = cost[currentCity] + tmp_cost;</span><br><span class=\"line\">\t\t\t\tlastCity[tmp_endCity] = currentCity;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> minDistance = INT_MAX;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distance[i] &lt; minDistance) minDistance=distance[i],currentCity = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加离起始点最短的点到已访问集</span></span><br><span class=\"line\">\t\tvisited[currentCity] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 逆序列逆向输出即为最短路径</span></span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; pathStack;</span><br><span class=\"line\">\tpathStack.push(D);</span><br><span class=\"line\">\tcurrentCity = D;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != S) &#123;</span><br><span class=\"line\">\t\tcurrentCity = lastCity[currentCity];</span><br><span class=\"line\">\t\tpathStack.push(currentCity);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!pathStack.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;pathStack.top()&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\tpathStack.pop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;distance[D]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;cost[D];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> visited,distance,cost,lastCity;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1035-Password-20\"><a href=\"#1035-Password-20\" class=\"headerlink\" title=\"1035 Password (20)\"></a>1035 Password (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>To prepare for PAT, the judge sometimes has to generate random passwords for the users.  The problem is that there are always some confusing passwords since it is hard to distinguish 1 (one) from l (L in lowercase), or 0 (zero) from O (o in uppercase).  One solution is to replace 1 (one) by @, 0 (zero) by %, l by L, and O by o.  Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a positive integer N (&lt;= 1000), followed by N lines of accounts.  Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, first print the number M of accounts that have been modified, then print in the following M lines the modified accounts info, that is, the user names and the corresponding modified passwords.  The accounts must be printed in the same order as they are read in.  If no account is modified, print in one line “There are N accounts and no account is modified” where N is the total number of accounts.  However, if N is one, you must print “There is 1 account and no account is modified” instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>Team000002 Rlsp0dfa<br>Team000003 perfectpwd<br>Team000001 R1spOdfa</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>2<br>Team000002 RLsp%dfa<br>Team000001 R@spodfa</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">account</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> password;</span><br><span class=\"line\">\taccount(<span class=\"built_in\">string</span> i, <span class=\"built_in\">string</span> p) &#123;id = i, password = p;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;account&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id,password;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;password;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (password.find_first_of(<span class=\"string\">'0'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'O'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'1'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'l'</span>) == <span class=\"built_in\">string</span>::npos)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; password.size(); s++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'0'</span>) password[s] = <span class=\"string\">'%'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'O'</span>) password[s] = <span class=\"string\">'o'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'1'</span>) password[s] = <span class=\"string\">'@'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'l'</span>) password[s] = <span class=\"string\">'L'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tresult.push_back(account(id,password));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result_len = result.size();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> &amp;&amp; result_len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"There is 1 account and no account is modified\"</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result_len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"There are \"</span>&lt;&lt;n&lt;&lt;<span class=\"string\">\" accounts and no account is modified\"</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;result_len;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result_len; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;result[i].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;result[i].password;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1036-Boys-vs-Girls-25\"><a href=\"#1036-Boys-vs-Girls-25\" class=\"headerlink\" title=\"1036 Boys vs Girls (25)\"></a>1036 Boys vs Girls (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time you are asked to tell the difference between the lowest grade of all the male students and the highest grade of all the female students.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a positive integer N, followed by N lines of student information.  Each line contains a student’s name, gender, ID and grade, separated by a space, where name and ID are strings of no more than 10 characters with no space, gender is either F (female) or M (male), and grade is an integer between 0 and 100.  It is guaranteed that all the grades are distinct.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in 3 lines.  The first line gives the name and ID of the female student with the highest grade, and the second line gives that of the male student with the lowest grade.  The third line gives the difference gradeF-gradeM.  If one such kind of student is missing, output “Absent” in the corresponding line, and output “NA” in the third line instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>Joe M Math990112 89<br>Mike M CS991301 100<br>Mary F EE990830 95</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Mary EE990830<br>Joe Math990112<br>6</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> re_male_name, re_male_id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> re_female_name, re_female_id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> re_male_grade = <span class=\"number\">101</span>, re_female_grade = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name, gender, id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;name&gt;&gt;gender&gt;&gt;id&gt;&gt;grade;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (gender==<span class=\"string\">\"M\"</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grade &lt; re_male_grade) &#123;</span><br><span class=\"line\">\t\t\t\tre_male_name = name;</span><br><span class=\"line\">\t\t\t\tre_male_id = id;</span><br><span class=\"line\">\t\t\t\tre_male_grade = grade;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grade &gt; re_female_grade) &#123;</span><br><span class=\"line\">\t\t\t\tre_female_name = name;</span><br><span class=\"line\">\t\t\t\tre_female_id = id;</span><br><span class=\"line\">\t\t\t\tre_female_grade = grade;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_female_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Absent\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_female_name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_female_id&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_male_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Absent\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_male_name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_male_id&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_female_name==<span class=\"string\">\"\"</span> || re_male_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NA\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_female_grade - re_male_grade;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1037-Magic-Coupon-25\"><a href=\"#1037-Magic-Coupon-25\" class=\"headerlink\" title=\"1037 Magic Coupon (25)\"></a>1037 Magic Coupon (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>The magic shop in Mars is offering some magic coupons.  Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may get N times the value of that product back!  What is more, the shop also offers some bonus product for free.  However, if you apply a coupon with a positive N to this bonus product, you will have to pay the shop N times the value of the bonus product… but hey, magically, they have some coupons with negative N’s!<br>For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M\\$) where a negative value corresponds to a bonus product.  You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; coupon 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back.  On the other hand, if you apply coupon 3 to product 4, you will have to pay M\\$12 to the shop.<br>Each coupon and each product may be selected at most once.  Your task is to get as much money back as possible.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains the number of coupons NC, followed by a line with NC coupon integers.  Then the next line contains the number of products NP, followed by a line with NP product values.  Here 1&lt;= NC, NP &lt;= 105, and it is guaranteed that all the numbers will not exceed 230.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, simply print in a line the maximum amount of money you can get back.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4<br>1 2 4 -1<br>4<br>7 6 -2 -3</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>43</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<h2 id=\"1054-The-Dominant-Color-20\"><a href=\"#1054-The-Dominant-Color-20\" class=\"headerlink\" title=\"1054 The Dominant Color (20)\"></a>1054 The Dominant Color (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Behind the scenes in the computer’s memory, color is always talked about as a series of 24 bits of information for each pixel.  In an image, the color with the largest proportional area is called the dominant color.  <strong>A <em>strictly</em> dominant color takes more than half of the total area.</strong>  Now given an image of resolution M by N (for example, 800x600), you are supposed to point out the strictly dominant color.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains 2 positive numbers: M (&lt;=800) and N (&lt;=600) which are the resolutions of the image.  Then N lines follow, each contains M digital colors in the range [0, 224).  It is guaranteed that the strictly dominant color exists for each input image.  All the numbers in a line are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, simply print the dominant color in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5 3<br>0 0 255 16777215 24<br>24 24 0 0 24<br>24 0 24 24 24</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p> 24</p>\n</blockquote>\n<p>首先要注意到dominant color是超过半数的，刚开始只想到了排序后最中间的数一定为结果，但是要存储的数据太多，后来看了<a href=\"https://blog.csdn.net/zhu_liangwei/article/details/9734671\" target=\"_blank\" rel=\"noopener\">参考链接</a>，学会了下边这个方法。</p>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m, n, all_count, tmp, re = <span class=\"number\">-1</span>, count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class=\"line\">    all_count = m*n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (all_count--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) re = tmp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (re == tmp) count++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;re;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1081-Rational-Sum-20\"><a href=\"#1081-Rational-Sum-20\" class=\"headerlink\" title=\"1081 Rational Sum (20)\"></a>1081 Rational Sum (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given N rational numbers in the form “numerator/denominator”, you are supposed to calculate their sum.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a positive integer N (&lt;=100), followed in the next line N rational numbers “a1/b1 a2/b2 …” where all the numerators and denominators are in the range of “long int”.  If there is a negative number, then the sign must appear in front of the numerator.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output the sum in the simplest form “integer numerator/denominator” where “integer” is the integer part of the sum, “numerator” &lt; “denominator”, and the numerator and the denominator have no common factor.  You must output only the fractional part if the integer part is 0.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5<br>2/5 4/15 1/30 -2/60 8/3</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 1/3</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((b==<span class=\"number\">0</span>)?<span class=\"built_in\">abs</span>(a):gcd(b,a%b));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n, tmp_gcd;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> re_integer = <span class=\"number\">0</span>, re_numerator, re_denominator;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;re_numerator&gt;&gt;c&gt;&gt;re_denominator;</span><br><span class=\"line\">    tmp_gcd = gcd(re_numerator,re_denominator);</span><br><span class=\"line\">    re_numerator/=tmp_gcd,re_denominator/=tmp_gcd;</span><br><span class=\"line\">    re_integer += <span class=\"keyword\">int</span>(re_numerator/re_denominator);</span><br><span class=\"line\">    re_numerator%=re_denominator;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp_nu, tmp_de, tmp_nu_re, tmp_de_re;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;tmp_nu&gt;&gt;c&gt;&gt;tmp_de;</span><br><span class=\"line\">        tmp_de_re = tmp_de * re_denominator;</span><br><span class=\"line\">        tmp_nu_re = tmp_nu * re_denominator + tmp_de * re_numerator;</span><br><span class=\"line\">        tmp_gcd = gcd(tmp_de_re,tmp_nu_re);</span><br><span class=\"line\">        tmp_de_re/=tmp_gcd,tmp_nu_re/=tmp_gcd;</span><br><span class=\"line\">        re_integer += <span class=\"keyword\">int</span>(tmp_nu_re/tmp_de_re);</span><br><span class=\"line\">        re_numerator = tmp_nu_re % tmp_de_re;</span><br><span class=\"line\">        re_denominator = tmp_de_re;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re_integer == <span class=\"number\">0</span> &amp;&amp; re_numerator == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (re_integer == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;re_numerator&lt;&lt;<span class=\"string\">'/'</span>&lt;&lt;re_denominator;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (re_numerator == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re_integer;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re_integer&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_numerator&lt;&lt;<span class=\"string\">'/'</span>&lt;&lt;re_denominator;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1082-Read-Number-in-Chinese-25\"><a href=\"#1082-Read-Number-in-Chinese-25\" class=\"headerlink\" title=\"1082 Read Number in Chinese (25)\"></a>1082 Read Number in Chinese (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way.  Output “Fu” first if it is negative.  For example, -123456789 is read as “Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu”.  Note: zero (“ling”) must be handled correctly according to the Chinese tradition.  For example, 100800 is “yi Shi Wan ling ba Bai”.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case, which gives an integer with no more than 9 digits.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in a line the Chinese way of reading the number.  The characters are separated by a space and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>-123456789</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>首先按照数字单位的顺序添加到结果容器中，然后遍历结果容器，如果有连续重复的”ling”只留一个，如果”Wan”前有“ling”去掉0，如果”Wan”直接跟在“Yi”后边将“Wan”换成“ling”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> units[] = &#123;<span class=\"string\">\"\"</span>,<span class=\"string\">\"Shi\"</span>,<span class=\"string\">\"Bai\"</span>,<span class=\"string\">\"Qian\"</span>,<span class=\"string\">\"Wan\"</span>,<span class=\"string\">\"Shi\"</span>,<span class=\"string\">\"Bai\"</span>,<span class=\"string\">\"Qian\"</span>,<span class=\"string\">\"Yi\"</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> digits[] = &#123;<span class=\"string\">\"ling\"</span>,<span class=\"string\">\"yi\"</span>,<span class=\"string\">\"er\"</span>,<span class=\"string\">\"san\"</span>,<span class=\"string\">\"si\"</span>,<span class=\"string\">\"wu\"</span>,<span class=\"string\">\"liu\"</span>,<span class=\"string\">\"qi\"</span>,<span class=\"string\">\"ba\"</span>,<span class=\"string\">\"jiu\"</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; re;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tre.push_back(<span class=\"string\">\"Fu\"</span>);</span><br><span class=\"line\">\t\tn = -n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"ling\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; n_digits;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tn_digits.push_back(n%<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tn/=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = n_digits.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = len<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\tre.push_back(digits[n_digits[i]]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i==<span class=\"number\">4</span> || n_digits[i] != <span class=\"number\">0</span> &amp;&amp; i&gt;<span class=\"number\">0</span>) re.push_back(units[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;::iterator iter = re.begin()+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (iter &lt; re.end()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"ling\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"ling\"</span>)</span><br><span class=\"line\">\t\t\tre.erase(iter);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"Wan\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"ling\"</span>)</span><br><span class=\"line\">\t\t\tre.erase((iter--)<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"Wan\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"Yi\"</span>)</span><br><span class=\"line\">\t\t\t*(iter++) = <span class=\"string\">\"ling\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\titer++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re.size()&gt;<span class=\"number\">1</span> &amp;&amp; re[re.size()<span class=\"number\">-1</span>]==<span class=\"string\">\"ling\"</span>) re.erase(re.end()<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;re[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; re.size(); i++) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[i];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1083-List-Grades-25\"><a href=\"#1083-List-Grades-25\" class=\"headerlink\" title=\"1083 List Grades (25)\"></a>1083 List Grades (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a list of N student records with name, ID and grade.  You are supposed to sort the records with respect to the grade in non-increasing order, and output those student records of which the grades are in a given interval.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case is given in the following format:<br>N<br>name[1] ID[1] grade[1]<br>name[2] ID[2] grade[2]<br>… …<br>name[N] ID[N] grade[N]<br>grade1 grade2</p>\n<p>where name[i] and ID[i] are strings of no more than 10 characters with no space, grade[i] is an integer in [0, 100], grade1 and grade2 are the boundaries of the grade’s interval.  It is guaranteed that all the grades are <em>distinct</em>.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the student records of which the grades are in the given interval [grade1, grade2] and are in non-increasing order.  Each student record occupies a line with the student’s name and ID, separated by one space.  If there is no student’s grade in that interval, output “NONE” instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4<br>Tom CS000001 59<br>Joe Math990112 89<br>Mike CS991301 100<br>Mary EE990830 95<br>60 100</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Mike CS991301<br>Mary EE990830<br>Joe Math990112</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\tstudent(<span class=\"built_in\">string</span> n,<span class=\"built_in\">string</span> i, <span class=\"keyword\">int</span> g) &#123;</span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tid = i;</span><br><span class=\"line\">\t\tgrade = g;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt; re;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name,id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;name&gt;&gt;id&gt;&gt;grade;</span><br><span class=\"line\">\t\t<span class=\"function\">student <span class=\"title\">tmp</span><span class=\"params\">(name,id,grade)</span></span>;</span><br><span class=\"line\">\t\tre.push_back(tmp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> min_grade,max_grade;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;min_grade&gt;&gt;max_grade;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt;::iterator iter = re.begin();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (iter != re.end()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((*iter).grade &lt; min_grade || (*iter).grade &gt; max_grade)</span><br><span class=\"line\">\t\t\tre.erase(iter);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\titer++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span> ; k &lt; re.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; re.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (re[i].grade &lt; re[i+<span class=\"number\">1</span>].grade) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"function\">student <span class=\"title\">tmp</span><span class=\"params\">(re[i].name,re[i].id,re[i].grade)</span></span>;</span><br><span class=\"line\">\t\t\t\tre[i] = re[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tre[i+<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re.empty()) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NONE\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re[<span class=\"number\">0</span>].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[<span class=\"number\">0</span>].id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; re.size(); i++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;re[i].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[i].id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1086-Tree-Traversals-Again-25\"><a href=\"#1086-Tree-Traversals-Again-25\" class=\"headerlink\" title=\"1086 Tree Traversals Again (25)\"></a>1086 Tree Traversals Again (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>An inorder binary tree traversal can be implemented in a non-recursive way with a stack.  For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop().  Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations.  Your task is to give the postorder traversal sequence of this tree.</p>\n<p><img src=\"/images/pat_1086.jpg\" alt=\"\"></p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains a positive integer N (&lt;=30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N).  Then 2N lines follow, each describes a stack operation in the format: “Push X” where X is the index of the node being pushed onto the stack; or “Pop” meaning to pop one node from the stack.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print the postorder traversal sequence of the corresponding tree in one line.  A solution is guaranteed to exist.  All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>6<br>Push 1<br>Push 2<br>Push 3<br>Pop<br>Pop<br>Push 4<br>Pop<br>Pop<br>Push 5<br>Push 6<br>Pop<br>Pop</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 4 2 6 5 1</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>以上述例子为例，按顺序排下来123456为前序，使用栈的pop顺序为中序，利用前序和中序可以得到后序。</p>\n<p>注意1-N为标号，每次push的为值，值有可能重复，但是push顺序为标号1-N。</p>\n<p>可以用下边这个测试用例测试：</p>\n<blockquote>\n<p>//输入</p>\n<p>19<br>Push 4<br>Push 11<br>Push 7<br>Push 12<br>Pop<br>Pop<br>Pop<br>Push 14<br>Push 17<br>Pop<br>Pop<br>Push 6<br>Push 18<br>Pop<br>Push 8<br>Pop<br>Pop<br>Push 4<br>Pop<br>Pop<br>Push 11<br>Push 16<br>Push 11<br>Push 12<br>Pop<br>Push 2<br>Pop<br>Pop<br>Pop<br>Push 7<br>Push 4<br>Pop<br>Pop<br>Push 12<br>Pop<br>Pop<br>Push 11<br>Pop</p>\n<p>// 输出</p>\n<p>12 7 17 8 18 4 6 14 11 2 12 11 4 12 7 16 11 11 4 </p>\n</blockquote>\n<p>我的代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; post;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePostOrder</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; in, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tpost.push_back(pre[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> root_num = pre[<span class=\"number\">0</span>], root_pos_of_in = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; root_pos_of_in &lt; len; root_pos_of_in++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (in[root_pos_of_in] == root_num) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> left_len = root_pos_of_in;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> right_len = len - left_len - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre_left,pre_right,in_left,in_right;</span><br><span class=\"line\">\tpre_left.assign(pre.begin()+<span class=\"number\">1</span>, pre.begin()+<span class=\"number\">1</span>+left_len);</span><br><span class=\"line\">\tpre_right.assign(pre.begin()+<span class=\"number\">1</span>+left_len, pre.end());</span><br><span class=\"line\">\tin_left.assign(in.begin(),in.begin()+left_len);</span><br><span class=\"line\">\tin_right.assign(in.begin()+left_len+<span class=\"number\">1</span>, in.end());</span><br><span class=\"line\">\tgeneratePostOrder(pre_left,in_left,left_len);</span><br><span class=\"line\">\tgeneratePostOrder(pre_right,in_right,right_len);</span><br><span class=\"line\">\tpost.push_back(root_num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, tmp;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> op;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre,in,value;</span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; tmp_stack;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>*n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;op;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (op == <span class=\"string\">\"Push\"</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">\t\t\tvalue.push_back(tmp);</span><br><span class=\"line\">\t\t\ttmp_stack.push(index);</span><br><span class=\"line\">\t\t\tpre.push_back(index++);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tin.push_back(tmp_stack.top());</span><br><span class=\"line\">\t\t\ttmp_stack.pop();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgeneratePostOrder(pre,in,n);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;value[post[<span class=\"number\">0</span>]];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;value[post[i]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10xx\"><a href=\"#10xx\" class=\"headerlink\" title=\"10xx\"></a>10xx</h2><p><strong>题目描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>实现代码</strong></p>\n"},{"title":"hexo博客谷歌百度收录踩坑日记","toc":false,"date":"2018-04-16T16:09:38.000Z","_content":"\n## 百度收录文件验证\n\n无论怎么把渲染关掉或者render_skip都说我的格式错误，看了一下源代码发现即使不渲染最后也会加上html的标签，于是放弃这个放弃了这个方式。\n\n## 百度收录html验证\n\n本来以为这个应该会直接就验证通过了，但是只要我修改了html，百度就无法访问我的博客，遂也放弃了这个方法..\n\n## 百度收录CNAME验证\n\n使用阿里云进行云解析但是阿里云现在不支持xxx.github.io的域名...\n\n于是踏上了新征程：\n\n## 自定义域名\n\n在阿里云买了一个最便宜的.top域名，把自定义域名和博客绑定上之后博客就无法访问了，需要细心等待，谷歌了一下一般不会超过48h就会绑定成功可以正常使用。\n\n阿里云的速度挺快，不到一个小时就好了。\n\n弄好自定义域名之后就悲催地发现评论板块无法登陆...磕磕绊绊[改好配置](http://blog.zmj97.top/2018/04/16/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法)后，终于开始重新进行百度收录了！\n\n## 谷歌收录\n\n由于白天的阴影先弄了谷歌收录，没有遇到什么大坑，一切都非常顺利，直到上sitemap时出现了两个问题：\n\n### sitmap.xml不存在\n\n安装sitemap插件时一定要加上`--save`！！：\n\n```shell\nnpm install hexo-generator-sitemap --save\n```\n\n而不是\n\n```shell\nnpm install hexo-generator-sitemap\n```\n\n### 测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址\n\n搜了一下，各家有各家的错误原因，我的是因为我在谷歌收录的网址是原网址`https://mikqueenge.github.io`，而上传的sitemap.xml的地址自动被解析为自定义域名`http://blog.zmj97.top/sitemap.xml`才出现了错误，再添加收录网站`http://blog.zmj97.top`然后在这个地址下添加sitemap即可。\n\n## 百度收录\n\n### `token`\n\n数据引入->链接提交->自动提交->主动推送（实时）->推送接口 中的接口调用地址中有token的值。\n\n### 自动抓取sitemap失败\n\n直接访问提交的数据文件地址`http://blog.zmj97.top/baidu_sitemap.txt`是可以看到的，但是因为 GitHub 屏蔽了百度的爬虫所以百度无法抓取...\n\n然后发现我的配置跟主动推送的配置（[参考链接](http://www.yuan-ji.me/Hexo-优化%EF%BC%9A提交sitemap及解决百度爬虫抓取-GitHub-Pages-问题/)）很像，但是deploy baidu_submitter一直出错，看了错误信息才发现是因为把`baidu_url_submit:`下的`path: baidu_urls.txt`擅自改了文件名导致的...\n\n终于好了...踩坑结束！","source":"_posts/hexo博客谷歌百度收录踩坑日记.md","raw":"---\ntitle: hexo博客谷歌百度收录踩坑日记\ntoc: false\ndate: 2018-04-17 00:09:38\ncategories:\n- methods\ntags:\n- hexo\n- 网站收录\n---\n\n## 百度收录文件验证\n\n无论怎么把渲染关掉或者render_skip都说我的格式错误，看了一下源代码发现即使不渲染最后也会加上html的标签，于是放弃这个放弃了这个方式。\n\n## 百度收录html验证\n\n本来以为这个应该会直接就验证通过了，但是只要我修改了html，百度就无法访问我的博客，遂也放弃了这个方法..\n\n## 百度收录CNAME验证\n\n使用阿里云进行云解析但是阿里云现在不支持xxx.github.io的域名...\n\n于是踏上了新征程：\n\n## 自定义域名\n\n在阿里云买了一个最便宜的.top域名，把自定义域名和博客绑定上之后博客就无法访问了，需要细心等待，谷歌了一下一般不会超过48h就会绑定成功可以正常使用。\n\n阿里云的速度挺快，不到一个小时就好了。\n\n弄好自定义域名之后就悲催地发现评论板块无法登陆...磕磕绊绊[改好配置](http://blog.zmj97.top/2018/04/16/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法)后，终于开始重新进行百度收录了！\n\n## 谷歌收录\n\n由于白天的阴影先弄了谷歌收录，没有遇到什么大坑，一切都非常顺利，直到上sitemap时出现了两个问题：\n\n### sitmap.xml不存在\n\n安装sitemap插件时一定要加上`--save`！！：\n\n```shell\nnpm install hexo-generator-sitemap --save\n```\n\n而不是\n\n```shell\nnpm install hexo-generator-sitemap\n```\n\n### 测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址\n\n搜了一下，各家有各家的错误原因，我的是因为我在谷歌收录的网址是原网址`https://mikqueenge.github.io`，而上传的sitemap.xml的地址自动被解析为自定义域名`http://blog.zmj97.top/sitemap.xml`才出现了错误，再添加收录网站`http://blog.zmj97.top`然后在这个地址下添加sitemap即可。\n\n## 百度收录\n\n### `token`\n\n数据引入->链接提交->自动提交->主动推送（实时）->推送接口 中的接口调用地址中有token的值。\n\n### 自动抓取sitemap失败\n\n直接访问提交的数据文件地址`http://blog.zmj97.top/baidu_sitemap.txt`是可以看到的，但是因为 GitHub 屏蔽了百度的爬虫所以百度无法抓取...\n\n然后发现我的配置跟主动推送的配置（[参考链接](http://www.yuan-ji.me/Hexo-优化%EF%BC%9A提交sitemap及解决百度爬虫抓取-GitHub-Pages-问题/)）很像，但是deploy baidu_submitter一直出错，看了错误信息才发现是因为把`baidu_url_submit:`下的`path: baidu_urls.txt`擅自改了文件名导致的...\n\n终于好了...踩坑结束！","slug":"hexo博客谷歌百度收录踩坑日记","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtz4000g7bags05vl0m2","content":"<h2 id=\"百度收录文件验证\"><a href=\"#百度收录文件验证\" class=\"headerlink\" title=\"百度收录文件验证\"></a>百度收录文件验证</h2><p>无论怎么把渲染关掉或者render_skip都说我的格式错误，看了一下源代码发现即使不渲染最后也会加上html的标签，于是放弃这个放弃了这个方式。</p>\n<h2 id=\"百度收录html验证\"><a href=\"#百度收录html验证\" class=\"headerlink\" title=\"百度收录html验证\"></a>百度收录html验证</h2><p>本来以为这个应该会直接就验证通过了，但是只要我修改了html，百度就无法访问我的博客，遂也放弃了这个方法..</p>\n<h2 id=\"百度收录CNAME验证\"><a href=\"#百度收录CNAME验证\" class=\"headerlink\" title=\"百度收录CNAME验证\"></a>百度收录CNAME验证</h2><p>使用阿里云进行云解析但是阿里云现在不支持xxx.github.io的域名…</p>\n<p>于是踏上了新征程：</p>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><p>在阿里云买了一个最便宜的.top域名，把自定义域名和博客绑定上之后博客就无法访问了，需要细心等待，谷歌了一下一般不会超过48h就会绑定成功可以正常使用。</p>\n<p>阿里云的速度挺快，不到一个小时就好了。</p>\n<p>弄好自定义域名之后就悲催地发现评论板块无法登陆…磕磕绊绊<a href=\"http://blog.zmj97.top/2018/04/16/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法\">改好配置</a>后，终于开始重新进行百度收录了！</p>\n<h2 id=\"谷歌收录\"><a href=\"#谷歌收录\" class=\"headerlink\" title=\"谷歌收录\"></a>谷歌收录</h2><p>由于白天的阴影先弄了谷歌收录，没有遇到什么大坑，一切都非常顺利，直到上sitemap时出现了两个问题：</p>\n<h3 id=\"sitmap-xml不存在\"><a href=\"#sitmap-xml不存在\" class=\"headerlink\" title=\"sitmap.xml不存在\"></a>sitmap.xml不存在</h3><p>安装sitemap插件时一定要加上<code>--save</code>！！：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n<p>而不是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试sitmap-xml出现错误：此位置的-Sitemap-不允许此网址\"><a href=\"#测试sitmap-xml出现错误：此位置的-Sitemap-不允许此网址\" class=\"headerlink\" title=\"测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址\"></a>测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址</h3><p>搜了一下，各家有各家的错误原因，我的是因为我在谷歌收录的网址是原网址<code>https://mikqueenge.github.io</code>，而上传的sitemap.xml的地址自动被解析为自定义域名<code>http://blog.zmj97.top/sitemap.xml</code>才出现了错误，再添加收录网站<code>http://blog.zmj97.top</code>然后在这个地址下添加sitemap即可。</p>\n<h2 id=\"百度收录\"><a href=\"#百度收录\" class=\"headerlink\" title=\"百度收录\"></a>百度收录</h2><h3 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a><code>token</code></h3><p>数据引入-&gt;链接提交-&gt;自动提交-&gt;主动推送（实时）-&gt;推送接口 中的接口调用地址中有token的值。</p>\n<h3 id=\"自动抓取sitemap失败\"><a href=\"#自动抓取sitemap失败\" class=\"headerlink\" title=\"自动抓取sitemap失败\"></a>自动抓取sitemap失败</h3><p>直接访问提交的数据文件地址<code>http://blog.zmj97.top/baidu_sitemap.txt</code>是可以看到的，但是因为 GitHub 屏蔽了百度的爬虫所以百度无法抓取…</p>\n<p>然后发现我的配置跟主动推送的配置（<a href=\"http://www.yuan-ji.me/Hexo-优化%EF%BC%9A提交sitemap及解决百度爬虫抓取-GitHub-Pages-问题/\" target=\"_blank\" rel=\"noopener\">参考链接</a>）很像，但是deploy baidu_submitter一直出错，看了错误信息才发现是因为把<code>baidu_url_submit:</code>下的<code>path: baidu_urls.txt</code>擅自改了文件名导致的…</p>\n<p>终于好了…踩坑结束！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"百度收录文件验证\"><a href=\"#百度收录文件验证\" class=\"headerlink\" title=\"百度收录文件验证\"></a>百度收录文件验证</h2><p>无论怎么把渲染关掉或者render_skip都说我的格式错误，看了一下源代码发现即使不渲染最后也会加上html的标签，于是放弃这个放弃了这个方式。</p>\n<h2 id=\"百度收录html验证\"><a href=\"#百度收录html验证\" class=\"headerlink\" title=\"百度收录html验证\"></a>百度收录html验证</h2><p>本来以为这个应该会直接就验证通过了，但是只要我修改了html，百度就无法访问我的博客，遂也放弃了这个方法..</p>\n<h2 id=\"百度收录CNAME验证\"><a href=\"#百度收录CNAME验证\" class=\"headerlink\" title=\"百度收录CNAME验证\"></a>百度收录CNAME验证</h2><p>使用阿里云进行云解析但是阿里云现在不支持xxx.github.io的域名…</p>\n<p>于是踏上了新征程：</p>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><p>在阿里云买了一个最便宜的.top域名，把自定义域名和博客绑定上之后博客就无法访问了，需要细心等待，谷歌了一下一般不会超过48h就会绑定成功可以正常使用。</p>\n<p>阿里云的速度挺快，不到一个小时就好了。</p>\n<p>弄好自定义域名之后就悲催地发现评论板块无法登陆…磕磕绊绊<a href=\"http://blog.zmj97.top/2018/04/16/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法\">改好配置</a>后，终于开始重新进行百度收录了！</p>\n<h2 id=\"谷歌收录\"><a href=\"#谷歌收录\" class=\"headerlink\" title=\"谷歌收录\"></a>谷歌收录</h2><p>由于白天的阴影先弄了谷歌收录，没有遇到什么大坑，一切都非常顺利，直到上sitemap时出现了两个问题：</p>\n<h3 id=\"sitmap-xml不存在\"><a href=\"#sitmap-xml不存在\" class=\"headerlink\" title=\"sitmap.xml不存在\"></a>sitmap.xml不存在</h3><p>安装sitemap插件时一定要加上<code>--save</code>！！：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n<p>而不是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试sitmap-xml出现错误：此位置的-Sitemap-不允许此网址\"><a href=\"#测试sitmap-xml出现错误：此位置的-Sitemap-不允许此网址\" class=\"headerlink\" title=\"测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址\"></a>测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址</h3><p>搜了一下，各家有各家的错误原因，我的是因为我在谷歌收录的网址是原网址<code>https://mikqueenge.github.io</code>，而上传的sitemap.xml的地址自动被解析为自定义域名<code>http://blog.zmj97.top/sitemap.xml</code>才出现了错误，再添加收录网站<code>http://blog.zmj97.top</code>然后在这个地址下添加sitemap即可。</p>\n<h2 id=\"百度收录\"><a href=\"#百度收录\" class=\"headerlink\" title=\"百度收录\"></a>百度收录</h2><h3 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a><code>token</code></h3><p>数据引入-&gt;链接提交-&gt;自动提交-&gt;主动推送（实时）-&gt;推送接口 中的接口调用地址中有token的值。</p>\n<h3 id=\"自动抓取sitemap失败\"><a href=\"#自动抓取sitemap失败\" class=\"headerlink\" title=\"自动抓取sitemap失败\"></a>自动抓取sitemap失败</h3><p>直接访问提交的数据文件地址<code>http://blog.zmj97.top/baidu_sitemap.txt</code>是可以看到的，但是因为 GitHub 屏蔽了百度的爬虫所以百度无法抓取…</p>\n<p>然后发现我的配置跟主动推送的配置（<a href=\"http://www.yuan-ji.me/Hexo-优化%EF%BC%9A提交sitemap及解决百度爬虫抓取-GitHub-Pages-问题/\" target=\"_blank\" rel=\"noopener\">参考链接</a>）很像，但是deploy baidu_submitter一直出错，看了错误信息才发现是因为把<code>baidu_url_submit:</code>下的<code>path: baidu_urls.txt</code>擅自改了文件名导致的…</p>\n<p>终于好了…踩坑结束！</p>\n"},{"title":"numpy常用函数和数据类型","date":"2018-04-01T08:27:34.000Z","_content":"\n\n\n### np.random.rand\n\nnp.random.rand(d0,d1,...,dn)表示创造一个(n+1)维的大小为d0\\*d1\\*...\\*dn的数组，其中每一个数都是随机产生的[0, 1)内的数。\n\n```python\n>>> np.random.rand(3,2)\narray([[0.91184685, 0.81463722],\n       [0.9261665 , 0.960428  ],\n       [0.52837831, 0.61184641]])\n```\n\n### np.float32\n\n数据类型，32位浮点数。\n\n### np.dot\n\n矩阵乘法。np.dot(x, y)表示矩阵x和y相乘。\n\n```python\n>>> a = [1, 2]\n>>> b = [[3], [4]]\n>>> np.dot(a,b)\narray([11])\n```\n\n\n\n","source":"_posts/numpy常用函数和数据类型.md","raw":"---\ntitle: numpy常用函数和数据类型\ndate: 2018-04-01 16:27:34\ncategories: \n- Python\ntags:\n- numpy\n---\n\n\n\n### np.random.rand\n\nnp.random.rand(d0,d1,...,dn)表示创造一个(n+1)维的大小为d0\\*d1\\*...\\*dn的数组，其中每一个数都是随机产生的[0, 1)内的数。\n\n```python\n>>> np.random.rand(3,2)\narray([[0.91184685, 0.81463722],\n       [0.9261665 , 0.960428  ],\n       [0.52837831, 0.61184641]])\n```\n\n### np.float32\n\n数据类型，32位浮点数。\n\n### np.dot\n\n矩阵乘法。np.dot(x, y)表示矩阵x和y相乘。\n\n```python\n>>> a = [1, 2]\n>>> b = [[3], [4]]\n>>> np.dot(a,b)\narray([11])\n```\n\n\n\n","slug":"numpy常用函数和数据类型","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtz7000h7bagzizcz2wk","content":"<h3 id=\"np-random-rand\"><a href=\"#np-random-rand\" class=\"headerlink\" title=\"np.random.rand\"></a>np.random.rand</h3><p>np.random.rand(d0,d1,…,dn)表示创造一个(n+1)维的大小为d0*d1*…*dn的数组，其中每一个数都是随机产生的[0, 1)内的数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.rand(<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">array([[<span class=\"number\">0.91184685</span>, <span class=\"number\">0.81463722</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.9261665</span> , <span class=\"number\">0.960428</span>  ],</span><br><span class=\"line\">       [<span class=\"number\">0.52837831</span>, <span class=\"number\">0.61184641</span>]])</span><br></pre></td></tr></table></figure>\n<h3 id=\"np-float32\"><a href=\"#np-float32\" class=\"headerlink\" title=\"np.float32\"></a>np.float32</h3><p>数据类型，32位浮点数。</p>\n<h3 id=\"np-dot\"><a href=\"#np-dot\" class=\"headerlink\" title=\"np.dot\"></a>np.dot</h3><p>矩阵乘法。np.dot(x, y)表示矩阵x和y相乘。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [[<span class=\"number\">3</span>], [<span class=\"number\">4</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.dot(a,b)</span><br><span class=\"line\">array([<span class=\"number\">11</span>])</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"np-random-rand\"><a href=\"#np-random-rand\" class=\"headerlink\" title=\"np.random.rand\"></a>np.random.rand</h3><p>np.random.rand(d0,d1,…,dn)表示创造一个(n+1)维的大小为d0*d1*…*dn的数组，其中每一个数都是随机产生的[0, 1)内的数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.rand(<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">array([[<span class=\"number\">0.91184685</span>, <span class=\"number\">0.81463722</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.9261665</span> , <span class=\"number\">0.960428</span>  ],</span><br><span class=\"line\">       [<span class=\"number\">0.52837831</span>, <span class=\"number\">0.61184641</span>]])</span><br></pre></td></tr></table></figure>\n<h3 id=\"np-float32\"><a href=\"#np-float32\" class=\"headerlink\" title=\"np.float32\"></a>np.float32</h3><p>数据类型，32位浮点数。</p>\n<h3 id=\"np-dot\"><a href=\"#np-dot\" class=\"headerlink\" title=\"np.dot\"></a>np.dot</h3><p>矩阵乘法。np.dot(x, y)表示矩阵x和y相乘。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [[<span class=\"number\">3</span>], [<span class=\"number\">4</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.dot(a,b)</span><br><span class=\"line\">array([<span class=\"number\">11</span>])</span><br></pre></td></tr></table></figure>\n"},{"title":"ubuntu 18.04下安装稳定版Chrome谷歌浏览器","toc":false,"date":"2018-09-02T00:30:57.000Z","_content":"\n\n\n由于官方下载页面打不开，因此找了一个网盘下载的，[网盘下载点击这里](https://pan.baidu.com/s/1vC974ES6Y4UPdyRNTAJpZg)。\n\n\n\n安装相关依赖：\n\n```powershell\nsudo apt-get install libcurl3\nsudo apt-get install libappindicator1\nsudo apt-get install libpango1.0-0\nsudo apt-get install libgooglepinyin0\n```\n\n\n\n进入下载目录，运行下列命令即可：\n\n```powershell\nsudo mv google-chrome-stable_current_amd64.deb /usr/local\ncd /usr/local\nsudo dpkg -i google-chrome-stable_current_amd64.deb\n```\n\n\n\n进行更新：\n\n```powershell\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n\n\n\n\n显示如下提示即安装成功：\n\n```powershell\nzmj@zmj:/usr/local$ sudo dpkg -i google-chrome-stable_current_amd64.deb\nSelecting previously unselected package google-chrome-stable.\n(Reading database ... 217976 files and directories currently installed.)\nPreparing to unpack google-chrome-stable_current_amd64.deb ...\nUnpacking google-chrome-stable (51.0.2704.106-1) ...\nSetting up google-chrome-stable (51.0.2704.106-1) ...\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/x-www-browser (x-www-browser) in auto mode\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/gnome-www-browser (gnome-www-browser) in auto mode\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/google-chrome (google-chrome) in auto mode\nProcessing triggers for gnome-menus (3.13.3-11ubuntu1.1) ...\nProcessing triggers for desktop-file-utils (0.23-1ubuntu3.18.04.1) ...\nProcessing triggers for mime-support (3.60ubuntu1) ...\nProcessing triggers for man-db (2.8.3-2ubuntu0.1) ...\n\n```\n\n","source":"_posts/ubuntu-18-04下安装稳定版Chrome谷歌浏览器.md","raw":"---\ntitle: ubuntu 18.04下安装稳定版Chrome谷歌浏览器\ntoc: false\ndate: 2018-09-02 08:30:57\ncategories:\n- methods\ntags:\n- ubuntu\n- Chrome\n---\n\n\n\n由于官方下载页面打不开，因此找了一个网盘下载的，[网盘下载点击这里](https://pan.baidu.com/s/1vC974ES6Y4UPdyRNTAJpZg)。\n\n\n\n安装相关依赖：\n\n```powershell\nsudo apt-get install libcurl3\nsudo apt-get install libappindicator1\nsudo apt-get install libpango1.0-0\nsudo apt-get install libgooglepinyin0\n```\n\n\n\n进入下载目录，运行下列命令即可：\n\n```powershell\nsudo mv google-chrome-stable_current_amd64.deb /usr/local\ncd /usr/local\nsudo dpkg -i google-chrome-stable_current_amd64.deb\n```\n\n\n\n进行更新：\n\n```powershell\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n\n\n\n\n显示如下提示即安装成功：\n\n```powershell\nzmj@zmj:/usr/local$ sudo dpkg -i google-chrome-stable_current_amd64.deb\nSelecting previously unselected package google-chrome-stable.\n(Reading database ... 217976 files and directories currently installed.)\nPreparing to unpack google-chrome-stable_current_amd64.deb ...\nUnpacking google-chrome-stable (51.0.2704.106-1) ...\nSetting up google-chrome-stable (51.0.2704.106-1) ...\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/x-www-browser (x-www-browser) in auto mode\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/gnome-www-browser (gnome-www-browser) in auto mode\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/google-chrome (google-chrome) in auto mode\nProcessing triggers for gnome-menus (3.13.3-11ubuntu1.1) ...\nProcessing triggers for desktop-file-utils (0.23-1ubuntu3.18.04.1) ...\nProcessing triggers for mime-support (3.60ubuntu1) ...\nProcessing triggers for man-db (2.8.3-2ubuntu0.1) ...\n\n```\n\n","slug":"ubuntu-18-04下安装稳定版Chrome谷歌浏览器","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtzd000l7bag1f7e95cl","content":"<p>由于官方下载页面打不开，因此找了一个网盘下载的，<a href=\"https://pan.baidu.com/s/1vC974ES6Y4UPdyRNTAJpZg\" target=\"_blank\" rel=\"noopener\">网盘下载点击这里</a>。</p>\n<p>安装相关依赖：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libcurl3</span><br><span class=\"line\">sudo apt-get install libappindicator1</span><br><span class=\"line\">sudo apt-get install libpango1.<span class=\"number\">0</span>-<span class=\"number\">0</span></span><br><span class=\"line\">sudo apt-get install libgooglepinyin0</span><br></pre></td></tr></table></figure>\n<p>进入下载目录，运行下列命令即可：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv google-chrome-stable_current_amd64.deb /usr/local</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>进行更新：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n<p>显示如下提示即安装成功：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zmj@zmj:/usr/local$ sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br><span class=\"line\">Selecting previously unselected package google-chrome-stable.</span><br><span class=\"line\">(Reading database ... <span class=\"number\">217976</span> files and directories currently installed.)</span><br><span class=\"line\">Preparing to unpack google-chrome-stable_current_amd64.deb ...</span><br><span class=\"line\">Unpacking google-chrome-stable (<span class=\"number\">51.0</span>.<span class=\"number\">2704.106</span>-<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Setting up google-chrome-stable (<span class=\"number\">51.0</span>.<span class=\"number\">2704.106</span>-<span class=\"number\">1</span>) ...</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/x-www-browser (x-www-browser) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/gnome-www-browser (gnome-www-browser) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/google-chrome (google-chrome) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> gnome-menus (<span class=\"number\">3.13</span>.<span class=\"number\">3</span>-<span class=\"number\">11</span>ubuntu1.<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> desktop-file-utils (<span class=\"number\">0.23</span>-<span class=\"number\">1</span>ubuntu3.<span class=\"number\">18.04</span>.<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> mime-support (<span class=\"number\">3.60</span>ubuntu1) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> man-db (<span class=\"number\">2.8</span>.<span class=\"number\">3</span>-<span class=\"number\">2</span>ubuntu0.<span class=\"number\">1</span>) ...</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>由于官方下载页面打不开，因此找了一个网盘下载的，<a href=\"https://pan.baidu.com/s/1vC974ES6Y4UPdyRNTAJpZg\" target=\"_blank\" rel=\"noopener\">网盘下载点击这里</a>。</p>\n<p>安装相关依赖：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libcurl3</span><br><span class=\"line\">sudo apt-get install libappindicator1</span><br><span class=\"line\">sudo apt-get install libpango1.<span class=\"number\">0</span>-<span class=\"number\">0</span></span><br><span class=\"line\">sudo apt-get install libgooglepinyin0</span><br></pre></td></tr></table></figure>\n<p>进入下载目录，运行下列命令即可：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv google-chrome-stable_current_amd64.deb /usr/local</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>进行更新：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n<p>显示如下提示即安装成功：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zmj@zmj:/usr/local$ sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br><span class=\"line\">Selecting previously unselected package google-chrome-stable.</span><br><span class=\"line\">(Reading database ... <span class=\"number\">217976</span> files and directories currently installed.)</span><br><span class=\"line\">Preparing to unpack google-chrome-stable_current_amd64.deb ...</span><br><span class=\"line\">Unpacking google-chrome-stable (<span class=\"number\">51.0</span>.<span class=\"number\">2704.106</span>-<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Setting up google-chrome-stable (<span class=\"number\">51.0</span>.<span class=\"number\">2704.106</span>-<span class=\"number\">1</span>) ...</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/x-www-browser (x-www-browser) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/gnome-www-browser (gnome-www-browser) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/google-chrome (google-chrome) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> gnome-menus (<span class=\"number\">3.13</span>.<span class=\"number\">3</span>-<span class=\"number\">11</span>ubuntu1.<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> desktop-file-utils (<span class=\"number\">0.23</span>-<span class=\"number\">1</span>ubuntu3.<span class=\"number\">18.04</span>.<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> mime-support (<span class=\"number\">3.60</span>ubuntu1) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> man-db (<span class=\"number\">2.8</span>.<span class=\"number\">3</span>-<span class=\"number\">2</span>ubuntu0.<span class=\"number\">1</span>) ...</span><br></pre></td></tr></table></figure>\n"},{"title":"ubuntu下Chrome谷歌浏览器部分网站图片显示不正常的解决方法","toc":false,"date":"2018-09-02T06:37:26.000Z","_content":"\n\n\n由于Chrome设置了使用微软雅黑字体导致了部分图片显示不正常，\n\n在浏览器设置中将字体换回ubuntu刷新页面会发现图片已经显示正常。\n\n","source":"_posts/ubuntu下Chrome谷歌浏览器部分网站图片显示不正常的解决方法.md","raw":"---\ntitle: ubuntu下Chrome谷歌浏览器部分网站图片显示不正常的解决方法\ntoc: false\ndate: 2018-09-02 14:37:26\ncategories:\n- methods\ntags:\n- ubuntu\n- Chrome\n- 图片显示\n---\n\n\n\n由于Chrome设置了使用微软雅黑字体导致了部分图片显示不正常，\n\n在浏览器设置中将字体换回ubuntu刷新页面会发现图片已经显示正常。\n\n","slug":"ubuntu下Chrome谷歌浏览器部分网站图片显示不正常的解决方法","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtzf000n7bag4b1iullr","content":"<p>由于Chrome设置了使用微软雅黑字体导致了部分图片显示不正常，</p>\n<p>在浏览器设置中将字体换回ubuntu刷新页面会发现图片已经显示正常。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于Chrome设置了使用微软雅黑字体导致了部分图片显示不正常，</p>\n<p>在浏览器设置中将字体换回ubuntu刷新页面会发现图片已经显示正常。</p>\n"},{"title":"ubuntu18.04中安装iNode","toc":false,"date":"2018-09-01T09:52:20.000Z","_content":"\n\n\n\n\n首先在学校官网下载32位版本的iNode包（64位一直无法安装成功因此选择安装32位版本的）。\n\n\n\n解压。\n\n\n\n安装各种依赖库（如果某个命令无法运行可以在安装目录下运行`./iNodeClient.sh`查看当前需要安装的依赖）：\n\n```powershell\nsudo apt-get install lib32ncurses5\nsudo apt-get install lib32z1\nsudo aptitude install libgtk-x11-2.0\nsudo apt-get install libgtk2.0-0:i386 libnss3:i386 libcurl3-gnutls:i386 libidn11:i386 libpango1.0-0:i386 libpangox-1.0-0:i386 libpangoxft-1.0-0:i386\nsudo apt-get install libgtk2.0-0:i386 libxxf86vm1:i386 libsm6:i386 lib32stdc++6\nsudo apt-get dist-upgrade\nsudo ln -s /usr/lib/i386-linux-gnu/libjpeg.so.8 /usr/lib/i386-linux-gnu/libjpeg.so.62\nsudo ln -s /usr/lib/i386-linux-gnu/libtiff.so.5 /usr/lib/i386-linux-gnu/libtiff.so.3\nsudo apt-get install murrine-themes\nsudo apt-get install gtk2-engines-murrine\nsudo apt-get install libgtkmm-2.4-dev\nsudo apt-get install libcanberra-gtk-module:i386\n```\n\n\n\n在解压后的目录中运行：\n\n```powershell\nsudo ./install.sh\n```\n\n\n\n这个时候`iNodeClient.destop`就可以点击运行了。\n\n\n\n添加用户名和密码后将`NIC`修改为`enp7s0`即可成功连接。\n\n\n\n[参考链接](https://blog.csdn.net/a845717607/article/details/52563005)","source":"_posts/ubuntu18-04中安装iNode.md","raw":"---\ntitle: ubuntu18.04中安装iNode\ntoc: false\ndate: 2018-09-01 17:52:20\ncategories:\n- methods\ntags:\n- ubuntu\n- iNode\n---\n\n\n\n\n\n首先在学校官网下载32位版本的iNode包（64位一直无法安装成功因此选择安装32位版本的）。\n\n\n\n解压。\n\n\n\n安装各种依赖库（如果某个命令无法运行可以在安装目录下运行`./iNodeClient.sh`查看当前需要安装的依赖）：\n\n```powershell\nsudo apt-get install lib32ncurses5\nsudo apt-get install lib32z1\nsudo aptitude install libgtk-x11-2.0\nsudo apt-get install libgtk2.0-0:i386 libnss3:i386 libcurl3-gnutls:i386 libidn11:i386 libpango1.0-0:i386 libpangox-1.0-0:i386 libpangoxft-1.0-0:i386\nsudo apt-get install libgtk2.0-0:i386 libxxf86vm1:i386 libsm6:i386 lib32stdc++6\nsudo apt-get dist-upgrade\nsudo ln -s /usr/lib/i386-linux-gnu/libjpeg.so.8 /usr/lib/i386-linux-gnu/libjpeg.so.62\nsudo ln -s /usr/lib/i386-linux-gnu/libtiff.so.5 /usr/lib/i386-linux-gnu/libtiff.so.3\nsudo apt-get install murrine-themes\nsudo apt-get install gtk2-engines-murrine\nsudo apt-get install libgtkmm-2.4-dev\nsudo apt-get install libcanberra-gtk-module:i386\n```\n\n\n\n在解压后的目录中运行：\n\n```powershell\nsudo ./install.sh\n```\n\n\n\n这个时候`iNodeClient.destop`就可以点击运行了。\n\n\n\n添加用户名和密码后将`NIC`修改为`enp7s0`即可成功连接。\n\n\n\n[参考链接](https://blog.csdn.net/a845717607/article/details/52563005)","slug":"ubuntu18-04中安装iNode","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtzi000s7bagwdksjnca","content":"<p>首先在学校官网下载32位版本的iNode包（64位一直无法安装成功因此选择安装32位版本的）。</p>\n<p>解压。</p>\n<p>安装各种依赖库（如果某个命令无法运行可以在安装目录下运行<code>./iNodeClient.sh</code>查看当前需要安装的依赖）：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lib32ncurses5</span><br><span class=\"line\">sudo apt-get install lib32z1</span><br><span class=\"line\">sudo aptitude install libgtk-x11-<span class=\"number\">2.0</span></span><br><span class=\"line\">sudo apt-get install libgtk2.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libnss3:i386 libcurl3-gnutls:i386 libidn11:i386 libpango1.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libpangox-<span class=\"number\">1.0</span>-<span class=\"number\">0</span>:i386 libpangoxft-<span class=\"number\">1.0</span>-<span class=\"number\">0</span>:i386</span><br><span class=\"line\">sudo apt-get install libgtk2.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libxxf86vm1:i386 libsm6:i386 lib32stdc++<span class=\"number\">6</span></span><br><span class=\"line\">sudo apt-get dist-upgrade</span><br><span class=\"line\">sudo ln -s /usr/lib/i386-linux-gnu/libjpeg.so.<span class=\"number\">8</span> /usr/lib/i386-linux-gnu/libjpeg.so.<span class=\"number\">62</span></span><br><span class=\"line\">sudo ln -s /usr/lib/i386-linux-gnu/libtiff.so.<span class=\"number\">5</span> /usr/lib/i386-linux-gnu/libtiff.so.<span class=\"number\">3</span></span><br><span class=\"line\">sudo apt-get install murrine-themes</span><br><span class=\"line\">sudo apt-get install gtk2-engines-murrine</span><br><span class=\"line\">sudo apt-get install libgtkmm-<span class=\"number\">2.4</span>-dev</span><br><span class=\"line\">sudo apt-get install libcanberra-gtk-module:i386</span><br></pre></td></tr></table></figure>\n<p>在解压后的目录中运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./install.sh</span><br></pre></td></tr></table></figure>\n<p>这个时候<code>iNodeClient.destop</code>就可以点击运行了。</p>\n<p>添加用户名和密码后将<code>NIC</code>修改为<code>enp7s0</code>即可成功连接。</p>\n<p><a href=\"https://blog.csdn.net/a845717607/article/details/52563005\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先在学校官网下载32位版本的iNode包（64位一直无法安装成功因此选择安装32位版本的）。</p>\n<p>解压。</p>\n<p>安装各种依赖库（如果某个命令无法运行可以在安装目录下运行<code>./iNodeClient.sh</code>查看当前需要安装的依赖）：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lib32ncurses5</span><br><span class=\"line\">sudo apt-get install lib32z1</span><br><span class=\"line\">sudo aptitude install libgtk-x11-<span class=\"number\">2.0</span></span><br><span class=\"line\">sudo apt-get install libgtk2.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libnss3:i386 libcurl3-gnutls:i386 libidn11:i386 libpango1.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libpangox-<span class=\"number\">1.0</span>-<span class=\"number\">0</span>:i386 libpangoxft-<span class=\"number\">1.0</span>-<span class=\"number\">0</span>:i386</span><br><span class=\"line\">sudo apt-get install libgtk2.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libxxf86vm1:i386 libsm6:i386 lib32stdc++<span class=\"number\">6</span></span><br><span class=\"line\">sudo apt-get dist-upgrade</span><br><span class=\"line\">sudo ln -s /usr/lib/i386-linux-gnu/libjpeg.so.<span class=\"number\">8</span> /usr/lib/i386-linux-gnu/libjpeg.so.<span class=\"number\">62</span></span><br><span class=\"line\">sudo ln -s /usr/lib/i386-linux-gnu/libtiff.so.<span class=\"number\">5</span> /usr/lib/i386-linux-gnu/libtiff.so.<span class=\"number\">3</span></span><br><span class=\"line\">sudo apt-get install murrine-themes</span><br><span class=\"line\">sudo apt-get install gtk2-engines-murrine</span><br><span class=\"line\">sudo apt-get install libgtkmm-<span class=\"number\">2.4</span>-dev</span><br><span class=\"line\">sudo apt-get install libcanberra-gtk-module:i386</span><br></pre></td></tr></table></figure>\n<p>在解压后的目录中运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./install.sh</span><br></pre></td></tr></table></figure>\n<p>这个时候<code>iNodeClient.destop</code>就可以点击运行了。</p>\n<p>添加用户名和密码后将<code>NIC</code>修改为<code>enp7s0</code>即可成功连接。</p>\n<p><a href=\"https://blog.csdn.net/a845717607/article/details/52563005\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n"},{"title":"ubuntu下创建文件夹快捷方式","toc":false,"date":"2018-09-01T09:22:28.000Z","_content":"\n\n\n```powershell\nsudo ln -sT [srcDir] [dstDir/name]\n```\n\n例如创建`hexo`文件夹的桌面快捷方式：\n\n```powershell\nsudo ln -sT '/media/zmj/本地磁盘/hexo' '/home/zmj/Desktop/hexo'\n```\n\n\n\n[参考链接](https://www.cnblogs.com/tergeldev/p/6336836.html)","source":"_posts/ubuntu下创建文件夹快捷方式.md","raw":"---\ntitle: ubuntu下创建文件夹快捷方式\ntoc: false\ndate: 2018-09-01 17:22:28\ncategories:\n- methods\ntags:\n- ubuntu\n- 快捷方式\n---\n\n\n\n```powershell\nsudo ln -sT [srcDir] [dstDir/name]\n```\n\n例如创建`hexo`文件夹的桌面快捷方式：\n\n```powershell\nsudo ln -sT '/media/zmj/本地磁盘/hexo' '/home/zmj/Desktop/hexo'\n```\n\n\n\n[参考链接](https://www.cnblogs.com/tergeldev/p/6336836.html)","slug":"ubuntu下创建文件夹快捷方式","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtzj000u7bag254cz8wq","content":"<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sT [srcDir] [dstDir/name]</span><br></pre></td></tr></table></figure>\n<p>例如创建<code>hexo</code>文件夹的桌面快捷方式：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sT <span class=\"string\">'/media/zmj/本地磁盘/hexo'</span> <span class=\"string\">'/home/zmj/Desktop/hexo'</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/tergeldev/p/6336836.html\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sT [srcDir] [dstDir/name]</span><br></pre></td></tr></table></figure>\n<p>例如创建<code>hexo</code>文件夹的桌面快捷方式：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sT <span class=\"string\">'/media/zmj/本地磁盘/hexo'</span> <span class=\"string\">'/home/zmj/Desktop/hexo'</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/tergeldev/p/6336836.html\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n"},{"title":"ubuntu下无法将iNode绑定到侧边栏的解决办法","toc":false,"date":"2018-09-01T09:43:52.000Z","_content":"\n\n\n\n\n将`iNodeClient.desktop`添加到`/usr/share/applications`中（`cp`命令）后，右键侧边栏上打开的iNode的图标即可`Add to Favorites`。","source":"_posts/ubuntu下无法将iNode绑定到侧边栏的解决办法.md","raw":"---\ntitle: ubuntu下无法将iNode绑定到侧边栏的解决办法\ntoc: false\ndate: 2018-09-01 17:43:52\ncategories:\n- methods\ntags:\n- ubuntu\n- iNode\n---\n\n\n\n\n\n将`iNodeClient.desktop`添加到`/usr/share/applications`中（`cp`命令）后，右键侧边栏上打开的iNode的图标即可`Add to Favorites`。","slug":"ubuntu下无法将iNode绑定到侧边栏的解决办法","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtzl000x7bagz2tpixus","content":"<p>将<code>iNodeClient.desktop</code>添加到<code>/usr/share/applications</code>中（<code>cp</code>命令）后，右键侧边栏上打开的iNode的图标即可<code>Add to Favorites</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>将<code>iNodeClient.desktop</code>添加到<code>/usr/share/applications</code>中（<code>cp</code>命令）后，右键侧边栏上打开的iNode的图标即可<code>Add to Favorites</code>。</p>\n"},{"title":"使用TensorBoard可视化工具","date":"2018-04-01T05:04:00.000Z","_content":"\n图表可视化在理解和调试时显得非常有帮助。\n\n# 安装：\n\n```shell\npip3 install --upgrade tensorboard\n```\n\n# 名称域（Name scoping）和节点（Node）\n\n典型的TensorFlow有数以千计的节点，为了简单起见，我们可以为变量名（节点）划分范围。\n\n这个范围称为名称域，即`tf.name_scope('xxx')`，其中xxx是这个名称域的名字。\n\n在定义好名称域后，TensorBoard的显示界面里这个名称域内的变量并不会显示，而是只显示一个xxx节点，这个点是可展开的，展开后才会显示这个名称域内的节点。\n\nTensorFlow 图表有两种连接关系：数据依赖和控制依赖。数据依赖显示两个操作之间的tensor流程，用实心箭头表示，控制依赖用虚线表示。\n\n具体的符号表：\n\n| 符号                                       | 意义                                 |\n| ---------------------------------------- | ---------------------------------- |\n| ![名称域](http://www.tensorfly.cn/tfdoc/images/namespace_node.png) | *High-level*节点代表一个名称域，双击则展开一个高层节点。 |\n| ![断线节点序列](http://www.tensorfly.cn/tfdoc/images/horizontal_stack.png) | 彼此之间不连接的有限个节点序列。                   |\n| ![相连节点序列](http://www.tensorfly.cn/tfdoc/images/vertical_stack.png) | 彼此之间相连的有限个节点序列。                    |\n| ![操作节点](http://www.tensorfly.cn/tfdoc/images/op_node.png) | 一个单独的操作节点。                         |\n| ![常量节点](http://www.tensorfly.cn/tfdoc/images/constant.png) | 一个常量结点。                            |\n| ![摘要节点](http://www.tensorfly.cn/tfdoc/images/summary.png) | 一个摘要节点。                            |\n| ![数据流边](http://www.tensorfly.cn/tfdoc/images/dataflow_edge.png) | 显示各操作间的数据流边。                       |\n| ![控制依赖边](http://www.tensorfly.cn/tfdoc/images/control_edge.png) | 显示各操作间的控制依赖边。                      |\n| ![引用边](http://www.tensorfly.cn/tfdoc/images/reference_edge.png) | 引用边，表示出度操作节点可以使入度tensor发生变化。       |\n\n# Scalar\n\n使用summary scalar（标量统计）:\n\n```python\nxentropy = ... # xentropy的定义\ntf.summary.scalar('xentropy_mean', xentropy)\t# xentropy_mean为定义的xentropy的标签名\n```\n\n![MNIST TensorBoard](http://www.tensorfly.cn/tfdoc/images/mnist_tensorboard.png)\n\n# Histogram\n\n使用summary histogram统计某个Tensor的取值分布:\n\n```python\n with tf.name_scope('layer1'):\n          with tf.name_scope('biases'):\n              biases = ... # 具体声明这里不再给出\n              tf.summary.histogram('layer1' + '/biases', biases)\n\n          with tf.name_scope('weights'):\n              weights= ...\n              tf.summary.histogram('layer1' + '/weights', weights)\n        \n          with tf.name_scope('outputs'):\n              outputs= ...\n              tf.summary.histogram('layer1' + '/weights', outputs)\n```\n\n\n\n[![Tensorboard 可视化好帮手 2](https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png)](https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png)\n\n# 合并Summary\n\n```python\n\n# 将各个summary操作合并为一个操作merged_summary_op\nmerged_summary_op = tf.summary.merge_all()\n# 数据写入器，'/logs'为训练日志的存储路径\nsummary_writer = tf.summary.FileWriter('./logs', sess.graph) \n\ntotal_step = 0\nwhile training:\n  total_step += 1\n  session.run(training_op)\n  if total_step % 100 == 0:\n    ...\n    summary_str = sess.run(merged_summary_op, feed_dict{...}) # 注意这里必须加feed_dict否则会报错\n    summary_writer.add_summary(summary_str, total_step) # 使用summary_writer将数据写入磁盘\n```\n\n# 生成TensorBoard界面\n\n运行添加了各种summary的操作的代码后，打开cmd，进入代码所在文件夹，输入：\n\n```shell\ntensorboard --logdir=logs\n```\n\n按照运行后的提示：\n\n```shell\nTensorBoard 1.7.0 at http://MengjieZhang:6006 (Press CTRL+C to quit)\n```\n\n打开浏览器，输入地址 `http://MengjieZhang:6006` 即可以看到TensorBoard界面。\n\n\n\n# 具体代码：\n\n[input_data下载链接](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/mnist/input_data.py)\n\n```python\nimport input_data\nimport tensorflow as tf\n\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\n\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nmnistGraph = tf.Graph()\nwith mnistGraph.as_default():\n    with tf.name_scope('input'):\n        x = tf.placeholder(\"float\", shape=[None, 784])\n        y_ = tf.placeholder(\"float\", shape=[None, 10])\n        W = tf.Variable(tf.zeros([784,10]))\n        b = tf.Variable(tf.zeros([10]))\n\n    with tf.name_scope('hidden1'):\n        W_conv1 = weight_variable([5, 5, 1, 32])\n        b_conv1 = bias_variable([32])\n        x_image = tf.reshape(x, [-1,28,28,1])\n        h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\n        h_pool1 = max_pool_2x2(h_conv1)\n        tf.summary.histogram('W_conv1', W_conv1)\n        tf.summary.histogram('b_conv1', b_conv1)\n\n    with tf.name_scope('hidden2'):\n        W_conv2 = weight_variable([5, 5, 32, 64])\n        b_conv2 = bias_variable([64])\n        h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n        h_pool2 = max_pool_2x2(h_conv2)\n        tf.summary.histogram('W_conv2', W_conv2)\n        tf.summary.histogram('b_conv2', b_conv2)\n\n    with tf.name_scope('fc1'):\n        W_fc1 = weight_variable([7 * 7 * 64, 1024])\n        b_fc1 = bias_variable([1024])\n        h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\n        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n        keep_prob = tf.placeholder(\"float\")\n        h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n        tf.summary.histogram('W_fc1', W_fc1)\n        tf.summary.histogram('b_fc1', b_fc1)\n\n    with tf.name_scope('fc2'):\n        W_fc2 = weight_variable([1024, 10])\n        b_fc2 = bias_variable([10])\n        y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n        tf.summary.histogram('W_fc2', W_fc2)\n        tf.summary.histogram('b_fc2', b_fc2)\n\n    with tf.name_scope('train'):\n        cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))\n        train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n        correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n        tf.summary.scalar('loss', cross_entropy)\n        tf.summary.scalar('accuracy', accuracy)      \n\nwith tf.Session(graph=mnistGraph) as sess:\n    sess.run(tf.initialize_all_variables())\n    merged_summary_op = tf.summary.merge_all() \n    summary_writer = tf.summary.FileWriter('./logs', sess.graph) \n    for i in range(3000):\n      batch = mnist.train.next_batch(50)\n      if i%100 == 0:\n        train_accuracy = accuracy.eval(feed_dict={\n            x:batch[0], y_: batch[1], keep_prob: 1.0})\n        print (\"step %d, training accuracy %g\" % (i, train_accuracy))\n        summary_str = sess.run(merged_summary_op, feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n        summary_writer.add_summary(summary_str, i) \n      train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n\n    accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))\n    good = 0\n    total = 0\n    for i in range(10):\n        testSet = mnist.test.next_batch(50)\n        good += accuracy_sum.eval(feed_dict={ x: testSet[0], y_: testSet[1], keep_prob: 1.0})\n        total += testSet[0].shape[0]\n    print (\"test accuracy %g\"%(good/total))\n```\n\n运行后的TensorBoard界面：\n\n![运行后的TensorBoard界面](http://chuantu.biz/t6/270/1522570657x1822611335.png)","source":"_posts/使用TensorBoard可视化工具.md","raw":"---\ntitle: 使用TensorBoard可视化工具\ndate: 2018-04-01 13:04:00\ncategories: \n- deep learning\ntags:\n- TensorFlow\n- TensorBoard\n---\n\n图表可视化在理解和调试时显得非常有帮助。\n\n# 安装：\n\n```shell\npip3 install --upgrade tensorboard\n```\n\n# 名称域（Name scoping）和节点（Node）\n\n典型的TensorFlow有数以千计的节点，为了简单起见，我们可以为变量名（节点）划分范围。\n\n这个范围称为名称域，即`tf.name_scope('xxx')`，其中xxx是这个名称域的名字。\n\n在定义好名称域后，TensorBoard的显示界面里这个名称域内的变量并不会显示，而是只显示一个xxx节点，这个点是可展开的，展开后才会显示这个名称域内的节点。\n\nTensorFlow 图表有两种连接关系：数据依赖和控制依赖。数据依赖显示两个操作之间的tensor流程，用实心箭头表示，控制依赖用虚线表示。\n\n具体的符号表：\n\n| 符号                                       | 意义                                 |\n| ---------------------------------------- | ---------------------------------- |\n| ![名称域](http://www.tensorfly.cn/tfdoc/images/namespace_node.png) | *High-level*节点代表一个名称域，双击则展开一个高层节点。 |\n| ![断线节点序列](http://www.tensorfly.cn/tfdoc/images/horizontal_stack.png) | 彼此之间不连接的有限个节点序列。                   |\n| ![相连节点序列](http://www.tensorfly.cn/tfdoc/images/vertical_stack.png) | 彼此之间相连的有限个节点序列。                    |\n| ![操作节点](http://www.tensorfly.cn/tfdoc/images/op_node.png) | 一个单独的操作节点。                         |\n| ![常量节点](http://www.tensorfly.cn/tfdoc/images/constant.png) | 一个常量结点。                            |\n| ![摘要节点](http://www.tensorfly.cn/tfdoc/images/summary.png) | 一个摘要节点。                            |\n| ![数据流边](http://www.tensorfly.cn/tfdoc/images/dataflow_edge.png) | 显示各操作间的数据流边。                       |\n| ![控制依赖边](http://www.tensorfly.cn/tfdoc/images/control_edge.png) | 显示各操作间的控制依赖边。                      |\n| ![引用边](http://www.tensorfly.cn/tfdoc/images/reference_edge.png) | 引用边，表示出度操作节点可以使入度tensor发生变化。       |\n\n# Scalar\n\n使用summary scalar（标量统计）:\n\n```python\nxentropy = ... # xentropy的定义\ntf.summary.scalar('xentropy_mean', xentropy)\t# xentropy_mean为定义的xentropy的标签名\n```\n\n![MNIST TensorBoard](http://www.tensorfly.cn/tfdoc/images/mnist_tensorboard.png)\n\n# Histogram\n\n使用summary histogram统计某个Tensor的取值分布:\n\n```python\n with tf.name_scope('layer1'):\n          with tf.name_scope('biases'):\n              biases = ... # 具体声明这里不再给出\n              tf.summary.histogram('layer1' + '/biases', biases)\n\n          with tf.name_scope('weights'):\n              weights= ...\n              tf.summary.histogram('layer1' + '/weights', weights)\n        \n          with tf.name_scope('outputs'):\n              outputs= ...\n              tf.summary.histogram('layer1' + '/weights', outputs)\n```\n\n\n\n[![Tensorboard 可视化好帮手 2](https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png)](https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png)\n\n# 合并Summary\n\n```python\n\n# 将各个summary操作合并为一个操作merged_summary_op\nmerged_summary_op = tf.summary.merge_all()\n# 数据写入器，'/logs'为训练日志的存储路径\nsummary_writer = tf.summary.FileWriter('./logs', sess.graph) \n\ntotal_step = 0\nwhile training:\n  total_step += 1\n  session.run(training_op)\n  if total_step % 100 == 0:\n    ...\n    summary_str = sess.run(merged_summary_op, feed_dict{...}) # 注意这里必须加feed_dict否则会报错\n    summary_writer.add_summary(summary_str, total_step) # 使用summary_writer将数据写入磁盘\n```\n\n# 生成TensorBoard界面\n\n运行添加了各种summary的操作的代码后，打开cmd，进入代码所在文件夹，输入：\n\n```shell\ntensorboard --logdir=logs\n```\n\n按照运行后的提示：\n\n```shell\nTensorBoard 1.7.0 at http://MengjieZhang:6006 (Press CTRL+C to quit)\n```\n\n打开浏览器，输入地址 `http://MengjieZhang:6006` 即可以看到TensorBoard界面。\n\n\n\n# 具体代码：\n\n[input_data下载链接](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/mnist/input_data.py)\n\n```python\nimport input_data\nimport tensorflow as tf\n\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\n\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nmnistGraph = tf.Graph()\nwith mnistGraph.as_default():\n    with tf.name_scope('input'):\n        x = tf.placeholder(\"float\", shape=[None, 784])\n        y_ = tf.placeholder(\"float\", shape=[None, 10])\n        W = tf.Variable(tf.zeros([784,10]))\n        b = tf.Variable(tf.zeros([10]))\n\n    with tf.name_scope('hidden1'):\n        W_conv1 = weight_variable([5, 5, 1, 32])\n        b_conv1 = bias_variable([32])\n        x_image = tf.reshape(x, [-1,28,28,1])\n        h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\n        h_pool1 = max_pool_2x2(h_conv1)\n        tf.summary.histogram('W_conv1', W_conv1)\n        tf.summary.histogram('b_conv1', b_conv1)\n\n    with tf.name_scope('hidden2'):\n        W_conv2 = weight_variable([5, 5, 32, 64])\n        b_conv2 = bias_variable([64])\n        h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n        h_pool2 = max_pool_2x2(h_conv2)\n        tf.summary.histogram('W_conv2', W_conv2)\n        tf.summary.histogram('b_conv2', b_conv2)\n\n    with tf.name_scope('fc1'):\n        W_fc1 = weight_variable([7 * 7 * 64, 1024])\n        b_fc1 = bias_variable([1024])\n        h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\n        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n        keep_prob = tf.placeholder(\"float\")\n        h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n        tf.summary.histogram('W_fc1', W_fc1)\n        tf.summary.histogram('b_fc1', b_fc1)\n\n    with tf.name_scope('fc2'):\n        W_fc2 = weight_variable([1024, 10])\n        b_fc2 = bias_variable([10])\n        y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n        tf.summary.histogram('W_fc2', W_fc2)\n        tf.summary.histogram('b_fc2', b_fc2)\n\n    with tf.name_scope('train'):\n        cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))\n        train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n        correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n        tf.summary.scalar('loss', cross_entropy)\n        tf.summary.scalar('accuracy', accuracy)      \n\nwith tf.Session(graph=mnistGraph) as sess:\n    sess.run(tf.initialize_all_variables())\n    merged_summary_op = tf.summary.merge_all() \n    summary_writer = tf.summary.FileWriter('./logs', sess.graph) \n    for i in range(3000):\n      batch = mnist.train.next_batch(50)\n      if i%100 == 0:\n        train_accuracy = accuracy.eval(feed_dict={\n            x:batch[0], y_: batch[1], keep_prob: 1.0})\n        print (\"step %d, training accuracy %g\" % (i, train_accuracy))\n        summary_str = sess.run(merged_summary_op, feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n        summary_writer.add_summary(summary_str, i) \n      train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n\n    accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))\n    good = 0\n    total = 0\n    for i in range(10):\n        testSet = mnist.test.next_batch(50)\n        good += accuracy_sum.eval(feed_dict={ x: testSet[0], y_: testSet[1], keep_prob: 1.0})\n        total += testSet[0].shape[0]\n    print (\"test accuracy %g\"%(good/total))\n```\n\n运行后的TensorBoard界面：\n\n![运行后的TensorBoard界面](http://chuantu.biz/t6/270/1522570657x1822611335.png)","slug":"使用TensorBoard可视化工具","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtzn00107bagvb1k5ljl","content":"<p>图表可视化在理解和调试时显得非常有帮助。</p>\n<h1 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install --upgrade tensorboard</span><br></pre></td></tr></table></figure>\n<h1 id=\"名称域（Name-scoping）和节点（Node）\"><a href=\"#名称域（Name-scoping）和节点（Node）\" class=\"headerlink\" title=\"名称域（Name scoping）和节点（Node）\"></a>名称域（Name scoping）和节点（Node）</h1><p>典型的TensorFlow有数以千计的节点，为了简单起见，我们可以为变量名（节点）划分范围。</p>\n<p>这个范围称为名称域，即<code>tf.name_scope(&#39;xxx&#39;)</code>，其中xxx是这个名称域的名字。</p>\n<p>在定义好名称域后，TensorBoard的显示界面里这个名称域内的变量并不会显示，而是只显示一个xxx节点，这个点是可展开的，展开后才会显示这个名称域内的节点。</p>\n<p>TensorFlow 图表有两种连接关系：数据依赖和控制依赖。数据依赖显示两个操作之间的tensor流程，用实心箭头表示，控制依赖用虚线表示。</p>\n<p>具体的符号表：</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/namespace_node.png\" alt=\"名称域\"></td>\n<td><em>High-level</em>节点代表一个名称域，双击则展开一个高层节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/horizontal_stack.png\" alt=\"断线节点序列\"></td>\n<td>彼此之间不连接的有限个节点序列。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/vertical_stack.png\" alt=\"相连节点序列\"></td>\n<td>彼此之间相连的有限个节点序列。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/op_node.png\" alt=\"操作节点\"></td>\n<td>一个单独的操作节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/constant.png\" alt=\"常量节点\"></td>\n<td>一个常量结点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/summary.png\" alt=\"摘要节点\"></td>\n<td>一个摘要节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/dataflow_edge.png\" alt=\"数据流边\"></td>\n<td>显示各操作间的数据流边。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/control_edge.png\" alt=\"控制依赖边\"></td>\n<td>显示各操作间的控制依赖边。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/reference_edge.png\" alt=\"引用边\"></td>\n<td>引用边，表示出度操作节点可以使入度tensor发生变化。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Scalar\"><a href=\"#Scalar\" class=\"headerlink\" title=\"Scalar\"></a>Scalar</h1><p>使用summary scalar（标量统计）:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xentropy = ... <span class=\"comment\"># xentropy的定义</span></span><br><span class=\"line\">tf.summary.scalar(<span class=\"string\">'xentropy_mean'</span>, xentropy)\t<span class=\"comment\"># xentropy_mean为定义的xentropy的标签名</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.tensorfly.cn/tfdoc/images/mnist_tensorboard.png\" alt=\"MNIST TensorBoard\"></p>\n<h1 id=\"Histogram\"><a href=\"#Histogram\" class=\"headerlink\" title=\"Histogram\"></a>Histogram</h1><p>使用summary histogram统计某个Tensor的取值分布:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'layer1'</span>):</span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'biases'</span>):</span><br><span class=\"line\">             biases = ... <span class=\"comment\"># 具体声明这里不再给出</span></span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/biases'</span>, biases)</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'weights'</span>):</span><br><span class=\"line\">             weights= ...</span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/weights'</span>, weights)</span><br><span class=\"line\">       </span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'outputs'</span>):</span><br><span class=\"line\">             outputs= ...</span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/weights'</span>, outputs)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png\" alt=\"Tensorboard 可视化好帮手 2\"></a></p>\n<h1 id=\"合并Summary\"><a href=\"#合并Summary\" class=\"headerlink\" title=\"合并Summary\"></a>合并Summary</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将各个summary操作合并为一个操作merged_summary_op</span></span><br><span class=\"line\">merged_summary_op = tf.summary.merge_all()</span><br><span class=\"line\"><span class=\"comment\"># 数据写入器，'/logs'为训练日志的存储路径</span></span><br><span class=\"line\">summary_writer = tf.summary.FileWriter(<span class=\"string\">'./logs'</span>, sess.graph) </span><br><span class=\"line\"></span><br><span class=\"line\">total_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> training:</span><br><span class=\"line\">  total_step += <span class=\"number\">1</span></span><br><span class=\"line\">  session.run(training_op)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> total_step % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    summary_str = sess.run(merged_summary_op, feed_dict&#123;...&#125;) <span class=\"comment\"># 注意这里必须加feed_dict否则会报错</span></span><br><span class=\"line\">    summary_writer.add_summary(summary_str, total_step) <span class=\"comment\"># 使用summary_writer将数据写入磁盘</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"生成TensorBoard界面\"><a href=\"#生成TensorBoard界面\" class=\"headerlink\" title=\"生成TensorBoard界面\"></a>生成TensorBoard界面</h1><p>运行添加了各种summary的操作的代码后，打开cmd，进入代码所在文件夹，输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensorboard --logdir=logs</span><br></pre></td></tr></table></figure>\n<p>按照运行后的提示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TensorBoard 1.7.0 at http://MengjieZhang:6006 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>\n<p>打开浏览器，输入地址 <code>http://MengjieZhang:6006</code> 即可以看到TensorBoard界面。</p>\n<h1 id=\"具体代码：\"><a href=\"#具体代码：\" class=\"headerlink\" title=\"具体代码：\"></a>具体代码：</h1><p><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/mnist/input_data.py\" target=\"_blank\" rel=\"noopener\">input_data下载链接</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> input_data</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">weight_variable</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">  initial = tf.truncated_normal(shape, stddev=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.Variable(initial)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bias_variable</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">  initial = tf.constant(<span class=\"number\">0.1</span>, shape=shape)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.Variable(initial)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">conv2d</span><span class=\"params\">(x, W)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.nn.conv2d(x, W, strides=[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], padding=<span class=\"string\">'SAME'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_pool_2x2</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.nn.max_pool(x, ksize=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">                        strides=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], padding=<span class=\"string\">'SAME'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mnist = input_data.read_data_sets(<span class=\"string\">'data'</span>, one_hot=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mnistGraph = tf.Graph()</span><br><span class=\"line\"><span class=\"keyword\">with</span> mnistGraph.as_default():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'input'</span>):</span><br><span class=\"line\">        x = tf.placeholder(<span class=\"string\">\"float\"</span>, shape=[<span class=\"keyword\">None</span>, <span class=\"number\">784</span>])</span><br><span class=\"line\">        y_ = tf.placeholder(<span class=\"string\">\"float\"</span>, shape=[<span class=\"keyword\">None</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">        W = tf.Variable(tf.zeros([<span class=\"number\">784</span>,<span class=\"number\">10</span>]))</span><br><span class=\"line\">        b = tf.Variable(tf.zeros([<span class=\"number\">10</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'hidden1'</span>):</span><br><span class=\"line\">        W_conv1 = weight_variable([<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">32</span>])</span><br><span class=\"line\">        b_conv1 = bias_variable([<span class=\"number\">32</span>])</span><br><span class=\"line\">        x_image = tf.reshape(x, [<span class=\"number\">-1</span>,<span class=\"number\">28</span>,<span class=\"number\">28</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\">        h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</span><br><span class=\"line\">        h_pool1 = max_pool_2x2(h_conv1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_conv1'</span>, W_conv1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_conv1'</span>, b_conv1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'hidden2'</span>):</span><br><span class=\"line\">        W_conv2 = weight_variable([<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">64</span>])</span><br><span class=\"line\">        b_conv2 = bias_variable([<span class=\"number\">64</span>])</span><br><span class=\"line\">        h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</span><br><span class=\"line\">        h_pool2 = max_pool_2x2(h_conv2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_conv2'</span>, W_conv2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_conv2'</span>, b_conv2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc1'</span>):</span><br><span class=\"line\">        W_fc1 = weight_variable([<span class=\"number\">7</span> * <span class=\"number\">7</span> * <span class=\"number\">64</span>, <span class=\"number\">1024</span>])</span><br><span class=\"line\">        b_fc1 = bias_variable([<span class=\"number\">1024</span>])</span><br><span class=\"line\">        h_pool2_flat = tf.reshape(h_pool2, [<span class=\"number\">-1</span>, <span class=\"number\">7</span>*<span class=\"number\">7</span>*<span class=\"number\">64</span>])</span><br><span class=\"line\">        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class=\"line\">        keep_prob = tf.placeholder(<span class=\"string\">\"float\"</span>)</span><br><span class=\"line\">        h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_fc1'</span>, W_fc1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_fc1'</span>, b_fc1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc2'</span>):</span><br><span class=\"line\">        W_fc2 = weight_variable([<span class=\"number\">1024</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">        b_fc2 = bias_variable([<span class=\"number\">10</span>])</span><br><span class=\"line\">        y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_fc2'</span>, W_fc2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_fc2'</span>, b_fc2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'train'</span>):</span><br><span class=\"line\">        cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))</span><br><span class=\"line\">        train_step = tf.train.AdamOptimizer(<span class=\"number\">1e-4</span>).minimize(cross_entropy)</span><br><span class=\"line\">        correct_prediction = tf.equal(tf.argmax(y_conv,<span class=\"number\">1</span>), tf.argmax(y_,<span class=\"number\">1</span>))</span><br><span class=\"line\">        accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class=\"string\">\"float\"</span>))</span><br><span class=\"line\">        tf.summary.scalar(<span class=\"string\">'loss'</span>, cross_entropy)</span><br><span class=\"line\">        tf.summary.scalar(<span class=\"string\">'accuracy'</span>, accuracy)      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session(graph=mnistGraph) <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(tf.initialize_all_variables())</span><br><span class=\"line\">    merged_summary_op = tf.summary.merge_all() </span><br><span class=\"line\">    summary_writer = tf.summary.FileWriter(<span class=\"string\">'./logs'</span>, sess.graph) </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3000</span>):</span><br><span class=\"line\">      batch = mnist.train.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> i%<span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        train_accuracy = accuracy.eval(feed_dict=&#123;</span><br><span class=\"line\">            x:batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">\"step %d, training accuracy %g\"</span> % (i, train_accuracy))</span><br><span class=\"line\">        summary_str = sess.run(merged_summary_op, feed_dict=&#123;x: batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">0.5</span>&#125;)</span><br><span class=\"line\">        summary_writer.add_summary(summary_str, i) </span><br><span class=\"line\">      train_step.run(feed_dict=&#123;x: batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">0.5</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))</span><br><span class=\"line\">    good = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        testSet = mnist.test.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">        good += accuracy_sum.eval(feed_dict=&#123; x: testSet[<span class=\"number\">0</span>], y_: testSet[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">        total += testSet[<span class=\"number\">0</span>].shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"test accuracy %g\"</span>%(good/total))</span><br></pre></td></tr></table></figure>\n<p>运行后的TensorBoard界面：</p>\n<p><img src=\"http://chuantu.biz/t6/270/1522570657x1822611335.png\" alt=\"运行后的TensorBoard界面\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>图表可视化在理解和调试时显得非常有帮助。</p>\n<h1 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install --upgrade tensorboard</span><br></pre></td></tr></table></figure>\n<h1 id=\"名称域（Name-scoping）和节点（Node）\"><a href=\"#名称域（Name-scoping）和节点（Node）\" class=\"headerlink\" title=\"名称域（Name scoping）和节点（Node）\"></a>名称域（Name scoping）和节点（Node）</h1><p>典型的TensorFlow有数以千计的节点，为了简单起见，我们可以为变量名（节点）划分范围。</p>\n<p>这个范围称为名称域，即<code>tf.name_scope(&#39;xxx&#39;)</code>，其中xxx是这个名称域的名字。</p>\n<p>在定义好名称域后，TensorBoard的显示界面里这个名称域内的变量并不会显示，而是只显示一个xxx节点，这个点是可展开的，展开后才会显示这个名称域内的节点。</p>\n<p>TensorFlow 图表有两种连接关系：数据依赖和控制依赖。数据依赖显示两个操作之间的tensor流程，用实心箭头表示，控制依赖用虚线表示。</p>\n<p>具体的符号表：</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/namespace_node.png\" alt=\"名称域\"></td>\n<td><em>High-level</em>节点代表一个名称域，双击则展开一个高层节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/horizontal_stack.png\" alt=\"断线节点序列\"></td>\n<td>彼此之间不连接的有限个节点序列。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/vertical_stack.png\" alt=\"相连节点序列\"></td>\n<td>彼此之间相连的有限个节点序列。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/op_node.png\" alt=\"操作节点\"></td>\n<td>一个单独的操作节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/constant.png\" alt=\"常量节点\"></td>\n<td>一个常量结点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/summary.png\" alt=\"摘要节点\"></td>\n<td>一个摘要节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/dataflow_edge.png\" alt=\"数据流边\"></td>\n<td>显示各操作间的数据流边。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/control_edge.png\" alt=\"控制依赖边\"></td>\n<td>显示各操作间的控制依赖边。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/reference_edge.png\" alt=\"引用边\"></td>\n<td>引用边，表示出度操作节点可以使入度tensor发生变化。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Scalar\"><a href=\"#Scalar\" class=\"headerlink\" title=\"Scalar\"></a>Scalar</h1><p>使用summary scalar（标量统计）:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xentropy = ... <span class=\"comment\"># xentropy的定义</span></span><br><span class=\"line\">tf.summary.scalar(<span class=\"string\">'xentropy_mean'</span>, xentropy)\t<span class=\"comment\"># xentropy_mean为定义的xentropy的标签名</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.tensorfly.cn/tfdoc/images/mnist_tensorboard.png\" alt=\"MNIST TensorBoard\"></p>\n<h1 id=\"Histogram\"><a href=\"#Histogram\" class=\"headerlink\" title=\"Histogram\"></a>Histogram</h1><p>使用summary histogram统计某个Tensor的取值分布:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'layer1'</span>):</span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'biases'</span>):</span><br><span class=\"line\">             biases = ... <span class=\"comment\"># 具体声明这里不再给出</span></span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/biases'</span>, biases)</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'weights'</span>):</span><br><span class=\"line\">             weights= ...</span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/weights'</span>, weights)</span><br><span class=\"line\">       </span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'outputs'</span>):</span><br><span class=\"line\">             outputs= ...</span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/weights'</span>, outputs)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png\" alt=\"Tensorboard 可视化好帮手 2\"></a></p>\n<h1 id=\"合并Summary\"><a href=\"#合并Summary\" class=\"headerlink\" title=\"合并Summary\"></a>合并Summary</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将各个summary操作合并为一个操作merged_summary_op</span></span><br><span class=\"line\">merged_summary_op = tf.summary.merge_all()</span><br><span class=\"line\"><span class=\"comment\"># 数据写入器，'/logs'为训练日志的存储路径</span></span><br><span class=\"line\">summary_writer = tf.summary.FileWriter(<span class=\"string\">'./logs'</span>, sess.graph) </span><br><span class=\"line\"></span><br><span class=\"line\">total_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> training:</span><br><span class=\"line\">  total_step += <span class=\"number\">1</span></span><br><span class=\"line\">  session.run(training_op)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> total_step % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    summary_str = sess.run(merged_summary_op, feed_dict&#123;...&#125;) <span class=\"comment\"># 注意这里必须加feed_dict否则会报错</span></span><br><span class=\"line\">    summary_writer.add_summary(summary_str, total_step) <span class=\"comment\"># 使用summary_writer将数据写入磁盘</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"生成TensorBoard界面\"><a href=\"#生成TensorBoard界面\" class=\"headerlink\" title=\"生成TensorBoard界面\"></a>生成TensorBoard界面</h1><p>运行添加了各种summary的操作的代码后，打开cmd，进入代码所在文件夹，输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensorboard --logdir=logs</span><br></pre></td></tr></table></figure>\n<p>按照运行后的提示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TensorBoard 1.7.0 at http://MengjieZhang:6006 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>\n<p>打开浏览器，输入地址 <code>http://MengjieZhang:6006</code> 即可以看到TensorBoard界面。</p>\n<h1 id=\"具体代码：\"><a href=\"#具体代码：\" class=\"headerlink\" title=\"具体代码：\"></a>具体代码：</h1><p><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/mnist/input_data.py\" target=\"_blank\" rel=\"noopener\">input_data下载链接</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> input_data</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">weight_variable</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">  initial = tf.truncated_normal(shape, stddev=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.Variable(initial)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bias_variable</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">  initial = tf.constant(<span class=\"number\">0.1</span>, shape=shape)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.Variable(initial)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">conv2d</span><span class=\"params\">(x, W)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.nn.conv2d(x, W, strides=[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], padding=<span class=\"string\">'SAME'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_pool_2x2</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.nn.max_pool(x, ksize=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">                        strides=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], padding=<span class=\"string\">'SAME'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mnist = input_data.read_data_sets(<span class=\"string\">'data'</span>, one_hot=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mnistGraph = tf.Graph()</span><br><span class=\"line\"><span class=\"keyword\">with</span> mnistGraph.as_default():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'input'</span>):</span><br><span class=\"line\">        x = tf.placeholder(<span class=\"string\">\"float\"</span>, shape=[<span class=\"keyword\">None</span>, <span class=\"number\">784</span>])</span><br><span class=\"line\">        y_ = tf.placeholder(<span class=\"string\">\"float\"</span>, shape=[<span class=\"keyword\">None</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">        W = tf.Variable(tf.zeros([<span class=\"number\">784</span>,<span class=\"number\">10</span>]))</span><br><span class=\"line\">        b = tf.Variable(tf.zeros([<span class=\"number\">10</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'hidden1'</span>):</span><br><span class=\"line\">        W_conv1 = weight_variable([<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">32</span>])</span><br><span class=\"line\">        b_conv1 = bias_variable([<span class=\"number\">32</span>])</span><br><span class=\"line\">        x_image = tf.reshape(x, [<span class=\"number\">-1</span>,<span class=\"number\">28</span>,<span class=\"number\">28</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\">        h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</span><br><span class=\"line\">        h_pool1 = max_pool_2x2(h_conv1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_conv1'</span>, W_conv1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_conv1'</span>, b_conv1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'hidden2'</span>):</span><br><span class=\"line\">        W_conv2 = weight_variable([<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">64</span>])</span><br><span class=\"line\">        b_conv2 = bias_variable([<span class=\"number\">64</span>])</span><br><span class=\"line\">        h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</span><br><span class=\"line\">        h_pool2 = max_pool_2x2(h_conv2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_conv2'</span>, W_conv2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_conv2'</span>, b_conv2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc1'</span>):</span><br><span class=\"line\">        W_fc1 = weight_variable([<span class=\"number\">7</span> * <span class=\"number\">7</span> * <span class=\"number\">64</span>, <span class=\"number\">1024</span>])</span><br><span class=\"line\">        b_fc1 = bias_variable([<span class=\"number\">1024</span>])</span><br><span class=\"line\">        h_pool2_flat = tf.reshape(h_pool2, [<span class=\"number\">-1</span>, <span class=\"number\">7</span>*<span class=\"number\">7</span>*<span class=\"number\">64</span>])</span><br><span class=\"line\">        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class=\"line\">        keep_prob = tf.placeholder(<span class=\"string\">\"float\"</span>)</span><br><span class=\"line\">        h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_fc1'</span>, W_fc1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_fc1'</span>, b_fc1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc2'</span>):</span><br><span class=\"line\">        W_fc2 = weight_variable([<span class=\"number\">1024</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">        b_fc2 = bias_variable([<span class=\"number\">10</span>])</span><br><span class=\"line\">        y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_fc2'</span>, W_fc2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_fc2'</span>, b_fc2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'train'</span>):</span><br><span class=\"line\">        cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))</span><br><span class=\"line\">        train_step = tf.train.AdamOptimizer(<span class=\"number\">1e-4</span>).minimize(cross_entropy)</span><br><span class=\"line\">        correct_prediction = tf.equal(tf.argmax(y_conv,<span class=\"number\">1</span>), tf.argmax(y_,<span class=\"number\">1</span>))</span><br><span class=\"line\">        accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class=\"string\">\"float\"</span>))</span><br><span class=\"line\">        tf.summary.scalar(<span class=\"string\">'loss'</span>, cross_entropy)</span><br><span class=\"line\">        tf.summary.scalar(<span class=\"string\">'accuracy'</span>, accuracy)      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session(graph=mnistGraph) <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(tf.initialize_all_variables())</span><br><span class=\"line\">    merged_summary_op = tf.summary.merge_all() </span><br><span class=\"line\">    summary_writer = tf.summary.FileWriter(<span class=\"string\">'./logs'</span>, sess.graph) </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3000</span>):</span><br><span class=\"line\">      batch = mnist.train.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> i%<span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        train_accuracy = accuracy.eval(feed_dict=&#123;</span><br><span class=\"line\">            x:batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">\"step %d, training accuracy %g\"</span> % (i, train_accuracy))</span><br><span class=\"line\">        summary_str = sess.run(merged_summary_op, feed_dict=&#123;x: batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">0.5</span>&#125;)</span><br><span class=\"line\">        summary_writer.add_summary(summary_str, i) </span><br><span class=\"line\">      train_step.run(feed_dict=&#123;x: batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">0.5</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))</span><br><span class=\"line\">    good = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        testSet = mnist.test.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">        good += accuracy_sum.eval(feed_dict=&#123; x: testSet[<span class=\"number\">0</span>], y_: testSet[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">        total += testSet[<span class=\"number\">0</span>].shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"test accuracy %g\"</span>%(good/total))</span><br></pre></td></tr></table></figure>\n<p>运行后的TensorBoard界面：</p>\n<p><img src=\"http://chuantu.biz/t6/270/1522570657x1822611335.png\" alt=\"运行后的TensorBoard界面\"></p>\n"},{"title":"关于hexo markdown添加的图片在github page中无法显示的问题","date":"2018-03-30T16:21:18.000Z","_content":"\n**云端**\n\n试了很多网站的图片，发现主要是CSDN和博客园的图片无法显示。\n\n推荐用Bing或者Google搜索外网图片添加。\n\n**本地**\n\n在source目录下新建images目录，将要添加的图片存放在这个目录下，md引用时使用/images/...","source":"_posts/关于hexo-markdown添加的图片在github-page中无法显示的问题.md","raw":"---\ntitle: 关于hexo markdown添加的图片在github page中无法显示的问题\ndate: 2018-03-31 00:21:18\ncategories: \n- methods\ntags:\n- hexo\n- markdown\n---\n\n**云端**\n\n试了很多网站的图片，发现主要是CSDN和博客园的图片无法显示。\n\n推荐用Bing或者Google搜索外网图片添加。\n\n**本地**\n\n在source目录下新建images目录，将要添加的图片存放在这个目录下，md引用时使用/images/...","slug":"关于hexo-markdown添加的图片在github-page中无法显示的问题","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtzo00147bagenc420mu","content":"<p><strong>云端</strong></p>\n<p>试了很多网站的图片，发现主要是CSDN和博客园的图片无法显示。</p>\n<p>推荐用Bing或者Google搜索外网图片添加。</p>\n<p><strong>本地</strong></p>\n<p>在source目录下新建images目录，将要添加的图片存放在这个目录下，md引用时使用/images/…</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>云端</strong></p>\n<p>试了很多网站的图片，发现主要是CSDN和博客园的图片无法显示。</p>\n<p>推荐用Bing或者Google搜索外网图片添加。</p>\n<p><strong>本地</strong></p>\n<p>在source目录下新建images目录，将要添加的图片存放在这个目录下，md引用时使用/images/…</p>\n"},{"title":"关于hexo博客自定义域名后gitment评论系统登陆出现redirect error返回主页的解决办法","toc":false,"date":"2018-04-16T14:57:50.000Z","_content":"\n>  背景：\n>\n> 原地址：`https://mikqueenge.github.io`\n>\n> 新域名：`http://blog.zmj97.top`(这里一定要注意！从阿里云买的域名使用的协议是http！)\n\n今天下午兴致勃勃地买了个域名绑定到这个博客上后，发现昨天好不容易跳了各种坑才实现的**评论功能无法登陆**了！\n\n每一次点击评论里的登陆都会回到index页面，地址栏显示地地址为`https://blog.zmj97.top/?error=redirect_uri_mismatch&error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&error_uri=https%3A%2F%2Fdeveloper.github.com%2Fv3%2Foauth%2F%23redirect-uri-mismatch`\n\n一看这个提示，`redirect error` 让人不禁想到OAuth应用注册时填写的`Authorization callback URL`回调URL，\n\n各种百度谷歌了一下，如果自定义了域名的话<u>回调URL要填写自定义域名</u>，而且**一个字符都不能出错**！否则就会出现上述无法登陆的情况...\n\n试了一晚上，回调URL可能出现的字符错误有以下几个：\n\n- 多加空格\n- 协议错误，区分http和https\n- 多加/\n\n最后终于成功时我的OAuth应用信息的究极形态如下：\n\n![](/images/Capture5.PNG)\n\n心好累...","source":"_posts/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法.md","raw":"---\ntitle: 关于hexo博客自定义域名后gitment评论系统登陆出现redirect error返回主页的解决办法\ntoc: false\ndate: 2018-04-16 22:57:50\ncategories:\n- methods\ntags:\n- hexo\n- gitment\n- OAuth\n- 阿里云\n---\n\n>  背景：\n>\n> 原地址：`https://mikqueenge.github.io`\n>\n> 新域名：`http://blog.zmj97.top`(这里一定要注意！从阿里云买的域名使用的协议是http！)\n\n今天下午兴致勃勃地买了个域名绑定到这个博客上后，发现昨天好不容易跳了各种坑才实现的**评论功能无法登陆**了！\n\n每一次点击评论里的登陆都会回到index页面，地址栏显示地地址为`https://blog.zmj97.top/?error=redirect_uri_mismatch&error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&error_uri=https%3A%2F%2Fdeveloper.github.com%2Fv3%2Foauth%2F%23redirect-uri-mismatch`\n\n一看这个提示，`redirect error` 让人不禁想到OAuth应用注册时填写的`Authorization callback URL`回调URL，\n\n各种百度谷歌了一下，如果自定义了域名的话<u>回调URL要填写自定义域名</u>，而且**一个字符都不能出错**！否则就会出现上述无法登陆的情况...\n\n试了一晚上，回调URL可能出现的字符错误有以下几个：\n\n- 多加空格\n- 协议错误，区分http和https\n- 多加/\n\n最后终于成功时我的OAuth应用信息的究极形态如下：\n\n![](/images/Capture5.PNG)\n\n心好累...","slug":"关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtzr00167bagmzpbb10m","content":"<blockquote>\n<p> 背景：</p>\n<p>原地址：<code>https://mikqueenge.github.io</code></p>\n<p>新域名：<code>http://blog.zmj97.top</code>(这里一定要注意！从阿里云买的域名使用的协议是http！)</p>\n</blockquote>\n<p>今天下午兴致勃勃地买了个域名绑定到这个博客上后，发现昨天好不容易跳了各种坑才实现的<strong>评论功能无法登陆</strong>了！</p>\n<p>每一次点击评论里的登陆都会回到index页面，地址栏显示地地址为<code>https://blog.zmj97.top/?error=redirect_uri_mismatch&amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;error_uri=https%3A%2F%2Fdeveloper.github.com%2Fv3%2Foauth%2F%23redirect-uri-mismatch</code></p>\n<p>一看这个提示，<code>redirect error</code> 让人不禁想到OAuth应用注册时填写的<code>Authorization callback URL</code>回调URL，</p>\n<p>各种百度谷歌了一下，如果自定义了域名的话<u>回调URL要填写自定义域名</u>，而且<strong>一个字符都不能出错</strong>！否则就会出现上述无法登陆的情况…</p>\n<p>试了一晚上，回调URL可能出现的字符错误有以下几个：</p>\n<ul>\n<li>多加空格</li>\n<li>协议错误，区分http和https</li>\n<li>多加/</li>\n</ul>\n<p>最后终于成功时我的OAuth应用信息的究极形态如下：</p>\n<p><img src=\"/images/Capture5.PNG\" alt=\"\"></p>\n<p>心好累…</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p> 背景：</p>\n<p>原地址：<code>https://mikqueenge.github.io</code></p>\n<p>新域名：<code>http://blog.zmj97.top</code>(这里一定要注意！从阿里云买的域名使用的协议是http！)</p>\n</blockquote>\n<p>今天下午兴致勃勃地买了个域名绑定到这个博客上后，发现昨天好不容易跳了各种坑才实现的<strong>评论功能无法登陆</strong>了！</p>\n<p>每一次点击评论里的登陆都会回到index页面，地址栏显示地地址为<code>https://blog.zmj97.top/?error=redirect_uri_mismatch&amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;error_uri=https%3A%2F%2Fdeveloper.github.com%2Fv3%2Foauth%2F%23redirect-uri-mismatch</code></p>\n<p>一看这个提示，<code>redirect error</code> 让人不禁想到OAuth应用注册时填写的<code>Authorization callback URL</code>回调URL，</p>\n<p>各种百度谷歌了一下，如果自定义了域名的话<u>回调URL要填写自定义域名</u>，而且<strong>一个字符都不能出错</strong>！否则就会出现上述无法登陆的情况…</p>\n<p>试了一晚上，回调URL可能出现的字符错误有以下几个：</p>\n<ul>\n<li>多加空格</li>\n<li>协议错误，区分http和https</li>\n<li>多加/</li>\n</ul>\n<p>最后终于成功时我的OAuth应用信息的究极形态如下：</p>\n<p><img src=\"/images/Capture5.PNG\" alt=\"\"></p>\n<p>心好累…</p>\n"},{"title":"在ubuntu中安装Markdown神器Typora","toc":false,"date":"2018-09-01T09:48:15.000Z","_content":"\n\n\n在终端中执行以下命令即可：\n\n```powershell\n# optional, but recommended\n\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\n\n# add Typora's repository\n\nsudo add-apt-repository 'deb http://typora.io linux/'\n\nsudo apt-get update\n\n# install typora\n\nsudo apt-get install typora\n```\n\n\n\n[参考链接](https://blog.csdn.net/caoyangyang123/article/details/79484697)","source":"_posts/在ubuntu中安装Markdown神器Typora.md","raw":"---\ntitle: 在ubuntu中安装Markdown神器Typora\ntoc: false\ndate: 2018-09-01 17:48:15\ncategories:\n- methods\ntags:\n- ubuntu\n- Typora\n- Markdown\n---\n\n\n\n在终端中执行以下命令即可：\n\n```powershell\n# optional, but recommended\n\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\n\n# add Typora's repository\n\nsudo add-apt-repository 'deb http://typora.io linux/'\n\nsudo apt-get update\n\n# install typora\n\nsudo apt-get install typora\n```\n\n\n\n[参考链接](https://blog.csdn.net/caoyangyang123/article/details/79484697)","slug":"在ubuntu中安装Markdown神器Typora","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtzt00197bags6j77oxe","content":"<p>在终端中执行以下命令即可：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># optional, but recommended</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add Typora's repository</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo add-apt-repository <span class=\"string\">'deb http://typora.io linux/'</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install typora</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install typora</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/caoyangyang123/article/details/79484697\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在终端中执行以下命令即可：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># optional, but recommended</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add Typora's repository</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo add-apt-repository <span class=\"string\">'deb http://typora.io linux/'</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install typora</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install typora</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/caoyangyang123/article/details/79484697\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n"},{"title":"堆和栈的区别","date":"2018-03-30T03:48:51.000Z","_content":"\n参考：\n\n[链接1](https://blog.csdn.net/u013321328/article/details/44172689) [链接2](https://blog.csdn.net/shanshanhi/article/details/50904706)\n\n# 一个由C/C++编译的程序占用的内存分为以下几个部分：\n## 1、栈区（stack）\n由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n## 2、堆区（heap）\n一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。分配方式倒是类似于数据结构中的链表。\n## 3、全局区/静态区（static）\n全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。\n## 4、文字常量区\n存放常量字符串。程序结束后由系统释放。\n## 5、程序代码区\n存放函数体的二进制代码。\n# 堆和栈的区别：\n## 1、申请方式\n### 栈区：\n由编译器自动分配释放，存放函数的参数值，局部变量值等。\n### 堆区：\n一般由程序员分配释放（使用new/delete或malloc/free），若程序员不释放，程序结束时可能由OS回收。\n## 2、操作方式\n### 栈区：\n操作方式类似于数据结构中的栈。\n### 堆区：\n不同于数据结构中的堆，分配方式类似于链表。\n## 3、申请后系统的响应 \n### 栈区：\n只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出（overflow）。\n### 堆区：\n操作系统有一个记录空闲内存地址的链表，\n当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，\n对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，从而代码中的delete语句才能正确的释放本内存空间，\n由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。 \n## 4、申请大小的限制\n### 栈区：\n在Windows下,栈是是一块确定的连续内存区域。栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。\n### 堆区：\n堆是向高地址扩展的数据结构，由于系统是用链表来存储的空闲内存地址的，它是不连续的，链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。\n## 5、申请效率的比较\n### 栈区：\n系统自动分配，速度较快。但程序员是无法控制的。\n### 堆区：\n由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便. \n注意：在WINDOWS下，最好的方式是用VirtualAlloc分配内存，它不在堆也不在栈，而是直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。\n## 6、堆和栈中的存储内容\n### 栈区：\n在函数调用时，第一个进栈的是函数调用语句的下一条可执行语句的地址，接着是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。\n### 堆区：\n一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。","source":"_posts/堆和栈的区别.md","raw":"---\ntitle: 堆和栈的区别\ndate: 2018-03-30 11:48:51\ntags: \n- 内存\ncategories:\n- C/C++\n---\n\n参考：\n\n[链接1](https://blog.csdn.net/u013321328/article/details/44172689) [链接2](https://blog.csdn.net/shanshanhi/article/details/50904706)\n\n# 一个由C/C++编译的程序占用的内存分为以下几个部分：\n## 1、栈区（stack）\n由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n## 2、堆区（heap）\n一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。分配方式倒是类似于数据结构中的链表。\n## 3、全局区/静态区（static）\n全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。\n## 4、文字常量区\n存放常量字符串。程序结束后由系统释放。\n## 5、程序代码区\n存放函数体的二进制代码。\n# 堆和栈的区别：\n## 1、申请方式\n### 栈区：\n由编译器自动分配释放，存放函数的参数值，局部变量值等。\n### 堆区：\n一般由程序员分配释放（使用new/delete或malloc/free），若程序员不释放，程序结束时可能由OS回收。\n## 2、操作方式\n### 栈区：\n操作方式类似于数据结构中的栈。\n### 堆区：\n不同于数据结构中的堆，分配方式类似于链表。\n## 3、申请后系统的响应 \n### 栈区：\n只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出（overflow）。\n### 堆区：\n操作系统有一个记录空闲内存地址的链表，\n当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，\n对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，从而代码中的delete语句才能正确的释放本内存空间，\n由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。 \n## 4、申请大小的限制\n### 栈区：\n在Windows下,栈是是一块确定的连续内存区域。栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。\n### 堆区：\n堆是向高地址扩展的数据结构，由于系统是用链表来存储的空闲内存地址的，它是不连续的，链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。\n## 5、申请效率的比较\n### 栈区：\n系统自动分配，速度较快。但程序员是无法控制的。\n### 堆区：\n由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便. \n注意：在WINDOWS下，最好的方式是用VirtualAlloc分配内存，它不在堆也不在栈，而是直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。\n## 6、堆和栈中的存储内容\n### 栈区：\n在函数调用时，第一个进栈的是函数调用语句的下一条可执行语句的地址，接着是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。\n### 堆区：\n一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。","slug":"堆和栈的区别","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtzw001d7bagggra04kd","content":"<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/u013321328/article/details/44172689\" target=\"_blank\" rel=\"noopener\">链接1</a> <a href=\"https://blog.csdn.net/shanshanhi/article/details/50904706\" target=\"_blank\" rel=\"noopener\">链接2</a></p>\n<h1 id=\"一个由C-C-编译的程序占用的内存分为以下几个部分：\"><a href=\"#一个由C-C-编译的程序占用的内存分为以下几个部分：\" class=\"headerlink\" title=\"一个由C/C++编译的程序占用的内存分为以下几个部分：\"></a>一个由C/C++编译的程序占用的内存分为以下几个部分：</h1><h2 id=\"1、栈区（stack）\"><a href=\"#1、栈区（stack）\" class=\"headerlink\" title=\"1、栈区（stack）\"></a>1、栈区（stack）</h2><p>由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</p>\n<h2 id=\"2、堆区（heap）\"><a href=\"#2、堆区（heap）\" class=\"headerlink\" title=\"2、堆区（heap）\"></a>2、堆区（heap）</h2><p>一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。分配方式倒是类似于数据结构中的链表。</p>\n<h2 id=\"3、全局区-静态区（static）\"><a href=\"#3、全局区-静态区（static）\" class=\"headerlink\" title=\"3、全局区/静态区（static）\"></a>3、全局区/静态区（static）</h2><p>全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</p>\n<h2 id=\"4、文字常量区\"><a href=\"#4、文字常量区\" class=\"headerlink\" title=\"4、文字常量区\"></a>4、文字常量区</h2><p>存放常量字符串。程序结束后由系统释放。</p>\n<h2 id=\"5、程序代码区\"><a href=\"#5、程序代码区\" class=\"headerlink\" title=\"5、程序代码区\"></a>5、程序代码区</h2><p>存放函数体的二进制代码。</p>\n<h1 id=\"堆和栈的区别：\"><a href=\"#堆和栈的区别：\" class=\"headerlink\" title=\"堆和栈的区别：\"></a>堆和栈的区别：</h1><h2 id=\"1、申请方式\"><a href=\"#1、申请方式\" class=\"headerlink\" title=\"1、申请方式\"></a>1、申请方式</h2><h3 id=\"栈区：\"><a href=\"#栈区：\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>由编译器自动分配释放，存放函数的参数值，局部变量值等。</p>\n<h3 id=\"堆区：\"><a href=\"#堆区：\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>一般由程序员分配释放（使用new/delete或malloc/free），若程序员不释放，程序结束时可能由OS回收。</p>\n<h2 id=\"2、操作方式\"><a href=\"#2、操作方式\" class=\"headerlink\" title=\"2、操作方式\"></a>2、操作方式</h2><h3 id=\"栈区：-1\"><a href=\"#栈区：-1\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>操作方式类似于数据结构中的栈。</p>\n<h3 id=\"堆区：-1\"><a href=\"#堆区：-1\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>不同于数据结构中的堆，分配方式类似于链表。</p>\n<h2 id=\"3、申请后系统的响应\"><a href=\"#3、申请后系统的响应\" class=\"headerlink\" title=\"3、申请后系统的响应\"></a>3、申请后系统的响应</h2><h3 id=\"栈区：-2\"><a href=\"#栈区：-2\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出（overflow）。</p>\n<h3 id=\"堆区：-2\"><a href=\"#堆区：-2\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>操作系统有一个记录空闲内存地址的链表，<br>当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，<br>对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，从而代码中的delete语句才能正确的释放本内存空间，<br>由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。 </p>\n<h2 id=\"4、申请大小的限制\"><a href=\"#4、申请大小的限制\" class=\"headerlink\" title=\"4、申请大小的限制\"></a>4、申请大小的限制</h2><h3 id=\"栈区：-3\"><a href=\"#栈区：-3\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>在Windows下,栈是是一块确定的连续内存区域。栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。</p>\n<h3 id=\"堆区：-3\"><a href=\"#堆区：-3\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>堆是向高地址扩展的数据结构，由于系统是用链表来存储的空闲内存地址的，它是不连续的，链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</p>\n<h2 id=\"5、申请效率的比较\"><a href=\"#5、申请效率的比较\" class=\"headerlink\" title=\"5、申请效率的比较\"></a>5、申请效率的比较</h2><h3 id=\"栈区：-4\"><a href=\"#栈区：-4\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>系统自动分配，速度较快。但程序员是无法控制的。</p>\n<h3 id=\"堆区：-4\"><a href=\"#堆区：-4\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便.<br>注意：在WINDOWS下，最好的方式是用VirtualAlloc分配内存，它不在堆也不在栈，而是直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。</p>\n<h2 id=\"6、堆和栈中的存储内容\"><a href=\"#6、堆和栈中的存储内容\" class=\"headerlink\" title=\"6、堆和栈中的存储内容\"></a>6、堆和栈中的存储内容</h2><h3 id=\"栈区：-5\"><a href=\"#栈区：-5\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>在函数调用时，第一个进栈的是函数调用语句的下一条可执行语句的地址，接着是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。</p>\n<h3 id=\"堆区：-5\"><a href=\"#堆区：-5\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/u013321328/article/details/44172689\" target=\"_blank\" rel=\"noopener\">链接1</a> <a href=\"https://blog.csdn.net/shanshanhi/article/details/50904706\" target=\"_blank\" rel=\"noopener\">链接2</a></p>\n<h1 id=\"一个由C-C-编译的程序占用的内存分为以下几个部分：\"><a href=\"#一个由C-C-编译的程序占用的内存分为以下几个部分：\" class=\"headerlink\" title=\"一个由C/C++编译的程序占用的内存分为以下几个部分：\"></a>一个由C/C++编译的程序占用的内存分为以下几个部分：</h1><h2 id=\"1、栈区（stack）\"><a href=\"#1、栈区（stack）\" class=\"headerlink\" title=\"1、栈区（stack）\"></a>1、栈区（stack）</h2><p>由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</p>\n<h2 id=\"2、堆区（heap）\"><a href=\"#2、堆区（heap）\" class=\"headerlink\" title=\"2、堆区（heap）\"></a>2、堆区（heap）</h2><p>一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。分配方式倒是类似于数据结构中的链表。</p>\n<h2 id=\"3、全局区-静态区（static）\"><a href=\"#3、全局区-静态区（static）\" class=\"headerlink\" title=\"3、全局区/静态区（static）\"></a>3、全局区/静态区（static）</h2><p>全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</p>\n<h2 id=\"4、文字常量区\"><a href=\"#4、文字常量区\" class=\"headerlink\" title=\"4、文字常量区\"></a>4、文字常量区</h2><p>存放常量字符串。程序结束后由系统释放。</p>\n<h2 id=\"5、程序代码区\"><a href=\"#5、程序代码区\" class=\"headerlink\" title=\"5、程序代码区\"></a>5、程序代码区</h2><p>存放函数体的二进制代码。</p>\n<h1 id=\"堆和栈的区别：\"><a href=\"#堆和栈的区别：\" class=\"headerlink\" title=\"堆和栈的区别：\"></a>堆和栈的区别：</h1><h2 id=\"1、申请方式\"><a href=\"#1、申请方式\" class=\"headerlink\" title=\"1、申请方式\"></a>1、申请方式</h2><h3 id=\"栈区：\"><a href=\"#栈区：\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>由编译器自动分配释放，存放函数的参数值，局部变量值等。</p>\n<h3 id=\"堆区：\"><a href=\"#堆区：\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>一般由程序员分配释放（使用new/delete或malloc/free），若程序员不释放，程序结束时可能由OS回收。</p>\n<h2 id=\"2、操作方式\"><a href=\"#2、操作方式\" class=\"headerlink\" title=\"2、操作方式\"></a>2、操作方式</h2><h3 id=\"栈区：-1\"><a href=\"#栈区：-1\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>操作方式类似于数据结构中的栈。</p>\n<h3 id=\"堆区：-1\"><a href=\"#堆区：-1\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>不同于数据结构中的堆，分配方式类似于链表。</p>\n<h2 id=\"3、申请后系统的响应\"><a href=\"#3、申请后系统的响应\" class=\"headerlink\" title=\"3、申请后系统的响应\"></a>3、申请后系统的响应</h2><h3 id=\"栈区：-2\"><a href=\"#栈区：-2\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出（overflow）。</p>\n<h3 id=\"堆区：-2\"><a href=\"#堆区：-2\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>操作系统有一个记录空闲内存地址的链表，<br>当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，<br>对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，从而代码中的delete语句才能正确的释放本内存空间，<br>由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。 </p>\n<h2 id=\"4、申请大小的限制\"><a href=\"#4、申请大小的限制\" class=\"headerlink\" title=\"4、申请大小的限制\"></a>4、申请大小的限制</h2><h3 id=\"栈区：-3\"><a href=\"#栈区：-3\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>在Windows下,栈是是一块确定的连续内存区域。栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。</p>\n<h3 id=\"堆区：-3\"><a href=\"#堆区：-3\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>堆是向高地址扩展的数据结构，由于系统是用链表来存储的空闲内存地址的，它是不连续的，链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</p>\n<h2 id=\"5、申请效率的比较\"><a href=\"#5、申请效率的比较\" class=\"headerlink\" title=\"5、申请效率的比较\"></a>5、申请效率的比较</h2><h3 id=\"栈区：-4\"><a href=\"#栈区：-4\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>系统自动分配，速度较快。但程序员是无法控制的。</p>\n<h3 id=\"堆区：-4\"><a href=\"#堆区：-4\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便.<br>注意：在WINDOWS下，最好的方式是用VirtualAlloc分配内存，它不在堆也不在栈，而是直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。</p>\n<h2 id=\"6、堆和栈中的存储内容\"><a href=\"#6、堆和栈中的存储内容\" class=\"headerlink\" title=\"6、堆和栈中的存储内容\"></a>6、堆和栈中的存储内容</h2><h3 id=\"栈区：-5\"><a href=\"#栈区：-5\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>在函数调用时，第一个进栈的是函数调用语句的下一条可执行语句的地址，接着是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。</p>\n<h3 id=\"堆区：-5\"><a href=\"#堆区：-5\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。</p>\n"},{"title":"接入gitment为hexo添加评论功能","toc":false,"date":"2018-04-16T02:59:56.000Z","_content":"\n## 注册一个OAuth application \n\n[注册链接](https://github.com/settings/applications/new)\n\n![](/images/Capture3.PNG)\n\n其中：\n\nApplication name 为应用名，取一个跟自己博客相关的名字即可；\n\nHomepage URL 为博客地址，例如我的为：https://mikqueenge.github.io；\n\nApplication description 为应用描述，可不填；\n\nAuthorization callback URL 为回调URL，可不填；\n\n\n\n点击 Register application 祝成功后会得到这个应用的 **client ID** 和 **client secret**，等下配置文件时会用到。\n\n\n\n## 配置文件 \n\n主题：landscape\n\n### 创建git.ejs\n\n在`themes/landscape/layout/_partial/post`文件夹中创建文件`git.ejs`，写入下面的代码：\n\n```ejs\n<!-- Gitment评论插件通用代码 -->\n<div id=\"git\"></div>\n<!-- 汉化版 -->\n<link rel=\"stylesheet\" href=\"https://billts.site/extra_css/gitment.css\">\n<script src=\"https://billts.site/js/gitment.js\"></script>\n<script>\nvar gitment = new Gitment({\n  id: '{{ page.date }}', //添加此句解决Error：validation failed的问题\n  owner: \"%%%%%%%\",//github用户名，例如MIKQUEENGE\n  repo: \"%%%%%%%\",//用户存储评论的github项目名称，例如MIKQUEENGE.github.io\n  oauth: {\n    client_id: \"%%%%%%%%%%%%\",//注册OAuth Application时生产的ClinetID\n    client_secret:\"%%%%%%%%%%\",//注册OAuth Application时生成的Client Secret\n  },\n})\ngitment.render('git')\n</script>\n<!-- Gitment代码结束 -->\n```\n\n### 配置article.ejs\n\n在`themes/landscape/layout/_partial/article.ejs`文件的结尾添加：\n\n```ejs\n<% if (!index){ %>\n  <% if (post.comments){ %>\n  <%- partial('post/git') %>\n  <% } else { %>\n    <div class=\"git\"></div>\n  <% } %>\n<% } %>\n```\n\n## 登陆与添加评论\n\n完成上述配置后部署并打开某篇文章，拉到最底部可以看到评论区：\n\n![](/images/Capture4.PNG)\n\n点击登陆后就可以添加评论啦！\n\n## 遇到问题Error：validation failed\n\nmd文件名太长导致id出现问题，使用上述代码是不会出现这个问题的。\n\n如果出现这个问题，解决方案为在gitment配置文件（如上述的`git.ejs`）中的`var gitment = new Gitment({})`内添加`id: '{{ page.date }}',`（不要忘记这个逗号）\n\n\n\n---\n\n参考链接：\n\n[Hexo博客yelee主题添加Gitment评论系统 ](https://blog.csdn.net/stven_king/article/details/78357753)\n\n[Gitment评论功能接入踩坑教程](http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment评论功能接入踩坑教程/)","source":"_posts/接入gitment为hexo添加评论功能.md","raw":"---\ntitle: 接入gitment为hexo添加评论功能\ntoc: false\ndate: 2018-04-16 10:59:56\ncategories:\n- methods\ntags:\n- hexo\n- gitment\n---\n\n## 注册一个OAuth application \n\n[注册链接](https://github.com/settings/applications/new)\n\n![](/images/Capture3.PNG)\n\n其中：\n\nApplication name 为应用名，取一个跟自己博客相关的名字即可；\n\nHomepage URL 为博客地址，例如我的为：https://mikqueenge.github.io；\n\nApplication description 为应用描述，可不填；\n\nAuthorization callback URL 为回调URL，可不填；\n\n\n\n点击 Register application 祝成功后会得到这个应用的 **client ID** 和 **client secret**，等下配置文件时会用到。\n\n\n\n## 配置文件 \n\n主题：landscape\n\n### 创建git.ejs\n\n在`themes/landscape/layout/_partial/post`文件夹中创建文件`git.ejs`，写入下面的代码：\n\n```ejs\n<!-- Gitment评论插件通用代码 -->\n<div id=\"git\"></div>\n<!-- 汉化版 -->\n<link rel=\"stylesheet\" href=\"https://billts.site/extra_css/gitment.css\">\n<script src=\"https://billts.site/js/gitment.js\"></script>\n<script>\nvar gitment = new Gitment({\n  id: '{{ page.date }}', //添加此句解决Error：validation failed的问题\n  owner: \"%%%%%%%\",//github用户名，例如MIKQUEENGE\n  repo: \"%%%%%%%\",//用户存储评论的github项目名称，例如MIKQUEENGE.github.io\n  oauth: {\n    client_id: \"%%%%%%%%%%%%\",//注册OAuth Application时生产的ClinetID\n    client_secret:\"%%%%%%%%%%\",//注册OAuth Application时生成的Client Secret\n  },\n})\ngitment.render('git')\n</script>\n<!-- Gitment代码结束 -->\n```\n\n### 配置article.ejs\n\n在`themes/landscape/layout/_partial/article.ejs`文件的结尾添加：\n\n```ejs\n<% if (!index){ %>\n  <% if (post.comments){ %>\n  <%- partial('post/git') %>\n  <% } else { %>\n    <div class=\"git\"></div>\n  <% } %>\n<% } %>\n```\n\n## 登陆与添加评论\n\n完成上述配置后部署并打开某篇文章，拉到最底部可以看到评论区：\n\n![](/images/Capture4.PNG)\n\n点击登陆后就可以添加评论啦！\n\n## 遇到问题Error：validation failed\n\nmd文件名太长导致id出现问题，使用上述代码是不会出现这个问题的。\n\n如果出现这个问题，解决方案为在gitment配置文件（如上述的`git.ejs`）中的`var gitment = new Gitment({})`内添加`id: '{{ page.date }}',`（不要忘记这个逗号）\n\n\n\n---\n\n参考链接：\n\n[Hexo博客yelee主题添加Gitment评论系统 ](https://blog.csdn.net/stven_king/article/details/78357753)\n\n[Gitment评论功能接入踩坑教程](http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment评论功能接入踩坑教程/)","slug":"接入gitment为hexo添加评论功能","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9rtzy001f7bagzbjvsghm","content":"<h2 id=\"注册一个OAuth-application\"><a href=\"#注册一个OAuth-application\" class=\"headerlink\" title=\"注册一个OAuth application\"></a>注册一个OAuth application</h2><p><a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">注册链接</a></p>\n<p><img src=\"/images/Capture3.PNG\" alt=\"\"></p>\n<p>其中：</p>\n<p>Application name 为应用名，取一个跟自己博客相关的名字即可；</p>\n<p>Homepage URL 为博客地址，例如我的为：<a href=\"https://mikqueenge.github.io；\" target=\"_blank\" rel=\"noopener\">https://mikqueenge.github.io；</a></p>\n<p>Application description 为应用描述，可不填；</p>\n<p>Authorization callback URL 为回调URL，可不填；</p>\n<p>点击 Register application 祝成功后会得到这个应用的 <strong>client ID</strong> 和 <strong>client secret</strong>，等下配置文件时会用到。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>主题：landscape</p>\n<h3 id=\"创建git-ejs\"><a href=\"#创建git-ejs\" class=\"headerlink\" title=\"创建git.ejs\"></a>创建git.ejs</h3><p>在<code>themes/landscape/layout/_partial/post</code>文件夹中创建文件<code>git.ejs</code>，写入下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Gitment评论插件通用代码 --&gt;</span><br><span class=\"line\">&lt;div id=&quot;git&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 汉化版 --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://billts.site/extra_css/gitment.css&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://billts.site/js/gitment.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var gitment = new Gitment(&#123;</span><br><span class=\"line\">  id: &apos;&#123;&#123; page.date &#125;&#125;&apos;, //添加此句解决Error：validation failed的问题</span><br><span class=\"line\">  owner: &quot;%%%%%%%&quot;,//github用户名，例如MIKQUEENGE</span><br><span class=\"line\">  repo: &quot;%%%%%%%&quot;,//用户存储评论的github项目名称，例如MIKQUEENGE.github.io</span><br><span class=\"line\">  oauth: &#123;</span><br><span class=\"line\">    client_id: &quot;%%%%%%%%%%%%&quot;,//注册OAuth Application时生产的ClinetID</span><br><span class=\"line\">    client_secret:&quot;%%%%%%%%%%&quot;,//注册OAuth Application时生成的Client Secret</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gitment.render(&apos;git&apos;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- Gitment代码结束 --&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置article-ejs\"><a href=\"#配置article-ejs\" class=\"headerlink\" title=\"配置article.ejs\"></a>配置article.ejs</h3><p>在<code>themes/landscape/layout/_partial/article.ejs</code>文件的结尾添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index)&#123; %&gt;</span><br><span class=\"line\">  &lt;% if (post.comments)&#123; %&gt;</span><br><span class=\"line\">  &lt;%- partial(&apos;post/git&apos;) %&gt;</span><br><span class=\"line\">  &lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;git&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登陆与添加评论\"><a href=\"#登陆与添加评论\" class=\"headerlink\" title=\"登陆与添加评论\"></a>登陆与添加评论</h2><p>完成上述配置后部署并打开某篇文章，拉到最底部可以看到评论区：</p>\n<p><img src=\"/images/Capture4.PNG\" alt=\"\"></p>\n<p>点击登陆后就可以添加评论啦！</p>\n<h2 id=\"遇到问题Error：validation-failed\"><a href=\"#遇到问题Error：validation-failed\" class=\"headerlink\" title=\"遇到问题Error：validation failed\"></a>遇到问题Error：validation failed</h2><p>md文件名太长导致id出现问题，使用上述代码是不会出现这个问题的。</p>\n<p>如果出现这个问题，解决方案为在gitment配置文件（如上述的<code>git.ejs</code>）中的<code>var gitment = new Gitment({})</code>内添加<code>id: &#39;&#39;,</code>（不要忘记这个逗号）</p>\n<hr>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/stven_king/article/details/78357753\" target=\"_blank\" rel=\"noopener\">Hexo博客yelee主题添加Gitment评论系统 </a></p>\n<p><a href=\"http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment评论功能接入踩坑教程/\" target=\"_blank\" rel=\"noopener\">Gitment评论功能接入踩坑教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"注册一个OAuth-application\"><a href=\"#注册一个OAuth-application\" class=\"headerlink\" title=\"注册一个OAuth application\"></a>注册一个OAuth application</h2><p><a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">注册链接</a></p>\n<p><img src=\"/images/Capture3.PNG\" alt=\"\"></p>\n<p>其中：</p>\n<p>Application name 为应用名，取一个跟自己博客相关的名字即可；</p>\n<p>Homepage URL 为博客地址，例如我的为：<a href=\"https://mikqueenge.github.io；\" target=\"_blank\" rel=\"noopener\">https://mikqueenge.github.io；</a></p>\n<p>Application description 为应用描述，可不填；</p>\n<p>Authorization callback URL 为回调URL，可不填；</p>\n<p>点击 Register application 祝成功后会得到这个应用的 <strong>client ID</strong> 和 <strong>client secret</strong>，等下配置文件时会用到。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>主题：landscape</p>\n<h3 id=\"创建git-ejs\"><a href=\"#创建git-ejs\" class=\"headerlink\" title=\"创建git.ejs\"></a>创建git.ejs</h3><p>在<code>themes/landscape/layout/_partial/post</code>文件夹中创建文件<code>git.ejs</code>，写入下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Gitment评论插件通用代码 --&gt;</span><br><span class=\"line\">&lt;div id=&quot;git&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 汉化版 --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://billts.site/extra_css/gitment.css&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://billts.site/js/gitment.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var gitment = new Gitment(&#123;</span><br><span class=\"line\">  id: &apos;&#123;&#123; page.date &#125;&#125;&apos;, //添加此句解决Error：validation failed的问题</span><br><span class=\"line\">  owner: &quot;%%%%%%%&quot;,//github用户名，例如MIKQUEENGE</span><br><span class=\"line\">  repo: &quot;%%%%%%%&quot;,//用户存储评论的github项目名称，例如MIKQUEENGE.github.io</span><br><span class=\"line\">  oauth: &#123;</span><br><span class=\"line\">    client_id: &quot;%%%%%%%%%%%%&quot;,//注册OAuth Application时生产的ClinetID</span><br><span class=\"line\">    client_secret:&quot;%%%%%%%%%%&quot;,//注册OAuth Application时生成的Client Secret</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gitment.render(&apos;git&apos;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- Gitment代码结束 --&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置article-ejs\"><a href=\"#配置article-ejs\" class=\"headerlink\" title=\"配置article.ejs\"></a>配置article.ejs</h3><p>在<code>themes/landscape/layout/_partial/article.ejs</code>文件的结尾添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index)&#123; %&gt;</span><br><span class=\"line\">  &lt;% if (post.comments)&#123; %&gt;</span><br><span class=\"line\">  &lt;%- partial(&apos;post/git&apos;) %&gt;</span><br><span class=\"line\">  &lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;git&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登陆与添加评论\"><a href=\"#登陆与添加评论\" class=\"headerlink\" title=\"登陆与添加评论\"></a>登陆与添加评论</h2><p>完成上述配置后部署并打开某篇文章，拉到最底部可以看到评论区：</p>\n<p><img src=\"/images/Capture4.PNG\" alt=\"\"></p>\n<p>点击登陆后就可以添加评论啦！</p>\n<h2 id=\"遇到问题Error：validation-failed\"><a href=\"#遇到问题Error：validation-failed\" class=\"headerlink\" title=\"遇到问题Error：validation failed\"></a>遇到问题Error：validation failed</h2><p>md文件名太长导致id出现问题，使用上述代码是不会出现这个问题的。</p>\n<p>如果出现这个问题，解决方案为在gitment配置文件（如上述的<code>git.ejs</code>）中的<code>var gitment = new Gitment({})</code>内添加<code>id: &#39;&#39;,</code>（不要忘记这个逗号）</p>\n<hr>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/stven_king/article/details/78357753\" target=\"_blank\" rel=\"noopener\">Hexo博客yelee主题添加Gitment评论系统 </a></p>\n<p><a href=\"http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment评论功能接入踩坑教程/\" target=\"_blank\" rel=\"noopener\">Gitment评论功能接入踩坑教程</a></p>\n"},{"title":"智能指针","date":"2018-04-02T07:21:32.000Z","_content":"\n\n\n## 为什么使用动态指针？\n\n在C++中，动态内存的管理是通过一对运算符来完成的：\n\n- new: 在动态内存中为对象分配空间并返回一个指向该对象的指针，同时可以对这个对象初始化。\n- delete: 接受一个动态对象的指针，销毁该对象并释放与之关联的内存。\n\n这样动态内存的使用就很容易出现问题：\n\n- 忘记释放内存（delete）就会产生内存泄漏的问题。\n- 过早释放内存（在还有指针引用该内存的时候就释放了它）就会产生引用非法内存的指针。\n\n为了防止出现这种情况，更容易更安全地使用动态内存， 自C++11开始提供了两种智能指针类型来管理动态对象。\n\n## 什么是智能指针？\n\n智能指针是存储指向动态分配（堆）对象指针的类。智能指针的行为类似常规指针，重要的区别是它负责自动释放所指向的对象。\n\n## 智能指针的原理是什么？\n\n资源分配即初始化RAII（Resource Acquisition Is Initialization）：RAII 的做法是使用一个对象，在其构造时获取资源，在对象生命期控制对资源的访问使之始终保持有效，最后在对象析构的时候释放资源。\n\n定义一个类来封装资源的分配和释放，在构造函数完成资源的分配\n和初始化，在析构函数完成资源的清理，可以保证资源的正确初始化和释放。\n\n在类中采用引用计数的方法。在智能指针的内部有一个计数器，记录了当前内存资源到底有多少指针在引用，当新增加一个这个资源的引用时，计数器就会+1，否则-1，当计数器的值变为0时，这个智能指针就会自动释放它管理的 这个资源。\n\n## 常见的智能指针？\n\nC++11提供的两个智能指针为**shared_ptr**和**unique_ptr**，还定义了一个伴随类**weak_ptr**，这三个类都定义在**memory**头文件中。以及C++98引入的使用起来到处是坑的**auto_ptr**。\n\n### shared_ptr（[官方文档](http://en.cppreference.com/w/cpp/memory/shared_ptr)）\n\n>  shared_ptr允许多个指针指向相同的对象。shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。\n>\n> 每多一个指针指向它，内部的引用计数加1，每析构一次，内部的引用计数减1，减为0时，自动删除所指向的堆内存。\n>\n> shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁。\n>\n> 不要用一个原始指针初始化多个shared_ptr，否则会造成二次释放同一内存。\n\n### unique_ptr\n\n> unique_ptr“唯一”拥有其所指对象，同一时刻只能有一个unique_ptr指向给定对象（通过禁止拷贝语义、只有移动语义来实现）。\n>\n> 相比于原始指针，unique_ptr用其RAII的特性，使得在出现异常的情况下，动态资源能得到释放。\n>\n> unique_ptr指针本身的生命周期：\n>\n> - 从unique_ptr指针创建时开始，直到离开作用域。\n> - 离开作用域时，若其指向对象，则将其所指对象销毁(默认使用delete操作符，用户可指定其他操作)。\n>\n> unique_ptr指针与其所指对象的关系：\n>\n> 在智能指针生命周期内，可以改变智能指针所指对象，如创建智能指针时通过构造函数指定、通过reset方法重新指定、通过release方法释放所有权、通过移动语义转移所有权。\n\n### weak_ptr\n\n> weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为它**不具有普通指针的行为，没有重载operator*和->**,它的最大作用在于协助shared_ptr工作，**像旁观者那样观测资源的使用情况**。\n>\n> weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。\n>\n> 使用weak_ptr的成员函数use_count()可以观测资源的引用计数，另一个成员函数expired()的功能等价于use_count()==0,但更快，表示被观测的资源(也就是shared_ptr的管理的资源)已经不复存在。\n>\n> weak_ptr可以使用一个非常重要的成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象，从而操作资源。但当expired()==true的时候，lock()函数将返回一个存储空指针的shared_ptr。\n\n## 循环引用问题\n\n首先看下面的代码理解什么是循环引用：\n\n```c++\nclass B;\nclass A\n{\npublic:\n　　shared_ptr<B> m_b;\n};\n \nclass B\n{\npublic:\n　　shared_ptr<A> m_a;\n};\n \nvoid test()\n{\n　　shared_ptr<A> a(new A); //new出来的A的引用计数此时为1\n　　shared_ptr<B> b(new B); //new出来的B的引用计数此时为1\n　　a->m_b = b; //B的引用计数增加为2\n　　b->m_a = a; //A的引用计数增加为2\n \n　　//b先出作用域，B的引用计数减少为1，不为0，所以堆上的B空间没有被释放\n　　//a后出作用域，同理A的引用计数减少为1，不为0，所以堆上A的空间也没有被释放\n}\n```\n\n因为weak_ptr的构造和析构不会引起引用计数的增加或减少，所以可以用weak_ptr解决这个问题（weak_ptr必须与shared_ptr配合使用,不能单独使用）：\n\n```c++\nclass B;\nclass A\n{\npublic:\n　　weak_ptr<B> m_b;\n};\n \nclass B\n{\npublic:\n　　weak_ptr<A> m_a;\n};\n \nvoid test()\n{\n　　shared_ptr<A> a(new A);\n　　shared_ptr<B> b(new B);\n　　a->m_b = b;\n　　b->m_a = a;\n}\n```\n\n### auto_ptr\n\n缺陷：（[参考链接](https://www.zhihu.com/question/37351146/answer/83379043)，来源：知乎，作者：Sen Zhang）\n\n> auto_ptr采用可以采用copy语义来转移指针资源的所有权的同时将原指针置为NULL，这跟通常理解的copy行为是不一致的，而这样的行为要有些场合下不是我们希望看到的。\n>\n> 例如参考《Effective STL》第8条，sort的快排实现中有将元素复制到某个局部临时对象中，但对于auto_ptr，却将原元素置为null，这就导致最后的排序结果中可能有大量的null。\n>\n> 而现在C++11的对move语义的支持，使得这样的资源转移**通常**只会在**必要的场合**发生，例如转移一个临时变量（右值）给某个named variable（左值）\n>\n> 这也就是用unique_ptr代替auto_ptr的原因，\n>\n> 本质上来说，就是unique_ptr禁用了copy，而用move替代。\n\n```c++\nstd::unique_ptr<bar> b0(new bar());\nstd::unique_ptr<bar> b1(std::move(b0));\n```\n\n## 智能指针的实现\n\n```c++\ntemplate <typename T>\nclass SmartPointer {\npublic:\n    //构造函数\n    SmartPointer(T* p=0): _ptr(p), _reference_count(new size_t){\n        if(p)\n            *_reference_count = 1; \n        else\n            *_reference_count = 0; \n    }\n    //拷贝构造函数\n    SmartPointer(const SmartPointer& src) {\n        if(this!=&src) {\n            _ptr = src._ptr;\n            _reference_count = src._reference_count;\n            (*_reference_count)++;\n        }\n    }\n    //重载赋值操作符\n    SmartPointer& operator=(const SmartPointer& src) {\n        if(_ptr==src._ptr) {\n            return *this;\n        }\n        releaseCount();\n        _ptr = src._ptr;\n        _reference_count = src._reference_count;\n        (*_reference_count)++;\n        return *this;\n    }\n\n    //重载操作符\n    T& operator*() {\n        if(ptr) {\n            return *_ptr;\n        }\n        //throw exception\n    }\n    //重载操作符\n    T* operator->() {\n        if(_ptr) {\n            return _ptr;\n        }\n        //throw exception\n    }\n    //析构函数\n    ~SmartPointer() {\n        if (--(*_reference_count) == 0) {\n            delete _ptr;\n            delete _reference_count;\n        }\n    }\nprivate:\n    T *_ptr;\n    size_t *_reference_count;\n    void releaseCount() {\n        if(_ptr) {\n            (*_reference_count)--;\n            if((*_reference_count)==0) {\n                delete _ptr;\n                delete _reference_count;\n            }    \n        }\n    }\n};\n\nint main() \n{\n    SmartPointer<char> cp1(new char('a'));\n    SmartPointer<char> cp2(cp1);\n    SmartPointer<char> cp3;\n    cp3 = cp2;\n    cp3 = cp1;\n    cp3 = cp3;\n    SmartPointer<char> cp4(new char('b'));\n    cp3 = cp4;\n}\n```\n\n","source":"_posts/智能指针.md","raw":"---\ntitle: 智能指针\ndate: 2018-04-02 15:21:32\ncategories: \n- C/C++\ntags:\n- 指针\n---\n\n\n\n## 为什么使用动态指针？\n\n在C++中，动态内存的管理是通过一对运算符来完成的：\n\n- new: 在动态内存中为对象分配空间并返回一个指向该对象的指针，同时可以对这个对象初始化。\n- delete: 接受一个动态对象的指针，销毁该对象并释放与之关联的内存。\n\n这样动态内存的使用就很容易出现问题：\n\n- 忘记释放内存（delete）就会产生内存泄漏的问题。\n- 过早释放内存（在还有指针引用该内存的时候就释放了它）就会产生引用非法内存的指针。\n\n为了防止出现这种情况，更容易更安全地使用动态内存， 自C++11开始提供了两种智能指针类型来管理动态对象。\n\n## 什么是智能指针？\n\n智能指针是存储指向动态分配（堆）对象指针的类。智能指针的行为类似常规指针，重要的区别是它负责自动释放所指向的对象。\n\n## 智能指针的原理是什么？\n\n资源分配即初始化RAII（Resource Acquisition Is Initialization）：RAII 的做法是使用一个对象，在其构造时获取资源，在对象生命期控制对资源的访问使之始终保持有效，最后在对象析构的时候释放资源。\n\n定义一个类来封装资源的分配和释放，在构造函数完成资源的分配\n和初始化，在析构函数完成资源的清理，可以保证资源的正确初始化和释放。\n\n在类中采用引用计数的方法。在智能指针的内部有一个计数器，记录了当前内存资源到底有多少指针在引用，当新增加一个这个资源的引用时，计数器就会+1，否则-1，当计数器的值变为0时，这个智能指针就会自动释放它管理的 这个资源。\n\n## 常见的智能指针？\n\nC++11提供的两个智能指针为**shared_ptr**和**unique_ptr**，还定义了一个伴随类**weak_ptr**，这三个类都定义在**memory**头文件中。以及C++98引入的使用起来到处是坑的**auto_ptr**。\n\n### shared_ptr（[官方文档](http://en.cppreference.com/w/cpp/memory/shared_ptr)）\n\n>  shared_ptr允许多个指针指向相同的对象。shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。\n>\n> 每多一个指针指向它，内部的引用计数加1，每析构一次，内部的引用计数减1，减为0时，自动删除所指向的堆内存。\n>\n> shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁。\n>\n> 不要用一个原始指针初始化多个shared_ptr，否则会造成二次释放同一内存。\n\n### unique_ptr\n\n> unique_ptr“唯一”拥有其所指对象，同一时刻只能有一个unique_ptr指向给定对象（通过禁止拷贝语义、只有移动语义来实现）。\n>\n> 相比于原始指针，unique_ptr用其RAII的特性，使得在出现异常的情况下，动态资源能得到释放。\n>\n> unique_ptr指针本身的生命周期：\n>\n> - 从unique_ptr指针创建时开始，直到离开作用域。\n> - 离开作用域时，若其指向对象，则将其所指对象销毁(默认使用delete操作符，用户可指定其他操作)。\n>\n> unique_ptr指针与其所指对象的关系：\n>\n> 在智能指针生命周期内，可以改变智能指针所指对象，如创建智能指针时通过构造函数指定、通过reset方法重新指定、通过release方法释放所有权、通过移动语义转移所有权。\n\n### weak_ptr\n\n> weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为它**不具有普通指针的行为，没有重载operator*和->**,它的最大作用在于协助shared_ptr工作，**像旁观者那样观测资源的使用情况**。\n>\n> weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。\n>\n> 使用weak_ptr的成员函数use_count()可以观测资源的引用计数，另一个成员函数expired()的功能等价于use_count()==0,但更快，表示被观测的资源(也就是shared_ptr的管理的资源)已经不复存在。\n>\n> weak_ptr可以使用一个非常重要的成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象，从而操作资源。但当expired()==true的时候，lock()函数将返回一个存储空指针的shared_ptr。\n\n## 循环引用问题\n\n首先看下面的代码理解什么是循环引用：\n\n```c++\nclass B;\nclass A\n{\npublic:\n　　shared_ptr<B> m_b;\n};\n \nclass B\n{\npublic:\n　　shared_ptr<A> m_a;\n};\n \nvoid test()\n{\n　　shared_ptr<A> a(new A); //new出来的A的引用计数此时为1\n　　shared_ptr<B> b(new B); //new出来的B的引用计数此时为1\n　　a->m_b = b; //B的引用计数增加为2\n　　b->m_a = a; //A的引用计数增加为2\n \n　　//b先出作用域，B的引用计数减少为1，不为0，所以堆上的B空间没有被释放\n　　//a后出作用域，同理A的引用计数减少为1，不为0，所以堆上A的空间也没有被释放\n}\n```\n\n因为weak_ptr的构造和析构不会引起引用计数的增加或减少，所以可以用weak_ptr解决这个问题（weak_ptr必须与shared_ptr配合使用,不能单独使用）：\n\n```c++\nclass B;\nclass A\n{\npublic:\n　　weak_ptr<B> m_b;\n};\n \nclass B\n{\npublic:\n　　weak_ptr<A> m_a;\n};\n \nvoid test()\n{\n　　shared_ptr<A> a(new A);\n　　shared_ptr<B> b(new B);\n　　a->m_b = b;\n　　b->m_a = a;\n}\n```\n\n### auto_ptr\n\n缺陷：（[参考链接](https://www.zhihu.com/question/37351146/answer/83379043)，来源：知乎，作者：Sen Zhang）\n\n> auto_ptr采用可以采用copy语义来转移指针资源的所有权的同时将原指针置为NULL，这跟通常理解的copy行为是不一致的，而这样的行为要有些场合下不是我们希望看到的。\n>\n> 例如参考《Effective STL》第8条，sort的快排实现中有将元素复制到某个局部临时对象中，但对于auto_ptr，却将原元素置为null，这就导致最后的排序结果中可能有大量的null。\n>\n> 而现在C++11的对move语义的支持，使得这样的资源转移**通常**只会在**必要的场合**发生，例如转移一个临时变量（右值）给某个named variable（左值）\n>\n> 这也就是用unique_ptr代替auto_ptr的原因，\n>\n> 本质上来说，就是unique_ptr禁用了copy，而用move替代。\n\n```c++\nstd::unique_ptr<bar> b0(new bar());\nstd::unique_ptr<bar> b1(std::move(b0));\n```\n\n## 智能指针的实现\n\n```c++\ntemplate <typename T>\nclass SmartPointer {\npublic:\n    //构造函数\n    SmartPointer(T* p=0): _ptr(p), _reference_count(new size_t){\n        if(p)\n            *_reference_count = 1; \n        else\n            *_reference_count = 0; \n    }\n    //拷贝构造函数\n    SmartPointer(const SmartPointer& src) {\n        if(this!=&src) {\n            _ptr = src._ptr;\n            _reference_count = src._reference_count;\n            (*_reference_count)++;\n        }\n    }\n    //重载赋值操作符\n    SmartPointer& operator=(const SmartPointer& src) {\n        if(_ptr==src._ptr) {\n            return *this;\n        }\n        releaseCount();\n        _ptr = src._ptr;\n        _reference_count = src._reference_count;\n        (*_reference_count)++;\n        return *this;\n    }\n\n    //重载操作符\n    T& operator*() {\n        if(ptr) {\n            return *_ptr;\n        }\n        //throw exception\n    }\n    //重载操作符\n    T* operator->() {\n        if(_ptr) {\n            return _ptr;\n        }\n        //throw exception\n    }\n    //析构函数\n    ~SmartPointer() {\n        if (--(*_reference_count) == 0) {\n            delete _ptr;\n            delete _reference_count;\n        }\n    }\nprivate:\n    T *_ptr;\n    size_t *_reference_count;\n    void releaseCount() {\n        if(_ptr) {\n            (*_reference_count)--;\n            if((*_reference_count)==0) {\n                delete _ptr;\n                delete _reference_count;\n            }    \n        }\n    }\n};\n\nint main() \n{\n    SmartPointer<char> cp1(new char('a'));\n    SmartPointer<char> cp2(cp1);\n    SmartPointer<char> cp3;\n    cp3 = cp2;\n    cp3 = cp1;\n    cp3 = cp3;\n    SmartPointer<char> cp4(new char('b'));\n    cp3 = cp4;\n}\n```\n\n","slug":"智能指针","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru00001j7baghgq4tziv","content":"<h2 id=\"为什么使用动态指针？\"><a href=\"#为什么使用动态指针？\" class=\"headerlink\" title=\"为什么使用动态指针？\"></a>为什么使用动态指针？</h2><p>在C++中，动态内存的管理是通过一对运算符来完成的：</p>\n<ul>\n<li>new: 在动态内存中为对象分配空间并返回一个指向该对象的指针，同时可以对这个对象初始化。</li>\n<li>delete: 接受一个动态对象的指针，销毁该对象并释放与之关联的内存。</li>\n</ul>\n<p>这样动态内存的使用就很容易出现问题：</p>\n<ul>\n<li>忘记释放内存（delete）就会产生内存泄漏的问题。</li>\n<li>过早释放内存（在还有指针引用该内存的时候就释放了它）就会产生引用非法内存的指针。</li>\n</ul>\n<p>为了防止出现这种情况，更容易更安全地使用动态内存， 自C++11开始提供了两种智能指针类型来管理动态对象。</p>\n<h2 id=\"什么是智能指针？\"><a href=\"#什么是智能指针？\" class=\"headerlink\" title=\"什么是智能指针？\"></a>什么是智能指针？</h2><p>智能指针是存储指向动态分配（堆）对象指针的类。智能指针的行为类似常规指针，重要的区别是它负责自动释放所指向的对象。</p>\n<h2 id=\"智能指针的原理是什么？\"><a href=\"#智能指针的原理是什么？\" class=\"headerlink\" title=\"智能指针的原理是什么？\"></a>智能指针的原理是什么？</h2><p>资源分配即初始化RAII（Resource Acquisition Is Initialization）：RAII 的做法是使用一个对象，在其构造时获取资源，在对象生命期控制对资源的访问使之始终保持有效，最后在对象析构的时候释放资源。</p>\n<p>定义一个类来封装资源的分配和释放，在构造函数完成资源的分配<br>和初始化，在析构函数完成资源的清理，可以保证资源的正确初始化和释放。</p>\n<p>在类中采用引用计数的方法。在智能指针的内部有一个计数器，记录了当前内存资源到底有多少指针在引用，当新增加一个这个资源的引用时，计数器就会+1，否则-1，当计数器的值变为0时，这个智能指针就会自动释放它管理的 这个资源。</p>\n<h2 id=\"常见的智能指针？\"><a href=\"#常见的智能指针？\" class=\"headerlink\" title=\"常见的智能指针？\"></a>常见的智能指针？</h2><p>C++11提供的两个智能指针为<strong>shared_ptr</strong>和<strong>unique_ptr</strong>，还定义了一个伴随类<strong>weak_ptr</strong>，这三个类都定义在<strong>memory</strong>头文件中。以及C++98引入的使用起来到处是坑的<strong>auto_ptr</strong>。</p>\n<h3 id=\"shared-ptr（官方文档）\"><a href=\"#shared-ptr（官方文档）\" class=\"headerlink\" title=\"shared_ptr（官方文档）\"></a>shared_ptr（<a href=\"http://en.cppreference.com/w/cpp/memory/shared_ptr\" target=\"_blank\" rel=\"noopener\">官方文档</a>）</h3><blockquote>\n<p> shared_ptr允许多个指针指向相同的对象。shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。</p>\n<p>每多一个指针指向它，内部的引用计数加1，每析构一次，内部的引用计数减1，减为0时，自动删除所指向的堆内存。</p>\n<p>shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁。</p>\n<p>不要用一个原始指针初始化多个shared_ptr，否则会造成二次释放同一内存。</p>\n</blockquote>\n<h3 id=\"unique-ptr\"><a href=\"#unique-ptr\" class=\"headerlink\" title=\"unique_ptr\"></a>unique_ptr</h3><blockquote>\n<p>unique_ptr“唯一”拥有其所指对象，同一时刻只能有一个unique_ptr指向给定对象（通过禁止拷贝语义、只有移动语义来实现）。</p>\n<p>相比于原始指针，unique_ptr用其RAII的特性，使得在出现异常的情况下，动态资源能得到释放。</p>\n<p>unique_ptr指针本身的生命周期：</p>\n<ul>\n<li>从unique_ptr指针创建时开始，直到离开作用域。</li>\n<li>离开作用域时，若其指向对象，则将其所指对象销毁(默认使用delete操作符，用户可指定其他操作)。</li>\n</ul>\n<p>unique_ptr指针与其所指对象的关系：</p>\n<p>在智能指针生命周期内，可以改变智能指针所指对象，如创建智能指针时通过构造函数指定、通过reset方法重新指定、通过release方法释放所有权、通过移动语义转移所有权。</p>\n</blockquote>\n<h3 id=\"weak-ptr\"><a href=\"#weak-ptr\" class=\"headerlink\" title=\"weak_ptr\"></a>weak_ptr</h3><blockquote>\n<p>weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为它<strong>不具有普通指针的行为，没有重载operator*和-&gt;</strong>,它的最大作用在于协助shared_ptr工作，<strong>像旁观者那样观测资源的使用情况</strong>。</p>\n<p>weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。</p>\n<p>使用weak_ptr的成员函数use_count()可以观测资源的引用计数，另一个成员函数expired()的功能等价于use_count()==0,但更快，表示被观测的资源(也就是shared_ptr的管理的资源)已经不复存在。</p>\n<p>weak_ptr可以使用一个非常重要的成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象，从而操作资源。但当expired()==true的时候，lock()函数将返回一个存储空指针的shared_ptr。</p>\n</blockquote>\n<h2 id=\"循环引用问题\"><a href=\"#循环引用问题\" class=\"headerlink\" title=\"循环引用问题\"></a>循环引用问题</h2><p>首先看下面的代码理解什么是循环引用：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; m_b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; m_a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; a(<span class=\"keyword\">new</span> A); <span class=\"comment\">//new出来的A的引用计数此时为1</span></span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; b(<span class=\"keyword\">new</span> B); <span class=\"comment\">//new出来的B的引用计数此时为1</span></span><br><span class=\"line\">　　a-&gt;m_b = b; <span class=\"comment\">//B的引用计数增加为2</span></span><br><span class=\"line\">　　b-&gt;m_a = a; <span class=\"comment\">//A的引用计数增加为2</span></span><br><span class=\"line\"> </span><br><span class=\"line\">　　<span class=\"comment\">//b先出作用域，B的引用计数减少为1，不为0，所以堆上的B空间没有被释放</span></span><br><span class=\"line\">　　<span class=\"comment\">//a后出作用域，同理A的引用计数减少为1，不为0，所以堆上A的空间也没有被释放</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为weak_ptr的构造和析构不会引起引用计数的增加或减少，所以可以用weak_ptr解决这个问题（weak_ptr必须与shared_ptr配合使用,不能单独使用）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　weak_ptr&lt;B&gt; m_b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　weak_ptr&lt;A&gt; m_a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; a(<span class=\"keyword\">new</span> A);</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; b(<span class=\"keyword\">new</span> B);</span><br><span class=\"line\">　　a-&gt;m_b = b;</span><br><span class=\"line\">　　b-&gt;m_a = a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"auto-ptr\"><a href=\"#auto-ptr\" class=\"headerlink\" title=\"auto_ptr\"></a>auto_ptr</h3><p>缺陷：（<a href=\"https://www.zhihu.com/question/37351146/answer/83379043\" target=\"_blank\" rel=\"noopener\">参考链接</a>，来源：知乎，作者：Sen Zhang）</p>\n<blockquote>\n<p>auto_ptr采用可以采用copy语义来转移指针资源的所有权的同时将原指针置为NULL，这跟通常理解的copy行为是不一致的，而这样的行为要有些场合下不是我们希望看到的。</p>\n<p>例如参考《Effective STL》第8条，sort的快排实现中有将元素复制到某个局部临时对象中，但对于auto_ptr，却将原元素置为null，这就导致最后的排序结果中可能有大量的null。</p>\n<p>而现在C++11的对move语义的支持，使得这样的资源转移<strong>通常</strong>只会在<strong>必要的场合</strong>发生，例如转移一个临时变量（右值）给某个named variable（左值）</p>\n<p>这也就是用unique_ptr代替auto_ptr的原因，</p>\n<p>本质上来说，就是unique_ptr禁用了copy，而用move替代。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;bar&gt; b0(<span class=\"keyword\">new</span> bar());</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;bar&gt; b1(<span class=\"built_in\">std</span>::move(b0));</span><br></pre></td></tr></table></figure>\n<h2 id=\"智能指针的实现\"><a href=\"#智能指针的实现\" class=\"headerlink\" title=\"智能指针的实现\"></a>智能指针的实现</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmartPointer</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    SmartPointer(T* p=<span class=\"number\">0</span>): _ptr(p), _reference_count(<span class=\"keyword\">new</span> <span class=\"keyword\">size_t</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p)</span><br><span class=\"line\">            *_reference_count = <span class=\"number\">1</span>; </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            *_reference_count = <span class=\"number\">0</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">    SmartPointer(<span class=\"keyword\">const</span> SmartPointer&amp; src) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>!=&amp;src) &#123;</span><br><span class=\"line\">            _ptr = src._ptr;</span><br><span class=\"line\">            _reference_count = src._reference_count;</span><br><span class=\"line\">            (*_reference_count)++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重载赋值操作符</span></span><br><span class=\"line\">    SmartPointer&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> SmartPointer&amp; src) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr==src._ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        releaseCount();</span><br><span class=\"line\">        _ptr = src._ptr;</span><br><span class=\"line\">        _reference_count = src._reference_count;</span><br><span class=\"line\">        (*_reference_count)++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重载操作符</span></span><br><span class=\"line\">    T&amp; <span class=\"keyword\">operator</span>*() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *_ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//throw exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重载操作符</span></span><br><span class=\"line\">    T* <span class=\"keyword\">operator</span>-&gt;() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//throw exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    ~SmartPointer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--(*_reference_count) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _ptr;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _reference_count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T *_ptr;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> *_reference_count;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">releaseCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr) &#123;</span><br><span class=\"line\">            (*_reference_count)--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((*_reference_count)==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _ptr;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _reference_count;</span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp1(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>(<span class=\"string\">'a'</span>));</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp2(cp1);</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp3;</span><br><span class=\"line\">    cp3 = cp2;</span><br><span class=\"line\">    cp3 = cp1;</span><br><span class=\"line\">    cp3 = cp3;</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp4(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>(<span class=\"string\">'b'</span>));</span><br><span class=\"line\">    cp3 = cp4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么使用动态指针？\"><a href=\"#为什么使用动态指针？\" class=\"headerlink\" title=\"为什么使用动态指针？\"></a>为什么使用动态指针？</h2><p>在C++中，动态内存的管理是通过一对运算符来完成的：</p>\n<ul>\n<li>new: 在动态内存中为对象分配空间并返回一个指向该对象的指针，同时可以对这个对象初始化。</li>\n<li>delete: 接受一个动态对象的指针，销毁该对象并释放与之关联的内存。</li>\n</ul>\n<p>这样动态内存的使用就很容易出现问题：</p>\n<ul>\n<li>忘记释放内存（delete）就会产生内存泄漏的问题。</li>\n<li>过早释放内存（在还有指针引用该内存的时候就释放了它）就会产生引用非法内存的指针。</li>\n</ul>\n<p>为了防止出现这种情况，更容易更安全地使用动态内存， 自C++11开始提供了两种智能指针类型来管理动态对象。</p>\n<h2 id=\"什么是智能指针？\"><a href=\"#什么是智能指针？\" class=\"headerlink\" title=\"什么是智能指针？\"></a>什么是智能指针？</h2><p>智能指针是存储指向动态分配（堆）对象指针的类。智能指针的行为类似常规指针，重要的区别是它负责自动释放所指向的对象。</p>\n<h2 id=\"智能指针的原理是什么？\"><a href=\"#智能指针的原理是什么？\" class=\"headerlink\" title=\"智能指针的原理是什么？\"></a>智能指针的原理是什么？</h2><p>资源分配即初始化RAII（Resource Acquisition Is Initialization）：RAII 的做法是使用一个对象，在其构造时获取资源，在对象生命期控制对资源的访问使之始终保持有效，最后在对象析构的时候释放资源。</p>\n<p>定义一个类来封装资源的分配和释放，在构造函数完成资源的分配<br>和初始化，在析构函数完成资源的清理，可以保证资源的正确初始化和释放。</p>\n<p>在类中采用引用计数的方法。在智能指针的内部有一个计数器，记录了当前内存资源到底有多少指针在引用，当新增加一个这个资源的引用时，计数器就会+1，否则-1，当计数器的值变为0时，这个智能指针就会自动释放它管理的 这个资源。</p>\n<h2 id=\"常见的智能指针？\"><a href=\"#常见的智能指针？\" class=\"headerlink\" title=\"常见的智能指针？\"></a>常见的智能指针？</h2><p>C++11提供的两个智能指针为<strong>shared_ptr</strong>和<strong>unique_ptr</strong>，还定义了一个伴随类<strong>weak_ptr</strong>，这三个类都定义在<strong>memory</strong>头文件中。以及C++98引入的使用起来到处是坑的<strong>auto_ptr</strong>。</p>\n<h3 id=\"shared-ptr（官方文档）\"><a href=\"#shared-ptr（官方文档）\" class=\"headerlink\" title=\"shared_ptr（官方文档）\"></a>shared_ptr（<a href=\"http://en.cppreference.com/w/cpp/memory/shared_ptr\" target=\"_blank\" rel=\"noopener\">官方文档</a>）</h3><blockquote>\n<p> shared_ptr允许多个指针指向相同的对象。shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。</p>\n<p>每多一个指针指向它，内部的引用计数加1，每析构一次，内部的引用计数减1，减为0时，自动删除所指向的堆内存。</p>\n<p>shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁。</p>\n<p>不要用一个原始指针初始化多个shared_ptr，否则会造成二次释放同一内存。</p>\n</blockquote>\n<h3 id=\"unique-ptr\"><a href=\"#unique-ptr\" class=\"headerlink\" title=\"unique_ptr\"></a>unique_ptr</h3><blockquote>\n<p>unique_ptr“唯一”拥有其所指对象，同一时刻只能有一个unique_ptr指向给定对象（通过禁止拷贝语义、只有移动语义来实现）。</p>\n<p>相比于原始指针，unique_ptr用其RAII的特性，使得在出现异常的情况下，动态资源能得到释放。</p>\n<p>unique_ptr指针本身的生命周期：</p>\n<ul>\n<li>从unique_ptr指针创建时开始，直到离开作用域。</li>\n<li>离开作用域时，若其指向对象，则将其所指对象销毁(默认使用delete操作符，用户可指定其他操作)。</li>\n</ul>\n<p>unique_ptr指针与其所指对象的关系：</p>\n<p>在智能指针生命周期内，可以改变智能指针所指对象，如创建智能指针时通过构造函数指定、通过reset方法重新指定、通过release方法释放所有权、通过移动语义转移所有权。</p>\n</blockquote>\n<h3 id=\"weak-ptr\"><a href=\"#weak-ptr\" class=\"headerlink\" title=\"weak_ptr\"></a>weak_ptr</h3><blockquote>\n<p>weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为它<strong>不具有普通指针的行为，没有重载operator*和-&gt;</strong>,它的最大作用在于协助shared_ptr工作，<strong>像旁观者那样观测资源的使用情况</strong>。</p>\n<p>weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。</p>\n<p>使用weak_ptr的成员函数use_count()可以观测资源的引用计数，另一个成员函数expired()的功能等价于use_count()==0,但更快，表示被观测的资源(也就是shared_ptr的管理的资源)已经不复存在。</p>\n<p>weak_ptr可以使用一个非常重要的成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象，从而操作资源。但当expired()==true的时候，lock()函数将返回一个存储空指针的shared_ptr。</p>\n</blockquote>\n<h2 id=\"循环引用问题\"><a href=\"#循环引用问题\" class=\"headerlink\" title=\"循环引用问题\"></a>循环引用问题</h2><p>首先看下面的代码理解什么是循环引用：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; m_b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; m_a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; a(<span class=\"keyword\">new</span> A); <span class=\"comment\">//new出来的A的引用计数此时为1</span></span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; b(<span class=\"keyword\">new</span> B); <span class=\"comment\">//new出来的B的引用计数此时为1</span></span><br><span class=\"line\">　　a-&gt;m_b = b; <span class=\"comment\">//B的引用计数增加为2</span></span><br><span class=\"line\">　　b-&gt;m_a = a; <span class=\"comment\">//A的引用计数增加为2</span></span><br><span class=\"line\"> </span><br><span class=\"line\">　　<span class=\"comment\">//b先出作用域，B的引用计数减少为1，不为0，所以堆上的B空间没有被释放</span></span><br><span class=\"line\">　　<span class=\"comment\">//a后出作用域，同理A的引用计数减少为1，不为0，所以堆上A的空间也没有被释放</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为weak_ptr的构造和析构不会引起引用计数的增加或减少，所以可以用weak_ptr解决这个问题（weak_ptr必须与shared_ptr配合使用,不能单独使用）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　weak_ptr&lt;B&gt; m_b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　weak_ptr&lt;A&gt; m_a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; a(<span class=\"keyword\">new</span> A);</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; b(<span class=\"keyword\">new</span> B);</span><br><span class=\"line\">　　a-&gt;m_b = b;</span><br><span class=\"line\">　　b-&gt;m_a = a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"auto-ptr\"><a href=\"#auto-ptr\" class=\"headerlink\" title=\"auto_ptr\"></a>auto_ptr</h3><p>缺陷：（<a href=\"https://www.zhihu.com/question/37351146/answer/83379043\" target=\"_blank\" rel=\"noopener\">参考链接</a>，来源：知乎，作者：Sen Zhang）</p>\n<blockquote>\n<p>auto_ptr采用可以采用copy语义来转移指针资源的所有权的同时将原指针置为NULL，这跟通常理解的copy行为是不一致的，而这样的行为要有些场合下不是我们希望看到的。</p>\n<p>例如参考《Effective STL》第8条，sort的快排实现中有将元素复制到某个局部临时对象中，但对于auto_ptr，却将原元素置为null，这就导致最后的排序结果中可能有大量的null。</p>\n<p>而现在C++11的对move语义的支持，使得这样的资源转移<strong>通常</strong>只会在<strong>必要的场合</strong>发生，例如转移一个临时变量（右值）给某个named variable（左值）</p>\n<p>这也就是用unique_ptr代替auto_ptr的原因，</p>\n<p>本质上来说，就是unique_ptr禁用了copy，而用move替代。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;bar&gt; b0(<span class=\"keyword\">new</span> bar());</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;bar&gt; b1(<span class=\"built_in\">std</span>::move(b0));</span><br></pre></td></tr></table></figure>\n<h2 id=\"智能指针的实现\"><a href=\"#智能指针的实现\" class=\"headerlink\" title=\"智能指针的实现\"></a>智能指针的实现</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmartPointer</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    SmartPointer(T* p=<span class=\"number\">0</span>): _ptr(p), _reference_count(<span class=\"keyword\">new</span> <span class=\"keyword\">size_t</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p)</span><br><span class=\"line\">            *_reference_count = <span class=\"number\">1</span>; </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            *_reference_count = <span class=\"number\">0</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">    SmartPointer(<span class=\"keyword\">const</span> SmartPointer&amp; src) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>!=&amp;src) &#123;</span><br><span class=\"line\">            _ptr = src._ptr;</span><br><span class=\"line\">            _reference_count = src._reference_count;</span><br><span class=\"line\">            (*_reference_count)++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重载赋值操作符</span></span><br><span class=\"line\">    SmartPointer&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> SmartPointer&amp; src) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr==src._ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        releaseCount();</span><br><span class=\"line\">        _ptr = src._ptr;</span><br><span class=\"line\">        _reference_count = src._reference_count;</span><br><span class=\"line\">        (*_reference_count)++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重载操作符</span></span><br><span class=\"line\">    T&amp; <span class=\"keyword\">operator</span>*() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *_ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//throw exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重载操作符</span></span><br><span class=\"line\">    T* <span class=\"keyword\">operator</span>-&gt;() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//throw exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    ~SmartPointer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--(*_reference_count) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _ptr;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _reference_count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T *_ptr;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> *_reference_count;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">releaseCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr) &#123;</span><br><span class=\"line\">            (*_reference_count)--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((*_reference_count)==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _ptr;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _reference_count;</span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp1(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>(<span class=\"string\">'a'</span>));</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp2(cp1);</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp3;</span><br><span class=\"line\">    cp3 = cp2;</span><br><span class=\"line\">    cp3 = cp1;</span><br><span class=\"line\">    cp3 = cp3;</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp4(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>(<span class=\"string\">'b'</span>));</span><br><span class=\"line\">    cp3 = cp4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"深度学习周报week01&week02","date":"2018-03-30T14:16:12.000Z","toc":true,"_content":"\n\n\n# Week1\n\n## 配置Cuda、Cudnn和Tensorflow\n\n要注意**版本对应**\n\n## 学习基础知识\n\n### [神经网络基本原理](http://www.ruanyifeng.com/blog/2017/07/neural-network.html)\n\n#### 感知器\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071202.png)\n一个圆圈表示一个感知器，x1、x2、x3...为输入，output为对应的输出。为了简化问题，output只取0或1.\n\n#### 权重和阈值\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071203.png)\nthreshold为阈值，xi为输入，wi为对应的权重，表示输入的重要性。\n\n#### 矢量化\n\n- 将输入x1,x2,x3,...写为矢量**x**: < x1,x2,x3,... >\n- 将权重w1,w2,w3,...写为矢量**w**: < w1,w2,w3,... >\n- 则 **w·x** = ∑ wx\n- 设 b 等于负的阈值 b = -threshold\n  ![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071206.png)\n\n#### 实际的决策模型\n\n多个感知器组成的多层网络：\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071205.png)\n\n#### 神经网络的运作过程\n\n- 确定输入和输出\n- 找到一种或多种算法，可以从输入得到输出（决定决策模型）\n- 找到一组已知答案的数据集，用来训练模型，估算w和b\n  **估算w和b：试错法**\n  首先获取一组随机的**w**和**x**，将**w**（或**b**）进行微小变动，记作**Δw**（或**Δb**），然后观察输出有什么变化。不断重复这个过程，直至得到对应最精确输出的那组**w**和**b**，就是我们要的值。这个过程称为**模型的训练**。\n- 一旦新的数据产生，输入模型，就可以得到结果，同时对w和b进行校正\n\n#### 输出的连续性\n\n为了保证能观察到**w**和**b**的微小变化对结果造成的影响，必须将\"输出\"改造成一个连续性函数。一般使用**sigmoid**函数。\n\n- 将output记为z：`z = wx + b` \n- 则结果的sigmoid函数为σ(z)：`σ(z) = 1 / (1 + e^(-z))`\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071209.png)\n实际上，Δσ满足下面的公式：\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071210.png)\n即Δσ和Δw和Δb之间是线性关系，变化率是偏导数。这就有利于精确推算出w和b的值了。\n\n### 反向传播（BP）\n\n- 即估算**w**和**b**的**试错法**的具体实现。\n- 反向传播算法主要由两个过程（**激励传播、权重更新**）反复循环迭代，直到结果误差在可容忍的限度结束。\n\n#### 激励传播\n\n每次迭代中的传播环节包含两步：\n\n1. 前向传播阶段——按照当前**w**和**b**计算**output（激励响应）**；\n2. 反向传播阶段——将**output**和目标输出求差，从而获得隐层和输出层的**响应误差**。\n\n#### 权重更新\n\n对于每个权重 **wi **，按照以下步骤进行更新：\n\n1. 将**输入激励**和**响应误差**相乘，从而获得权重的**梯度**；\n2. 将这个梯度乘上一个比例并取反后加到权重上。\n3. 这个比例将会影响到训练过程的速度和效果，因此称为“**训练因子**”。梯度的方向指明了误差扩大的方向，因此在更新权重的时候需要对其取反，从而减小权重引起的误差。\n\n<u>关于算法推导（**梯度下降+链式求导**），网上的博客质量良莠不齐，因此打算等买的书到了之后再研究一下，这里就不再列出。</u>\n\n### 卷积神经网络（CNN）\n\n- **卷积神经网络**由三部分构成：\n  - 第一部分是输入层。\n  - 第二部分由n个卷积层和池化层的组合组成。\n  - 第三部分由一个全连结的多层感知机分类器构成。\n- **卷积神经网络**与**普通神经网络**的区别在于，卷积神经网络包含了一个特征抽取器（即第二部分）。\n- **卷积神经网络**的卷积层中，一个神经元只和部分邻层神经元连接。\n- 在每一个**卷积层**中，通常包含若干个**特征平面(feature map)，**每个特征平面由一些**矩形排列**的的神经元组成，同一特征平面的神经元共享权值，这里共享的权值就是**卷积核**。\n- **卷积核**一般以随机小数矩阵的形式初始化，在网络的训练过程中卷积核将通过学习得到合理的权值（**反向传播**）。共享权值（卷积核）带来的直接好处是减少网络各层之间的连接（**减少参数**），同时又降低了**过拟合**（参数过多导致）的风险。\n- **子采样**也叫做池化（pooling），也可以认为是下采样，通常有均值子采样（mean pooling）和最大值子采样（max pooling）两种形式。\n\n<u>与**普通的神经网络**相比，包含**卷积和子采样**的**卷积神经网络**大大**简化了模型复杂度，减少了模型的参数**。</u>\n\n#### **局部连接**\n\n假设一张图大小为n1\\*n2，一个卷积核的大小为m1\\*m2，对于卷积后生成的每一个数据xi，它都是原图中对应位置的m1\\*m2矩阵和这个卷积核对应点相乘求和得到的。\n\n也就是说xi只和原图中对应的m1\\*m2的那个矩阵中的元素连接，而不是和整张图的n1\\*n2个元素连接。\n\n因此局部连接使得参数数量变为全连接的（m1\\*m2）/（n1\\*n2）。\n\n#### 权值共享\n\n即对于一个卷积核遍历原数据矩阵，生成的一个新的数据矩阵的每一个元素来说，它们的权值都为这个卷积核。\n\n这样就导致了权值数几乎变为了不权值共享时的数据量分之一。\n\n#### 多卷积核\n\n用一个卷积核对整张图卷积可以看作是提取了原图的一个特征。\n\n使用一个卷积核只提取了一个特征，因此为了充分的提取特征，要使用多个卷积核，得到多个特征平面。\n\n#### 下采样（池化）\n\n当输入数据过多时，参数的量就不可避免的变得很多，为了防止参数过多导致过拟合，需要下采样。\n\n## 常见网络结构了解\n\n### LeNet\n\n\n![LeNet](https://upload-images.jianshu.io/upload_images/3352522-2ef0a2bbb096ced0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n1. **Input Layer**：1\\*32\\*32图像\n2. **Conv1 Layer**：包含6个卷积核，kernal size：5\\*5，parameters:（5\\*5+1）\\*6=156个\n3. **Subsampling Layer**：average pooling，size：2\\*2, Activation Function：sigmoid\n4. **Conv3 Layer**：包含16个卷积核，kernal size：5\\*5\n5. **Subsampling Layer**：average pooling，size：2\\*2\n6. **Conv5 Layer**：包含120个卷积核，kernal size：5\\*5\n7. **Fully Connected Layer**：Activation Function：sigmoid\n8. **Output Layer**：Gaussian connection\n\n### AlexNet\n\n#### AlexNet结构图\n\n![ImageNet](https://www.52ml.net/wp-content/uploads/2016/08/alexnet.png)\n\n#### AlexNet结构精简版\n\n![ImageNet](https://www.52ml.net/wp-content/uploads/2016/08/alexnet2.png)\n\n对比一下即可理解精简版中**符号的含义**（以第一层为例）：\n\n卷积核大小为11\\*11，共有96个卷积核，步长为4，下采样矩阵大小为2\\*2。\n\nfc：full connect，全连接。\n\n激活函数变为ReLU：斜坡函数 f(x) = max(0, x)及其变种。\n\n### VGG\n\n#### VGG结构图\n\n![VGG](https://www.52ml.net/wp-content/uploads/2016/08/vgg.png)\n\n#### VGG-19网络结构精简版\n\n![VGG-19](https://www.52ml.net/wp-content/uploads/2016/08/vgg19.png)\n\n### GoogLeNet\n\n[讲解链接](https://blog.csdn.net/shuzfan/article/details/50738394)\n\n主要特征是**重新启用全连接**以及提出了**网中网**的结构。\n\n网上的博客写的都比较粗略，有时间看一下相关资料或者论文。\n\n### ResNet\n\n#### 残差网络模型\n\n主要的创新为残差网络，本质上是要解决层次比较深时无法训练的问题：\n\n![residual](https://www.52ml.net/wp-content/uploads/2016/08/residual.png)\n\n#### ResNet网络结构\n\n![resnet](https://www.52ml.net/wp-content/uploads/2016/08/resnet.png)\n\n### DenseNet\n\n#### DenseNet网络结构\n\n![DenseNet](https://tse4.mm.bing.net/th?id=OIP.m8LpfrnNS-bVUC8gil9eVwHaBD&pid=Api)\n\n#### Dense Block结构\n\n![Dense Block](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1522436431455&di=3f3b62ddecf7accdb6b2b756f942cf89&imgtype=0&src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201802%2F20180217134048130090.png)\n\n还是只看懂了大概，需要后续学习。\n\n## 利用LeNet5网络模型实现MNIST手写数字识别\n\n主要的关键点是熟悉TensorFlow相关变量和含义\n\n完成TensorFlow官方MINIST识别教程。\n\n使用[国内网站](http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_pros.html)来更方便的浏览。\n\n------\n\n# Week2\n\n## 利用VGG16实现CIFAR-10动物分类\n\n[教程页链接](http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/deep_cnn.html)\n\n## 学习使用[TensorBoard](https://github.com/jikexueyuanwiki/tensorflow-zh/blob/master/SOURCE/how_tos/summaries_and_tensorboard/index.md)\n\n## 了解Batch Normalization(BN)批标准化\n\n文献链接：[Batch Normalization: Accelerating Deep Network Training by Reducing  Internal Covariate Shift](https://arxiv.org/pdf/1502.03167.pdf)\n\n\n\n> 在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。不过文献归一化层，可不像我们想象的那么简单，它是一个可学习、有参数的网络层。\n\n","source":"_posts/深度学习周报week01-week02.md","raw":"---\ntitle: 深度学习周报week01&week02\ndate: 2018-03-30 22:16:12\ncategories:\n- deep learning\ntags:\n- TensorFlow\ntoc: true\n---\n\n\n\n# Week1\n\n## 配置Cuda、Cudnn和Tensorflow\n\n要注意**版本对应**\n\n## 学习基础知识\n\n### [神经网络基本原理](http://www.ruanyifeng.com/blog/2017/07/neural-network.html)\n\n#### 感知器\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071202.png)\n一个圆圈表示一个感知器，x1、x2、x3...为输入，output为对应的输出。为了简化问题，output只取0或1.\n\n#### 权重和阈值\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071203.png)\nthreshold为阈值，xi为输入，wi为对应的权重，表示输入的重要性。\n\n#### 矢量化\n\n- 将输入x1,x2,x3,...写为矢量**x**: < x1,x2,x3,... >\n- 将权重w1,w2,w3,...写为矢量**w**: < w1,w2,w3,... >\n- 则 **w·x** = ∑ wx\n- 设 b 等于负的阈值 b = -threshold\n  ![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071206.png)\n\n#### 实际的决策模型\n\n多个感知器组成的多层网络：\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071205.png)\n\n#### 神经网络的运作过程\n\n- 确定输入和输出\n- 找到一种或多种算法，可以从输入得到输出（决定决策模型）\n- 找到一组已知答案的数据集，用来训练模型，估算w和b\n  **估算w和b：试错法**\n  首先获取一组随机的**w**和**x**，将**w**（或**b**）进行微小变动，记作**Δw**（或**Δb**），然后观察输出有什么变化。不断重复这个过程，直至得到对应最精确输出的那组**w**和**b**，就是我们要的值。这个过程称为**模型的训练**。\n- 一旦新的数据产生，输入模型，就可以得到结果，同时对w和b进行校正\n\n#### 输出的连续性\n\n为了保证能观察到**w**和**b**的微小变化对结果造成的影响，必须将\"输出\"改造成一个连续性函数。一般使用**sigmoid**函数。\n\n- 将output记为z：`z = wx + b` \n- 则结果的sigmoid函数为σ(z)：`σ(z) = 1 / (1 + e^(-z))`\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071209.png)\n实际上，Δσ满足下面的公式：\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071210.png)\n即Δσ和Δw和Δb之间是线性关系，变化率是偏导数。这就有利于精确推算出w和b的值了。\n\n### 反向传播（BP）\n\n- 即估算**w**和**b**的**试错法**的具体实现。\n- 反向传播算法主要由两个过程（**激励传播、权重更新**）反复循环迭代，直到结果误差在可容忍的限度结束。\n\n#### 激励传播\n\n每次迭代中的传播环节包含两步：\n\n1. 前向传播阶段——按照当前**w**和**b**计算**output（激励响应）**；\n2. 反向传播阶段——将**output**和目标输出求差，从而获得隐层和输出层的**响应误差**。\n\n#### 权重更新\n\n对于每个权重 **wi **，按照以下步骤进行更新：\n\n1. 将**输入激励**和**响应误差**相乘，从而获得权重的**梯度**；\n2. 将这个梯度乘上一个比例并取反后加到权重上。\n3. 这个比例将会影响到训练过程的速度和效果，因此称为“**训练因子**”。梯度的方向指明了误差扩大的方向，因此在更新权重的时候需要对其取反，从而减小权重引起的误差。\n\n<u>关于算法推导（**梯度下降+链式求导**），网上的博客质量良莠不齐，因此打算等买的书到了之后再研究一下，这里就不再列出。</u>\n\n### 卷积神经网络（CNN）\n\n- **卷积神经网络**由三部分构成：\n  - 第一部分是输入层。\n  - 第二部分由n个卷积层和池化层的组合组成。\n  - 第三部分由一个全连结的多层感知机分类器构成。\n- **卷积神经网络**与**普通神经网络**的区别在于，卷积神经网络包含了一个特征抽取器（即第二部分）。\n- **卷积神经网络**的卷积层中，一个神经元只和部分邻层神经元连接。\n- 在每一个**卷积层**中，通常包含若干个**特征平面(feature map)，**每个特征平面由一些**矩形排列**的的神经元组成，同一特征平面的神经元共享权值，这里共享的权值就是**卷积核**。\n- **卷积核**一般以随机小数矩阵的形式初始化，在网络的训练过程中卷积核将通过学习得到合理的权值（**反向传播**）。共享权值（卷积核）带来的直接好处是减少网络各层之间的连接（**减少参数**），同时又降低了**过拟合**（参数过多导致）的风险。\n- **子采样**也叫做池化（pooling），也可以认为是下采样，通常有均值子采样（mean pooling）和最大值子采样（max pooling）两种形式。\n\n<u>与**普通的神经网络**相比，包含**卷积和子采样**的**卷积神经网络**大大**简化了模型复杂度，减少了模型的参数**。</u>\n\n#### **局部连接**\n\n假设一张图大小为n1\\*n2，一个卷积核的大小为m1\\*m2，对于卷积后生成的每一个数据xi，它都是原图中对应位置的m1\\*m2矩阵和这个卷积核对应点相乘求和得到的。\n\n也就是说xi只和原图中对应的m1\\*m2的那个矩阵中的元素连接，而不是和整张图的n1\\*n2个元素连接。\n\n因此局部连接使得参数数量变为全连接的（m1\\*m2）/（n1\\*n2）。\n\n#### 权值共享\n\n即对于一个卷积核遍历原数据矩阵，生成的一个新的数据矩阵的每一个元素来说，它们的权值都为这个卷积核。\n\n这样就导致了权值数几乎变为了不权值共享时的数据量分之一。\n\n#### 多卷积核\n\n用一个卷积核对整张图卷积可以看作是提取了原图的一个特征。\n\n使用一个卷积核只提取了一个特征，因此为了充分的提取特征，要使用多个卷积核，得到多个特征平面。\n\n#### 下采样（池化）\n\n当输入数据过多时，参数的量就不可避免的变得很多，为了防止参数过多导致过拟合，需要下采样。\n\n## 常见网络结构了解\n\n### LeNet\n\n\n![LeNet](https://upload-images.jianshu.io/upload_images/3352522-2ef0a2bbb096ced0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n1. **Input Layer**：1\\*32\\*32图像\n2. **Conv1 Layer**：包含6个卷积核，kernal size：5\\*5，parameters:（5\\*5+1）\\*6=156个\n3. **Subsampling Layer**：average pooling，size：2\\*2, Activation Function：sigmoid\n4. **Conv3 Layer**：包含16个卷积核，kernal size：5\\*5\n5. **Subsampling Layer**：average pooling，size：2\\*2\n6. **Conv5 Layer**：包含120个卷积核，kernal size：5\\*5\n7. **Fully Connected Layer**：Activation Function：sigmoid\n8. **Output Layer**：Gaussian connection\n\n### AlexNet\n\n#### AlexNet结构图\n\n![ImageNet](https://www.52ml.net/wp-content/uploads/2016/08/alexnet.png)\n\n#### AlexNet结构精简版\n\n![ImageNet](https://www.52ml.net/wp-content/uploads/2016/08/alexnet2.png)\n\n对比一下即可理解精简版中**符号的含义**（以第一层为例）：\n\n卷积核大小为11\\*11，共有96个卷积核，步长为4，下采样矩阵大小为2\\*2。\n\nfc：full connect，全连接。\n\n激活函数变为ReLU：斜坡函数 f(x) = max(0, x)及其变种。\n\n### VGG\n\n#### VGG结构图\n\n![VGG](https://www.52ml.net/wp-content/uploads/2016/08/vgg.png)\n\n#### VGG-19网络结构精简版\n\n![VGG-19](https://www.52ml.net/wp-content/uploads/2016/08/vgg19.png)\n\n### GoogLeNet\n\n[讲解链接](https://blog.csdn.net/shuzfan/article/details/50738394)\n\n主要特征是**重新启用全连接**以及提出了**网中网**的结构。\n\n网上的博客写的都比较粗略，有时间看一下相关资料或者论文。\n\n### ResNet\n\n#### 残差网络模型\n\n主要的创新为残差网络，本质上是要解决层次比较深时无法训练的问题：\n\n![residual](https://www.52ml.net/wp-content/uploads/2016/08/residual.png)\n\n#### ResNet网络结构\n\n![resnet](https://www.52ml.net/wp-content/uploads/2016/08/resnet.png)\n\n### DenseNet\n\n#### DenseNet网络结构\n\n![DenseNet](https://tse4.mm.bing.net/th?id=OIP.m8LpfrnNS-bVUC8gil9eVwHaBD&pid=Api)\n\n#### Dense Block结构\n\n![Dense Block](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1522436431455&di=3f3b62ddecf7accdb6b2b756f942cf89&imgtype=0&src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201802%2F20180217134048130090.png)\n\n还是只看懂了大概，需要后续学习。\n\n## 利用LeNet5网络模型实现MNIST手写数字识别\n\n主要的关键点是熟悉TensorFlow相关变量和含义\n\n完成TensorFlow官方MINIST识别教程。\n\n使用[国内网站](http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_pros.html)来更方便的浏览。\n\n------\n\n# Week2\n\n## 利用VGG16实现CIFAR-10动物分类\n\n[教程页链接](http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/deep_cnn.html)\n\n## 学习使用[TensorBoard](https://github.com/jikexueyuanwiki/tensorflow-zh/blob/master/SOURCE/how_tos/summaries_and_tensorboard/index.md)\n\n## 了解Batch Normalization(BN)批标准化\n\n文献链接：[Batch Normalization: Accelerating Deep Network Training by Reducing  Internal Covariate Shift](https://arxiv.org/pdf/1502.03167.pdf)\n\n\n\n> 在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。不过文献归一化层，可不像我们想象的那么简单，它是一个可学习、有参数的网络层。\n\n","slug":"深度学习周报week01-week02","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru02001m7bag0qqnat69","content":"<h1 id=\"Week1\"><a href=\"#Week1\" class=\"headerlink\" title=\"Week1\"></a>Week1</h1><h2 id=\"配置Cuda、Cudnn和Tensorflow\"><a href=\"#配置Cuda、Cudnn和Tensorflow\" class=\"headerlink\" title=\"配置Cuda、Cudnn和Tensorflow\"></a>配置Cuda、Cudnn和Tensorflow</h2><p>要注意<strong>版本对应</strong></p>\n<h2 id=\"学习基础知识\"><a href=\"#学习基础知识\" class=\"headerlink\" title=\"学习基础知识\"></a>学习基础知识</h2><h3 id=\"神经网络基本原理\"><a href=\"#神经网络基本原理\" class=\"headerlink\" title=\"神经网络基本原理\"></a><a href=\"http://www.ruanyifeng.com/blog/2017/07/neural-network.html\" target=\"_blank\" rel=\"noopener\">神经网络基本原理</a></h3><h4 id=\"感知器\"><a href=\"#感知器\" class=\"headerlink\" title=\"感知器\"></a>感知器</h4><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071202.png\" alt=\"\"><br>一个圆圈表示一个感知器，x1、x2、x3…为输入，output为对应的输出。为了简化问题，output只取0或1.</p>\n<h4 id=\"权重和阈值\"><a href=\"#权重和阈值\" class=\"headerlink\" title=\"权重和阈值\"></a>权重和阈值</h4><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071203.png\" alt=\"\"><br>threshold为阈值，xi为输入，wi为对应的权重，表示输入的重要性。</p>\n<h4 id=\"矢量化\"><a href=\"#矢量化\" class=\"headerlink\" title=\"矢量化\"></a>矢量化</h4><ul>\n<li>将输入x1,x2,x3,…写为矢量<strong>x</strong>: &lt; x1,x2,x3,… &gt;</li>\n<li>将权重w1,w2,w3,…写为矢量<strong>w</strong>: &lt; w1,w2,w3,… &gt;</li>\n<li>则 <strong>w·x</strong> = ∑ wx</li>\n<li>设 b 等于负的阈值 b = -threshold<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071206.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"实际的决策模型\"><a href=\"#实际的决策模型\" class=\"headerlink\" title=\"实际的决策模型\"></a>实际的决策模型</h4><p>多个感知器组成的多层网络：<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071205.png\" alt=\"\"></p>\n<h4 id=\"神经网络的运作过程\"><a href=\"#神经网络的运作过程\" class=\"headerlink\" title=\"神经网络的运作过程\"></a>神经网络的运作过程</h4><ul>\n<li>确定输入和输出</li>\n<li>找到一种或多种算法，可以从输入得到输出（决定决策模型）</li>\n<li>找到一组已知答案的数据集，用来训练模型，估算w和b<br><strong>估算w和b：试错法</strong><br>首先获取一组随机的<strong>w</strong>和<strong>x</strong>，将<strong>w</strong>（或<strong>b</strong>）进行微小变动，记作<strong>Δw</strong>（或<strong>Δb</strong>），然后观察输出有什么变化。不断重复这个过程，直至得到对应最精确输出的那组<strong>w</strong>和<strong>b</strong>，就是我们要的值。这个过程称为<strong>模型的训练</strong>。</li>\n<li>一旦新的数据产生，输入模型，就可以得到结果，同时对w和b进行校正</li>\n</ul>\n<h4 id=\"输出的连续性\"><a href=\"#输出的连续性\" class=\"headerlink\" title=\"输出的连续性\"></a>输出的连续性</h4><p>为了保证能观察到<strong>w</strong>和<strong>b</strong>的微小变化对结果造成的影响，必须将”输出”改造成一个连续性函数。一般使用<strong>sigmoid</strong>函数。</p>\n<ul>\n<li>将output记为z：<code>z = wx + b</code> </li>\n<li>则结果的sigmoid函数为σ(z)：<code>σ(z) = 1 / (1 + e^(-z))</code></li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071209.png\" alt=\"\"><br>实际上，Δσ满足下面的公式：<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071210.png\" alt=\"\"><br>即Δσ和Δw和Δb之间是线性关系，变化率是偏导数。这就有利于精确推算出w和b的值了。</p>\n<h3 id=\"反向传播（BP）\"><a href=\"#反向传播（BP）\" class=\"headerlink\" title=\"反向传播（BP）\"></a>反向传播（BP）</h3><ul>\n<li>即估算<strong>w</strong>和<strong>b</strong>的<strong>试错法</strong>的具体实现。</li>\n<li>反向传播算法主要由两个过程（<strong>激励传播、权重更新</strong>）反复循环迭代，直到结果误差在可容忍的限度结束。</li>\n</ul>\n<h4 id=\"激励传播\"><a href=\"#激励传播\" class=\"headerlink\" title=\"激励传播\"></a>激励传播</h4><p>每次迭代中的传播环节包含两步：</p>\n<ol>\n<li>前向传播阶段——按照当前<strong>w</strong>和<strong>b</strong>计算<strong>output（激励响应）</strong>；</li>\n<li>反向传播阶段——将<strong>output</strong>和目标输出求差，从而获得隐层和输出层的<strong>响应误差</strong>。</li>\n</ol>\n<h4 id=\"权重更新\"><a href=\"#权重更新\" class=\"headerlink\" title=\"权重更新\"></a>权重更新</h4><p>对于每个权重 <strong>wi </strong>，按照以下步骤进行更新：</p>\n<ol>\n<li>将<strong>输入激励</strong>和<strong>响应误差</strong>相乘，从而获得权重的<strong>梯度</strong>；</li>\n<li>将这个梯度乘上一个比例并取反后加到权重上。</li>\n<li>这个比例将会影响到训练过程的速度和效果，因此称为“<strong>训练因子</strong>”。梯度的方向指明了误差扩大的方向，因此在更新权重的时候需要对其取反，从而减小权重引起的误差。</li>\n</ol>\n<p><u>关于算法推导（<strong>梯度下降+链式求导</strong>），网上的博客质量良莠不齐，因此打算等买的书到了之后再研究一下，这里就不再列出。</u></p>\n<h3 id=\"卷积神经网络（CNN）\"><a href=\"#卷积神经网络（CNN）\" class=\"headerlink\" title=\"卷积神经网络（CNN）\"></a>卷积神经网络（CNN）</h3><ul>\n<li><strong>卷积神经网络</strong>由三部分构成：<ul>\n<li>第一部分是输入层。</li>\n<li>第二部分由n个卷积层和池化层的组合组成。</li>\n<li>第三部分由一个全连结的多层感知机分类器构成。</li>\n</ul>\n</li>\n<li><strong>卷积神经网络</strong>与<strong>普通神经网络</strong>的区别在于，卷积神经网络包含了一个特征抽取器（即第二部分）。</li>\n<li><strong>卷积神经网络</strong>的卷积层中，一个神经元只和部分邻层神经元连接。</li>\n<li>在每一个<strong>卷积层</strong>中，通常包含若干个<strong>特征平面(feature map)，</strong>每个特征平面由一些<strong>矩形排列</strong>的的神经元组成，同一特征平面的神经元共享权值，这里共享的权值就是<strong>卷积核</strong>。</li>\n<li><strong>卷积核</strong>一般以随机小数矩阵的形式初始化，在网络的训练过程中卷积核将通过学习得到合理的权值（<strong>反向传播</strong>）。共享权值（卷积核）带来的直接好处是减少网络各层之间的连接（<strong>减少参数</strong>），同时又降低了<strong>过拟合</strong>（参数过多导致）的风险。</li>\n<li><strong>子采样</strong>也叫做池化（pooling），也可以认为是下采样，通常有均值子采样（mean pooling）和最大值子采样（max pooling）两种形式。</li>\n</ul>\n<p><u>与<strong>普通的神经网络</strong>相比，包含<strong>卷积和子采样</strong>的<strong>卷积神经网络</strong>大大<strong>简化了模型复杂度，减少了模型的参数</strong>。</u></p>\n<h4 id=\"局部连接\"><a href=\"#局部连接\" class=\"headerlink\" title=\"局部连接\"></a><strong>局部连接</strong></h4><p>假设一张图大小为n1*n2，一个卷积核的大小为m1*m2，对于卷积后生成的每一个数据xi，它都是原图中对应位置的m1*m2矩阵和这个卷积核对应点相乘求和得到的。</p>\n<p>也就是说xi只和原图中对应的m1*m2的那个矩阵中的元素连接，而不是和整张图的n1*n2个元素连接。</p>\n<p>因此局部连接使得参数数量变为全连接的（m1*m2）/（n1*n2）。</p>\n<h4 id=\"权值共享\"><a href=\"#权值共享\" class=\"headerlink\" title=\"权值共享\"></a>权值共享</h4><p>即对于一个卷积核遍历原数据矩阵，生成的一个新的数据矩阵的每一个元素来说，它们的权值都为这个卷积核。</p>\n<p>这样就导致了权值数几乎变为了不权值共享时的数据量分之一。</p>\n<h4 id=\"多卷积核\"><a href=\"#多卷积核\" class=\"headerlink\" title=\"多卷积核\"></a>多卷积核</h4><p>用一个卷积核对整张图卷积可以看作是提取了原图的一个特征。</p>\n<p>使用一个卷积核只提取了一个特征，因此为了充分的提取特征，要使用多个卷积核，得到多个特征平面。</p>\n<h4 id=\"下采样（池化）\"><a href=\"#下采样（池化）\" class=\"headerlink\" title=\"下采样（池化）\"></a>下采样（池化）</h4><p>当输入数据过多时，参数的量就不可避免的变得很多，为了防止参数过多导致过拟合，需要下采样。</p>\n<h2 id=\"常见网络结构了解\"><a href=\"#常见网络结构了解\" class=\"headerlink\" title=\"常见网络结构了解\"></a>常见网络结构了解</h2><h3 id=\"LeNet\"><a href=\"#LeNet\" class=\"headerlink\" title=\"LeNet\"></a>LeNet</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/3352522-2ef0a2bbb096ced0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"LeNet\"></p>\n<ol>\n<li><strong>Input Layer</strong>：1*32*32图像</li>\n<li><strong>Conv1 Layer</strong>：包含6个卷积核，kernal size：5*5，parameters:（5*5+1）*6=156个</li>\n<li><strong>Subsampling Layer</strong>：average pooling，size：2*2, Activation Function：sigmoid</li>\n<li><strong>Conv3 Layer</strong>：包含16个卷积核，kernal size：5*5</li>\n<li><strong>Subsampling Layer</strong>：average pooling，size：2*2</li>\n<li><strong>Conv5 Layer</strong>：包含120个卷积核，kernal size：5*5</li>\n<li><strong>Fully Connected Layer</strong>：Activation Function：sigmoid</li>\n<li><strong>Output Layer</strong>：Gaussian connection</li>\n</ol>\n<h3 id=\"AlexNet\"><a href=\"#AlexNet\" class=\"headerlink\" title=\"AlexNet\"></a>AlexNet</h3><h4 id=\"AlexNet结构图\"><a href=\"#AlexNet结构图\" class=\"headerlink\" title=\"AlexNet结构图\"></a>AlexNet结构图</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/alexnet.png\" alt=\"ImageNet\"></p>\n<h4 id=\"AlexNet结构精简版\"><a href=\"#AlexNet结构精简版\" class=\"headerlink\" title=\"AlexNet结构精简版\"></a>AlexNet结构精简版</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/alexnet2.png\" alt=\"ImageNet\"></p>\n<p>对比一下即可理解精简版中<strong>符号的含义</strong>（以第一层为例）：</p>\n<p>卷积核大小为11*11，共有96个卷积核，步长为4，下采样矩阵大小为2*2。</p>\n<p>fc：full connect，全连接。</p>\n<p>激活函数变为ReLU：斜坡函数 f(x) = max(0, x)及其变种。</p>\n<h3 id=\"VGG\"><a href=\"#VGG\" class=\"headerlink\" title=\"VGG\"></a>VGG</h3><h4 id=\"VGG结构图\"><a href=\"#VGG结构图\" class=\"headerlink\" title=\"VGG结构图\"></a>VGG结构图</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/vgg.png\" alt=\"VGG\"></p>\n<h4 id=\"VGG-19网络结构精简版\"><a href=\"#VGG-19网络结构精简版\" class=\"headerlink\" title=\"VGG-19网络结构精简版\"></a>VGG-19网络结构精简版</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/vgg19.png\" alt=\"VGG-19\"></p>\n<h3 id=\"GoogLeNet\"><a href=\"#GoogLeNet\" class=\"headerlink\" title=\"GoogLeNet\"></a>GoogLeNet</h3><p><a href=\"https://blog.csdn.net/shuzfan/article/details/50738394\" target=\"_blank\" rel=\"noopener\">讲解链接</a></p>\n<p>主要特征是<strong>重新启用全连接</strong>以及提出了<strong>网中网</strong>的结构。</p>\n<p>网上的博客写的都比较粗略，有时间看一下相关资料或者论文。</p>\n<h3 id=\"ResNet\"><a href=\"#ResNet\" class=\"headerlink\" title=\"ResNet\"></a>ResNet</h3><h4 id=\"残差网络模型\"><a href=\"#残差网络模型\" class=\"headerlink\" title=\"残差网络模型\"></a>残差网络模型</h4><p>主要的创新为残差网络，本质上是要解决层次比较深时无法训练的问题：</p>\n<p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/residual.png\" alt=\"residual\"></p>\n<h4 id=\"ResNet网络结构\"><a href=\"#ResNet网络结构\" class=\"headerlink\" title=\"ResNet网络结构\"></a>ResNet网络结构</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/resnet.png\" alt=\"resnet\"></p>\n<h3 id=\"DenseNet\"><a href=\"#DenseNet\" class=\"headerlink\" title=\"DenseNet\"></a>DenseNet</h3><h4 id=\"DenseNet网络结构\"><a href=\"#DenseNet网络结构\" class=\"headerlink\" title=\"DenseNet网络结构\"></a>DenseNet网络结构</h4><p><img src=\"https://tse4.mm.bing.net/th?id=OIP.m8LpfrnNS-bVUC8gil9eVwHaBD&amp;pid=Api\" alt=\"DenseNet\"></p>\n<h4 id=\"Dense-Block结构\"><a href=\"#Dense-Block结构\" class=\"headerlink\" title=\"Dense Block结构\"></a>Dense Block结构</h4><p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522436431455&amp;di=3f3b62ddecf7accdb6b2b756f942cf89&amp;imgtype=0&amp;src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201802%2F20180217134048130090.png\" alt=\"Dense Block\"></p>\n<p>还是只看懂了大概，需要后续学习。</p>\n<h2 id=\"利用LeNet5网络模型实现MNIST手写数字识别\"><a href=\"#利用LeNet5网络模型实现MNIST手写数字识别\" class=\"headerlink\" title=\"利用LeNet5网络模型实现MNIST手写数字识别\"></a>利用LeNet5网络模型实现MNIST手写数字识别</h2><p>主要的关键点是熟悉TensorFlow相关变量和含义</p>\n<p>完成TensorFlow官方MINIST识别教程。</p>\n<p>使用<a href=\"http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_pros.html\" target=\"_blank\" rel=\"noopener\">国内网站</a>来更方便的浏览。</p>\n<hr>\n<h1 id=\"Week2\"><a href=\"#Week2\" class=\"headerlink\" title=\"Week2\"></a>Week2</h1><h2 id=\"利用VGG16实现CIFAR-10动物分类\"><a href=\"#利用VGG16实现CIFAR-10动物分类\" class=\"headerlink\" title=\"利用VGG16实现CIFAR-10动物分类\"></a>利用VGG16实现CIFAR-10动物分类</h2><p><a href=\"http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/deep_cnn.html\" target=\"_blank\" rel=\"noopener\">教程页链接</a></p>\n<h2 id=\"学习使用TensorBoard\"><a href=\"#学习使用TensorBoard\" class=\"headerlink\" title=\"学习使用TensorBoard\"></a>学习使用<a href=\"https://github.com/jikexueyuanwiki/tensorflow-zh/blob/master/SOURCE/how_tos/summaries_and_tensorboard/index.md\" target=\"_blank\" rel=\"noopener\">TensorBoard</a></h2><h2 id=\"了解Batch-Normalization-BN-批标准化\"><a href=\"#了解Batch-Normalization-BN-批标准化\" class=\"headerlink\" title=\"了解Batch Normalization(BN)批标准化\"></a>了解Batch Normalization(BN)批标准化</h2><p>文献链接：<a href=\"https://arxiv.org/pdf/1502.03167.pdf\" target=\"_blank\" rel=\"noopener\">Batch Normalization: Accelerating Deep Network Training by Reducing  Internal Covariate Shift</a></p>\n<blockquote>\n<p>在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。不过文献归一化层，可不像我们想象的那么简单，它是一个可学习、有参数的网络层。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Week1\"><a href=\"#Week1\" class=\"headerlink\" title=\"Week1\"></a>Week1</h1><h2 id=\"配置Cuda、Cudnn和Tensorflow\"><a href=\"#配置Cuda、Cudnn和Tensorflow\" class=\"headerlink\" title=\"配置Cuda、Cudnn和Tensorflow\"></a>配置Cuda、Cudnn和Tensorflow</h2><p>要注意<strong>版本对应</strong></p>\n<h2 id=\"学习基础知识\"><a href=\"#学习基础知识\" class=\"headerlink\" title=\"学习基础知识\"></a>学习基础知识</h2><h3 id=\"神经网络基本原理\"><a href=\"#神经网络基本原理\" class=\"headerlink\" title=\"神经网络基本原理\"></a><a href=\"http://www.ruanyifeng.com/blog/2017/07/neural-network.html\" target=\"_blank\" rel=\"noopener\">神经网络基本原理</a></h3><h4 id=\"感知器\"><a href=\"#感知器\" class=\"headerlink\" title=\"感知器\"></a>感知器</h4><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071202.png\" alt=\"\"><br>一个圆圈表示一个感知器，x1、x2、x3…为输入，output为对应的输出。为了简化问题，output只取0或1.</p>\n<h4 id=\"权重和阈值\"><a href=\"#权重和阈值\" class=\"headerlink\" title=\"权重和阈值\"></a>权重和阈值</h4><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071203.png\" alt=\"\"><br>threshold为阈值，xi为输入，wi为对应的权重，表示输入的重要性。</p>\n<h4 id=\"矢量化\"><a href=\"#矢量化\" class=\"headerlink\" title=\"矢量化\"></a>矢量化</h4><ul>\n<li>将输入x1,x2,x3,…写为矢量<strong>x</strong>: &lt; x1,x2,x3,… &gt;</li>\n<li>将权重w1,w2,w3,…写为矢量<strong>w</strong>: &lt; w1,w2,w3,… &gt;</li>\n<li>则 <strong>w·x</strong> = ∑ wx</li>\n<li>设 b 等于负的阈值 b = -threshold<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071206.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"实际的决策模型\"><a href=\"#实际的决策模型\" class=\"headerlink\" title=\"实际的决策模型\"></a>实际的决策模型</h4><p>多个感知器组成的多层网络：<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071205.png\" alt=\"\"></p>\n<h4 id=\"神经网络的运作过程\"><a href=\"#神经网络的运作过程\" class=\"headerlink\" title=\"神经网络的运作过程\"></a>神经网络的运作过程</h4><ul>\n<li>确定输入和输出</li>\n<li>找到一种或多种算法，可以从输入得到输出（决定决策模型）</li>\n<li>找到一组已知答案的数据集，用来训练模型，估算w和b<br><strong>估算w和b：试错法</strong><br>首先获取一组随机的<strong>w</strong>和<strong>x</strong>，将<strong>w</strong>（或<strong>b</strong>）进行微小变动，记作<strong>Δw</strong>（或<strong>Δb</strong>），然后观察输出有什么变化。不断重复这个过程，直至得到对应最精确输出的那组<strong>w</strong>和<strong>b</strong>，就是我们要的值。这个过程称为<strong>模型的训练</strong>。</li>\n<li>一旦新的数据产生，输入模型，就可以得到结果，同时对w和b进行校正</li>\n</ul>\n<h4 id=\"输出的连续性\"><a href=\"#输出的连续性\" class=\"headerlink\" title=\"输出的连续性\"></a>输出的连续性</h4><p>为了保证能观察到<strong>w</strong>和<strong>b</strong>的微小变化对结果造成的影响，必须将”输出”改造成一个连续性函数。一般使用<strong>sigmoid</strong>函数。</p>\n<ul>\n<li>将output记为z：<code>z = wx + b</code> </li>\n<li>则结果的sigmoid函数为σ(z)：<code>σ(z) = 1 / (1 + e^(-z))</code></li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071209.png\" alt=\"\"><br>实际上，Δσ满足下面的公式：<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071210.png\" alt=\"\"><br>即Δσ和Δw和Δb之间是线性关系，变化率是偏导数。这就有利于精确推算出w和b的值了。</p>\n<h3 id=\"反向传播（BP）\"><a href=\"#反向传播（BP）\" class=\"headerlink\" title=\"反向传播（BP）\"></a>反向传播（BP）</h3><ul>\n<li>即估算<strong>w</strong>和<strong>b</strong>的<strong>试错法</strong>的具体实现。</li>\n<li>反向传播算法主要由两个过程（<strong>激励传播、权重更新</strong>）反复循环迭代，直到结果误差在可容忍的限度结束。</li>\n</ul>\n<h4 id=\"激励传播\"><a href=\"#激励传播\" class=\"headerlink\" title=\"激励传播\"></a>激励传播</h4><p>每次迭代中的传播环节包含两步：</p>\n<ol>\n<li>前向传播阶段——按照当前<strong>w</strong>和<strong>b</strong>计算<strong>output（激励响应）</strong>；</li>\n<li>反向传播阶段——将<strong>output</strong>和目标输出求差，从而获得隐层和输出层的<strong>响应误差</strong>。</li>\n</ol>\n<h4 id=\"权重更新\"><a href=\"#权重更新\" class=\"headerlink\" title=\"权重更新\"></a>权重更新</h4><p>对于每个权重 <strong>wi </strong>，按照以下步骤进行更新：</p>\n<ol>\n<li>将<strong>输入激励</strong>和<strong>响应误差</strong>相乘，从而获得权重的<strong>梯度</strong>；</li>\n<li>将这个梯度乘上一个比例并取反后加到权重上。</li>\n<li>这个比例将会影响到训练过程的速度和效果，因此称为“<strong>训练因子</strong>”。梯度的方向指明了误差扩大的方向，因此在更新权重的时候需要对其取反，从而减小权重引起的误差。</li>\n</ol>\n<p><u>关于算法推导（<strong>梯度下降+链式求导</strong>），网上的博客质量良莠不齐，因此打算等买的书到了之后再研究一下，这里就不再列出。</u></p>\n<h3 id=\"卷积神经网络（CNN）\"><a href=\"#卷积神经网络（CNN）\" class=\"headerlink\" title=\"卷积神经网络（CNN）\"></a>卷积神经网络（CNN）</h3><ul>\n<li><strong>卷积神经网络</strong>由三部分构成：<ul>\n<li>第一部分是输入层。</li>\n<li>第二部分由n个卷积层和池化层的组合组成。</li>\n<li>第三部分由一个全连结的多层感知机分类器构成。</li>\n</ul>\n</li>\n<li><strong>卷积神经网络</strong>与<strong>普通神经网络</strong>的区别在于，卷积神经网络包含了一个特征抽取器（即第二部分）。</li>\n<li><strong>卷积神经网络</strong>的卷积层中，一个神经元只和部分邻层神经元连接。</li>\n<li>在每一个<strong>卷积层</strong>中，通常包含若干个<strong>特征平面(feature map)，</strong>每个特征平面由一些<strong>矩形排列</strong>的的神经元组成，同一特征平面的神经元共享权值，这里共享的权值就是<strong>卷积核</strong>。</li>\n<li><strong>卷积核</strong>一般以随机小数矩阵的形式初始化，在网络的训练过程中卷积核将通过学习得到合理的权值（<strong>反向传播</strong>）。共享权值（卷积核）带来的直接好处是减少网络各层之间的连接（<strong>减少参数</strong>），同时又降低了<strong>过拟合</strong>（参数过多导致）的风险。</li>\n<li><strong>子采样</strong>也叫做池化（pooling），也可以认为是下采样，通常有均值子采样（mean pooling）和最大值子采样（max pooling）两种形式。</li>\n</ul>\n<p><u>与<strong>普通的神经网络</strong>相比，包含<strong>卷积和子采样</strong>的<strong>卷积神经网络</strong>大大<strong>简化了模型复杂度，减少了模型的参数</strong>。</u></p>\n<h4 id=\"局部连接\"><a href=\"#局部连接\" class=\"headerlink\" title=\"局部连接\"></a><strong>局部连接</strong></h4><p>假设一张图大小为n1*n2，一个卷积核的大小为m1*m2，对于卷积后生成的每一个数据xi，它都是原图中对应位置的m1*m2矩阵和这个卷积核对应点相乘求和得到的。</p>\n<p>也就是说xi只和原图中对应的m1*m2的那个矩阵中的元素连接，而不是和整张图的n1*n2个元素连接。</p>\n<p>因此局部连接使得参数数量变为全连接的（m1*m2）/（n1*n2）。</p>\n<h4 id=\"权值共享\"><a href=\"#权值共享\" class=\"headerlink\" title=\"权值共享\"></a>权值共享</h4><p>即对于一个卷积核遍历原数据矩阵，生成的一个新的数据矩阵的每一个元素来说，它们的权值都为这个卷积核。</p>\n<p>这样就导致了权值数几乎变为了不权值共享时的数据量分之一。</p>\n<h4 id=\"多卷积核\"><a href=\"#多卷积核\" class=\"headerlink\" title=\"多卷积核\"></a>多卷积核</h4><p>用一个卷积核对整张图卷积可以看作是提取了原图的一个特征。</p>\n<p>使用一个卷积核只提取了一个特征，因此为了充分的提取特征，要使用多个卷积核，得到多个特征平面。</p>\n<h4 id=\"下采样（池化）\"><a href=\"#下采样（池化）\" class=\"headerlink\" title=\"下采样（池化）\"></a>下采样（池化）</h4><p>当输入数据过多时，参数的量就不可避免的变得很多，为了防止参数过多导致过拟合，需要下采样。</p>\n<h2 id=\"常见网络结构了解\"><a href=\"#常见网络结构了解\" class=\"headerlink\" title=\"常见网络结构了解\"></a>常见网络结构了解</h2><h3 id=\"LeNet\"><a href=\"#LeNet\" class=\"headerlink\" title=\"LeNet\"></a>LeNet</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/3352522-2ef0a2bbb096ced0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"LeNet\"></p>\n<ol>\n<li><strong>Input Layer</strong>：1*32*32图像</li>\n<li><strong>Conv1 Layer</strong>：包含6个卷积核，kernal size：5*5，parameters:（5*5+1）*6=156个</li>\n<li><strong>Subsampling Layer</strong>：average pooling，size：2*2, Activation Function：sigmoid</li>\n<li><strong>Conv3 Layer</strong>：包含16个卷积核，kernal size：5*5</li>\n<li><strong>Subsampling Layer</strong>：average pooling，size：2*2</li>\n<li><strong>Conv5 Layer</strong>：包含120个卷积核，kernal size：5*5</li>\n<li><strong>Fully Connected Layer</strong>：Activation Function：sigmoid</li>\n<li><strong>Output Layer</strong>：Gaussian connection</li>\n</ol>\n<h3 id=\"AlexNet\"><a href=\"#AlexNet\" class=\"headerlink\" title=\"AlexNet\"></a>AlexNet</h3><h4 id=\"AlexNet结构图\"><a href=\"#AlexNet结构图\" class=\"headerlink\" title=\"AlexNet结构图\"></a>AlexNet结构图</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/alexnet.png\" alt=\"ImageNet\"></p>\n<h4 id=\"AlexNet结构精简版\"><a href=\"#AlexNet结构精简版\" class=\"headerlink\" title=\"AlexNet结构精简版\"></a>AlexNet结构精简版</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/alexnet2.png\" alt=\"ImageNet\"></p>\n<p>对比一下即可理解精简版中<strong>符号的含义</strong>（以第一层为例）：</p>\n<p>卷积核大小为11*11，共有96个卷积核，步长为4，下采样矩阵大小为2*2。</p>\n<p>fc：full connect，全连接。</p>\n<p>激活函数变为ReLU：斜坡函数 f(x) = max(0, x)及其变种。</p>\n<h3 id=\"VGG\"><a href=\"#VGG\" class=\"headerlink\" title=\"VGG\"></a>VGG</h3><h4 id=\"VGG结构图\"><a href=\"#VGG结构图\" class=\"headerlink\" title=\"VGG结构图\"></a>VGG结构图</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/vgg.png\" alt=\"VGG\"></p>\n<h4 id=\"VGG-19网络结构精简版\"><a href=\"#VGG-19网络结构精简版\" class=\"headerlink\" title=\"VGG-19网络结构精简版\"></a>VGG-19网络结构精简版</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/vgg19.png\" alt=\"VGG-19\"></p>\n<h3 id=\"GoogLeNet\"><a href=\"#GoogLeNet\" class=\"headerlink\" title=\"GoogLeNet\"></a>GoogLeNet</h3><p><a href=\"https://blog.csdn.net/shuzfan/article/details/50738394\" target=\"_blank\" rel=\"noopener\">讲解链接</a></p>\n<p>主要特征是<strong>重新启用全连接</strong>以及提出了<strong>网中网</strong>的结构。</p>\n<p>网上的博客写的都比较粗略，有时间看一下相关资料或者论文。</p>\n<h3 id=\"ResNet\"><a href=\"#ResNet\" class=\"headerlink\" title=\"ResNet\"></a>ResNet</h3><h4 id=\"残差网络模型\"><a href=\"#残差网络模型\" class=\"headerlink\" title=\"残差网络模型\"></a>残差网络模型</h4><p>主要的创新为残差网络，本质上是要解决层次比较深时无法训练的问题：</p>\n<p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/residual.png\" alt=\"residual\"></p>\n<h4 id=\"ResNet网络结构\"><a href=\"#ResNet网络结构\" class=\"headerlink\" title=\"ResNet网络结构\"></a>ResNet网络结构</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/resnet.png\" alt=\"resnet\"></p>\n<h3 id=\"DenseNet\"><a href=\"#DenseNet\" class=\"headerlink\" title=\"DenseNet\"></a>DenseNet</h3><h4 id=\"DenseNet网络结构\"><a href=\"#DenseNet网络结构\" class=\"headerlink\" title=\"DenseNet网络结构\"></a>DenseNet网络结构</h4><p><img src=\"https://tse4.mm.bing.net/th?id=OIP.m8LpfrnNS-bVUC8gil9eVwHaBD&amp;pid=Api\" alt=\"DenseNet\"></p>\n<h4 id=\"Dense-Block结构\"><a href=\"#Dense-Block结构\" class=\"headerlink\" title=\"Dense Block结构\"></a>Dense Block结构</h4><p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522436431455&amp;di=3f3b62ddecf7accdb6b2b756f942cf89&amp;imgtype=0&amp;src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201802%2F20180217134048130090.png\" alt=\"Dense Block\"></p>\n<p>还是只看懂了大概，需要后续学习。</p>\n<h2 id=\"利用LeNet5网络模型实现MNIST手写数字识别\"><a href=\"#利用LeNet5网络模型实现MNIST手写数字识别\" class=\"headerlink\" title=\"利用LeNet5网络模型实现MNIST手写数字识别\"></a>利用LeNet5网络模型实现MNIST手写数字识别</h2><p>主要的关键点是熟悉TensorFlow相关变量和含义</p>\n<p>完成TensorFlow官方MINIST识别教程。</p>\n<p>使用<a href=\"http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_pros.html\" target=\"_blank\" rel=\"noopener\">国内网站</a>来更方便的浏览。</p>\n<hr>\n<h1 id=\"Week2\"><a href=\"#Week2\" class=\"headerlink\" title=\"Week2\"></a>Week2</h1><h2 id=\"利用VGG16实现CIFAR-10动物分类\"><a href=\"#利用VGG16实现CIFAR-10动物分类\" class=\"headerlink\" title=\"利用VGG16实现CIFAR-10动物分类\"></a>利用VGG16实现CIFAR-10动物分类</h2><p><a href=\"http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/deep_cnn.html\" target=\"_blank\" rel=\"noopener\">教程页链接</a></p>\n<h2 id=\"学习使用TensorBoard\"><a href=\"#学习使用TensorBoard\" class=\"headerlink\" title=\"学习使用TensorBoard\"></a>学习使用<a href=\"https://github.com/jikexueyuanwiki/tensorflow-zh/blob/master/SOURCE/how_tos/summaries_and_tensorboard/index.md\" target=\"_blank\" rel=\"noopener\">TensorBoard</a></h2><h2 id=\"了解Batch-Normalization-BN-批标准化\"><a href=\"#了解Batch-Normalization-BN-批标准化\" class=\"headerlink\" title=\"了解Batch Normalization(BN)批标准化\"></a>了解Batch Normalization(BN)批标准化</h2><p>文献链接：<a href=\"https://arxiv.org/pdf/1502.03167.pdf\" target=\"_blank\" rel=\"noopener\">Batch Normalization: Accelerating Deep Network Training by Reducing  Internal Covariate Shift</a></p>\n<blockquote>\n<p>在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。不过文献归一化层，可不像我们想象的那么简单，它是一个可学习、有参数的网络层。</p>\n</blockquote>\n"},{"title":"深度学习周报week03-week04","toc":true,"date":"2018-05-12T01:20:23.000Z","_content":"\n## Tmux ：终端分割\n\n> tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。\n\n### 常用快捷键\n\n`Ctrl+b ：激活控制台；此时以下按键生效`\n\n#### 系统操作\n\n| ?      | 列出所有快捷键；按q返回                                      |\n| ------ | ------------------------------------------------------------ |\n| d      | 脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话 |\n| D      | 选择要脱离的会话；在同时开启了多个会话时使用                 |\n| Ctrl+z | 挂起当前会话                                                 |\n| r      | 强制重绘未脱离的会话                                         |\n| s      | 选择并切换会话；在同时开启了多个会话时使用                   |\n| :      | 进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器 |\n| [      | 进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出          |\n| ~      | 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息       |\n\n#### 窗口操作\n\n| c      | 创建新窗口                           |\n| ------ | ------------------------------------ |\n| &      | 关闭当前窗口                         |\n| 数字键 | 切换至指定窗口                       |\n| p      | 切换至上一窗口                       |\n| n      | 切换至下一窗口                       |\n| l      | 在前后两个窗口间互相切换             |\n| w      | 通过窗口列表切换窗口                 |\n| ,      | 重命名当前窗口；这样便于识别         |\n| .      | 修改当前窗口编号；相当于窗口重新排序 |\n| f      | 在所有窗口中查找指定文本             |\n\n#### 面板操作\n\n| ”           | 将当前面板平分为上下两块                                     |\n| ----------- | ------------------------------------------------------------ |\n| %           | 将当前面板平分为左右两块                                     |\n| x           | 关闭当前面板                                                 |\n| !           | 将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板     |\n| Ctrl+方向键 | 以1个单元格为单位移动边缘以调整当前面板大小                  |\n| Alt+方向键  | 以5个单元格为单位移动边缘以调整当前面板大小                  |\n| Space       | 在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled |\n| q           | 显示面板编号                                                 |\n| o           | 在当前窗口中选择下一面板                                     |\n| 方向键      | 移动光标以选择面板                                           |\n| {           | 向前置换当前面板                                             |\n| }           | 向后置换当前面板                                             |\n| Alt+o       | 逆时针旋转当前窗口的面板                                     |\n| Ctrl+o      | 顺时针旋转当前窗口的面板                                     |\n\n> Ctrl-b s\t\t\t在 Tmux 的会话间切换\n>\n> Ctrl-b %\t\t\t上下分屏\n>\n> Ctrl-b \"\t\t\t左右分屏\n>\n> Ctrl-b +方向键\t进入对应的窗格\n>\n> Ctrl-b c\t\t\t创建窗口\n>\n> Ctrl-b +数字\t\t切换窗口 \n>\n> Ctrl-b &\t\t\t离开一个会话[exited]\n>\n> Ctrl-b d\t\t\t从一个会话中脱离[dettached]\n\n## ssh\n\n下载MobaXterm来在windows下使用ssh\n\n连接命令：\n\n```shell\nssh username@xxx.xxx.xxx.xxx\npassword\n```\n\n## 监控显卡\n\n```shell\nnvidia smi\n```\n\n[GPU使用表的具体含义](https://blog.csdn.net/bruce_0712/article/details/63683787)：\n\n> 第一张表格中： \n>\n> 第一栏的Fan：N/A是风扇转速，从0到100%之间变动，这个速度是计算机期望的风扇转速，实际情况下如果风扇堵转，可能打不到显示的转速。有的设备不会返回转速，因为它不依赖风扇冷却而是通过其他外设保持低温（比如我们实验室的服务器是常年放在空调房间里的）。\n>\n>\n> 第二栏的Temp：是温度，单位摄氏度。 \n>\n> 第三栏的Perf：是性能状态，从P0到P12，P0表示最大性能，P12表示状态最小性能。 \n>\n> 第四栏下方的Pwr：是能耗，上方的Persistence-M：是持续模式的状态，持续模式虽然耗能大，但是在新的GPU应用启动时，花费的时间更少，这里显示的是off的状态。\n>\n>\n> 第五栏的Bus-Id是涉及GPU总线的东西，domain:bus:device.function \n>\n> 第六栏的Disp.A是Display Active，表示GPU的显示是否初始化。 \n>\n> 第五第六栏下方的Memory Usage是显存使用率。 \n>\n> 第七栏是浮动的GPU利用率。 \n>\n> 第八栏上方是关于ECC的东西。 \n>\n> 第八栏下方Compute M是计算模式。 \n>\n> 第二张表示每个进程占用的显存使用情况。\n\n### 使用watch命令实时监测显卡\n\nwatch的基本用法：\n\n```shell\nwatch [options]  command\n```\n\n最常用的参数是 -n， 后面指定是每多少秒来执行一次命令。\n\n例如：设置每 10s 显示一次显存的情况\n\n```shell\nwatch -n 10 nvidia-smi\n```\n\n## cifar10\n\n继续调整网络结构和参数来增加准确率。","source":"_posts/深度学习周报week03-week04.md","raw":"---\ntitle: 深度学习周报week03-week04\ntoc: true\ndate: 2018-05-12 09:20:23\ncategories:\n- deep learning\ntags:\n- Tmux\n---\n\n## Tmux ：终端分割\n\n> tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。\n\n### 常用快捷键\n\n`Ctrl+b ：激活控制台；此时以下按键生效`\n\n#### 系统操作\n\n| ?      | 列出所有快捷键；按q返回                                      |\n| ------ | ------------------------------------------------------------ |\n| d      | 脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话 |\n| D      | 选择要脱离的会话；在同时开启了多个会话时使用                 |\n| Ctrl+z | 挂起当前会话                                                 |\n| r      | 强制重绘未脱离的会话                                         |\n| s      | 选择并切换会话；在同时开启了多个会话时使用                   |\n| :      | 进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器 |\n| [      | 进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出          |\n| ~      | 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息       |\n\n#### 窗口操作\n\n| c      | 创建新窗口                           |\n| ------ | ------------------------------------ |\n| &      | 关闭当前窗口                         |\n| 数字键 | 切换至指定窗口                       |\n| p      | 切换至上一窗口                       |\n| n      | 切换至下一窗口                       |\n| l      | 在前后两个窗口间互相切换             |\n| w      | 通过窗口列表切换窗口                 |\n| ,      | 重命名当前窗口；这样便于识别         |\n| .      | 修改当前窗口编号；相当于窗口重新排序 |\n| f      | 在所有窗口中查找指定文本             |\n\n#### 面板操作\n\n| ”           | 将当前面板平分为上下两块                                     |\n| ----------- | ------------------------------------------------------------ |\n| %           | 将当前面板平分为左右两块                                     |\n| x           | 关闭当前面板                                                 |\n| !           | 将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板     |\n| Ctrl+方向键 | 以1个单元格为单位移动边缘以调整当前面板大小                  |\n| Alt+方向键  | 以5个单元格为单位移动边缘以调整当前面板大小                  |\n| Space       | 在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled |\n| q           | 显示面板编号                                                 |\n| o           | 在当前窗口中选择下一面板                                     |\n| 方向键      | 移动光标以选择面板                                           |\n| {           | 向前置换当前面板                                             |\n| }           | 向后置换当前面板                                             |\n| Alt+o       | 逆时针旋转当前窗口的面板                                     |\n| Ctrl+o      | 顺时针旋转当前窗口的面板                                     |\n\n> Ctrl-b s\t\t\t在 Tmux 的会话间切换\n>\n> Ctrl-b %\t\t\t上下分屏\n>\n> Ctrl-b \"\t\t\t左右分屏\n>\n> Ctrl-b +方向键\t进入对应的窗格\n>\n> Ctrl-b c\t\t\t创建窗口\n>\n> Ctrl-b +数字\t\t切换窗口 \n>\n> Ctrl-b &\t\t\t离开一个会话[exited]\n>\n> Ctrl-b d\t\t\t从一个会话中脱离[dettached]\n\n## ssh\n\n下载MobaXterm来在windows下使用ssh\n\n连接命令：\n\n```shell\nssh username@xxx.xxx.xxx.xxx\npassword\n```\n\n## 监控显卡\n\n```shell\nnvidia smi\n```\n\n[GPU使用表的具体含义](https://blog.csdn.net/bruce_0712/article/details/63683787)：\n\n> 第一张表格中： \n>\n> 第一栏的Fan：N/A是风扇转速，从0到100%之间变动，这个速度是计算机期望的风扇转速，实际情况下如果风扇堵转，可能打不到显示的转速。有的设备不会返回转速，因为它不依赖风扇冷却而是通过其他外设保持低温（比如我们实验室的服务器是常年放在空调房间里的）。\n>\n>\n> 第二栏的Temp：是温度，单位摄氏度。 \n>\n> 第三栏的Perf：是性能状态，从P0到P12，P0表示最大性能，P12表示状态最小性能。 \n>\n> 第四栏下方的Pwr：是能耗，上方的Persistence-M：是持续模式的状态，持续模式虽然耗能大，但是在新的GPU应用启动时，花费的时间更少，这里显示的是off的状态。\n>\n>\n> 第五栏的Bus-Id是涉及GPU总线的东西，domain:bus:device.function \n>\n> 第六栏的Disp.A是Display Active，表示GPU的显示是否初始化。 \n>\n> 第五第六栏下方的Memory Usage是显存使用率。 \n>\n> 第七栏是浮动的GPU利用率。 \n>\n> 第八栏上方是关于ECC的东西。 \n>\n> 第八栏下方Compute M是计算模式。 \n>\n> 第二张表示每个进程占用的显存使用情况。\n\n### 使用watch命令实时监测显卡\n\nwatch的基本用法：\n\n```shell\nwatch [options]  command\n```\n\n最常用的参数是 -n， 后面指定是每多少秒来执行一次命令。\n\n例如：设置每 10s 显示一次显存的情况\n\n```shell\nwatch -n 10 nvidia-smi\n```\n\n## cifar10\n\n继续调整网络结构和参数来增加准确率。","slug":"深度学习周报week03-week04","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru04001r7bag70otq770","content":"<h2 id=\"Tmux-：终端分割\"><a href=\"#Tmux-：终端分割\" class=\"headerlink\" title=\"Tmux ：终端分割\"></a>Tmux ：终端分割</h2><blockquote>\n<p>tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。</p>\n</blockquote>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><p><code>Ctrl+b ：激活控制台；此时以下按键生效</code></p>\n<h4 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h4><table>\n<thead>\n<tr>\n<th>?</th>\n<th>列出所有快捷键；按q返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td>脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</td>\n</tr>\n<tr>\n<td>D</td>\n<td>选择要脱离的会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td>Ctrl+z</td>\n<td>挂起当前会话</td>\n</tr>\n<tr>\n<td>r</td>\n<td>强制重绘未脱离的会话</td>\n</tr>\n<tr>\n<td>s</td>\n<td>选择并切换会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td>:</td>\n<td>进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器</td>\n</tr>\n<tr>\n<td>[</td>\n<td>进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出</td>\n</tr>\n<tr>\n<td>~</td>\n<td>列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"窗口操作\"><a href=\"#窗口操作\" class=\"headerlink\" title=\"窗口操作\"></a>窗口操作</h4><table>\n<thead>\n<tr>\n<th>c</th>\n<th>创建新窗口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>关闭当前窗口</td>\n</tr>\n<tr>\n<td>数字键</td>\n<td>切换至指定窗口</td>\n</tr>\n<tr>\n<td>p</td>\n<td>切换至上一窗口</td>\n</tr>\n<tr>\n<td>n</td>\n<td>切换至下一窗口</td>\n</tr>\n<tr>\n<td>l</td>\n<td>在前后两个窗口间互相切换</td>\n</tr>\n<tr>\n<td>w</td>\n<td>通过窗口列表切换窗口</td>\n</tr>\n<tr>\n<td>,</td>\n<td>重命名当前窗口；这样便于识别</td>\n</tr>\n<tr>\n<td>.</td>\n<td>修改当前窗口编号；相当于窗口重新排序</td>\n</tr>\n<tr>\n<td>f</td>\n<td>在所有窗口中查找指定文本</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"面板操作\"><a href=\"#面板操作\" class=\"headerlink\" title=\"面板操作\"></a>面板操作</h4><table>\n<thead>\n<tr>\n<th>”</th>\n<th>将当前面板平分为上下两块</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%</td>\n<td>将当前面板平分为左右两块</td>\n</tr>\n<tr>\n<td>x</td>\n<td>关闭当前面板</td>\n</tr>\n<tr>\n<td>!</td>\n<td>将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板</td>\n</tr>\n<tr>\n<td>Ctrl+方向键</td>\n<td>以1个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td>Alt+方向键</td>\n<td>以5个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td>Space</td>\n<td>在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled</td>\n</tr>\n<tr>\n<td>q</td>\n<td>显示面板编号</td>\n</tr>\n<tr>\n<td>o</td>\n<td>在当前窗口中选择下一面板</td>\n</tr>\n<tr>\n<td>方向键</td>\n<td>移动光标以选择面板</td>\n</tr>\n<tr>\n<td>{</td>\n<td>向前置换当前面板</td>\n</tr>\n<tr>\n<td>}</td>\n<td>向后置换当前面板</td>\n</tr>\n<tr>\n<td>Alt+o</td>\n<td>逆时针旋转当前窗口的面板</td>\n</tr>\n<tr>\n<td>Ctrl+o</td>\n<td>顺时针旋转当前窗口的面板</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Ctrl-b s            在 Tmux 的会话间切换</p>\n<p>Ctrl-b %            上下分屏</p>\n<p>Ctrl-b “            左右分屏</p>\n<p>Ctrl-b +方向键    进入对应的窗格</p>\n<p>Ctrl-b c            创建窗口</p>\n<p>Ctrl-b +数字        切换窗口 </p>\n<p>Ctrl-b &amp;            离开一个会话[exited]</p>\n<p>Ctrl-b d            从一个会话中脱离[dettached]</p>\n</blockquote>\n<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><p>下载MobaXterm来在windows下使用ssh</p>\n<p>连接命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@xxx.xxx.xxx.xxx</span><br><span class=\"line\">password</span><br></pre></td></tr></table></figure>\n<h2 id=\"监控显卡\"><a href=\"#监控显卡\" class=\"headerlink\" title=\"监控显卡\"></a>监控显卡</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia smi</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/bruce_0712/article/details/63683787\" target=\"_blank\" rel=\"noopener\">GPU使用表的具体含义</a>：</p>\n<blockquote>\n<p>第一张表格中： </p>\n<p>第一栏的Fan：N/A是风扇转速，从0到100%之间变动，这个速度是计算机期望的风扇转速，实际情况下如果风扇堵转，可能打不到显示的转速。有的设备不会返回转速，因为它不依赖风扇冷却而是通过其他外设保持低温（比如我们实验室的服务器是常年放在空调房间里的）。</p>\n<p>第二栏的Temp：是温度，单位摄氏度。 </p>\n<p>第三栏的Perf：是性能状态，从P0到P12，P0表示最大性能，P12表示状态最小性能。 </p>\n<p>第四栏下方的Pwr：是能耗，上方的Persistence-M：是持续模式的状态，持续模式虽然耗能大，但是在新的GPU应用启动时，花费的时间更少，这里显示的是off的状态。</p>\n<p>第五栏的Bus-Id是涉及GPU总线的东西，domain:bus:device.function </p>\n<p>第六栏的Disp.A是Display Active，表示GPU的显示是否初始化。 </p>\n<p>第五第六栏下方的Memory Usage是显存使用率。 </p>\n<p>第七栏是浮动的GPU利用率。 </p>\n<p>第八栏上方是关于ECC的东西。 </p>\n<p>第八栏下方Compute M是计算模式。 </p>\n<p>第二张表示每个进程占用的显存使用情况。</p>\n</blockquote>\n<h3 id=\"使用watch命令实时监测显卡\"><a href=\"#使用watch命令实时监测显卡\" class=\"headerlink\" title=\"使用watch命令实时监测显卡\"></a>使用watch命令实时监测显卡</h3><p>watch的基本用法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch [options]  command</span><br></pre></td></tr></table></figure>\n<p>最常用的参数是 -n， 后面指定是每多少秒来执行一次命令。</p>\n<p>例如：设置每 10s 显示一次显存的情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch -n 10 nvidia-smi</span><br></pre></td></tr></table></figure>\n<h2 id=\"cifar10\"><a href=\"#cifar10\" class=\"headerlink\" title=\"cifar10\"></a>cifar10</h2><p>继续调整网络结构和参数来增加准确率。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Tmux-：终端分割\"><a href=\"#Tmux-：终端分割\" class=\"headerlink\" title=\"Tmux ：终端分割\"></a>Tmux ：终端分割</h2><blockquote>\n<p>tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。</p>\n</blockquote>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><p><code>Ctrl+b ：激活控制台；此时以下按键生效</code></p>\n<h4 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h4><table>\n<thead>\n<tr>\n<th>?</th>\n<th>列出所有快捷键；按q返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td>脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</td>\n</tr>\n<tr>\n<td>D</td>\n<td>选择要脱离的会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td>Ctrl+z</td>\n<td>挂起当前会话</td>\n</tr>\n<tr>\n<td>r</td>\n<td>强制重绘未脱离的会话</td>\n</tr>\n<tr>\n<td>s</td>\n<td>选择并切换会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td>:</td>\n<td>进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器</td>\n</tr>\n<tr>\n<td>[</td>\n<td>进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出</td>\n</tr>\n<tr>\n<td>~</td>\n<td>列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"窗口操作\"><a href=\"#窗口操作\" class=\"headerlink\" title=\"窗口操作\"></a>窗口操作</h4><table>\n<thead>\n<tr>\n<th>c</th>\n<th>创建新窗口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>关闭当前窗口</td>\n</tr>\n<tr>\n<td>数字键</td>\n<td>切换至指定窗口</td>\n</tr>\n<tr>\n<td>p</td>\n<td>切换至上一窗口</td>\n</tr>\n<tr>\n<td>n</td>\n<td>切换至下一窗口</td>\n</tr>\n<tr>\n<td>l</td>\n<td>在前后两个窗口间互相切换</td>\n</tr>\n<tr>\n<td>w</td>\n<td>通过窗口列表切换窗口</td>\n</tr>\n<tr>\n<td>,</td>\n<td>重命名当前窗口；这样便于识别</td>\n</tr>\n<tr>\n<td>.</td>\n<td>修改当前窗口编号；相当于窗口重新排序</td>\n</tr>\n<tr>\n<td>f</td>\n<td>在所有窗口中查找指定文本</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"面板操作\"><a href=\"#面板操作\" class=\"headerlink\" title=\"面板操作\"></a>面板操作</h4><table>\n<thead>\n<tr>\n<th>”</th>\n<th>将当前面板平分为上下两块</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%</td>\n<td>将当前面板平分为左右两块</td>\n</tr>\n<tr>\n<td>x</td>\n<td>关闭当前面板</td>\n</tr>\n<tr>\n<td>!</td>\n<td>将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板</td>\n</tr>\n<tr>\n<td>Ctrl+方向键</td>\n<td>以1个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td>Alt+方向键</td>\n<td>以5个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td>Space</td>\n<td>在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled</td>\n</tr>\n<tr>\n<td>q</td>\n<td>显示面板编号</td>\n</tr>\n<tr>\n<td>o</td>\n<td>在当前窗口中选择下一面板</td>\n</tr>\n<tr>\n<td>方向键</td>\n<td>移动光标以选择面板</td>\n</tr>\n<tr>\n<td>{</td>\n<td>向前置换当前面板</td>\n</tr>\n<tr>\n<td>}</td>\n<td>向后置换当前面板</td>\n</tr>\n<tr>\n<td>Alt+o</td>\n<td>逆时针旋转当前窗口的面板</td>\n</tr>\n<tr>\n<td>Ctrl+o</td>\n<td>顺时针旋转当前窗口的面板</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Ctrl-b s            在 Tmux 的会话间切换</p>\n<p>Ctrl-b %            上下分屏</p>\n<p>Ctrl-b “            左右分屏</p>\n<p>Ctrl-b +方向键    进入对应的窗格</p>\n<p>Ctrl-b c            创建窗口</p>\n<p>Ctrl-b +数字        切换窗口 </p>\n<p>Ctrl-b &amp;            离开一个会话[exited]</p>\n<p>Ctrl-b d            从一个会话中脱离[dettached]</p>\n</blockquote>\n<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><p>下载MobaXterm来在windows下使用ssh</p>\n<p>连接命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@xxx.xxx.xxx.xxx</span><br><span class=\"line\">password</span><br></pre></td></tr></table></figure>\n<h2 id=\"监控显卡\"><a href=\"#监控显卡\" class=\"headerlink\" title=\"监控显卡\"></a>监控显卡</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia smi</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/bruce_0712/article/details/63683787\" target=\"_blank\" rel=\"noopener\">GPU使用表的具体含义</a>：</p>\n<blockquote>\n<p>第一张表格中： </p>\n<p>第一栏的Fan：N/A是风扇转速，从0到100%之间变动，这个速度是计算机期望的风扇转速，实际情况下如果风扇堵转，可能打不到显示的转速。有的设备不会返回转速，因为它不依赖风扇冷却而是通过其他外设保持低温（比如我们实验室的服务器是常年放在空调房间里的）。</p>\n<p>第二栏的Temp：是温度，单位摄氏度。 </p>\n<p>第三栏的Perf：是性能状态，从P0到P12，P0表示最大性能，P12表示状态最小性能。 </p>\n<p>第四栏下方的Pwr：是能耗，上方的Persistence-M：是持续模式的状态，持续模式虽然耗能大，但是在新的GPU应用启动时，花费的时间更少，这里显示的是off的状态。</p>\n<p>第五栏的Bus-Id是涉及GPU总线的东西，domain:bus:device.function </p>\n<p>第六栏的Disp.A是Display Active，表示GPU的显示是否初始化。 </p>\n<p>第五第六栏下方的Memory Usage是显存使用率。 </p>\n<p>第七栏是浮动的GPU利用率。 </p>\n<p>第八栏上方是关于ECC的东西。 </p>\n<p>第八栏下方Compute M是计算模式。 </p>\n<p>第二张表示每个进程占用的显存使用情况。</p>\n</blockquote>\n<h3 id=\"使用watch命令实时监测显卡\"><a href=\"#使用watch命令实时监测显卡\" class=\"headerlink\" title=\"使用watch命令实时监测显卡\"></a>使用watch命令实时监测显卡</h3><p>watch的基本用法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch [options]  command</span><br></pre></td></tr></table></figure>\n<p>最常用的参数是 -n， 后面指定是每多少秒来执行一次命令。</p>\n<p>例如：设置每 10s 显示一次显存的情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch -n 10 nvidia-smi</span><br></pre></td></tr></table></figure>\n<h2 id=\"cifar10\"><a href=\"#cifar10\" class=\"headerlink\" title=\"cifar10\"></a>cifar10</h2><p>继续调整网络结构和参数来增加准确率。</p>\n"},{"title":"深度学习周报week05-week06","toc":true,"date":"2018-05-12T02:22:12.000Z","_content":"\n## 过拟合\n\n过拟合，就是拟合函数由于顾忌每一个点，最终形成的拟合函数波动很大。在某些很小的区间里，函数值的变化很剧烈。这就意味着函数在某些小区间里的导数值（绝对值）非常大，由于自变量值可大可小，所以只有系数足够大，才能保证导数值很大。\n\n## 正则化\n\n[参考链接](https://blog.csdn.net/u012162613/article/details/44261657)\n\n当训练数据不够多或训练过度时，常常会导致过拟合。正则化就是避免过拟合的一个办法。\n\n<u>正则化是通过约束参数的范数使其不要太大，所以可以在一定程度上减少过拟合情况。</u>\n\n### L2正则化（权重衰减）\n\nL2正则化就是在代价函数后面再加上一个正则化项：\n\n![](/images/L2.jpg)\n\n### L1正则化\n\nL1正则化就是在原始的代价函数后面加上一个L1正则化项，即所有权重w的绝对值的和，乘以λ/n：\n\n![](/images/L1.jpg)\n\n## Batch Normalization(BN)\n\n在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。\n\n![](/images/BN.png)\n\n训练过程中采用batch 随机梯度下降，其中E(xk)指的是每一批训练数据神经元xk的平均值；分母指的是每一批数据神经元xk激活度的一个标准差。\n\n引入了可学习参数γ、β：\n\n![](/images/BN_y.png)\n\n因此Batch Normalization网络层的前向传导过程公式为：\n\n![](/images/BN_back.png)\n\n其中m为mini-batch size。\n\n### 在CNN中的使用\n\n由于BN是对单个神经元的运算，因此为了避免参数过多的情况，使用类似权值共享的策略，把一整张特征图当作一个神经元处理。\n\n## cifar 10\n\n继续调整网络结构和参数。\n\n## 项目准备\n\n了解频谱图以及音频采样。\n\n","source":"_posts/深度学习周报week05-week06.md","raw":"---\ntitle: 深度学习周报week05-week06\ntoc: true\ndate: 2018-05-12 10:22:12\ncategories:\n- deep learning\ntags:\n- BN\n---\n\n## 过拟合\n\n过拟合，就是拟合函数由于顾忌每一个点，最终形成的拟合函数波动很大。在某些很小的区间里，函数值的变化很剧烈。这就意味着函数在某些小区间里的导数值（绝对值）非常大，由于自变量值可大可小，所以只有系数足够大，才能保证导数值很大。\n\n## 正则化\n\n[参考链接](https://blog.csdn.net/u012162613/article/details/44261657)\n\n当训练数据不够多或训练过度时，常常会导致过拟合。正则化就是避免过拟合的一个办法。\n\n<u>正则化是通过约束参数的范数使其不要太大，所以可以在一定程度上减少过拟合情况。</u>\n\n### L2正则化（权重衰减）\n\nL2正则化就是在代价函数后面再加上一个正则化项：\n\n![](/images/L2.jpg)\n\n### L1正则化\n\nL1正则化就是在原始的代价函数后面加上一个L1正则化项，即所有权重w的绝对值的和，乘以λ/n：\n\n![](/images/L1.jpg)\n\n## Batch Normalization(BN)\n\n在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。\n\n![](/images/BN.png)\n\n训练过程中采用batch 随机梯度下降，其中E(xk)指的是每一批训练数据神经元xk的平均值；分母指的是每一批数据神经元xk激活度的一个标准差。\n\n引入了可学习参数γ、β：\n\n![](/images/BN_y.png)\n\n因此Batch Normalization网络层的前向传导过程公式为：\n\n![](/images/BN_back.png)\n\n其中m为mini-batch size。\n\n### 在CNN中的使用\n\n由于BN是对单个神经元的运算，因此为了避免参数过多的情况，使用类似权值共享的策略，把一整张特征图当作一个神经元处理。\n\n## cifar 10\n\n继续调整网络结构和参数。\n\n## 项目准备\n\n了解频谱图以及音频采样。\n\n","slug":"深度学习周报week05-week06","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru06001u7bag92r4qi5o","content":"<h2 id=\"过拟合\"><a href=\"#过拟合\" class=\"headerlink\" title=\"过拟合\"></a>过拟合</h2><p>过拟合，就是拟合函数由于顾忌每一个点，最终形成的拟合函数波动很大。在某些很小的区间里，函数值的变化很剧烈。这就意味着函数在某些小区间里的导数值（绝对值）非常大，由于自变量值可大可小，所以只有系数足够大，才能保证导数值很大。</p>\n<h2 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h2><p><a href=\"https://blog.csdn.net/u012162613/article/details/44261657\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>当训练数据不够多或训练过度时，常常会导致过拟合。正则化就是避免过拟合的一个办法。</p>\n<p><u>正则化是通过约束参数的范数使其不要太大，所以可以在一定程度上减少过拟合情况。</u></p>\n<h3 id=\"L2正则化（权重衰减）\"><a href=\"#L2正则化（权重衰减）\" class=\"headerlink\" title=\"L2正则化（权重衰减）\"></a>L2正则化（权重衰减）</h3><p>L2正则化就是在代价函数后面再加上一个正则化项：</p>\n<p><img src=\"/images/L2.jpg\" alt=\"\"></p>\n<h3 id=\"L1正则化\"><a href=\"#L1正则化\" class=\"headerlink\" title=\"L1正则化\"></a>L1正则化</h3><p>L1正则化就是在原始的代价函数后面加上一个L1正则化项，即所有权重w的绝对值的和，乘以λ/n：</p>\n<p><img src=\"/images/L1.jpg\" alt=\"\"></p>\n<h2 id=\"Batch-Normalization-BN\"><a href=\"#Batch-Normalization-BN\" class=\"headerlink\" title=\"Batch Normalization(BN)\"></a>Batch Normalization(BN)</h2><p>在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。</p>\n<p><img src=\"/images/BN.png\" alt=\"\"></p>\n<p>训练过程中采用batch 随机梯度下降，其中E(xk)指的是每一批训练数据神经元xk的平均值；分母指的是每一批数据神经元xk激活度的一个标准差。</p>\n<p>引入了可学习参数γ、β：</p>\n<p><img src=\"/images/BN_y.png\" alt=\"\"></p>\n<p>因此Batch Normalization网络层的前向传导过程公式为：</p>\n<p><img src=\"/images/BN_back.png\" alt=\"\"></p>\n<p>其中m为mini-batch size。</p>\n<h3 id=\"在CNN中的使用\"><a href=\"#在CNN中的使用\" class=\"headerlink\" title=\"在CNN中的使用\"></a>在CNN中的使用</h3><p>由于BN是对单个神经元的运算，因此为了避免参数过多的情况，使用类似权值共享的策略，把一整张特征图当作一个神经元处理。</p>\n<h2 id=\"cifar-10\"><a href=\"#cifar-10\" class=\"headerlink\" title=\"cifar 10\"></a>cifar 10</h2><p>继续调整网络结构和参数。</p>\n<h2 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h2><p>了解频谱图以及音频采样。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"过拟合\"><a href=\"#过拟合\" class=\"headerlink\" title=\"过拟合\"></a>过拟合</h2><p>过拟合，就是拟合函数由于顾忌每一个点，最终形成的拟合函数波动很大。在某些很小的区间里，函数值的变化很剧烈。这就意味着函数在某些小区间里的导数值（绝对值）非常大，由于自变量值可大可小，所以只有系数足够大，才能保证导数值很大。</p>\n<h2 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h2><p><a href=\"https://blog.csdn.net/u012162613/article/details/44261657\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>当训练数据不够多或训练过度时，常常会导致过拟合。正则化就是避免过拟合的一个办法。</p>\n<p><u>正则化是通过约束参数的范数使其不要太大，所以可以在一定程度上减少过拟合情况。</u></p>\n<h3 id=\"L2正则化（权重衰减）\"><a href=\"#L2正则化（权重衰减）\" class=\"headerlink\" title=\"L2正则化（权重衰减）\"></a>L2正则化（权重衰减）</h3><p>L2正则化就是在代价函数后面再加上一个正则化项：</p>\n<p><img src=\"/images/L2.jpg\" alt=\"\"></p>\n<h3 id=\"L1正则化\"><a href=\"#L1正则化\" class=\"headerlink\" title=\"L1正则化\"></a>L1正则化</h3><p>L1正则化就是在原始的代价函数后面加上一个L1正则化项，即所有权重w的绝对值的和，乘以λ/n：</p>\n<p><img src=\"/images/L1.jpg\" alt=\"\"></p>\n<h2 id=\"Batch-Normalization-BN\"><a href=\"#Batch-Normalization-BN\" class=\"headerlink\" title=\"Batch Normalization(BN)\"></a>Batch Normalization(BN)</h2><p>在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。</p>\n<p><img src=\"/images/BN.png\" alt=\"\"></p>\n<p>训练过程中采用batch 随机梯度下降，其中E(xk)指的是每一批训练数据神经元xk的平均值；分母指的是每一批数据神经元xk激活度的一个标准差。</p>\n<p>引入了可学习参数γ、β：</p>\n<p><img src=\"/images/BN_y.png\" alt=\"\"></p>\n<p>因此Batch Normalization网络层的前向传导过程公式为：</p>\n<p><img src=\"/images/BN_back.png\" alt=\"\"></p>\n<p>其中m为mini-batch size。</p>\n<h3 id=\"在CNN中的使用\"><a href=\"#在CNN中的使用\" class=\"headerlink\" title=\"在CNN中的使用\"></a>在CNN中的使用</h3><p>由于BN是对单个神经元的运算，因此为了避免参数过多的情况，使用类似权值共享的策略，把一整张特征图当作一个神经元处理。</p>\n<h2 id=\"cifar-10\"><a href=\"#cifar-10\" class=\"headerlink\" title=\"cifar 10\"></a>cifar 10</h2><p>继续调整网络结构和参数。</p>\n<h2 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h2><p>了解频谱图以及音频采样。</p>\n"},{"title":"深度学习周报week07-week08","toc":true,"date":"2018-05-19T01:49:31.000Z","_content":"\n## 音频分类\n\n将1000个音频分别放入对应文件夹中：\n\n![](/images/classification.PNG)\n\n`filename.txt` 存储文件对应位置。\n\n以上所有存储在`classification`文件夹中。\n\n建立`filename.py`来生成`filename.txt`：\n\n```python\nimport os\n\ntextname = 'filename.txt'\nwith open(textname, 'w') as f:\n    for root, dirs, afiles in os.walk('./classification'):\n        for subdir in dirs:\n            for subroot, subdirs, subfiles in os.walk('./classification/'+subdir):\n                for filename in subfiles:\n                    apath = os.path.join(subdir, filename)\n                    f.write(apath)\n                    f.write('\\n')\n```\n\n生成的`filename.txt`为：\n\n![](/images/filename_txt.PNG)\n\n## MFCC\n\n[学习链接](https://blog.csdn.net/fengzhonghen/article/details/51722555)\n\n**MFCC**(Mel-frequency cepstral coefficients)：梅尔频率倒谱系数。\n\n梅尔频率是基于人耳听觉特性提出的概念， 它与Hz频率成非线性对应关系。\n\nMFCC则是利用它们之间的这种关系，计算得到的Hz频谱特征，<u>主要用于语音数据特征提取和降低运算维度</u>。\n\n<u>主要用于语音数据特征提取和降低运算维度。</u>\n\n例如：对于一帧有512维(采样点)数据，经过MFCC后可以提取出最重要的40维(一般而言)数据同时也达到了将维的目的。\n\nMFCC的步骤为：\n\n- 预加重\n- 分帧\n- 加窗\n- **快速傅里叶变换(FFT)**\n- **梅尔滤波器组**\n- 离散余弦变换(DCT)\n\n其中最重要的就是FFT和梅尔滤波器组，这两个进行了主要的降维操作。\n\n## 了解相关库和函数\n\n- scipy.io.wavfile\n- python_speech_features\n- librosa\n- pydub\n- tf.sparse_tensor_to_dense\n- tf.edit_distance\n- tf.nn.ctc_loss","source":"_posts/深度学习周报week07-week08.md","raw":"---\ntitle: 深度学习周报week07-week08\ntoc: true\ndate: 2018-05-19 09:49:31\ncategories:\n- deep learning\ntags:\n---\n\n## 音频分类\n\n将1000个音频分别放入对应文件夹中：\n\n![](/images/classification.PNG)\n\n`filename.txt` 存储文件对应位置。\n\n以上所有存储在`classification`文件夹中。\n\n建立`filename.py`来生成`filename.txt`：\n\n```python\nimport os\n\ntextname = 'filename.txt'\nwith open(textname, 'w') as f:\n    for root, dirs, afiles in os.walk('./classification'):\n        for subdir in dirs:\n            for subroot, subdirs, subfiles in os.walk('./classification/'+subdir):\n                for filename in subfiles:\n                    apath = os.path.join(subdir, filename)\n                    f.write(apath)\n                    f.write('\\n')\n```\n\n生成的`filename.txt`为：\n\n![](/images/filename_txt.PNG)\n\n## MFCC\n\n[学习链接](https://blog.csdn.net/fengzhonghen/article/details/51722555)\n\n**MFCC**(Mel-frequency cepstral coefficients)：梅尔频率倒谱系数。\n\n梅尔频率是基于人耳听觉特性提出的概念， 它与Hz频率成非线性对应关系。\n\nMFCC则是利用它们之间的这种关系，计算得到的Hz频谱特征，<u>主要用于语音数据特征提取和降低运算维度</u>。\n\n<u>主要用于语音数据特征提取和降低运算维度。</u>\n\n例如：对于一帧有512维(采样点)数据，经过MFCC后可以提取出最重要的40维(一般而言)数据同时也达到了将维的目的。\n\nMFCC的步骤为：\n\n- 预加重\n- 分帧\n- 加窗\n- **快速傅里叶变换(FFT)**\n- **梅尔滤波器组**\n- 离散余弦变换(DCT)\n\n其中最重要的就是FFT和梅尔滤波器组，这两个进行了主要的降维操作。\n\n## 了解相关库和函数\n\n- scipy.io.wavfile\n- python_speech_features\n- librosa\n- pydub\n- tf.sparse_tensor_to_dense\n- tf.edit_distance\n- tf.nn.ctc_loss","slug":"深度学习周报week07-week08","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru08001y7bag2rb1245z","content":"<h2 id=\"音频分类\"><a href=\"#音频分类\" class=\"headerlink\" title=\"音频分类\"></a>音频分类</h2><p>将1000个音频分别放入对应文件夹中：</p>\n<p><img src=\"/images/classification.PNG\" alt=\"\"></p>\n<p><code>filename.txt</code> 存储文件对应位置。</p>\n<p>以上所有存储在<code>classification</code>文件夹中。</p>\n<p>建立<code>filename.py</code>来生成<code>filename.txt</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">textname = <span class=\"string\">'filename.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(textname, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, afiles <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'./classification'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> subdir <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> subroot, subdirs, subfiles <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'./classification/'</span>+subdir):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> subfiles:</span><br><span class=\"line\">                    apath = os.path.join(subdir, filename)</span><br><span class=\"line\">                    f.write(apath)</span><br><span class=\"line\">                    f.write(<span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure>\n<p>生成的<code>filename.txt</code>为：</p>\n<p><img src=\"/images/filename_txt.PNG\" alt=\"\"></p>\n<h2 id=\"MFCC\"><a href=\"#MFCC\" class=\"headerlink\" title=\"MFCC\"></a>MFCC</h2><p><a href=\"https://blog.csdn.net/fengzhonghen/article/details/51722555\" target=\"_blank\" rel=\"noopener\">学习链接</a></p>\n<p><strong>MFCC</strong>(Mel-frequency cepstral coefficients)：梅尔频率倒谱系数。</p>\n<p>梅尔频率是基于人耳听觉特性提出的概念， 它与Hz频率成非线性对应关系。</p>\n<p>MFCC则是利用它们之间的这种关系，计算得到的Hz频谱特征，<u>主要用于语音数据特征提取和降低运算维度</u>。</p>\n<p><u>主要用于语音数据特征提取和降低运算维度。</u></p>\n<p>例如：对于一帧有512维(采样点)数据，经过MFCC后可以提取出最重要的40维(一般而言)数据同时也达到了将维的目的。</p>\n<p>MFCC的步骤为：</p>\n<ul>\n<li>预加重</li>\n<li>分帧</li>\n<li>加窗</li>\n<li><strong>快速傅里叶变换(FFT)</strong></li>\n<li><strong>梅尔滤波器组</strong></li>\n<li>离散余弦变换(DCT)</li>\n</ul>\n<p>其中最重要的就是FFT和梅尔滤波器组，这两个进行了主要的降维操作。</p>\n<h2 id=\"了解相关库和函数\"><a href=\"#了解相关库和函数\" class=\"headerlink\" title=\"了解相关库和函数\"></a>了解相关库和函数</h2><ul>\n<li>scipy.io.wavfile</li>\n<li>python_speech_features</li>\n<li>librosa</li>\n<li>pydub</li>\n<li>tf.sparse_tensor_to_dense</li>\n<li>tf.edit_distance</li>\n<li>tf.nn.ctc_loss</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"音频分类\"><a href=\"#音频分类\" class=\"headerlink\" title=\"音频分类\"></a>音频分类</h2><p>将1000个音频分别放入对应文件夹中：</p>\n<p><img src=\"/images/classification.PNG\" alt=\"\"></p>\n<p><code>filename.txt</code> 存储文件对应位置。</p>\n<p>以上所有存储在<code>classification</code>文件夹中。</p>\n<p>建立<code>filename.py</code>来生成<code>filename.txt</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">textname = <span class=\"string\">'filename.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(textname, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, afiles <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'./classification'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> subdir <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> subroot, subdirs, subfiles <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'./classification/'</span>+subdir):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> subfiles:</span><br><span class=\"line\">                    apath = os.path.join(subdir, filename)</span><br><span class=\"line\">                    f.write(apath)</span><br><span class=\"line\">                    f.write(<span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure>\n<p>生成的<code>filename.txt</code>为：</p>\n<p><img src=\"/images/filename_txt.PNG\" alt=\"\"></p>\n<h2 id=\"MFCC\"><a href=\"#MFCC\" class=\"headerlink\" title=\"MFCC\"></a>MFCC</h2><p><a href=\"https://blog.csdn.net/fengzhonghen/article/details/51722555\" target=\"_blank\" rel=\"noopener\">学习链接</a></p>\n<p><strong>MFCC</strong>(Mel-frequency cepstral coefficients)：梅尔频率倒谱系数。</p>\n<p>梅尔频率是基于人耳听觉特性提出的概念， 它与Hz频率成非线性对应关系。</p>\n<p>MFCC则是利用它们之间的这种关系，计算得到的Hz频谱特征，<u>主要用于语音数据特征提取和降低运算维度</u>。</p>\n<p><u>主要用于语音数据特征提取和降低运算维度。</u></p>\n<p>例如：对于一帧有512维(采样点)数据，经过MFCC后可以提取出最重要的40维(一般而言)数据同时也达到了将维的目的。</p>\n<p>MFCC的步骤为：</p>\n<ul>\n<li>预加重</li>\n<li>分帧</li>\n<li>加窗</li>\n<li><strong>快速傅里叶变换(FFT)</strong></li>\n<li><strong>梅尔滤波器组</strong></li>\n<li>离散余弦变换(DCT)</li>\n</ul>\n<p>其中最重要的就是FFT和梅尔滤波器组，这两个进行了主要的降维操作。</p>\n<h2 id=\"了解相关库和函数\"><a href=\"#了解相关库和函数\" class=\"headerlink\" title=\"了解相关库和函数\"></a>了解相关库和函数</h2><ul>\n<li>scipy.io.wavfile</li>\n<li>python_speech_features</li>\n<li>librosa</li>\n<li>pydub</li>\n<li>tf.sparse_tensor_to_dense</li>\n<li>tf.edit_distance</li>\n<li>tf.nn.ctc_loss</li>\n</ul>\n"},{"title":"深度学习周报week09-week10","toc":true,"date":"2018-06-27T12:06:00.000Z","_content":"\n## 项目实现\n\n- 分类后的音频作为训练集\n\n\n- 读入训练集后对语音进行初始化和特征提取\n- 定义参数\n- 实现网络结构（七层卷积三次下采样）\n- 训练模型并进行检验（对单词识别）\n\n\n## 优化\n\n根据准确率和Tensor flow Board不断调整参数和网络结构。","source":"_posts/深度学习周报week09-week10.md","raw":"---\ntitle: 深度学习周报week09-week10\ntoc: true\ndate: 2018-06-27 20:06:00\ncategories:\n- deep learning\ntags:\n---\n\n## 项目实现\n\n- 分类后的音频作为训练集\n\n\n- 读入训练集后对语音进行初始化和特征提取\n- 定义参数\n- 实现网络结构（七层卷积三次下采样）\n- 训练模型并进行检验（对单词识别）\n\n\n## 优化\n\n根据准确率和Tensor flow Board不断调整参数和网络结构。","slug":"深度学习周报week09-week10","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0b00217bagws0zzwb1","content":"<h2 id=\"项目实现\"><a href=\"#项目实现\" class=\"headerlink\" title=\"项目实现\"></a>项目实现</h2><ul>\n<li>分类后的音频作为训练集</li>\n</ul>\n<ul>\n<li>读入训练集后对语音进行初始化和特征提取</li>\n<li>定义参数</li>\n<li>实现网络结构（七层卷积三次下采样）</li>\n<li>训练模型并进行检验（对单词识别）</li>\n</ul>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>根据准确率和Tensor flow Board不断调整参数和网络结构。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目实现\"><a href=\"#项目实现\" class=\"headerlink\" title=\"项目实现\"></a>项目实现</h2><ul>\n<li>分类后的音频作为训练集</li>\n</ul>\n<ul>\n<li>读入训练集后对语音进行初始化和特征提取</li>\n<li>定义参数</li>\n<li>实现网络结构（七层卷积三次下采样）</li>\n<li>训练模型并进行检验（对单词识别）</li>\n</ul>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>根据准确率和Tensor flow Board不断调整参数和网络结构。</p>\n"},{"title":"深度学习周报week11-week12","toc":true,"date":"2018-06-27T12:22:11.000Z","_content":"\n## 实现本地服务器\n\n## Tornado\n\n利用tornado框架搭建本地服务器。\n\n主要学习以下内容：\n\n- define\n- Future\n- RequestHandler\n- 协程装饰器\n- http相关\n- json相关\n- 正则表达式匹配url\n\n\n## 优化\n\n继续调整参数和网络进行优化\n\n## 整合\n\n将训练模型单独整合为一个函数，server单独为一个文件，运行server，在开启本地服务器时，调用此函数训练模型，选定一个测试数据后直接进行预测。","source":"_posts/深度学习周报week11-week12.md","raw":"---\ntitle: 深度学习周报week11-week12\ntoc: true\ndate: 2018-06-27 20:22:11\ncategories:\n- deep learning\ntags:\n---\n\n## 实现本地服务器\n\n## Tornado\n\n利用tornado框架搭建本地服务器。\n\n主要学习以下内容：\n\n- define\n- Future\n- RequestHandler\n- 协程装饰器\n- http相关\n- json相关\n- 正则表达式匹配url\n\n\n## 优化\n\n继续调整参数和网络进行优化\n\n## 整合\n\n将训练模型单独整合为一个函数，server单独为一个文件，运行server，在开启本地服务器时，调用此函数训练模型，选定一个测试数据后直接进行预测。","slug":"深度学习周报week11-week12","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0d00247bag1hhfvffp","content":"<h2 id=\"实现本地服务器\"><a href=\"#实现本地服务器\" class=\"headerlink\" title=\"实现本地服务器\"></a>实现本地服务器</h2><h2 id=\"Tornado\"><a href=\"#Tornado\" class=\"headerlink\" title=\"Tornado\"></a>Tornado</h2><p>利用tornado框架搭建本地服务器。</p>\n<p>主要学习以下内容：</p>\n<ul>\n<li>define</li>\n<li>Future</li>\n<li>RequestHandler</li>\n<li>协程装饰器</li>\n<li>http相关</li>\n<li>json相关</li>\n<li>正则表达式匹配url</li>\n</ul>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>继续调整参数和网络进行优化</p>\n<h2 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h2><p>将训练模型单独整合为一个函数，server单独为一个文件，运行server，在开启本地服务器时，调用此函数训练模型，选定一个测试数据后直接进行预测。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实现本地服务器\"><a href=\"#实现本地服务器\" class=\"headerlink\" title=\"实现本地服务器\"></a>实现本地服务器</h2><h2 id=\"Tornado\"><a href=\"#Tornado\" class=\"headerlink\" title=\"Tornado\"></a>Tornado</h2><p>利用tornado框架搭建本地服务器。</p>\n<p>主要学习以下内容：</p>\n<ul>\n<li>define</li>\n<li>Future</li>\n<li>RequestHandler</li>\n<li>协程装饰器</li>\n<li>http相关</li>\n<li>json相关</li>\n<li>正则表达式匹配url</li>\n</ul>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>继续调整参数和网络进行优化</p>\n<h2 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h2><p>将训练模型单独整合为一个函数，server单独为一个文件，运行server，在开启本地服务器时，调用此函数训练模型，选定一个测试数据后直接进行预测。</p>\n"},{"title":"猫眼电影加密数字破解（爬取评分票房票价）","toc":true,"date":"2018-07-01T14:05:27.000Z","_content":"\n## 背景\n\n在爬取猫眼电影相关数据时发现爬取下来的评分、票房、票价不是具体的数字而是一串类似于`\\uf5fb`的码，需要解密。\n\n而这些密码是每次访问时随机生成的，和0-9的映射关系也是随机的。\n\n## 解密办法\n\n下载动态字体文件，解析映射关系。\n\n## 解密思路\n\n首先找到动态字体文件的地址（head标签内的style标签内）：\n\n```html\n<style>\n    @font-face {\n      font-family: stonefont;\n      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot');\n      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot?#iefix') format('embedded-opentype'),\n           url('//vfile.meituan.net/colorstone/8f497cdb4e39d1f3dcbafa28a486aea42076.woff') format('woff');\n    }\n\n    .stonefont {\n      font-family: stonefont;\n    }\n  </style>\n```\n\n其中的.woff文件是我们需要的。\n\n爬取代码如下（利用**scrapy**）：\n\n```python\n#下载字体文件\nfont_url = sel.xpath('/html/head/style/text()').extract()[0]\nfont_url = 'http:'+font_url[font_url.rfind('url')+5:font_url.find('woff')+4]\nprint(font_url)\nwoff_path = 'tmp.woff'\nf = urllib.request.urlopen(font_url)\ndata = f.read()\nwith open(woff_path, \"wb\") as code:\n    code.write(data)\n```\n\n利用`TTFont`将`woff`文件转换为`xml`文件：\n\n```python\nfont1 = TTFont('tmp.woff')\nfont1.saveXML('tmp.xml')\n```\n\n查看xml文件会发现一个映射关系：\n\n```xml\n<GlyphOrder>\n    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->\n    <GlyphID id=\"0\" name=\"glyph00000\"/>\n    <GlyphID id=\"1\" name=\"x\"/>\n    <GlyphID id=\"2\" name=\"uniF753\"/>\n    <GlyphID id=\"3\" name=\"uniEA72\"/>\n    <GlyphID id=\"4\" name=\"uniEE4E\"/>\n    <GlyphID id=\"5\" name=\"uniECE6\"/>\n    <GlyphID id=\"6\" name=\"uniE140\"/>\n    <GlyphID id=\"7\" name=\"uniF4B0\"/>\n    <GlyphID id=\"8\" name=\"uniE1B7\"/>\n    <GlyphID id=\"9\" name=\"uniF245\"/>\n    <GlyphID id=\"10\" name=\"uniE488\"/>\n    <GlyphID id=\"11\" name=\"uniE6DA\"/>\n</GlyphOrder>\n```\n\n但是使用这个映射关系解码发现解密出来的数字不对，因此GlyphOrder并不是我们需要的映射关系。\n\nxml文件往下翻，发现了字体数据：\n\n```xml\n<TTGlyph name=\"uniF245\" xMin=\"0\" yMin=\"0\" xMax=\"508\" yMax=\"716\">\n  <contour>\n    <pt x=\"323\" y=\"0\" on=\"1\"/>\n    <pt x=\"323\" y=\"171\" on=\"1\"/>\n    <pt x=\"13\" y=\"171\" on=\"1\"/>\n    <pt x=\"13\" y=\"252\" on=\"1\"/>\n    <pt x=\"339\" y=\"716\" on=\"1\"/>\n    <pt x=\"411\" y=\"716\" on=\"1\"/>\n    <pt x=\"411\" y=\"252\" on=\"1\"/>\n    <pt x=\"508\" y=\"252\" on=\"1\"/>\n    <pt x=\"508\" y=\"171\" on=\"1\"/>\n    <pt x=\"411\" y=\"171\" on=\"1\"/>\n    <pt x=\"411\" y=\"0\" on=\"1\"/>\n  </contour>\n  <contour>\n    <pt x=\"323\" y=\"252\" on=\"1\"/>\n    <pt x=\"323\" y=\"575\" on=\"1\"/>\n    <pt x=\"99\" y=\"252\" on=\"1\"/>\n  </contour>\n  <instructions/>\n</TTGlyph>\n```\n\n看到这里突然想到，无论unicode码怎么变，数字渲染出来的样子是不会变的，因此可以从字体数据入手：\n\n**0-9每一个数字都有对应的一个`TTGlyph`数据，首先对一个已知映射关系的字体文件进行分析，获取0-9的字体数据，然后对于每次下载的动态字体文件，将其字体信息与0-9的字体数据进行对比就可以知道其映射关系了。**\n\n首先需要一份已知映射关系的xml文件作为映射关系对比文件，将其命名为`data.xml`，然后使用[百度字体编辑器](http://fontstore.baidu.com/static/editor/index.html)分析其对应的`woff`获取其映射关系(由于我的`data.xml`对应的`woff`文件删掉了，因此这里截图的是一个随机的`woff`文件对应的映射关系，可能与后边的代码内的映射关系不同，特此说明)：\n\n![](/images/woff_decode.PNG)\n\n创建`data.xml`对应的映射关系的字典：\n\n```python\ndata_dict = {\"uniE184\":\"4\",\"uniE80B\":\"3\",\"uniF22E\":\"8\",\"uniE14C\":\"0\",\n\t\t\"uniF5FB\":\"6\",\"uniEE59\":\"5\",\"uniEBD3\":\"1\",\"uniED85\":\"7\",\"uniECB8\":\"2\",\"uniE96A\":\"9\"}\n```\n\n要对比字体数据就要对xml文件进行分析，因此创建相关xml分析函数：\n\n获取某节点指定属性的值：\n\n```python\ndef getValue(node, attribute):\n\treturn node.attributes[attribute].value\n```\n\n字体数据的标签为`TTGlyph`，创建获取一个`xml`文件中所有的文字信息节点的函数：\n\n```python\ndef getTTGlyphList(xml_path):\n\tdataXmlfilepath = os.path.abspath(xml_path)\n\tdataDomObj = xmldom.parse(dataXmlfilepath)\n\tdataElementObj = dataDomObj.documentElement\n\tdataTTGlyphList = dataElementObj.getElementsByTagName('TTGlyph')\n\treturn dataTTGlyphList\n```\n\n判断两个`TTGlyph`节点数据是否相同的函数：\n\n```python\ndef isEqual(ttglyph_a, ttglyph_b):\n\ta_pt_list = ttglyph_a.getElementsByTagName('pt')\n\tb_pt_list = ttglyph_b.getElementsByTagName('pt')\n\ta_len = len(a_pt_list)\n\tb_len = len(b_pt_list)\n\tif a_len != b_len:\n\t\treturn False\n\tfor i in range(a_len):\n\t\tif getValue(a_pt_list[i], 'x') != getValue(b_pt_list[i], 'x')  or getValue(a_pt_list[i], 'y') != getValue(b_pt_list[i], 'y') or getValue(a_pt_list[i], 'on') != getValue(b_pt_list[i], 'on'):\n\t\t\treturn False\n\treturn True\n```\n\n===============================================\n\n相关函数建好后可以继续分析：\n\n由于每次的unicode码是随机生成的，因此还需要知道新的0-9对应的unicode码是多少，为了方便直接使用函数获取了上边提到过的映射关系不对的`GlyphOrder`，是一个`key`为unicode，`value`为数字的字典：\n\n```python\ndecode_dict = dict(enumerate(font1.getGlyphOrder()[2:]))\ndecode_dict = dict(zip(decode_dict.values(),decode_dict.keys()))\t\n```\n\n获取已知映射关系的`data.xml`的字体数据节点和新的动态字体文件的数据节点：\n\n```python\ndataTTGlyphList = getTTGlyphList(\"data.xml\")\ntmpTTGlyphList = getTTGlyphList(\"tmp.xml\")\n```\n\n利用字体数据更新映射字典：\n\n```python\ndecode_dict = refresh(decode_dict,tmpTTGlyphList,dataTTGlyphList)\n```\n\n更新函数的具体实现如下：\n\n```python\ndef refresh(dict, ttGlyphList_a, ttGlyphList_data):\n\tdata_dict = {\"uniE184\":\"4\",\"uniE80B\":\"3\",\"uniF22E\":\"8\",\"uniE14C\":\"0\",\n\t\t\"uniF5FB\":\"6\",\"uniEE59\":\"5\",\"uniEBD3\":\"1\",\"uniED85\":\"7\",\"uniECB8\":\"2\",\"uniE96A\":\"9\"}\n\tdata_keys = data_dict.keys()\n\tfor ttglyph_data in ttGlyphList_data:\n\t\tif \tgetValue(ttglyph_data,'name') in data_keys:\n\t\t\tfor ttglyph_a in ttGlyphList_a:\n\t\t\t\tif isEqual(ttglyph_a, ttglyph_data):\n\t\t\t\t\tdict[getValue(ttglyph_a,'name')] = data_dict[getValue(ttglyph_data,'name')]\n\t\t\t\t\tbreak\n\treturn dict\n```\n\n考虑到小数的情况，加入小数点映射：\n\n```python\ndecode_dict['.'] = '.'\n```\n\n实现解码函数（输入映射字典和一个需要解密的数值，输出解密后的结果如15.6）：\n\n```python\ndef decode(decode_dict, code):\n\t_lst_uincode = []\n\tfor item in code.__repr__().split(\"\\\\u\"):\n\t\t_lst_uincode.append(\"uni\" + item[:4].upper())\n\t\tif item[4:]:\n\t\t\t_lst_uincode.append(item[4:])\n\t_lst_uincode = _lst_uincode[1:-1]\n\tresult = \"\".join([str(decode_dict[i]) for i in _lst_uincode])\n\treturn result\n```\n\n\n\n==================================================\n\n[具体代码链接](https://github.com/SoftwareSAD/Spider/blob/master/rowpiece/rowpiece/spiders/RowpieceSpider.py)","source":"_posts/猫眼电影加密数字破解（爬取评分票房票价）.md","raw":"---\ntitle: 猫眼电影加密数字破解（爬取评分票房票价）\ntoc: true\ndate: 2018-07-01 22:05:27\ncategories:\n- methods\ntags:\n- 爬虫\n- Python\n---\n\n## 背景\n\n在爬取猫眼电影相关数据时发现爬取下来的评分、票房、票价不是具体的数字而是一串类似于`\\uf5fb`的码，需要解密。\n\n而这些密码是每次访问时随机生成的，和0-9的映射关系也是随机的。\n\n## 解密办法\n\n下载动态字体文件，解析映射关系。\n\n## 解密思路\n\n首先找到动态字体文件的地址（head标签内的style标签内）：\n\n```html\n<style>\n    @font-face {\n      font-family: stonefont;\n      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot');\n      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot?#iefix') format('embedded-opentype'),\n           url('//vfile.meituan.net/colorstone/8f497cdb4e39d1f3dcbafa28a486aea42076.woff') format('woff');\n    }\n\n    .stonefont {\n      font-family: stonefont;\n    }\n  </style>\n```\n\n其中的.woff文件是我们需要的。\n\n爬取代码如下（利用**scrapy**）：\n\n```python\n#下载字体文件\nfont_url = sel.xpath('/html/head/style/text()').extract()[0]\nfont_url = 'http:'+font_url[font_url.rfind('url')+5:font_url.find('woff')+4]\nprint(font_url)\nwoff_path = 'tmp.woff'\nf = urllib.request.urlopen(font_url)\ndata = f.read()\nwith open(woff_path, \"wb\") as code:\n    code.write(data)\n```\n\n利用`TTFont`将`woff`文件转换为`xml`文件：\n\n```python\nfont1 = TTFont('tmp.woff')\nfont1.saveXML('tmp.xml')\n```\n\n查看xml文件会发现一个映射关系：\n\n```xml\n<GlyphOrder>\n    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->\n    <GlyphID id=\"0\" name=\"glyph00000\"/>\n    <GlyphID id=\"1\" name=\"x\"/>\n    <GlyphID id=\"2\" name=\"uniF753\"/>\n    <GlyphID id=\"3\" name=\"uniEA72\"/>\n    <GlyphID id=\"4\" name=\"uniEE4E\"/>\n    <GlyphID id=\"5\" name=\"uniECE6\"/>\n    <GlyphID id=\"6\" name=\"uniE140\"/>\n    <GlyphID id=\"7\" name=\"uniF4B0\"/>\n    <GlyphID id=\"8\" name=\"uniE1B7\"/>\n    <GlyphID id=\"9\" name=\"uniF245\"/>\n    <GlyphID id=\"10\" name=\"uniE488\"/>\n    <GlyphID id=\"11\" name=\"uniE6DA\"/>\n</GlyphOrder>\n```\n\n但是使用这个映射关系解码发现解密出来的数字不对，因此GlyphOrder并不是我们需要的映射关系。\n\nxml文件往下翻，发现了字体数据：\n\n```xml\n<TTGlyph name=\"uniF245\" xMin=\"0\" yMin=\"0\" xMax=\"508\" yMax=\"716\">\n  <contour>\n    <pt x=\"323\" y=\"0\" on=\"1\"/>\n    <pt x=\"323\" y=\"171\" on=\"1\"/>\n    <pt x=\"13\" y=\"171\" on=\"1\"/>\n    <pt x=\"13\" y=\"252\" on=\"1\"/>\n    <pt x=\"339\" y=\"716\" on=\"1\"/>\n    <pt x=\"411\" y=\"716\" on=\"1\"/>\n    <pt x=\"411\" y=\"252\" on=\"1\"/>\n    <pt x=\"508\" y=\"252\" on=\"1\"/>\n    <pt x=\"508\" y=\"171\" on=\"1\"/>\n    <pt x=\"411\" y=\"171\" on=\"1\"/>\n    <pt x=\"411\" y=\"0\" on=\"1\"/>\n  </contour>\n  <contour>\n    <pt x=\"323\" y=\"252\" on=\"1\"/>\n    <pt x=\"323\" y=\"575\" on=\"1\"/>\n    <pt x=\"99\" y=\"252\" on=\"1\"/>\n  </contour>\n  <instructions/>\n</TTGlyph>\n```\n\n看到这里突然想到，无论unicode码怎么变，数字渲染出来的样子是不会变的，因此可以从字体数据入手：\n\n**0-9每一个数字都有对应的一个`TTGlyph`数据，首先对一个已知映射关系的字体文件进行分析，获取0-9的字体数据，然后对于每次下载的动态字体文件，将其字体信息与0-9的字体数据进行对比就可以知道其映射关系了。**\n\n首先需要一份已知映射关系的xml文件作为映射关系对比文件，将其命名为`data.xml`，然后使用[百度字体编辑器](http://fontstore.baidu.com/static/editor/index.html)分析其对应的`woff`获取其映射关系(由于我的`data.xml`对应的`woff`文件删掉了，因此这里截图的是一个随机的`woff`文件对应的映射关系，可能与后边的代码内的映射关系不同，特此说明)：\n\n![](/images/woff_decode.PNG)\n\n创建`data.xml`对应的映射关系的字典：\n\n```python\ndata_dict = {\"uniE184\":\"4\",\"uniE80B\":\"3\",\"uniF22E\":\"8\",\"uniE14C\":\"0\",\n\t\t\"uniF5FB\":\"6\",\"uniEE59\":\"5\",\"uniEBD3\":\"1\",\"uniED85\":\"7\",\"uniECB8\":\"2\",\"uniE96A\":\"9\"}\n```\n\n要对比字体数据就要对xml文件进行分析，因此创建相关xml分析函数：\n\n获取某节点指定属性的值：\n\n```python\ndef getValue(node, attribute):\n\treturn node.attributes[attribute].value\n```\n\n字体数据的标签为`TTGlyph`，创建获取一个`xml`文件中所有的文字信息节点的函数：\n\n```python\ndef getTTGlyphList(xml_path):\n\tdataXmlfilepath = os.path.abspath(xml_path)\n\tdataDomObj = xmldom.parse(dataXmlfilepath)\n\tdataElementObj = dataDomObj.documentElement\n\tdataTTGlyphList = dataElementObj.getElementsByTagName('TTGlyph')\n\treturn dataTTGlyphList\n```\n\n判断两个`TTGlyph`节点数据是否相同的函数：\n\n```python\ndef isEqual(ttglyph_a, ttglyph_b):\n\ta_pt_list = ttglyph_a.getElementsByTagName('pt')\n\tb_pt_list = ttglyph_b.getElementsByTagName('pt')\n\ta_len = len(a_pt_list)\n\tb_len = len(b_pt_list)\n\tif a_len != b_len:\n\t\treturn False\n\tfor i in range(a_len):\n\t\tif getValue(a_pt_list[i], 'x') != getValue(b_pt_list[i], 'x')  or getValue(a_pt_list[i], 'y') != getValue(b_pt_list[i], 'y') or getValue(a_pt_list[i], 'on') != getValue(b_pt_list[i], 'on'):\n\t\t\treturn False\n\treturn True\n```\n\n===============================================\n\n相关函数建好后可以继续分析：\n\n由于每次的unicode码是随机生成的，因此还需要知道新的0-9对应的unicode码是多少，为了方便直接使用函数获取了上边提到过的映射关系不对的`GlyphOrder`，是一个`key`为unicode，`value`为数字的字典：\n\n```python\ndecode_dict = dict(enumerate(font1.getGlyphOrder()[2:]))\ndecode_dict = dict(zip(decode_dict.values(),decode_dict.keys()))\t\n```\n\n获取已知映射关系的`data.xml`的字体数据节点和新的动态字体文件的数据节点：\n\n```python\ndataTTGlyphList = getTTGlyphList(\"data.xml\")\ntmpTTGlyphList = getTTGlyphList(\"tmp.xml\")\n```\n\n利用字体数据更新映射字典：\n\n```python\ndecode_dict = refresh(decode_dict,tmpTTGlyphList,dataTTGlyphList)\n```\n\n更新函数的具体实现如下：\n\n```python\ndef refresh(dict, ttGlyphList_a, ttGlyphList_data):\n\tdata_dict = {\"uniE184\":\"4\",\"uniE80B\":\"3\",\"uniF22E\":\"8\",\"uniE14C\":\"0\",\n\t\t\"uniF5FB\":\"6\",\"uniEE59\":\"5\",\"uniEBD3\":\"1\",\"uniED85\":\"7\",\"uniECB8\":\"2\",\"uniE96A\":\"9\"}\n\tdata_keys = data_dict.keys()\n\tfor ttglyph_data in ttGlyphList_data:\n\t\tif \tgetValue(ttglyph_data,'name') in data_keys:\n\t\t\tfor ttglyph_a in ttGlyphList_a:\n\t\t\t\tif isEqual(ttglyph_a, ttglyph_data):\n\t\t\t\t\tdict[getValue(ttglyph_a,'name')] = data_dict[getValue(ttglyph_data,'name')]\n\t\t\t\t\tbreak\n\treturn dict\n```\n\n考虑到小数的情况，加入小数点映射：\n\n```python\ndecode_dict['.'] = '.'\n```\n\n实现解码函数（输入映射字典和一个需要解密的数值，输出解密后的结果如15.6）：\n\n```python\ndef decode(decode_dict, code):\n\t_lst_uincode = []\n\tfor item in code.__repr__().split(\"\\\\u\"):\n\t\t_lst_uincode.append(\"uni\" + item[:4].upper())\n\t\tif item[4:]:\n\t\t\t_lst_uincode.append(item[4:])\n\t_lst_uincode = _lst_uincode[1:-1]\n\tresult = \"\".join([str(decode_dict[i]) for i in _lst_uincode])\n\treturn result\n```\n\n\n\n==================================================\n\n[具体代码链接](https://github.com/SoftwareSAD/Spider/blob/master/rowpiece/rowpiece/spiders/RowpieceSpider.py)","slug":"猫眼电影加密数字破解（爬取评分票房票价）","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0f00277bagssi57lul","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在爬取猫眼电影相关数据时发现爬取下来的评分、票房、票价不是具体的数字而是一串类似于<code>\\uf5fb</code>的码，需要解密。</p>\n<p>而这些密码是每次访问时随机生成的，和0-9的映射关系也是随机的。</p>\n<h2 id=\"解密办法\"><a href=\"#解密办法\" class=\"headerlink\" title=\"解密办法\"></a>解密办法</h2><p>下载动态字体文件，解析映射关系。</p>\n<h2 id=\"解密思路\"><a href=\"#解密思路\" class=\"headerlink\" title=\"解密思路\"></a>解密思路</h2><p>首先找到动态字体文件的地址（head标签内的style标签内）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    @<span class=\"keyword\">font-face</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      font-family: stonefont;</span></span><br><span class=\"line\"><span class=\"undefined\">      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot');</span></span><br><span class=\"line\"><span class=\"undefined\">      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot?#iefix') format('embedded-opentype'),</span></span><br><span class=\"line\"><span class=\"undefined\">           url('//vfile.meituan.net/colorstone/8f497cdb4e39d1f3dcbafa28a486aea42076.woff') format('woff');</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.stonefont</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      font-family: stonefont;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中的.woff文件是我们需要的。</p>\n<p>爬取代码如下（利用<strong>scrapy</strong>）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载字体文件</span></span><br><span class=\"line\">font_url = sel.xpath(<span class=\"string\">'/html/head/style/text()'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">font_url = <span class=\"string\">'http:'</span>+font_url[font_url.rfind(<span class=\"string\">'url'</span>)+<span class=\"number\">5</span>:font_url.find(<span class=\"string\">'woff'</span>)+<span class=\"number\">4</span>]</span><br><span class=\"line\">print(font_url)</span><br><span class=\"line\">woff_path = <span class=\"string\">'tmp.woff'</span></span><br><span class=\"line\">f = urllib.request.urlopen(font_url)</span><br><span class=\"line\">data = f.read()</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(woff_path, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> code:</span><br><span class=\"line\">    code.write(data)</span><br></pre></td></tr></table></figure>\n<p>利用<code>TTFont</code>将<code>woff</code>文件转换为<code>xml</code>文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font1 = TTFont(<span class=\"string\">'tmp.woff'</span>)</span><br><span class=\"line\">font1.saveXML(<span class=\"string\">'tmp.xml'</span>)</span><br></pre></td></tr></table></figure>\n<p>查看xml文件会发现一个映射关系：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GlyphOrder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- The 'id' attribute is only for humans; it is ignored when parsed. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"glyph00000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF753\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniEA72\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"4\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniEE4E\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniECE6\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"6\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE140\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"7\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF4B0\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE1B7\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"9\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF245\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE488\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"11\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE6DA\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">GlyphOrder</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是使用这个映射关系解码发现解密出来的数字不对，因此GlyphOrder并不是我们需要的映射关系。</p>\n<p>xml文件往下翻，发现了字体数据：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TTGlyph</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF245\"</span> <span class=\"attr\">xMin</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">yMin</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">xMax</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">yMax</span>=<span class=\"string\">\"716\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"339\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"716\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"716\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"575\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"99\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">instructions</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TTGlyph</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看到这里突然想到，无论unicode码怎么变，数字渲染出来的样子是不会变的，因此可以从字体数据入手：</p>\n<p><strong>0-9每一个数字都有对应的一个<code>TTGlyph</code>数据，首先对一个已知映射关系的字体文件进行分析，获取0-9的字体数据，然后对于每次下载的动态字体文件，将其字体信息与0-9的字体数据进行对比就可以知道其映射关系了。</strong></p>\n<p>首先需要一份已知映射关系的xml文件作为映射关系对比文件，将其命名为<code>data.xml</code>，然后使用<a href=\"http://fontstore.baidu.com/static/editor/index.html\" target=\"_blank\" rel=\"noopener\">百度字体编辑器</a>分析其对应的<code>woff</code>获取其映射关系(由于我的<code>data.xml</code>对应的<code>woff</code>文件删掉了，因此这里截图的是一个随机的<code>woff</code>文件对应的映射关系，可能与后边的代码内的映射关系不同，特此说明)：</p>\n<p><img src=\"/images/woff_decode.PNG\" alt=\"\"></p>\n<p>创建<code>data.xml</code>对应的映射关系的字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_dict = &#123;<span class=\"string\">\"uniE184\"</span>:<span class=\"string\">\"4\"</span>,<span class=\"string\">\"uniE80B\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"uniF22E\"</span>:<span class=\"string\">\"8\"</span>,<span class=\"string\">\"uniE14C\"</span>:<span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"uniF5FB\"</span>:<span class=\"string\">\"6\"</span>,<span class=\"string\">\"uniEE59\"</span>:<span class=\"string\">\"5\"</span>,<span class=\"string\">\"uniEBD3\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"uniED85\"</span>:<span class=\"string\">\"7\"</span>,<span class=\"string\">\"uniECB8\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"uniE96A\"</span>:<span class=\"string\">\"9\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>要对比字体数据就要对xml文件进行分析，因此创建相关xml分析函数：</p>\n<p>获取某节点指定属性的值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getValue</span><span class=\"params\">(node, attribute)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node.attributes[attribute].value</span><br></pre></td></tr></table></figure>\n<p>字体数据的标签为<code>TTGlyph</code>，创建获取一个<code>xml</code>文件中所有的文字信息节点的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getTTGlyphList</span><span class=\"params\">(xml_path)</span>:</span></span><br><span class=\"line\">\tdataXmlfilepath = os.path.abspath(xml_path)</span><br><span class=\"line\">\tdataDomObj = xmldom.parse(dataXmlfilepath)</span><br><span class=\"line\">\tdataElementObj = dataDomObj.documentElement</span><br><span class=\"line\">\tdataTTGlyphList = dataElementObj.getElementsByTagName(<span class=\"string\">'TTGlyph'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dataTTGlyphList</span><br></pre></td></tr></table></figure>\n<p>判断两个<code>TTGlyph</code>节点数据是否相同的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEqual</span><span class=\"params\">(ttglyph_a, ttglyph_b)</span>:</span></span><br><span class=\"line\">\ta_pt_list = ttglyph_a.getElementsByTagName(<span class=\"string\">'pt'</span>)</span><br><span class=\"line\">\tb_pt_list = ttglyph_b.getElementsByTagName(<span class=\"string\">'pt'</span>)</span><br><span class=\"line\">\ta_len = len(a_pt_list)</span><br><span class=\"line\">\tb_len = len(b_pt_list)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a_len != b_len:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(a_len):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> getValue(a_pt_list[i], <span class=\"string\">'x'</span>) != getValue(b_pt_list[i], <span class=\"string\">'x'</span>)  <span class=\"keyword\">or</span> getValue(a_pt_list[i], <span class=\"string\">'y'</span>) != getValue(b_pt_list[i], <span class=\"string\">'y'</span>) <span class=\"keyword\">or</span> getValue(a_pt_list[i], <span class=\"string\">'on'</span>) != getValue(b_pt_list[i], <span class=\"string\">'on'</span>):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>===============================================</p>\n<p>相关函数建好后可以继续分析：</p>\n<p>由于每次的unicode码是随机生成的，因此还需要知道新的0-9对应的unicode码是多少，为了方便直接使用函数获取了上边提到过的映射关系不对的<code>GlyphOrder</code>，是一个<code>key</code>为unicode，<code>value</code>为数字的字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict = dict(enumerate(font1.getGlyphOrder()[<span class=\"number\">2</span>:]))</span><br><span class=\"line\">decode_dict = dict(zip(decode_dict.values(),decode_dict.keys()))</span><br></pre></td></tr></table></figure>\n<p>获取已知映射关系的<code>data.xml</code>的字体数据节点和新的动态字体文件的数据节点：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataTTGlyphList = getTTGlyphList(<span class=\"string\">\"data.xml\"</span>)</span><br><span class=\"line\">tmpTTGlyphList = getTTGlyphList(<span class=\"string\">\"tmp.xml\"</span>)</span><br></pre></td></tr></table></figure>\n<p>利用字体数据更新映射字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict = refresh(decode_dict,tmpTTGlyphList,dataTTGlyphList)</span><br></pre></td></tr></table></figure>\n<p>更新函数的具体实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">refresh</span><span class=\"params\">(dict, ttGlyphList_a, ttGlyphList_data)</span>:</span></span><br><span class=\"line\">\tdata_dict = &#123;<span class=\"string\">\"uniE184\"</span>:<span class=\"string\">\"4\"</span>,<span class=\"string\">\"uniE80B\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"uniF22E\"</span>:<span class=\"string\">\"8\"</span>,<span class=\"string\">\"uniE14C\"</span>:<span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"uniF5FB\"</span>:<span class=\"string\">\"6\"</span>,<span class=\"string\">\"uniEE59\"</span>:<span class=\"string\">\"5\"</span>,<span class=\"string\">\"uniEBD3\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"uniED85\"</span>:<span class=\"string\">\"7\"</span>,<span class=\"string\">\"uniECB8\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"uniE96A\"</span>:<span class=\"string\">\"9\"</span>&#125;</span><br><span class=\"line\">\tdata_keys = data_dict.keys()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ttglyph_data <span class=\"keyword\">in</span> ttGlyphList_data:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> \tgetValue(ttglyph_data,<span class=\"string\">'name'</span>) <span class=\"keyword\">in</span> data_keys:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ttglyph_a <span class=\"keyword\">in</span> ttGlyphList_a:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> isEqual(ttglyph_a, ttglyph_data):</span><br><span class=\"line\">\t\t\t\t\tdict[getValue(ttglyph_a,<span class=\"string\">'name'</span>)] = data_dict[getValue(ttglyph_data,<span class=\"string\">'name'</span>)]</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dict</span><br></pre></td></tr></table></figure>\n<p>考虑到小数的情况，加入小数点映射：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict[<span class=\"string\">'.'</span>] = <span class=\"string\">'.'</span></span><br></pre></td></tr></table></figure>\n<p>实现解码函数（输入映射字典和一个需要解密的数值，输出解密后的结果如15.6）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decode</span><span class=\"params\">(decode_dict, code)</span>:</span></span><br><span class=\"line\">\t_lst_uincode = []</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> code.__repr__().split(<span class=\"string\">\"\\\\u\"</span>):</span><br><span class=\"line\">\t\t_lst_uincode.append(<span class=\"string\">\"uni\"</span> + item[:<span class=\"number\">4</span>].upper())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> item[<span class=\"number\">4</span>:]:</span><br><span class=\"line\">\t\t\t_lst_uincode.append(item[<span class=\"number\">4</span>:])</span><br><span class=\"line\">\t_lst_uincode = _lst_uincode[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]</span><br><span class=\"line\">\tresult = <span class=\"string\">\"\"</span>.join([str(decode_dict[i]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> _lst_uincode])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>==================================================</p>\n<p><a href=\"https://github.com/SoftwareSAD/Spider/blob/master/rowpiece/rowpiece/spiders/RowpieceSpider.py\" target=\"_blank\" rel=\"noopener\">具体代码链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在爬取猫眼电影相关数据时发现爬取下来的评分、票房、票价不是具体的数字而是一串类似于<code>\\uf5fb</code>的码，需要解密。</p>\n<p>而这些密码是每次访问时随机生成的，和0-9的映射关系也是随机的。</p>\n<h2 id=\"解密办法\"><a href=\"#解密办法\" class=\"headerlink\" title=\"解密办法\"></a>解密办法</h2><p>下载动态字体文件，解析映射关系。</p>\n<h2 id=\"解密思路\"><a href=\"#解密思路\" class=\"headerlink\" title=\"解密思路\"></a>解密思路</h2><p>首先找到动态字体文件的地址（head标签内的style标签内）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    @<span class=\"keyword\">font-face</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      font-family: stonefont;</span></span><br><span class=\"line\"><span class=\"undefined\">      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot');</span></span><br><span class=\"line\"><span class=\"undefined\">      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot?#iefix') format('embedded-opentype'),</span></span><br><span class=\"line\"><span class=\"undefined\">           url('//vfile.meituan.net/colorstone/8f497cdb4e39d1f3dcbafa28a486aea42076.woff') format('woff');</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.stonefont</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      font-family: stonefont;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中的.woff文件是我们需要的。</p>\n<p>爬取代码如下（利用<strong>scrapy</strong>）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载字体文件</span></span><br><span class=\"line\">font_url = sel.xpath(<span class=\"string\">'/html/head/style/text()'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">font_url = <span class=\"string\">'http:'</span>+font_url[font_url.rfind(<span class=\"string\">'url'</span>)+<span class=\"number\">5</span>:font_url.find(<span class=\"string\">'woff'</span>)+<span class=\"number\">4</span>]</span><br><span class=\"line\">print(font_url)</span><br><span class=\"line\">woff_path = <span class=\"string\">'tmp.woff'</span></span><br><span class=\"line\">f = urllib.request.urlopen(font_url)</span><br><span class=\"line\">data = f.read()</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(woff_path, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> code:</span><br><span class=\"line\">    code.write(data)</span><br></pre></td></tr></table></figure>\n<p>利用<code>TTFont</code>将<code>woff</code>文件转换为<code>xml</code>文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font1 = TTFont(<span class=\"string\">'tmp.woff'</span>)</span><br><span class=\"line\">font1.saveXML(<span class=\"string\">'tmp.xml'</span>)</span><br></pre></td></tr></table></figure>\n<p>查看xml文件会发现一个映射关系：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GlyphOrder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- The 'id' attribute is only for humans; it is ignored when parsed. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"glyph00000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF753\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniEA72\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"4\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniEE4E\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniECE6\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"6\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE140\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"7\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF4B0\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE1B7\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"9\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF245\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE488\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"11\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE6DA\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">GlyphOrder</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是使用这个映射关系解码发现解密出来的数字不对，因此GlyphOrder并不是我们需要的映射关系。</p>\n<p>xml文件往下翻，发现了字体数据：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TTGlyph</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF245\"</span> <span class=\"attr\">xMin</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">yMin</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">xMax</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">yMax</span>=<span class=\"string\">\"716\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"339\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"716\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"716\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"575\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"99\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">instructions</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TTGlyph</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看到这里突然想到，无论unicode码怎么变，数字渲染出来的样子是不会变的，因此可以从字体数据入手：</p>\n<p><strong>0-9每一个数字都有对应的一个<code>TTGlyph</code>数据，首先对一个已知映射关系的字体文件进行分析，获取0-9的字体数据，然后对于每次下载的动态字体文件，将其字体信息与0-9的字体数据进行对比就可以知道其映射关系了。</strong></p>\n<p>首先需要一份已知映射关系的xml文件作为映射关系对比文件，将其命名为<code>data.xml</code>，然后使用<a href=\"http://fontstore.baidu.com/static/editor/index.html\" target=\"_blank\" rel=\"noopener\">百度字体编辑器</a>分析其对应的<code>woff</code>获取其映射关系(由于我的<code>data.xml</code>对应的<code>woff</code>文件删掉了，因此这里截图的是一个随机的<code>woff</code>文件对应的映射关系，可能与后边的代码内的映射关系不同，特此说明)：</p>\n<p><img src=\"/images/woff_decode.PNG\" alt=\"\"></p>\n<p>创建<code>data.xml</code>对应的映射关系的字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_dict = &#123;<span class=\"string\">\"uniE184\"</span>:<span class=\"string\">\"4\"</span>,<span class=\"string\">\"uniE80B\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"uniF22E\"</span>:<span class=\"string\">\"8\"</span>,<span class=\"string\">\"uniE14C\"</span>:<span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"uniF5FB\"</span>:<span class=\"string\">\"6\"</span>,<span class=\"string\">\"uniEE59\"</span>:<span class=\"string\">\"5\"</span>,<span class=\"string\">\"uniEBD3\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"uniED85\"</span>:<span class=\"string\">\"7\"</span>,<span class=\"string\">\"uniECB8\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"uniE96A\"</span>:<span class=\"string\">\"9\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>要对比字体数据就要对xml文件进行分析，因此创建相关xml分析函数：</p>\n<p>获取某节点指定属性的值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getValue</span><span class=\"params\">(node, attribute)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node.attributes[attribute].value</span><br></pre></td></tr></table></figure>\n<p>字体数据的标签为<code>TTGlyph</code>，创建获取一个<code>xml</code>文件中所有的文字信息节点的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getTTGlyphList</span><span class=\"params\">(xml_path)</span>:</span></span><br><span class=\"line\">\tdataXmlfilepath = os.path.abspath(xml_path)</span><br><span class=\"line\">\tdataDomObj = xmldom.parse(dataXmlfilepath)</span><br><span class=\"line\">\tdataElementObj = dataDomObj.documentElement</span><br><span class=\"line\">\tdataTTGlyphList = dataElementObj.getElementsByTagName(<span class=\"string\">'TTGlyph'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dataTTGlyphList</span><br></pre></td></tr></table></figure>\n<p>判断两个<code>TTGlyph</code>节点数据是否相同的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEqual</span><span class=\"params\">(ttglyph_a, ttglyph_b)</span>:</span></span><br><span class=\"line\">\ta_pt_list = ttglyph_a.getElementsByTagName(<span class=\"string\">'pt'</span>)</span><br><span class=\"line\">\tb_pt_list = ttglyph_b.getElementsByTagName(<span class=\"string\">'pt'</span>)</span><br><span class=\"line\">\ta_len = len(a_pt_list)</span><br><span class=\"line\">\tb_len = len(b_pt_list)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a_len != b_len:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(a_len):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> getValue(a_pt_list[i], <span class=\"string\">'x'</span>) != getValue(b_pt_list[i], <span class=\"string\">'x'</span>)  <span class=\"keyword\">or</span> getValue(a_pt_list[i], <span class=\"string\">'y'</span>) != getValue(b_pt_list[i], <span class=\"string\">'y'</span>) <span class=\"keyword\">or</span> getValue(a_pt_list[i], <span class=\"string\">'on'</span>) != getValue(b_pt_list[i], <span class=\"string\">'on'</span>):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>===============================================</p>\n<p>相关函数建好后可以继续分析：</p>\n<p>由于每次的unicode码是随机生成的，因此还需要知道新的0-9对应的unicode码是多少，为了方便直接使用函数获取了上边提到过的映射关系不对的<code>GlyphOrder</code>，是一个<code>key</code>为unicode，<code>value</code>为数字的字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict = dict(enumerate(font1.getGlyphOrder()[<span class=\"number\">2</span>:]))</span><br><span class=\"line\">decode_dict = dict(zip(decode_dict.values(),decode_dict.keys()))</span><br></pre></td></tr></table></figure>\n<p>获取已知映射关系的<code>data.xml</code>的字体数据节点和新的动态字体文件的数据节点：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataTTGlyphList = getTTGlyphList(<span class=\"string\">\"data.xml\"</span>)</span><br><span class=\"line\">tmpTTGlyphList = getTTGlyphList(<span class=\"string\">\"tmp.xml\"</span>)</span><br></pre></td></tr></table></figure>\n<p>利用字体数据更新映射字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict = refresh(decode_dict,tmpTTGlyphList,dataTTGlyphList)</span><br></pre></td></tr></table></figure>\n<p>更新函数的具体实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">refresh</span><span class=\"params\">(dict, ttGlyphList_a, ttGlyphList_data)</span>:</span></span><br><span class=\"line\">\tdata_dict = &#123;<span class=\"string\">\"uniE184\"</span>:<span class=\"string\">\"4\"</span>,<span class=\"string\">\"uniE80B\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"uniF22E\"</span>:<span class=\"string\">\"8\"</span>,<span class=\"string\">\"uniE14C\"</span>:<span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"uniF5FB\"</span>:<span class=\"string\">\"6\"</span>,<span class=\"string\">\"uniEE59\"</span>:<span class=\"string\">\"5\"</span>,<span class=\"string\">\"uniEBD3\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"uniED85\"</span>:<span class=\"string\">\"7\"</span>,<span class=\"string\">\"uniECB8\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"uniE96A\"</span>:<span class=\"string\">\"9\"</span>&#125;</span><br><span class=\"line\">\tdata_keys = data_dict.keys()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ttglyph_data <span class=\"keyword\">in</span> ttGlyphList_data:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> \tgetValue(ttglyph_data,<span class=\"string\">'name'</span>) <span class=\"keyword\">in</span> data_keys:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ttglyph_a <span class=\"keyword\">in</span> ttGlyphList_a:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> isEqual(ttglyph_a, ttglyph_data):</span><br><span class=\"line\">\t\t\t\t\tdict[getValue(ttglyph_a,<span class=\"string\">'name'</span>)] = data_dict[getValue(ttglyph_data,<span class=\"string\">'name'</span>)]</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dict</span><br></pre></td></tr></table></figure>\n<p>考虑到小数的情况，加入小数点映射：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict[<span class=\"string\">'.'</span>] = <span class=\"string\">'.'</span></span><br></pre></td></tr></table></figure>\n<p>实现解码函数（输入映射字典和一个需要解密的数值，输出解密后的结果如15.6）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decode</span><span class=\"params\">(decode_dict, code)</span>:</span></span><br><span class=\"line\">\t_lst_uincode = []</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> code.__repr__().split(<span class=\"string\">\"\\\\u\"</span>):</span><br><span class=\"line\">\t\t_lst_uincode.append(<span class=\"string\">\"uni\"</span> + item[:<span class=\"number\">4</span>].upper())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> item[<span class=\"number\">4</span>:]:</span><br><span class=\"line\">\t\t\t_lst_uincode.append(item[<span class=\"number\">4</span>:])</span><br><span class=\"line\">\t_lst_uincode = _lst_uincode[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]</span><br><span class=\"line\">\tresult = <span class=\"string\">\"\"</span>.join([str(decode_dict[i]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> _lst_uincode])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>==================================================</p>\n<p><a href=\"https://github.com/SoftwareSAD/Spider/blob/master/rowpiece/rowpiece/spiders/RowpieceSpider.py\" target=\"_blank\" rel=\"noopener\">具体代码链接</a></p>\n"},{"title":"系统分析与设计作业FinalReport","toc":true,"date":"2018-06-30T11:27:39.000Z","_content":"\n## 简短的课程学习自我总结（400字以内）\n\n> 请不用讲述与分析、设计、开发、管理无关的话题\n>\n> 可以包括对同学帮助的致谢（同学姓名请用 github 昵称表示，不许出现真实姓名）\n>\n> 0 ~ 400字，即没有这段也没关系\n\n感谢所有队友（[Eileen101    ](https://github.com/orgs/SoftwareSAD/people/Eileen101)、[hanxu1997    ](https://github.com/orgs/SoftwareSAD/people/hanxu1997)、[heygrandpa    ](https://github.com/orgs/SoftwareSAD/people/heygrandpa)、[Lisa-bao    ](https://github.com/orgs/SoftwareSAD/people/Lisa-bao)、[samayuki    ](https://github.com/orgs/SoftwareSAD/people/samayuki)、[Mars_i    ](https://github.com/orgs/SoftwareSAD/people/SusieChang)）在这次作业中所做的所有贡献。\n\n跟着这次课程和队友们一起感受了开发一个项目大概的过程：需求分析、Product Backing、UI设计、迭代等等。同时参与到项目开发中更加了解了前端后端 的联系、熟悉了爬虫技术等。\n\n## PSP 2.1 统计表\n\n| PSP2.1                                | Time(%) |\n| ------------------------------------- | ------- |\n| **Planning**                          | **5**   |\n| Estimate                              | 5       |\n| **Development**                       | **85**  |\n| Analysis                              | 20      |\n| Design Spec                           | 5       |\n| Design Review                         | 5       |\n| Coding Standard                       | 3       |\n| Design                                | 8       |\n| Coding                                | 20      |\n| Code Review                           | 4       |\n| Test                                  | 20      |\n| **Reporting**                         | **10**  |\n| Test Report                           | 3       |\n| Size Measurement                      | 3       |\n| Postmortem & Process Improvement Plan | 4       |\n\n\n\n## 个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图\n\n![](/images/analysis_final_1.PNG)\n\n![](/images/analysis_final_2.PNG)\n\n![](/images/analysis_final_3.PNG)\n\n![](/images/analysis_final_4.PNG)\n\n![](/images/analysis_final_5.PNG)\n\n## 自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）\n\n解决动态字体反爬虫\n\n说明：猫眼电影网站的评分票房和票价为了反爬虫使用动态字体，利用字体形状不变进行解密。\n\n## 个人的技术类、项目管理类博客清单（只需要名称与 url ）\n\n[猫眼电影加密数字破解（爬取评分票房票价）](http://blog.zmj97.top/2018/07/01/猫眼电影加密数字破解%EF%BC%88爬取评分票房票价%EF%BC%89/)","source":"_posts/系统分析与设计作业FinalReport.md","raw":"---\ntitle: 系统分析与设计作业FinalReport\ntoc: true\ndate: 2018-06-30 19:27:39\ncategories:\n- 系统分析与设计\ntags:\n---\n\n## 简短的课程学习自我总结（400字以内）\n\n> 请不用讲述与分析、设计、开发、管理无关的话题\n>\n> 可以包括对同学帮助的致谢（同学姓名请用 github 昵称表示，不许出现真实姓名）\n>\n> 0 ~ 400字，即没有这段也没关系\n\n感谢所有队友（[Eileen101    ](https://github.com/orgs/SoftwareSAD/people/Eileen101)、[hanxu1997    ](https://github.com/orgs/SoftwareSAD/people/hanxu1997)、[heygrandpa    ](https://github.com/orgs/SoftwareSAD/people/heygrandpa)、[Lisa-bao    ](https://github.com/orgs/SoftwareSAD/people/Lisa-bao)、[samayuki    ](https://github.com/orgs/SoftwareSAD/people/samayuki)、[Mars_i    ](https://github.com/orgs/SoftwareSAD/people/SusieChang)）在这次作业中所做的所有贡献。\n\n跟着这次课程和队友们一起感受了开发一个项目大概的过程：需求分析、Product Backing、UI设计、迭代等等。同时参与到项目开发中更加了解了前端后端 的联系、熟悉了爬虫技术等。\n\n## PSP 2.1 统计表\n\n| PSP2.1                                | Time(%) |\n| ------------------------------------- | ------- |\n| **Planning**                          | **5**   |\n| Estimate                              | 5       |\n| **Development**                       | **85**  |\n| Analysis                              | 20      |\n| Design Spec                           | 5       |\n| Design Review                         | 5       |\n| Coding Standard                       | 3       |\n| Design                                | 8       |\n| Coding                                | 20      |\n| Code Review                           | 4       |\n| Test                                  | 20      |\n| **Reporting**                         | **10**  |\n| Test Report                           | 3       |\n| Size Measurement                      | 3       |\n| Postmortem & Process Improvement Plan | 4       |\n\n\n\n## 个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图\n\n![](/images/analysis_final_1.PNG)\n\n![](/images/analysis_final_2.PNG)\n\n![](/images/analysis_final_3.PNG)\n\n![](/images/analysis_final_4.PNG)\n\n![](/images/analysis_final_5.PNG)\n\n## 自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）\n\n解决动态字体反爬虫\n\n说明：猫眼电影网站的评分票房和票价为了反爬虫使用动态字体，利用字体形状不变进行解密。\n\n## 个人的技术类、项目管理类博客清单（只需要名称与 url ）\n\n[猫眼电影加密数字破解（爬取评分票房票价）](http://blog.zmj97.top/2018/07/01/猫眼电影加密数字破解%EF%BC%88爬取评分票房票价%EF%BC%89/)","slug":"系统分析与设计作业FinalReport","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0g002b7bagdcmqawtt","content":"<h2 id=\"简短的课程学习自我总结（400字以内）\"><a href=\"#简短的课程学习自我总结（400字以内）\" class=\"headerlink\" title=\"简短的课程学习自我总结（400字以内）\"></a>简短的课程学习自我总结（400字以内）</h2><blockquote>\n<p>请不用讲述与分析、设计、开发、管理无关的话题</p>\n<p>可以包括对同学帮助的致谢（同学姓名请用 github 昵称表示，不许出现真实姓名）</p>\n<p>0 ~ 400字，即没有这段也没关系</p>\n</blockquote>\n<p>感谢所有队友（<a href=\"https://github.com/orgs/SoftwareSAD/people/Eileen101\" target=\"_blank\" rel=\"noopener\">Eileen101    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/hanxu1997\" target=\"_blank\" rel=\"noopener\">hanxu1997    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/heygrandpa\" target=\"_blank\" rel=\"noopener\">heygrandpa    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/Lisa-bao\" target=\"_blank\" rel=\"noopener\">Lisa-bao    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/samayuki\" target=\"_blank\" rel=\"noopener\">samayuki    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/SusieChang\" target=\"_blank\" rel=\"noopener\">Mars_i    </a>）在这次作业中所做的所有贡献。</p>\n<p>跟着这次课程和队友们一起感受了开发一个项目大概的过程：需求分析、Product Backing、UI设计、迭代等等。同时参与到项目开发中更加了解了前端后端 的联系、熟悉了爬虫技术等。</p>\n<h2 id=\"PSP-2-1-统计表\"><a href=\"#PSP-2-1-统计表\" class=\"headerlink\" title=\"PSP 2.1 统计表\"></a>PSP 2.1 统计表</h2><table>\n<thead>\n<tr>\n<th>PSP2.1</th>\n<th>Time(%)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Planning</strong></td>\n<td><strong>5</strong></td>\n</tr>\n<tr>\n<td>Estimate</td>\n<td>5</td>\n</tr>\n<tr>\n<td><strong>Development</strong></td>\n<td><strong>85</strong></td>\n</tr>\n<tr>\n<td>Analysis</td>\n<td>20</td>\n</tr>\n<tr>\n<td>Design Spec</td>\n<td>5</td>\n</tr>\n<tr>\n<td>Design Review</td>\n<td>5</td>\n</tr>\n<tr>\n<td>Coding Standard</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Design</td>\n<td>8</td>\n</tr>\n<tr>\n<td>Coding</td>\n<td>20</td>\n</tr>\n<tr>\n<td>Code Review</td>\n<td>4</td>\n</tr>\n<tr>\n<td>Test</td>\n<td>20</td>\n</tr>\n<tr>\n<td><strong>Reporting</strong></td>\n<td><strong>10</strong></td>\n</tr>\n<tr>\n<td>Test Report</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Size Measurement</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Postmortem &amp; Process Improvement Plan</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"个人分支的-GIT-统计报告（不需要解释原因）-仅需要提交截图\"><a href=\"#个人分支的-GIT-统计报告（不需要解释原因）-仅需要提交截图\" class=\"headerlink\" title=\"个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图\"></a>个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图</h2><p><img src=\"/images/analysis_final_1.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_2.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_3.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_4.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_5.PNG\" alt=\"\"></p>\n<h2 id=\"自认为最得意-或有价值-或有苦劳的工作清单，含简短说明（一句话）\"><a href=\"#自认为最得意-或有价值-或有苦劳的工作清单，含简短说明（一句话）\" class=\"headerlink\" title=\"自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）\"></a>自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）</h2><p>解决动态字体反爬虫</p>\n<p>说明：猫眼电影网站的评分票房和票价为了反爬虫使用动态字体，利用字体形状不变进行解密。</p>\n<h2 id=\"个人的技术类、项目管理类博客清单（只需要名称与-url-）\"><a href=\"#个人的技术类、项目管理类博客清单（只需要名称与-url-）\" class=\"headerlink\" title=\"个人的技术类、项目管理类博客清单（只需要名称与 url ）\"></a>个人的技术类、项目管理类博客清单（只需要名称与 url ）</h2><p><a href=\"http://blog.zmj97.top/2018/07/01/猫眼电影加密数字破解%EF%BC%88爬取评分票房票价%EF%BC%89/\">猫眼电影加密数字破解（爬取评分票房票价）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简短的课程学习自我总结（400字以内）\"><a href=\"#简短的课程学习自我总结（400字以内）\" class=\"headerlink\" title=\"简短的课程学习自我总结（400字以内）\"></a>简短的课程学习自我总结（400字以内）</h2><blockquote>\n<p>请不用讲述与分析、设计、开发、管理无关的话题</p>\n<p>可以包括对同学帮助的致谢（同学姓名请用 github 昵称表示，不许出现真实姓名）</p>\n<p>0 ~ 400字，即没有这段也没关系</p>\n</blockquote>\n<p>感谢所有队友（<a href=\"https://github.com/orgs/SoftwareSAD/people/Eileen101\" target=\"_blank\" rel=\"noopener\">Eileen101    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/hanxu1997\" target=\"_blank\" rel=\"noopener\">hanxu1997    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/heygrandpa\" target=\"_blank\" rel=\"noopener\">heygrandpa    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/Lisa-bao\" target=\"_blank\" rel=\"noopener\">Lisa-bao    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/samayuki\" target=\"_blank\" rel=\"noopener\">samayuki    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/SusieChang\" target=\"_blank\" rel=\"noopener\">Mars_i    </a>）在这次作业中所做的所有贡献。</p>\n<p>跟着这次课程和队友们一起感受了开发一个项目大概的过程：需求分析、Product Backing、UI设计、迭代等等。同时参与到项目开发中更加了解了前端后端 的联系、熟悉了爬虫技术等。</p>\n<h2 id=\"PSP-2-1-统计表\"><a href=\"#PSP-2-1-统计表\" class=\"headerlink\" title=\"PSP 2.1 统计表\"></a>PSP 2.1 统计表</h2><table>\n<thead>\n<tr>\n<th>PSP2.1</th>\n<th>Time(%)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Planning</strong></td>\n<td><strong>5</strong></td>\n</tr>\n<tr>\n<td>Estimate</td>\n<td>5</td>\n</tr>\n<tr>\n<td><strong>Development</strong></td>\n<td><strong>85</strong></td>\n</tr>\n<tr>\n<td>Analysis</td>\n<td>20</td>\n</tr>\n<tr>\n<td>Design Spec</td>\n<td>5</td>\n</tr>\n<tr>\n<td>Design Review</td>\n<td>5</td>\n</tr>\n<tr>\n<td>Coding Standard</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Design</td>\n<td>8</td>\n</tr>\n<tr>\n<td>Coding</td>\n<td>20</td>\n</tr>\n<tr>\n<td>Code Review</td>\n<td>4</td>\n</tr>\n<tr>\n<td>Test</td>\n<td>20</td>\n</tr>\n<tr>\n<td><strong>Reporting</strong></td>\n<td><strong>10</strong></td>\n</tr>\n<tr>\n<td>Test Report</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Size Measurement</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Postmortem &amp; Process Improvement Plan</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"个人分支的-GIT-统计报告（不需要解释原因）-仅需要提交截图\"><a href=\"#个人分支的-GIT-统计报告（不需要解释原因）-仅需要提交截图\" class=\"headerlink\" title=\"个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图\"></a>个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图</h2><p><img src=\"/images/analysis_final_1.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_2.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_3.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_4.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_5.PNG\" alt=\"\"></p>\n<h2 id=\"自认为最得意-或有价值-或有苦劳的工作清单，含简短说明（一句话）\"><a href=\"#自认为最得意-或有价值-或有苦劳的工作清单，含简短说明（一句话）\" class=\"headerlink\" title=\"自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）\"></a>自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）</h2><p>解决动态字体反爬虫</p>\n<p>说明：猫眼电影网站的评分票房和票价为了反爬虫使用动态字体，利用字体形状不变进行解密。</p>\n<h2 id=\"个人的技术类、项目管理类博客清单（只需要名称与-url-）\"><a href=\"#个人的技术类、项目管理类博客清单（只需要名称与-url-）\" class=\"headerlink\" title=\"个人的技术类、项目管理类博客清单（只需要名称与 url ）\"></a>个人的技术类、项目管理类博客清单（只需要名称与 url ）</h2><p><a href=\"http://blog.zmj97.top/2018/07/01/猫眼电影加密数字破解%EF%BC%88爬取评分票房票价%EF%BC%89/\">猫眼电影加密数字破解（爬取评分票房票价）</a></p>\n"},{"title":"系统分析与设计作业七","toc":true,"date":"2018-04-29T12:14:31.000Z","_content":"\n# 领域建模\n\n## 阅读 Asg_RH 文档，按用例构建领域模型。\n\n> 按 Task2 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸。\n>\n> 说明：请不要受 PCMEF 层次结构影响。你需要识别实体（E）和 中介实体（M，也称状态实体）\n>\n> - 在单页面应用（如 vue）中，E 一般与数据库构建有关， M 一般与 [store 模式](https://cn.vuejs.org/v2/guide/state-management.html) 有关\n> - 在 java web 应用中，E 一般与数据库构建有关， M 一般与 session 有关\n\n![](/images/lesson7.png)\n\n## 数据库建模(E-R 模型)\n\n>  \\- 按 Task 3 要求，给出系统的 E-R 模型（数据逻辑模型）\n>\n> \\- 建模工具 PowerDesigner（简称PD） 或开源工具 [OpenSystemArchitect](http://www.codebydesign.com/)\n>\n> \\- 不负责的链接 <http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html>\n>\n> \\- 导出 Mysql 物理数据库的脚本\n>\n> \\- 简单叙说 数据库逻辑模型 与 领域模型 的异同\n\n![](/images/lesson7_2.png)\n\n```sql\n-- +---------------------------------------------------------\n-- | MODEL       : \n-- | AUTHOR      : \n-- | GENERATED BY: Open System Architect\n-- +---------------------------------------------------------\n-- | WARNING     : Review before execution\n-- +---------------------------------------------------------\n\n-- +---------------------------------------------------------\n-- | CREATE\n-- +---------------------------------------------------------\nCREATE TABLE `CardHolder`\n(\n  firstName LONGTEXT NOT NULL,\n  lastName LONGTEXT NOT NULL,\n  address LONGTEXT NOT NULL,\n  phoneNumber CHAR NOT NULL\n);\n\nCREATE TABLE `CreditCard`\n(\n  type LONGTEXT NOT NULL,\n  number INTEGER NOT NULL,\n  securityCode INTEGER NOT NULL,\n  expireDate DATE NOT NULL,\n  holderDetail LONGTEXT NOT NULL,\n  PRIMARY KEY (number)\n);\n\nCREATE TABLE `Payment`\n(\n  price INTEGER NOT NULL,\n  isSuccessful BIT NOT NULL\n);\n\nCREATE TABLE `Customer`\n(\n  firstName LONGTEXT NOT NULL,\n  lastName LONGTEXT NOT NULL,\n  gender BIT NOT NULL,\n  email LONGTEXT NOT NULL\n);\n\nCREATE TABLE `ShoppingBasket`\n(\n  numberOfReservation INTEGER NOT NULL,\n  totalPrice INTEGER NOT NULL\n);\n\nCREATE TABLE `Reservation`\n(\n  orderDate DATE NOT NULL,\n  checkInDate DATE NOT NULL,\n  checkOutDate DATE NOT NULL,\n  details LONGTEXT,\n  roomCount INTEGER NOT NULL,\n  smokingPermission BIT NOT NULL,\n  specialRequirement LONGTEXT\n);\n\nCREATE TABLE `Room`\n(\n  number INTEGER NOT NULL,\n  type LONGTEXT NOT NULL,\n  price INTEGER NOT NULL,\n  date DATE NOT NULL,\n  numberOfAdults INTEGER,\n  numberOfChildren INTEGER,\n  PRIMARY KEY (number)\n);\n\nCREATE TABLE `Hotel`\n(\n  name LONGTEXT NOT NULL,\n  address LONGTEXT NOT NULL,\n  star_rating SMALLINT,\n  PRIMARY KEY (address)\n);\n\nCREATE TABLE `Destination`\n(\n  city LONGTEXT NOT NULL,\n  region LONGTEXT NOT NULL\n);\n\n\n\n```\n\n异：\n\n领域模型更注重整体，数据库逻辑模型更注重开发。\n\n同：\n\n都用于业务分析，抽象提取逻辑和实体来帮助分析业务。","source":"_posts/系统分析与设计作业七.md","raw":"---\ntitle: 系统分析与设计作业七\ntoc: true\ndate: 2018-04-29 20:14:31\ncategories:\n- 系统分析与设计\ntags:\n- UMLet\n- 用例图\n- 数据库建模\n---\n\n# 领域建模\n\n## 阅读 Asg_RH 文档，按用例构建领域模型。\n\n> 按 Task2 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸。\n>\n> 说明：请不要受 PCMEF 层次结构影响。你需要识别实体（E）和 中介实体（M，也称状态实体）\n>\n> - 在单页面应用（如 vue）中，E 一般与数据库构建有关， M 一般与 [store 模式](https://cn.vuejs.org/v2/guide/state-management.html) 有关\n> - 在 java web 应用中，E 一般与数据库构建有关， M 一般与 session 有关\n\n![](/images/lesson7.png)\n\n## 数据库建模(E-R 模型)\n\n>  \\- 按 Task 3 要求，给出系统的 E-R 模型（数据逻辑模型）\n>\n> \\- 建模工具 PowerDesigner（简称PD） 或开源工具 [OpenSystemArchitect](http://www.codebydesign.com/)\n>\n> \\- 不负责的链接 <http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html>\n>\n> \\- 导出 Mysql 物理数据库的脚本\n>\n> \\- 简单叙说 数据库逻辑模型 与 领域模型 的异同\n\n![](/images/lesson7_2.png)\n\n```sql\n-- +---------------------------------------------------------\n-- | MODEL       : \n-- | AUTHOR      : \n-- | GENERATED BY: Open System Architect\n-- +---------------------------------------------------------\n-- | WARNING     : Review before execution\n-- +---------------------------------------------------------\n\n-- +---------------------------------------------------------\n-- | CREATE\n-- +---------------------------------------------------------\nCREATE TABLE `CardHolder`\n(\n  firstName LONGTEXT NOT NULL,\n  lastName LONGTEXT NOT NULL,\n  address LONGTEXT NOT NULL,\n  phoneNumber CHAR NOT NULL\n);\n\nCREATE TABLE `CreditCard`\n(\n  type LONGTEXT NOT NULL,\n  number INTEGER NOT NULL,\n  securityCode INTEGER NOT NULL,\n  expireDate DATE NOT NULL,\n  holderDetail LONGTEXT NOT NULL,\n  PRIMARY KEY (number)\n);\n\nCREATE TABLE `Payment`\n(\n  price INTEGER NOT NULL,\n  isSuccessful BIT NOT NULL\n);\n\nCREATE TABLE `Customer`\n(\n  firstName LONGTEXT NOT NULL,\n  lastName LONGTEXT NOT NULL,\n  gender BIT NOT NULL,\n  email LONGTEXT NOT NULL\n);\n\nCREATE TABLE `ShoppingBasket`\n(\n  numberOfReservation INTEGER NOT NULL,\n  totalPrice INTEGER NOT NULL\n);\n\nCREATE TABLE `Reservation`\n(\n  orderDate DATE NOT NULL,\n  checkInDate DATE NOT NULL,\n  checkOutDate DATE NOT NULL,\n  details LONGTEXT,\n  roomCount INTEGER NOT NULL,\n  smokingPermission BIT NOT NULL,\n  specialRequirement LONGTEXT\n);\n\nCREATE TABLE `Room`\n(\n  number INTEGER NOT NULL,\n  type LONGTEXT NOT NULL,\n  price INTEGER NOT NULL,\n  date DATE NOT NULL,\n  numberOfAdults INTEGER,\n  numberOfChildren INTEGER,\n  PRIMARY KEY (number)\n);\n\nCREATE TABLE `Hotel`\n(\n  name LONGTEXT NOT NULL,\n  address LONGTEXT NOT NULL,\n  star_rating SMALLINT,\n  PRIMARY KEY (address)\n);\n\nCREATE TABLE `Destination`\n(\n  city LONGTEXT NOT NULL,\n  region LONGTEXT NOT NULL\n);\n\n\n\n```\n\n异：\n\n领域模型更注重整体，数据库逻辑模型更注重开发。\n\n同：\n\n都用于业务分析，抽象提取逻辑和实体来帮助分析业务。","slug":"系统分析与设计作业七","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0i002f7bag3atuou94","content":"<h1 id=\"领域建模\"><a href=\"#领域建模\" class=\"headerlink\" title=\"领域建模\"></a>领域建模</h1><h2 id=\"阅读-Asg-RH-文档，按用例构建领域模型。\"><a href=\"#阅读-Asg-RH-文档，按用例构建领域模型。\" class=\"headerlink\" title=\"阅读 Asg_RH 文档，按用例构建领域模型。\"></a>阅读 Asg_RH 文档，按用例构建领域模型。</h2><blockquote>\n<p>按 Task2 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸。</p>\n<p>说明：请不要受 PCMEF 层次结构影响。你需要识别实体（E）和 中介实体（M，也称状态实体）</p>\n<ul>\n<li>在单页面应用（如 vue）中，E 一般与数据库构建有关， M 一般与 <a href=\"https://cn.vuejs.org/v2/guide/state-management.html\" target=\"_blank\" rel=\"noopener\">store 模式</a> 有关</li>\n<li>在 java web 应用中，E 一般与数据库构建有关， M 一般与 session 有关</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson7.png\" alt=\"\"></p>\n<h2 id=\"数据库建模-E-R-模型\"><a href=\"#数据库建模-E-R-模型\" class=\"headerlink\" title=\"数据库建模(E-R 模型)\"></a>数据库建模(E-R 模型)</h2><blockquote>\n<p> - 按 Task 3 要求，给出系统的 E-R 模型（数据逻辑模型）</p>\n<p>- 建模工具 PowerDesigner（简称PD） 或开源工具 <a href=\"http://www.codebydesign.com/\" target=\"_blank\" rel=\"noopener\">OpenSystemArchitect</a></p>\n<p>- 不负责的链接 <a href=\"http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html</a></p>\n<p>- 导出 Mysql 物理数据库的脚本</p>\n<p>- 简单叙说 数据库逻辑模型 与 领域模型 的异同</p>\n</blockquote>\n<p><img src=\"/images/lesson7_2.png\" alt=\"\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | MODEL       : </span></span><br><span class=\"line\"><span class=\"comment\">-- | AUTHOR      : </span></span><br><span class=\"line\"><span class=\"comment\">-- | GENERATED BY: Open System Architect</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | WARNING     : Review before execution</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | CREATE</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`CardHolder`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  firstName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  lastName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  address LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  phoneNumber <span class=\"built_in\">CHAR</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`CreditCard`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"keyword\">type</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"built_in\">number</span> <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  securityCode <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  expireDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  holderDetail LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"built_in\">number</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Payment`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  price <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  isSuccessful <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Customer`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  firstName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  lastName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  gender <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  email LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`ShoppingBasket`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  numberOfReservation <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  totalPrice <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Reservation`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  orderDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  checkInDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  checkOutDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  details LONGTEXT,</span><br><span class=\"line\">  roomCount <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  smokingPermission <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  specialRequirement LONGTEXT</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Room`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"built_in\">number</span> <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">type</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  price <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"built_in\">date</span> <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  numberOfAdults <span class=\"built_in\">INTEGER</span>,</span><br><span class=\"line\">  numberOfChildren <span class=\"built_in\">INTEGER</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"built_in\">number</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Hotel`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"keyword\">name</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  address LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  star_rating <span class=\"built_in\">SMALLINT</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (address)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Destination`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  city LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  region LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>异：</p>\n<p>领域模型更注重整体，数据库逻辑模型更注重开发。</p>\n<p>同：</p>\n<p>都用于业务分析，抽象提取逻辑和实体来帮助分析业务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"领域建模\"><a href=\"#领域建模\" class=\"headerlink\" title=\"领域建模\"></a>领域建模</h1><h2 id=\"阅读-Asg-RH-文档，按用例构建领域模型。\"><a href=\"#阅读-Asg-RH-文档，按用例构建领域模型。\" class=\"headerlink\" title=\"阅读 Asg_RH 文档，按用例构建领域模型。\"></a>阅读 Asg_RH 文档，按用例构建领域模型。</h2><blockquote>\n<p>按 Task2 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸。</p>\n<p>说明：请不要受 PCMEF 层次结构影响。你需要识别实体（E）和 中介实体（M，也称状态实体）</p>\n<ul>\n<li>在单页面应用（如 vue）中，E 一般与数据库构建有关， M 一般与 <a href=\"https://cn.vuejs.org/v2/guide/state-management.html\" target=\"_blank\" rel=\"noopener\">store 模式</a> 有关</li>\n<li>在 java web 应用中，E 一般与数据库构建有关， M 一般与 session 有关</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson7.png\" alt=\"\"></p>\n<h2 id=\"数据库建模-E-R-模型\"><a href=\"#数据库建模-E-R-模型\" class=\"headerlink\" title=\"数据库建模(E-R 模型)\"></a>数据库建模(E-R 模型)</h2><blockquote>\n<p> - 按 Task 3 要求，给出系统的 E-R 模型（数据逻辑模型）</p>\n<p>- 建模工具 PowerDesigner（简称PD） 或开源工具 <a href=\"http://www.codebydesign.com/\" target=\"_blank\" rel=\"noopener\">OpenSystemArchitect</a></p>\n<p>- 不负责的链接 <a href=\"http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html</a></p>\n<p>- 导出 Mysql 物理数据库的脚本</p>\n<p>- 简单叙说 数据库逻辑模型 与 领域模型 的异同</p>\n</blockquote>\n<p><img src=\"/images/lesson7_2.png\" alt=\"\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | MODEL       : </span></span><br><span class=\"line\"><span class=\"comment\">-- | AUTHOR      : </span></span><br><span class=\"line\"><span class=\"comment\">-- | GENERATED BY: Open System Architect</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | WARNING     : Review before execution</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | CREATE</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`CardHolder`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  firstName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  lastName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  address LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  phoneNumber <span class=\"built_in\">CHAR</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`CreditCard`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"keyword\">type</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"built_in\">number</span> <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  securityCode <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  expireDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  holderDetail LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"built_in\">number</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Payment`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  price <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  isSuccessful <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Customer`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  firstName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  lastName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  gender <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  email LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`ShoppingBasket`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  numberOfReservation <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  totalPrice <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Reservation`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  orderDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  checkInDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  checkOutDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  details LONGTEXT,</span><br><span class=\"line\">  roomCount <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  smokingPermission <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  specialRequirement LONGTEXT</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Room`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"built_in\">number</span> <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">type</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  price <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"built_in\">date</span> <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  numberOfAdults <span class=\"built_in\">INTEGER</span>,</span><br><span class=\"line\">  numberOfChildren <span class=\"built_in\">INTEGER</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"built_in\">number</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Hotel`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"keyword\">name</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  address LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  star_rating <span class=\"built_in\">SMALLINT</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (address)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Destination`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  city LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  region LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>异：</p>\n<p>领域模型更注重整体，数据库逻辑模型更注重开发。</p>\n<p>同：</p>\n<p>都用于业务分析，抽象提取逻辑和实体来帮助分析业务。</p>\n"},{"title":"系统分析与设计作业九","toc":true,"date":"2018-05-13T11:12:54.000Z","_content":"\n[业务描述链接](https://github.com/Chun-Ge/modelling-practice/blob/master/problem/ofo-app-hire-business-description.md)\n\n### 用例图\n\n![](/images/lesson9_1.png)\n\n### 活动图\n\n![](/images/lesson9_2.png)\n\n### 领域模型\n\n![](/images/lesson9_3.png)\n\n### 状态图\n\n![](/images/lesson9_4.png)\n\n### 系统顺序图\n\n![](/images/lesson9_5.png)","source":"_posts/系统分析与设计作业九.md","raw":"---\ntitle: 系统分析与设计作业九\ntoc: true\ndate: 2018-05-13 19:12:54\ncategories:\n- 系统分析与设计\ntags:\n- UMLet\n- 建模\n---\n\n[业务描述链接](https://github.com/Chun-Ge/modelling-practice/blob/master/problem/ofo-app-hire-business-description.md)\n\n### 用例图\n\n![](/images/lesson9_1.png)\n\n### 活动图\n\n![](/images/lesson9_2.png)\n\n### 领域模型\n\n![](/images/lesson9_3.png)\n\n### 状态图\n\n![](/images/lesson9_4.png)\n\n### 系统顺序图\n\n![](/images/lesson9_5.png)","slug":"系统分析与设计作业九","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0k002i7bagexr0rwxk","content":"<p><a href=\"https://github.com/Chun-Ge/modelling-practice/blob/master/problem/ofo-app-hire-business-description.md\" target=\"_blank\" rel=\"noopener\">业务描述链接</a></p>\n<h3 id=\"用例图\"><a href=\"#用例图\" class=\"headerlink\" title=\"用例图\"></a>用例图</h3><p><img src=\"/images/lesson9_1.png\" alt=\"\"></p>\n<h3 id=\"活动图\"><a href=\"#活动图\" class=\"headerlink\" title=\"活动图\"></a>活动图</h3><p><img src=\"/images/lesson9_2.png\" alt=\"\"></p>\n<h3 id=\"领域模型\"><a href=\"#领域模型\" class=\"headerlink\" title=\"领域模型\"></a>领域模型</h3><p><img src=\"/images/lesson9_3.png\" alt=\"\"></p>\n<h3 id=\"状态图\"><a href=\"#状态图\" class=\"headerlink\" title=\"状态图\"></a>状态图</h3><p><img src=\"/images/lesson9_4.png\" alt=\"\"></p>\n<h3 id=\"系统顺序图\"><a href=\"#系统顺序图\" class=\"headerlink\" title=\"系统顺序图\"></a>系统顺序图</h3><p><img src=\"/images/lesson9_5.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/Chun-Ge/modelling-practice/blob/master/problem/ofo-app-hire-business-description.md\" target=\"_blank\" rel=\"noopener\">业务描述链接</a></p>\n<h3 id=\"用例图\"><a href=\"#用例图\" class=\"headerlink\" title=\"用例图\"></a>用例图</h3><p><img src=\"/images/lesson9_1.png\" alt=\"\"></p>\n<h3 id=\"活动图\"><a href=\"#活动图\" class=\"headerlink\" title=\"活动图\"></a>活动图</h3><p><img src=\"/images/lesson9_2.png\" alt=\"\"></p>\n<h3 id=\"领域模型\"><a href=\"#领域模型\" class=\"headerlink\" title=\"领域模型\"></a>领域模型</h3><p><img src=\"/images/lesson9_3.png\" alt=\"\"></p>\n<h3 id=\"状态图\"><a href=\"#状态图\" class=\"headerlink\" title=\"状态图\"></a>状态图</h3><p><img src=\"/images/lesson9_4.png\" alt=\"\"></p>\n<h3 id=\"系统顺序图\"><a href=\"#系统顺序图\" class=\"headerlink\" title=\"系统顺序图\"></a>系统顺序图</h3><p><img src=\"/images/lesson9_5.png\" alt=\"\"></p>\n"},{"title":"系统分析与设计作业五","date":"2018-04-15T14:52:13.000Z","toc":true,"_content":"\n# 配置mongoDB\n\n参考教程：https://www.yiibai.com/mongodb/mongodb_environment.html\n\n下载需要科学上网。\n\n另外：\n\n将F:\\mongodb\\bin\\添加到环境变量中。\n\n每次开启前用这个命令修改db缓存路径：\n\n> mongod -dbpath f:\\mongodb\\data\n\n然后再打开另一个cmd窗口输入mongod即可。\n\n# 了解Python+Flask后端服务实现（win10）\n\n参考资料：http://www.jb51.net/article/60738.htm\n\n## 环境配置\n\n安装pymongo、flask、Pillow：\n\n> easy_install pymongo\n>\n> easy_install flask\n>\n> easy_install Pillow\n\n## IDE\n\n使用[PyCharm](https://www.jetbrains.com/pycharm/)\n\n打开PyCharm->新建项目->选择Flask框架->修改路径->创建\n\n得到了一个最简单的hello world的项目：\n\n![first pro](/images/Untitled.png)\n\n## Flask 快速入门\n\n[参考链接](http://www.pythondoc.com/flask/quickstart.html#debug-mode)\n\n运行刚刚创建的hello world程序：\n\n![run](/images/Capture.PNG)\n\n在浏览器输入网址http://127.0.0.1:5000/：\n\n![web](/images/Capture1.PNG)\n\n### 调试模式\n\n在代码修改的时候服务器能够自动加载，\n并且如果发生错误，它会提供一个有用的调试器。\n\n使用\n\n```python\napp.debug = True\napp.run()\n```\n\n或者\n\n```python\napp.run(debug=True)\n```\n\n开启调试模式。\n\n### 路由\n\n[`route()`](http://www.pythondoc.com/flask/api.html#flask.Flask.route) 装饰器用于把一个函数绑定到一个 URL 上。\n\n#### 静态绑定\n\n```python\n@app.route('/')\ndef index():\n    return 'Index Page'\n\n@app.route('/hello')\ndef hello():\n    return 'Hello World'\n```\n\n#### 动态绑定\n\n把一些特定的字段标记成 `<variable_name>`来进行动态绑定，还可以用 `<converter:variable_name>`限制格式：\n\n```python\n@app.route('/user/<username>')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return 'User %s' % username\n\n@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return 'Post %d' % post_id\n```\n\n有如下三种转换器：\n\n| int       | 接受整数                        |\n| --------- | ------------------------------- |\n| **float** | **同 int 一样，但是接受浮点数** |\n| **path**  | **和默认的相似，但也接受斜线**  |\n\n### HTTP方法\n\n默认情况下，路由只会响应 GET 请求，但是能够通过给 [`route()`](http://www.pythondoc.com/flask/api.html#flask.Flask.route) 装饰器提供 methods 参数来改变：\n\n```python\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        do_the_login()\n    else:\n        show_the_login_form()\n```\n\n#### 常见HTTP方法\n\n- GET\n\n  浏览器通知服务器只 *获取* 页面上的信息并且发送回来。这可能是最常用的方法。\n\n- HEAD\n\n  浏览器告诉服务器获取信息，但是只对 *头信息* 感兴趣，不需要整个页面的内容。应用应该处理起来像接收到一个 GET 请求但是不传递实际内容。在 Flask 中你完全不需要处理它，底层的 Werkzeug 库会为你处理的。\n\n- POST\n\n  浏览器通知服务器它要在 URL 上 *提交* 一些信息，服务器必须保证数据被存储且只存储一次。这是 HTML 表单通常发送数据到服务器的方法。\n\n- PUT\n\n  同 POST 类似，但是服务器可能触发了多次存储过程，多次覆盖掉旧值。现在你就会问这有什么用，有许多理由需要如此去做。考虑下在传输过程中连接丢失：在这种情况下浏览器 和服务器之间的系统可能安全地第二次接收请求，而不破坏其它东西。对于 POST 是不可能实现的，因为它只会被触发一次。\n\n- DELETE\n\n  移除给定位置的信息。\n\n- OPTIONS\n\n  给客户端提供一个快速的途径来指出这个 URL 支持哪些 HTTP 方法。从 Flask 0.6 开始，自动实现了它。\n\n### 构建url\n\n可以使用函数[`url_for()`](http://www.pythondoc.com/flask/api.html#flask.url_for) 来针对一个特定的函数构建一个 URL。\n\n它能够接受函数名作为第一参数，以及一些关键字参数，\n每一个关键字参数对应于 URL 规则的变量部分。未知变量部分被插入到 URL 中作为查询参数：\n\n```python\n>>> from flask import Flask, url_for\n>>> app = Flask(__name__)\n>>> @app.route('/')\n... def index(): pass\n...\n>>> @app.route('/login')\n... def login(): pass\n...\n>>> @app.route('/user/<username>')\n... def profile(username): pass\n...\n>>> with app.test_request_context():\n...  print url_for('index')\n...  print url_for('login')\n...  print url_for('login', next='/')\n...  print url_for('profile', username='John Doe')\n...\n/\n/login\n/login?next=/\n/user/John%20Doe\n```\n\n### 渲染静态文件\n\n只要在你的包中或模块旁边创建一个名为 static 的文件夹，在应用中使用 /static 即可访问。\n\n给静态文件生成 URL：\n\n```python\nurl_for('static', filename='style.css')\n```\n\n这个文件应该存储在 `static/style.css`，而使用PyCharm创建Flask项目时已经为你创建好了static目录：\n\n![目录](/images/Capture2.PNG)\n\n### 渲染模板\n\n由于必须自行做好 HTML 转义以保持应用程序的安全，Flask 自动配置好了 [Jinja2](http://jinja.pocoo.org/2/) 模版。\n\n可以使用方法 [`render_template()`](http://www.pythondoc.com/flask/api.html#flask.render_template) 来渲染模版：\n\n```python\nfrom flask import render_template\n\n@app.route('/hello/')\n@app.route('/hello/<name>')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n```\n\nFlask 将会在 templates 文件夹中寻找模版。\n\n# [后续链接]()\n\n","source":"_posts/系统分析与设计作业五.md","raw":"---\ntitle: 系统分析与设计作业五\ndate: 2018-04-15 22:52:13\ncategories: \n- 系统分析与设计\ntags:\n- mongoDB\n- Flask\ntoc: true\n---\n\n# 配置mongoDB\n\n参考教程：https://www.yiibai.com/mongodb/mongodb_environment.html\n\n下载需要科学上网。\n\n另外：\n\n将F:\\mongodb\\bin\\添加到环境变量中。\n\n每次开启前用这个命令修改db缓存路径：\n\n> mongod -dbpath f:\\mongodb\\data\n\n然后再打开另一个cmd窗口输入mongod即可。\n\n# 了解Python+Flask后端服务实现（win10）\n\n参考资料：http://www.jb51.net/article/60738.htm\n\n## 环境配置\n\n安装pymongo、flask、Pillow：\n\n> easy_install pymongo\n>\n> easy_install flask\n>\n> easy_install Pillow\n\n## IDE\n\n使用[PyCharm](https://www.jetbrains.com/pycharm/)\n\n打开PyCharm->新建项目->选择Flask框架->修改路径->创建\n\n得到了一个最简单的hello world的项目：\n\n![first pro](/images/Untitled.png)\n\n## Flask 快速入门\n\n[参考链接](http://www.pythondoc.com/flask/quickstart.html#debug-mode)\n\n运行刚刚创建的hello world程序：\n\n![run](/images/Capture.PNG)\n\n在浏览器输入网址http://127.0.0.1:5000/：\n\n![web](/images/Capture1.PNG)\n\n### 调试模式\n\n在代码修改的时候服务器能够自动加载，\n并且如果发生错误，它会提供一个有用的调试器。\n\n使用\n\n```python\napp.debug = True\napp.run()\n```\n\n或者\n\n```python\napp.run(debug=True)\n```\n\n开启调试模式。\n\n### 路由\n\n[`route()`](http://www.pythondoc.com/flask/api.html#flask.Flask.route) 装饰器用于把一个函数绑定到一个 URL 上。\n\n#### 静态绑定\n\n```python\n@app.route('/')\ndef index():\n    return 'Index Page'\n\n@app.route('/hello')\ndef hello():\n    return 'Hello World'\n```\n\n#### 动态绑定\n\n把一些特定的字段标记成 `<variable_name>`来进行动态绑定，还可以用 `<converter:variable_name>`限制格式：\n\n```python\n@app.route('/user/<username>')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return 'User %s' % username\n\n@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return 'Post %d' % post_id\n```\n\n有如下三种转换器：\n\n| int       | 接受整数                        |\n| --------- | ------------------------------- |\n| **float** | **同 int 一样，但是接受浮点数** |\n| **path**  | **和默认的相似，但也接受斜线**  |\n\n### HTTP方法\n\n默认情况下，路由只会响应 GET 请求，但是能够通过给 [`route()`](http://www.pythondoc.com/flask/api.html#flask.Flask.route) 装饰器提供 methods 参数来改变：\n\n```python\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        do_the_login()\n    else:\n        show_the_login_form()\n```\n\n#### 常见HTTP方法\n\n- GET\n\n  浏览器通知服务器只 *获取* 页面上的信息并且发送回来。这可能是最常用的方法。\n\n- HEAD\n\n  浏览器告诉服务器获取信息，但是只对 *头信息* 感兴趣，不需要整个页面的内容。应用应该处理起来像接收到一个 GET 请求但是不传递实际内容。在 Flask 中你完全不需要处理它，底层的 Werkzeug 库会为你处理的。\n\n- POST\n\n  浏览器通知服务器它要在 URL 上 *提交* 一些信息，服务器必须保证数据被存储且只存储一次。这是 HTML 表单通常发送数据到服务器的方法。\n\n- PUT\n\n  同 POST 类似，但是服务器可能触发了多次存储过程，多次覆盖掉旧值。现在你就会问这有什么用，有许多理由需要如此去做。考虑下在传输过程中连接丢失：在这种情况下浏览器 和服务器之间的系统可能安全地第二次接收请求，而不破坏其它东西。对于 POST 是不可能实现的，因为它只会被触发一次。\n\n- DELETE\n\n  移除给定位置的信息。\n\n- OPTIONS\n\n  给客户端提供一个快速的途径来指出这个 URL 支持哪些 HTTP 方法。从 Flask 0.6 开始，自动实现了它。\n\n### 构建url\n\n可以使用函数[`url_for()`](http://www.pythondoc.com/flask/api.html#flask.url_for) 来针对一个特定的函数构建一个 URL。\n\n它能够接受函数名作为第一参数，以及一些关键字参数，\n每一个关键字参数对应于 URL 规则的变量部分。未知变量部分被插入到 URL 中作为查询参数：\n\n```python\n>>> from flask import Flask, url_for\n>>> app = Flask(__name__)\n>>> @app.route('/')\n... def index(): pass\n...\n>>> @app.route('/login')\n... def login(): pass\n...\n>>> @app.route('/user/<username>')\n... def profile(username): pass\n...\n>>> with app.test_request_context():\n...  print url_for('index')\n...  print url_for('login')\n...  print url_for('login', next='/')\n...  print url_for('profile', username='John Doe')\n...\n/\n/login\n/login?next=/\n/user/John%20Doe\n```\n\n### 渲染静态文件\n\n只要在你的包中或模块旁边创建一个名为 static 的文件夹，在应用中使用 /static 即可访问。\n\n给静态文件生成 URL：\n\n```python\nurl_for('static', filename='style.css')\n```\n\n这个文件应该存储在 `static/style.css`，而使用PyCharm创建Flask项目时已经为你创建好了static目录：\n\n![目录](/images/Capture2.PNG)\n\n### 渲染模板\n\n由于必须自行做好 HTML 转义以保持应用程序的安全，Flask 自动配置好了 [Jinja2](http://jinja.pocoo.org/2/) 模版。\n\n可以使用方法 [`render_template()`](http://www.pythondoc.com/flask/api.html#flask.render_template) 来渲染模版：\n\n```python\nfrom flask import render_template\n\n@app.route('/hello/')\n@app.route('/hello/<name>')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n```\n\nFlask 将会在 templates 文件夹中寻找模版。\n\n# [后续链接]()\n\n","slug":"系统分析与设计作业五","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0n002l7bagqder4tb4","content":"<h1 id=\"配置mongoDB\"><a href=\"#配置mongoDB\" class=\"headerlink\" title=\"配置mongoDB\"></a>配置mongoDB</h1><p>参考教程：<a href=\"https://www.yiibai.com/mongodb/mongodb_environment.html\" target=\"_blank\" rel=\"noopener\">https://www.yiibai.com/mongodb/mongodb_environment.html</a></p>\n<p>下载需要科学上网。</p>\n<p>另外：</p>\n<p>将F:\\mongodb\\bin\\添加到环境变量中。</p>\n<p>每次开启前用这个命令修改db缓存路径：</p>\n<blockquote>\n<p>mongod -dbpath f:\\mongodb\\data</p>\n</blockquote>\n<p>然后再打开另一个cmd窗口输入mongod即可。</p>\n<h1 id=\"了解Python-Flask后端服务实现（win10）\"><a href=\"#了解Python-Flask后端服务实现（win10）\" class=\"headerlink\" title=\"了解Python+Flask后端服务实现（win10）\"></a>了解Python+Flask后端服务实现（win10）</h1><p>参考资料：<a href=\"http://www.jb51.net/article/60738.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/60738.htm</a></p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>安装pymongo、flask、Pillow：</p>\n<blockquote>\n<p>easy_install pymongo</p>\n<p>easy_install flask</p>\n<p>easy_install Pillow</p>\n</blockquote>\n<h2 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h2><p>使用<a href=\"https://www.jetbrains.com/pycharm/\" target=\"_blank\" rel=\"noopener\">PyCharm</a></p>\n<p>打开PyCharm-&gt;新建项目-&gt;选择Flask框架-&gt;修改路径-&gt;创建</p>\n<p>得到了一个最简单的hello world的项目：</p>\n<p><img src=\"/images/Untitled.png\" alt=\"first pro\"></p>\n<h2 id=\"Flask-快速入门\"><a href=\"#Flask-快速入门\" class=\"headerlink\" title=\"Flask 快速入门\"></a>Flask 快速入门</h2><p><a href=\"http://www.pythondoc.com/flask/quickstart.html#debug-mode\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>运行刚刚创建的hello world程序：</p>\n<p><img src=\"/images/Capture.PNG\" alt=\"run\"></p>\n<p>在浏览器输入网址<a href=\"http://127.0.0.1:5000/：\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/：</a></p>\n<p><img src=\"/images/Capture1.PNG\" alt=\"web\"></p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><p>在代码修改的时候服务器能够自动加载，<br>并且如果发生错误，它会提供一个有用的调试器。</p>\n<p>使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.debug = <span class=\"keyword\">True</span></span><br><span class=\"line\">app.run()</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.run(debug=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>开启调试模式。</p>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p><a href=\"http://www.pythondoc.com/flask/api.html#flask.Flask.route\" target=\"_blank\" rel=\"noopener\"><code>route()</code></a> 装饰器用于把一个函数绑定到一个 URL 上。</p>\n<h4 id=\"静态绑定\"><a href=\"#静态绑定\" class=\"headerlink\" title=\"静态绑定\"></a>静态绑定</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Index Page'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"动态绑定\"><a href=\"#动态绑定\" class=\"headerlink\" title=\"动态绑定\"></a>动态绑定</h4><p>把一些特定的字段标记成 <code>&lt;variable_name&gt;</code>来进行动态绑定，还可以用 <code>&lt;converter:variable_name&gt;</code>限制格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/user/&lt;username&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_user_profile</span><span class=\"params\">(username)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># show the user profile for that user</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User %s'</span> % username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/post/&lt;int:post_id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_post</span><span class=\"params\">(post_id)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># show the post with the given id, the id is an integer</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Post %d'</span> % post_id</span><br></pre></td></tr></table></figure>\n<p>有如下三种转换器：</p>\n<table>\n<thead>\n<tr>\n<th>int</th>\n<th>接受整数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>float</strong></td>\n<td><strong>同 int 一样，但是接受浮点数</strong></td>\n</tr>\n<tr>\n<td><strong>path</strong></td>\n<td><strong>和默认的相似，但也接受斜线</strong></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><p>默认情况下，路由只会响应 GET 请求，但是能够通过给 <a href=\"http://www.pythondoc.com/flask/api.html#flask.Flask.route\" target=\"_blank\" rel=\"noopener\"><code>route()</code></a> 装饰器提供 methods 参数来改变：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        do_the_login()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        show_the_login_form()</span><br></pre></td></tr></table></figure>\n<h4 id=\"常见HTTP方法\"><a href=\"#常见HTTP方法\" class=\"headerlink\" title=\"常见HTTP方法\"></a>常见HTTP方法</h4><ul>\n<li><p>GET</p>\n<p>浏览器通知服务器只 <em>获取</em> 页面上的信息并且发送回来。这可能是最常用的方法。</p>\n</li>\n<li><p>HEAD</p>\n<p>浏览器告诉服务器获取信息，但是只对 <em>头信息</em> 感兴趣，不需要整个页面的内容。应用应该处理起来像接收到一个 GET 请求但是不传递实际内容。在 Flask 中你完全不需要处理它，底层的 Werkzeug 库会为你处理的。</p>\n</li>\n<li><p>POST</p>\n<p>浏览器通知服务器它要在 URL 上 <em>提交</em> 一些信息，服务器必须保证数据被存储且只存储一次。这是 HTML 表单通常发送数据到服务器的方法。</p>\n</li>\n<li><p>PUT</p>\n<p>同 POST 类似，但是服务器可能触发了多次存储过程，多次覆盖掉旧值。现在你就会问这有什么用，有许多理由需要如此去做。考虑下在传输过程中连接丢失：在这种情况下浏览器 和服务器之间的系统可能安全地第二次接收请求，而不破坏其它东西。对于 POST 是不可能实现的，因为它只会被触发一次。</p>\n</li>\n<li><p>DELETE</p>\n<p>移除给定位置的信息。</p>\n</li>\n<li><p>OPTIONS</p>\n<p>给客户端提供一个快速的途径来指出这个 URL 支持哪些 HTTP 方法。从 Flask 0.6 开始，自动实现了它。</p>\n</li>\n</ul>\n<h3 id=\"构建url\"><a href=\"#构建url\" class=\"headerlink\" title=\"构建url\"></a>构建url</h3><p>可以使用函数<a href=\"http://www.pythondoc.com/flask/api.html#flask.url_for\" target=\"_blank\" rel=\"noopener\"><code>url_for()</code></a> 来针对一个特定的函数构建一个 URL。</p>\n<p>它能够接受函数名作为第一参数，以及一些关键字参数，<br>每一个关键字参数对应于 URL 规则的变量部分。未知变量部分被插入到 URL 中作为查询参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, url_for</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>app = Flask(__name__)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/login'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/user/&lt;username&gt;'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">profile</span><span class=\"params\">(username)</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> app.test_request_context():</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'index'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'login'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'login'</span>, next=<span class=\"string\">'/'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'profile'</span>, username=<span class=\"string\">'John Doe'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\">/</span><br><span class=\"line\">/login</span><br><span class=\"line\">/login?next=/</span><br><span class=\"line\">/user/John%<span class=\"number\">20</span>Doe</span><br></pre></td></tr></table></figure>\n<h3 id=\"渲染静态文件\"><a href=\"#渲染静态文件\" class=\"headerlink\" title=\"渲染静态文件\"></a>渲染静态文件</h3><p>只要在你的包中或模块旁边创建一个名为 static 的文件夹，在应用中使用 /static 即可访问。</p>\n<p>给静态文件生成 URL：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_for(<span class=\"string\">'static'</span>, filename=<span class=\"string\">'style.css'</span>)</span><br></pre></td></tr></table></figure>\n<p>这个文件应该存储在 <code>static/style.css</code>，而使用PyCharm创建Flask项目时已经为你创建好了static目录：</p>\n<p><img src=\"/images/Capture2.PNG\" alt=\"目录\"></p>\n<h3 id=\"渲染模板\"><a href=\"#渲染模板\" class=\"headerlink\" title=\"渲染模板\"></a>渲染模板</h3><p>由于必须自行做好 HTML 转义以保持应用程序的安全，Flask 自动配置好了 <a href=\"http://jinja.pocoo.org/2/\" target=\"_blank\" rel=\"noopener\">Jinja2</a> 模版。</p>\n<p>可以使用方法 <a href=\"http://www.pythondoc.com/flask/api.html#flask.render_template\" target=\"_blank\" rel=\"noopener\"><code>render_template()</code></a> 来渲染模版：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello/')</span></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello/&lt;name&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=name)</span><br></pre></td></tr></table></figure>\n<p>Flask 将会在 templates 文件夹中寻找模版。</p>\n<h1 id=\"后续链接\"><a href=\"#后续链接\" class=\"headerlink\" title=\"后续链接\"></a><a href=\"\">后续链接</a></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"配置mongoDB\"><a href=\"#配置mongoDB\" class=\"headerlink\" title=\"配置mongoDB\"></a>配置mongoDB</h1><p>参考教程：<a href=\"https://www.yiibai.com/mongodb/mongodb_environment.html\" target=\"_blank\" rel=\"noopener\">https://www.yiibai.com/mongodb/mongodb_environment.html</a></p>\n<p>下载需要科学上网。</p>\n<p>另外：</p>\n<p>将F:\\mongodb\\bin\\添加到环境变量中。</p>\n<p>每次开启前用这个命令修改db缓存路径：</p>\n<blockquote>\n<p>mongod -dbpath f:\\mongodb\\data</p>\n</blockquote>\n<p>然后再打开另一个cmd窗口输入mongod即可。</p>\n<h1 id=\"了解Python-Flask后端服务实现（win10）\"><a href=\"#了解Python-Flask后端服务实现（win10）\" class=\"headerlink\" title=\"了解Python+Flask后端服务实现（win10）\"></a>了解Python+Flask后端服务实现（win10）</h1><p>参考资料：<a href=\"http://www.jb51.net/article/60738.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/60738.htm</a></p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>安装pymongo、flask、Pillow：</p>\n<blockquote>\n<p>easy_install pymongo</p>\n<p>easy_install flask</p>\n<p>easy_install Pillow</p>\n</blockquote>\n<h2 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h2><p>使用<a href=\"https://www.jetbrains.com/pycharm/\" target=\"_blank\" rel=\"noopener\">PyCharm</a></p>\n<p>打开PyCharm-&gt;新建项目-&gt;选择Flask框架-&gt;修改路径-&gt;创建</p>\n<p>得到了一个最简单的hello world的项目：</p>\n<p><img src=\"/images/Untitled.png\" alt=\"first pro\"></p>\n<h2 id=\"Flask-快速入门\"><a href=\"#Flask-快速入门\" class=\"headerlink\" title=\"Flask 快速入门\"></a>Flask 快速入门</h2><p><a href=\"http://www.pythondoc.com/flask/quickstart.html#debug-mode\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>运行刚刚创建的hello world程序：</p>\n<p><img src=\"/images/Capture.PNG\" alt=\"run\"></p>\n<p>在浏览器输入网址<a href=\"http://127.0.0.1:5000/：\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/：</a></p>\n<p><img src=\"/images/Capture1.PNG\" alt=\"web\"></p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><p>在代码修改的时候服务器能够自动加载，<br>并且如果发生错误，它会提供一个有用的调试器。</p>\n<p>使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.debug = <span class=\"keyword\">True</span></span><br><span class=\"line\">app.run()</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.run(debug=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>开启调试模式。</p>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p><a href=\"http://www.pythondoc.com/flask/api.html#flask.Flask.route\" target=\"_blank\" rel=\"noopener\"><code>route()</code></a> 装饰器用于把一个函数绑定到一个 URL 上。</p>\n<h4 id=\"静态绑定\"><a href=\"#静态绑定\" class=\"headerlink\" title=\"静态绑定\"></a>静态绑定</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Index Page'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"动态绑定\"><a href=\"#动态绑定\" class=\"headerlink\" title=\"动态绑定\"></a>动态绑定</h4><p>把一些特定的字段标记成 <code>&lt;variable_name&gt;</code>来进行动态绑定，还可以用 <code>&lt;converter:variable_name&gt;</code>限制格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/user/&lt;username&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_user_profile</span><span class=\"params\">(username)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># show the user profile for that user</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User %s'</span> % username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/post/&lt;int:post_id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_post</span><span class=\"params\">(post_id)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># show the post with the given id, the id is an integer</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Post %d'</span> % post_id</span><br></pre></td></tr></table></figure>\n<p>有如下三种转换器：</p>\n<table>\n<thead>\n<tr>\n<th>int</th>\n<th>接受整数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>float</strong></td>\n<td><strong>同 int 一样，但是接受浮点数</strong></td>\n</tr>\n<tr>\n<td><strong>path</strong></td>\n<td><strong>和默认的相似，但也接受斜线</strong></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><p>默认情况下，路由只会响应 GET 请求，但是能够通过给 <a href=\"http://www.pythondoc.com/flask/api.html#flask.Flask.route\" target=\"_blank\" rel=\"noopener\"><code>route()</code></a> 装饰器提供 methods 参数来改变：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        do_the_login()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        show_the_login_form()</span><br></pre></td></tr></table></figure>\n<h4 id=\"常见HTTP方法\"><a href=\"#常见HTTP方法\" class=\"headerlink\" title=\"常见HTTP方法\"></a>常见HTTP方法</h4><ul>\n<li><p>GET</p>\n<p>浏览器通知服务器只 <em>获取</em> 页面上的信息并且发送回来。这可能是最常用的方法。</p>\n</li>\n<li><p>HEAD</p>\n<p>浏览器告诉服务器获取信息，但是只对 <em>头信息</em> 感兴趣，不需要整个页面的内容。应用应该处理起来像接收到一个 GET 请求但是不传递实际内容。在 Flask 中你完全不需要处理它，底层的 Werkzeug 库会为你处理的。</p>\n</li>\n<li><p>POST</p>\n<p>浏览器通知服务器它要在 URL 上 <em>提交</em> 一些信息，服务器必须保证数据被存储且只存储一次。这是 HTML 表单通常发送数据到服务器的方法。</p>\n</li>\n<li><p>PUT</p>\n<p>同 POST 类似，但是服务器可能触发了多次存储过程，多次覆盖掉旧值。现在你就会问这有什么用，有许多理由需要如此去做。考虑下在传输过程中连接丢失：在这种情况下浏览器 和服务器之间的系统可能安全地第二次接收请求，而不破坏其它东西。对于 POST 是不可能实现的，因为它只会被触发一次。</p>\n</li>\n<li><p>DELETE</p>\n<p>移除给定位置的信息。</p>\n</li>\n<li><p>OPTIONS</p>\n<p>给客户端提供一个快速的途径来指出这个 URL 支持哪些 HTTP 方法。从 Flask 0.6 开始，自动实现了它。</p>\n</li>\n</ul>\n<h3 id=\"构建url\"><a href=\"#构建url\" class=\"headerlink\" title=\"构建url\"></a>构建url</h3><p>可以使用函数<a href=\"http://www.pythondoc.com/flask/api.html#flask.url_for\" target=\"_blank\" rel=\"noopener\"><code>url_for()</code></a> 来针对一个特定的函数构建一个 URL。</p>\n<p>它能够接受函数名作为第一参数，以及一些关键字参数，<br>每一个关键字参数对应于 URL 规则的变量部分。未知变量部分被插入到 URL 中作为查询参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, url_for</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>app = Flask(__name__)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/login'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/user/&lt;username&gt;'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">profile</span><span class=\"params\">(username)</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> app.test_request_context():</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'index'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'login'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'login'</span>, next=<span class=\"string\">'/'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'profile'</span>, username=<span class=\"string\">'John Doe'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\">/</span><br><span class=\"line\">/login</span><br><span class=\"line\">/login?next=/</span><br><span class=\"line\">/user/John%<span class=\"number\">20</span>Doe</span><br></pre></td></tr></table></figure>\n<h3 id=\"渲染静态文件\"><a href=\"#渲染静态文件\" class=\"headerlink\" title=\"渲染静态文件\"></a>渲染静态文件</h3><p>只要在你的包中或模块旁边创建一个名为 static 的文件夹，在应用中使用 /static 即可访问。</p>\n<p>给静态文件生成 URL：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_for(<span class=\"string\">'static'</span>, filename=<span class=\"string\">'style.css'</span>)</span><br></pre></td></tr></table></figure>\n<p>这个文件应该存储在 <code>static/style.css</code>，而使用PyCharm创建Flask项目时已经为你创建好了static目录：</p>\n<p><img src=\"/images/Capture2.PNG\" alt=\"目录\"></p>\n<h3 id=\"渲染模板\"><a href=\"#渲染模板\" class=\"headerlink\" title=\"渲染模板\"></a>渲染模板</h3><p>由于必须自行做好 HTML 转义以保持应用程序的安全，Flask 自动配置好了 <a href=\"http://jinja.pocoo.org/2/\" target=\"_blank\" rel=\"noopener\">Jinja2</a> 模版。</p>\n<p>可以使用方法 <a href=\"http://www.pythondoc.com/flask/api.html#flask.render_template\" target=\"_blank\" rel=\"noopener\"><code>render_template()</code></a> 来渲染模版：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello/')</span></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello/&lt;name&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=name)</span><br></pre></td></tr></table></figure>\n<p>Flask 将会在 templates 文件夹中寻找模版。</p>\n<h1 id=\"后续链接\"><a href=\"#后续链接\" class=\"headerlink\" title=\"后续链接\"></a><a href=\"\">后续链接</a></h1>"},{"title":"系统分析与设计作业八","toc":true,"date":"2018-05-06T14:12:10.000Z","_content":"\n建模工具： UMLet 14.1.1 stand-alone\n\n# 使用 UML State Model\n\n> - 建模对象： 参考 Asg_RH 文档， 对 Reservation/Order 对象建模。\n> - 建模要求： 参考练习不能提供足够信息帮助你对订单对象建模，请参考现在 定旅馆 的旅游网站，尽可能分析围绕订单发生的各种情况，直到订单通过销售事件（柜台销售）结束订单。\n\n![](/images/lesson8.png)\n\n# 研究淘宝退货流程活动图，对退货业务对象状态建模\n\n![](/images/lesson8_2.png)","source":"_posts/系统分析与设计作业八.md","raw":"---\ntitle: 系统分析与设计作业八\ntoc: true\ndate: 2018-05-06 22:12:10\ncategories:\n- 系统分析与设计\ntags:\n- UMLet\n- 用例图\n- 建模\n---\n\n建模工具： UMLet 14.1.1 stand-alone\n\n# 使用 UML State Model\n\n> - 建模对象： 参考 Asg_RH 文档， 对 Reservation/Order 对象建模。\n> - 建模要求： 参考练习不能提供足够信息帮助你对订单对象建模，请参考现在 定旅馆 的旅游网站，尽可能分析围绕订单发生的各种情况，直到订单通过销售事件（柜台销售）结束订单。\n\n![](/images/lesson8.png)\n\n# 研究淘宝退货流程活动图，对退货业务对象状态建模\n\n![](/images/lesson8_2.png)","slug":"系统分析与设计作业八","published":1,"updated":"2018-09-06T16:40:46.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0p002p7bagtnq1mn2i","content":"<p>建模工具： UMLet 14.1.1 stand-alone</p>\n<h1 id=\"使用-UML-State-Model\"><a href=\"#使用-UML-State-Model\" class=\"headerlink\" title=\"使用 UML State Model\"></a>使用 UML State Model</h1><blockquote>\n<ul>\n<li>建模对象： 参考 Asg_RH 文档， 对 Reservation/Order 对象建模。</li>\n<li>建模要求： 参考练习不能提供足够信息帮助你对订单对象建模，请参考现在 定旅馆 的旅游网站，尽可能分析围绕订单发生的各种情况，直到订单通过销售事件（柜台销售）结束订单。</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson8.png\" alt=\"\"></p>\n<h1 id=\"研究淘宝退货流程活动图，对退货业务对象状态建模\"><a href=\"#研究淘宝退货流程活动图，对退货业务对象状态建模\" class=\"headerlink\" title=\"研究淘宝退货流程活动图，对退货业务对象状态建模\"></a>研究淘宝退货流程活动图，对退货业务对象状态建模</h1><p><img src=\"/images/lesson8_2.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>建模工具： UMLet 14.1.1 stand-alone</p>\n<h1 id=\"使用-UML-State-Model\"><a href=\"#使用-UML-State-Model\" class=\"headerlink\" title=\"使用 UML State Model\"></a>使用 UML State Model</h1><blockquote>\n<ul>\n<li>建模对象： 参考 Asg_RH 文档， 对 Reservation/Order 对象建模。</li>\n<li>建模要求： 参考练习不能提供足够信息帮助你对订单对象建模，请参考现在 定旅馆 的旅游网站，尽可能分析围绕订单发生的各种情况，直到订单通过销售事件（柜台销售）结束订单。</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson8.png\" alt=\"\"></p>\n<h1 id=\"研究淘宝退货流程活动图，对退货业务对象状态建模\"><a href=\"#研究淘宝退货流程活动图，对退货业务对象状态建模\" class=\"headerlink\" title=\"研究淘宝退货流程活动图，对退货业务对象状态建模\"></a>研究淘宝退货流程活动图，对退货业务对象状态建模</h1><p><img src=\"/images/lesson8_2.png\" alt=\"\"></p>\n"},{"title":"系统分析与设计作业六","toc":true,"date":"2018-04-22T14:18:13.000Z","_content":"\n# 用例建模\n\n## 阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸\n\n![](/images/lesson6.png)\n\n## 选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：\n\n> - 对比 Asg_RH 用例图，请用色彩标注出创新用例或子用例\n> - 尽可能识别外部系统，并用色彩标注新的外部系统和服务\n\n![](/images/lesson6b.png)\n\n## 对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\n\n- 在基础功能上进行延伸\n- 按照模块进行深入\n- 按照用户需求的变化\n- 按照技术的变化\n\n## 请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）\n\n| ID   | Name     | Imp  | Est  | How to demo                                          |\n| ---- | -------- | ---- | ---- | ---------------------------------------------------- |\n| 1    | 选择酒店 | 40   | 5    | 选择酒店所在城市、预定时间、酒店关键字               |\n| 2    | 预订酒店 | 45   | 6    | 选择酒店、选择房间类型、查看评价、选择时间、确认信息 |\n| 3    | 确认订单 | 25   | 3    | 查看信息                                             |\n| 4    | 支付订单 | 40   | 4    | 选择付款方式付款                                     |\n| 5    | 管理订单 | 30   | 5    | 查看订单信息、删除订单                               |\n\n# 业务建模\n\n## 在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\n\n![](/images/lesson6_3.png)\n\n## 选择你身边的银行 ATM，用活动图描绘取款业务流程\n\n![](/images/lesson6_3b.png)\n\n## 查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\n\n![](/images/lesson6_3c.png)\n\n# 用例文本编写\n\n> 在大作业基础上，分析三种用例文本的优点和缺点\n\n| 用例文本    | 优点               | 缺点               |\n| ----------- | ------------------ | ------------------ |\n| 详细用例    | 详细、深入         | 繁琐导致耗时长     |\n| casual 用例 | 较详细、编写较简便 | 细节不足，不够正式 |\n| brief用例   | 简介、编写简便     | 缺少细节           |","source":"_posts/系统分析与设计作业六.md","raw":"---\ntitle: 系统分析与设计作业六\ntoc: true\ndate: 2018-04-22 22:18:13\ncategories:\n- 系统分析与设计\ntags:\n- UMLet\n- 用例图\n- SCRUM\n---\n\n# 用例建模\n\n## 阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸\n\n![](/images/lesson6.png)\n\n## 选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：\n\n> - 对比 Asg_RH 用例图，请用色彩标注出创新用例或子用例\n> - 尽可能识别外部系统，并用色彩标注新的外部系统和服务\n\n![](/images/lesson6b.png)\n\n## 对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\n\n- 在基础功能上进行延伸\n- 按照模块进行深入\n- 按照用户需求的变化\n- 按照技术的变化\n\n## 请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）\n\n| ID   | Name     | Imp  | Est  | How to demo                                          |\n| ---- | -------- | ---- | ---- | ---------------------------------------------------- |\n| 1    | 选择酒店 | 40   | 5    | 选择酒店所在城市、预定时间、酒店关键字               |\n| 2    | 预订酒店 | 45   | 6    | 选择酒店、选择房间类型、查看评价、选择时间、确认信息 |\n| 3    | 确认订单 | 25   | 3    | 查看信息                                             |\n| 4    | 支付订单 | 40   | 4    | 选择付款方式付款                                     |\n| 5    | 管理订单 | 30   | 5    | 查看订单信息、删除订单                               |\n\n# 业务建模\n\n## 在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\n\n![](/images/lesson6_3.png)\n\n## 选择你身边的银行 ATM，用活动图描绘取款业务流程\n\n![](/images/lesson6_3b.png)\n\n## 查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\n\n![](/images/lesson6_3c.png)\n\n# 用例文本编写\n\n> 在大作业基础上，分析三种用例文本的优点和缺点\n\n| 用例文本    | 优点               | 缺点               |\n| ----------- | ------------------ | ------------------ |\n| 详细用例    | 详细、深入         | 繁琐导致耗时长     |\n| casual 用例 | 较详细、编写较简便 | 细节不足，不够正式 |\n| brief用例   | 简介、编写简便     | 缺少细节           |","slug":"系统分析与设计作业六","published":1,"updated":"2018-09-06T16:40:46.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0s002t7bagt2luy7g8","content":"<h1 id=\"用例建模\"><a href=\"#用例建模\" class=\"headerlink\" title=\"用例建模\"></a>用例建模</h1><h2 id=\"阅读-Asg-RH-文档，绘制用例图。-按-Task1-要求，请使用工具-UMLet，截图格式务必是-png-并控制尺寸\"><a href=\"#阅读-Asg-RH-文档，绘制用例图。-按-Task1-要求，请使用工具-UMLet，截图格式务必是-png-并控制尺寸\" class=\"headerlink\" title=\"阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸\"></a>阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸</h2><p><img src=\"/images/lesson6.png\" alt=\"\"></p>\n<h2 id=\"选择你熟悉的定旅馆在线服务系统（或移动-APP），如绘制用例图。并满足以下要求：\"><a href=\"#选择你熟悉的定旅馆在线服务系统（或移动-APP），如绘制用例图。并满足以下要求：\" class=\"headerlink\" title=\"选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：\"></a>选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：</h2><blockquote>\n<ul>\n<li>对比 Asg_RH 用例图，请用色彩标注出创新用例或子用例</li>\n<li>尽可能识别外部系统，并用色彩标注新的外部系统和服务</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson6b.png\" alt=\"\"></p>\n<h2 id=\"对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\"><a href=\"#对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\" class=\"headerlink\" title=\"对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\"></a>对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法</h2><ul>\n<li>在基础功能上进行延伸</li>\n<li>按照模块进行深入</li>\n<li>按照用户需求的变化</li>\n<li>按照技术的变化</li>\n</ul>\n<h2 id=\"请使用-SCRUM-方法，在（任务b）用例图基础上，编制某定旅馆开发的需求-（backlog）\"><a href=\"#请使用-SCRUM-方法，在（任务b）用例图基础上，编制某定旅馆开发的需求-（backlog）\" class=\"headerlink\" title=\"请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）\"></a>请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）</h2><table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Name</th>\n<th>Imp</th>\n<th>Est</th>\n<th>How to demo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>选择酒店</td>\n<td>40</td>\n<td>5</td>\n<td>选择酒店所在城市、预定时间、酒店关键字</td>\n</tr>\n<tr>\n<td>2</td>\n<td>预订酒店</td>\n<td>45</td>\n<td>6</td>\n<td>选择酒店、选择房间类型、查看评价、选择时间、确认信息</td>\n</tr>\n<tr>\n<td>3</td>\n<td>确认订单</td>\n<td>25</td>\n<td>3</td>\n<td>查看信息</td>\n</tr>\n<tr>\n<td>4</td>\n<td>支付订单</td>\n<td>40</td>\n<td>4</td>\n<td>选择付款方式付款</td>\n</tr>\n<tr>\n<td>5</td>\n<td>管理订单</td>\n<td>30</td>\n<td>5</td>\n<td>查看订单信息、删除订单</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"业务建模\"><a href=\"#业务建模\" class=\"headerlink\" title=\"业务建模\"></a>业务建模</h1><h2 id=\"在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\"><a href=\"#在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\" class=\"headerlink\" title=\"在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\"></a>在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。</h2><p><img src=\"/images/lesson6_3.png\" alt=\"\"></p>\n<h2 id=\"选择你身边的银行-ATM，用活动图描绘取款业务流程\"><a href=\"#选择你身边的银行-ATM，用活动图描绘取款业务流程\" class=\"headerlink\" title=\"选择你身边的银行 ATM，用活动图描绘取款业务流程\"></a>选择你身边的银行 ATM，用活动图描绘取款业务流程</h2><p><img src=\"/images/lesson6_3b.png\" alt=\"\"></p>\n<h2 id=\"查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\"><a href=\"#查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\" class=\"headerlink\" title=\"查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\"></a>查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例</h2><p><img src=\"/images/lesson6_3c.png\" alt=\"\"></p>\n<h1 id=\"用例文本编写\"><a href=\"#用例文本编写\" class=\"headerlink\" title=\"用例文本编写\"></a>用例文本编写</h1><blockquote>\n<p>在大作业基础上，分析三种用例文本的优点和缺点</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>用例文本</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>详细用例</td>\n<td>详细、深入</td>\n<td>繁琐导致耗时长</td>\n</tr>\n<tr>\n<td>casual 用例</td>\n<td>较详细、编写较简便</td>\n<td>细节不足，不够正式</td>\n</tr>\n<tr>\n<td>brief用例</td>\n<td>简介、编写简便</td>\n<td>缺少细节</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用例建模\"><a href=\"#用例建模\" class=\"headerlink\" title=\"用例建模\"></a>用例建模</h1><h2 id=\"阅读-Asg-RH-文档，绘制用例图。-按-Task1-要求，请使用工具-UMLet，截图格式务必是-png-并控制尺寸\"><a href=\"#阅读-Asg-RH-文档，绘制用例图。-按-Task1-要求，请使用工具-UMLet，截图格式务必是-png-并控制尺寸\" class=\"headerlink\" title=\"阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸\"></a>阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸</h2><p><img src=\"/images/lesson6.png\" alt=\"\"></p>\n<h2 id=\"选择你熟悉的定旅馆在线服务系统（或移动-APP），如绘制用例图。并满足以下要求：\"><a href=\"#选择你熟悉的定旅馆在线服务系统（或移动-APP），如绘制用例图。并满足以下要求：\" class=\"headerlink\" title=\"选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：\"></a>选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：</h2><blockquote>\n<ul>\n<li>对比 Asg_RH 用例图，请用色彩标注出创新用例或子用例</li>\n<li>尽可能识别外部系统，并用色彩标注新的外部系统和服务</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson6b.png\" alt=\"\"></p>\n<h2 id=\"对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\"><a href=\"#对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\" class=\"headerlink\" title=\"对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\"></a>对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法</h2><ul>\n<li>在基础功能上进行延伸</li>\n<li>按照模块进行深入</li>\n<li>按照用户需求的变化</li>\n<li>按照技术的变化</li>\n</ul>\n<h2 id=\"请使用-SCRUM-方法，在（任务b）用例图基础上，编制某定旅馆开发的需求-（backlog）\"><a href=\"#请使用-SCRUM-方法，在（任务b）用例图基础上，编制某定旅馆开发的需求-（backlog）\" class=\"headerlink\" title=\"请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）\"></a>请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）</h2><table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Name</th>\n<th>Imp</th>\n<th>Est</th>\n<th>How to demo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>选择酒店</td>\n<td>40</td>\n<td>5</td>\n<td>选择酒店所在城市、预定时间、酒店关键字</td>\n</tr>\n<tr>\n<td>2</td>\n<td>预订酒店</td>\n<td>45</td>\n<td>6</td>\n<td>选择酒店、选择房间类型、查看评价、选择时间、确认信息</td>\n</tr>\n<tr>\n<td>3</td>\n<td>确认订单</td>\n<td>25</td>\n<td>3</td>\n<td>查看信息</td>\n</tr>\n<tr>\n<td>4</td>\n<td>支付订单</td>\n<td>40</td>\n<td>4</td>\n<td>选择付款方式付款</td>\n</tr>\n<tr>\n<td>5</td>\n<td>管理订单</td>\n<td>30</td>\n<td>5</td>\n<td>查看订单信息、删除订单</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"业务建模\"><a href=\"#业务建模\" class=\"headerlink\" title=\"业务建模\"></a>业务建模</h1><h2 id=\"在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\"><a href=\"#在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\" class=\"headerlink\" title=\"在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\"></a>在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。</h2><p><img src=\"/images/lesson6_3.png\" alt=\"\"></p>\n<h2 id=\"选择你身边的银行-ATM，用活动图描绘取款业务流程\"><a href=\"#选择你身边的银行-ATM，用活动图描绘取款业务流程\" class=\"headerlink\" title=\"选择你身边的银行 ATM，用活动图描绘取款业务流程\"></a>选择你身边的银行 ATM，用活动图描绘取款业务流程</h2><p><img src=\"/images/lesson6_3b.png\" alt=\"\"></p>\n<h2 id=\"查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\"><a href=\"#查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\" class=\"headerlink\" title=\"查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\"></a>查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例</h2><p><img src=\"/images/lesson6_3c.png\" alt=\"\"></p>\n<h1 id=\"用例文本编写\"><a href=\"#用例文本编写\" class=\"headerlink\" title=\"用例文本编写\"></a>用例文本编写</h1><blockquote>\n<p>在大作业基础上，分析三种用例文本的优点和缺点</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>用例文本</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>详细用例</td>\n<td>详细、深入</td>\n<td>繁琐导致耗时长</td>\n</tr>\n<tr>\n<td>casual 用例</td>\n<td>较详细、编写较简便</td>\n<td>细节不足，不够正式</td>\n</tr>\n<tr>\n<td>brief用例</td>\n<td>简介、编写简便</td>\n<td>缺少细节</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"系统分析与设计作业十三","toc":true,"date":"2018-06-06T09:16:25.000Z","_content":"\n## 描述软件架构与框架之间的区别与联系\n\n### 软件架构\n\n软件架构是一个系统的草图。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。\n\n### 软件框架\n\n软件框架其实就是将代码放到一个我们看不到的容器中，规定架构。当我们使用的时候直接调用。\n\n### 区别\n\n​\t框架是软件，架构不是软件。\n\n​\t框架是一种特殊的软件，它并不能提供完整无缺的解决方案，而是为构建解决方案提供良好的基础。框架是半成品。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用系统直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”\n\n​\t软件架构不是软件，而是关于软件如何设计的重要决策。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。\n\n​\t我们不能指着某些代码，说这就是软件架构，因为软件架构是比具体代码高一个抽象层次的概念。架构势必被代码所体现和遵循，但任何一段具体的代码都代表不了架构。\n\n### 联系\n\n​\t架构是框架的抽象，框架是架构的具体实现。\n\n​\t框架可能集合了一种或多种架构。\n\n## 以你的项目为案例\n\n### 绘制三层架构模型图，细致到分区\n\n![](/images/lesson13_1.png)\n\n### 结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\n\n1、开发人员可以只关注整个结构中的其中某一层；\n\n2、可以很容易的用新的实现来替换原有层次的实现；\n\n3、可以降低层与层之间的依赖；\n\n4、有利于标准化；\n\n5、利于各层逻辑的复用。\n\n6、结构更加的明确\n\n7、在后期维护的时候，极大地降低了维护成本和维护时间\n\n## 研究 VUE 与 Flux 状态管理的异同\n\n### Vuex\n\n采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n核心概念：\n\n- State：Vuex 使用**单一状态树**——用一个对象就包含了全部的应用层级状态。\n- Getter：Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。\n- Mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 **事件类型 (type)** 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。\n- Action：和Action 类似于 mutation，不同在于：\n  - Action 提交的是 mutation，而不是直接变更状态。\n  - Action 可以包含任意异步操作。\n- Module：**模块（module）**。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。\n\nVuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：\n\n1. 应用层级的状态应该集中到单个 store 对象中。\n2. 提交 **mutation** 是更改状态的唯一方法，并且这个过程是同步的。\n3. 异步逻辑都应该封装到 **action** 里面。\n\n### Flux\n\n[参考链接](https://blog.csdn.net/u010644262/article/details/79443567)\n\nFlux是Facebook用于构建客户端Web应用程序的一个**系统架构**。它通过**利用单向数据流来补充React的可组合视图组件**。它更像是一种模式，而不是一个正式的框架。\nFlux将一个应用分成**四个部分**。\n\n- View： 视图层 \n- Action（动作）：视图层发出的消息（比如mouseClick） \n- Dispatcher（派发器）：用来接收Actions、执行回调函数\n- Store（数据层）：用来存放应用的状态，一旦发生变动就提醒Views要更新页面\n\n流程：\n\n1. 用户访问 View\n2. View 发出用户的 Action\n3. Dispatcher 收到 Action，要求 Store 进行相应的更新\n4. Store 更新后，发出一个\"change\"事件\n5. View 收到\"change\"事件后，更新页面\n\n### 区别：\n\nVuex将action分为了异步和同步两种而Flux没有区分。\n\n### 联系：\n\nVuex是基于Flux进行改进的。","source":"_posts/系统分析与设计作业十三.md","raw":"---\ntitle: 系统分析与设计作业十三\ntoc: true\ndate: 2018-06-06 17:16:25\ncategories:\n- 系统分析与设计\ntags:\n- VUE\n- Flux\n- 三层架构\n---\n\n## 描述软件架构与框架之间的区别与联系\n\n### 软件架构\n\n软件架构是一个系统的草图。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。\n\n### 软件框架\n\n软件框架其实就是将代码放到一个我们看不到的容器中，规定架构。当我们使用的时候直接调用。\n\n### 区别\n\n​\t框架是软件，架构不是软件。\n\n​\t框架是一种特殊的软件，它并不能提供完整无缺的解决方案，而是为构建解决方案提供良好的基础。框架是半成品。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用系统直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”\n\n​\t软件架构不是软件，而是关于软件如何设计的重要决策。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。\n\n​\t我们不能指着某些代码，说这就是软件架构，因为软件架构是比具体代码高一个抽象层次的概念。架构势必被代码所体现和遵循，但任何一段具体的代码都代表不了架构。\n\n### 联系\n\n​\t架构是框架的抽象，框架是架构的具体实现。\n\n​\t框架可能集合了一种或多种架构。\n\n## 以你的项目为案例\n\n### 绘制三层架构模型图，细致到分区\n\n![](/images/lesson13_1.png)\n\n### 结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\n\n1、开发人员可以只关注整个结构中的其中某一层；\n\n2、可以很容易的用新的实现来替换原有层次的实现；\n\n3、可以降低层与层之间的依赖；\n\n4、有利于标准化；\n\n5、利于各层逻辑的复用。\n\n6、结构更加的明确\n\n7、在后期维护的时候，极大地降低了维护成本和维护时间\n\n## 研究 VUE 与 Flux 状态管理的异同\n\n### Vuex\n\n采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n核心概念：\n\n- State：Vuex 使用**单一状态树**——用一个对象就包含了全部的应用层级状态。\n- Getter：Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。\n- Mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 **事件类型 (type)** 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。\n- Action：和Action 类似于 mutation，不同在于：\n  - Action 提交的是 mutation，而不是直接变更状态。\n  - Action 可以包含任意异步操作。\n- Module：**模块（module）**。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。\n\nVuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：\n\n1. 应用层级的状态应该集中到单个 store 对象中。\n2. 提交 **mutation** 是更改状态的唯一方法，并且这个过程是同步的。\n3. 异步逻辑都应该封装到 **action** 里面。\n\n### Flux\n\n[参考链接](https://blog.csdn.net/u010644262/article/details/79443567)\n\nFlux是Facebook用于构建客户端Web应用程序的一个**系统架构**。它通过**利用单向数据流来补充React的可组合视图组件**。它更像是一种模式，而不是一个正式的框架。\nFlux将一个应用分成**四个部分**。\n\n- View： 视图层 \n- Action（动作）：视图层发出的消息（比如mouseClick） \n- Dispatcher（派发器）：用来接收Actions、执行回调函数\n- Store（数据层）：用来存放应用的状态，一旦发生变动就提醒Views要更新页面\n\n流程：\n\n1. 用户访问 View\n2. View 发出用户的 Action\n3. Dispatcher 收到 Action，要求 Store 进行相应的更新\n4. Store 更新后，发出一个\"change\"事件\n5. View 收到\"change\"事件后，更新页面\n\n### 区别：\n\nVuex将action分为了异步和同步两种而Flux没有区分。\n\n### 联系：\n\nVuex是基于Flux进行改进的。","slug":"系统分析与设计作业十三","published":1,"updated":"2018-09-06T16:40:46.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0u002x7baguty7x2ny","content":"<h2 id=\"描述软件架构与框架之间的区别与联系\"><a href=\"#描述软件架构与框架之间的区别与联系\" class=\"headerlink\" title=\"描述软件架构与框架之间的区别与联系\"></a>描述软件架构与框架之间的区别与联系</h2><h3 id=\"软件架构\"><a href=\"#软件架构\" class=\"headerlink\" title=\"软件架构\"></a>软件架构</h3><p>软件架构是一个系统的草图。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。</p>\n<h3 id=\"软件框架\"><a href=\"#软件框架\" class=\"headerlink\" title=\"软件框架\"></a>软件框架</h3><p>软件框架其实就是将代码放到一个我们看不到的容器中，规定架构。当我们使用的时候直接调用。</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><p>​    框架是软件，架构不是软件。</p>\n<p>​    框架是一种特殊的软件，它并不能提供完整无缺的解决方案，而是为构建解决方案提供良好的基础。框架是半成品。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用系统直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”</p>\n<p>​    软件架构不是软件，而是关于软件如何设计的重要决策。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。</p>\n<p>​    我们不能指着某些代码，说这就是软件架构，因为软件架构是比具体代码高一个抽象层次的概念。架构势必被代码所体现和遵循，但任何一段具体的代码都代表不了架构。</p>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><p>​    架构是框架的抽象，框架是架构的具体实现。</p>\n<p>​    框架可能集合了一种或多种架构。</p>\n<h2 id=\"以你的项目为案例\"><a href=\"#以你的项目为案例\" class=\"headerlink\" title=\"以你的项目为案例\"></a>以你的项目为案例</h2><h3 id=\"绘制三层架构模型图，细致到分区\"><a href=\"#绘制三层架构模型图，细致到分区\" class=\"headerlink\" title=\"绘制三层架构模型图，细致到分区\"></a>绘制三层架构模型图，细致到分区</h3><p><img src=\"/images/lesson13_1.png\" alt=\"\"></p>\n<h3 id=\"结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\"><a href=\"#结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\" class=\"headerlink\" title=\"结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\"></a>结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利</h3><p>1、开发人员可以只关注整个结构中的其中某一层；</p>\n<p>2、可以很容易的用新的实现来替换原有层次的实现；</p>\n<p>3、可以降低层与层之间的依赖；</p>\n<p>4、有利于标准化；</p>\n<p>5、利于各层逻辑的复用。</p>\n<p>6、结构更加的明确</p>\n<p>7、在后期维护的时候，极大地降低了维护成本和维护时间</p>\n<h2 id=\"研究-VUE-与-Flux-状态管理的异同\"><a href=\"#研究-VUE-与-Flux-状态管理的异同\" class=\"headerlink\" title=\"研究 VUE 与 Flux 状态管理的异同\"></a>研究 VUE 与 Flux 状态管理的异同</h2><h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>核心概念：</p>\n<ul>\n<li>State：Vuex 使用<strong>单一状态树</strong>——用一个对象就包含了全部的应用层级状态。</li>\n<li>Getter：Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</li>\n<li>Mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。</li>\n<li>Action：和Action 类似于 mutation，不同在于：<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n</li>\n<li>Module：<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。</li>\n</ul>\n<p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p>\n<ol>\n<li>应用层级的状态应该集中到单个 store 对象中。</li>\n<li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li>\n<li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li>\n</ol>\n<h3 id=\"Flux\"><a href=\"#Flux\" class=\"headerlink\" title=\"Flux\"></a>Flux</h3><p><a href=\"https://blog.csdn.net/u010644262/article/details/79443567\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>Flux是Facebook用于构建客户端Web应用程序的一个<strong>系统架构</strong>。它通过<strong>利用单向数据流来补充React的可组合视图组件</strong>。它更像是一种模式，而不是一个正式的框架。<br>Flux将一个应用分成<strong>四个部分</strong>。</p>\n<ul>\n<li>View： 视图层 </li>\n<li>Action（动作）：视图层发出的消息（比如mouseClick） </li>\n<li>Dispatcher（派发器）：用来接收Actions、执行回调函数</li>\n<li>Store（数据层）：用来存放应用的状态，一旦发生变动就提醒Views要更新页面</li>\n</ul>\n<p>流程：</p>\n<ol>\n<li>用户访问 View</li>\n<li>View 发出用户的 Action</li>\n<li>Dispatcher 收到 Action，要求 Store 进行相应的更新</li>\n<li>Store 更新后，发出一个”change”事件</li>\n<li>View 收到”change”事件后，更新页面</li>\n</ol>\n<h3 id=\"区别：\"><a href=\"#区别：\" class=\"headerlink\" title=\"区别：\"></a>区别：</h3><p>Vuex将action分为了异步和同步两种而Flux没有区分。</p>\n<h3 id=\"联系：\"><a href=\"#联系：\" class=\"headerlink\" title=\"联系：\"></a>联系：</h3><p>Vuex是基于Flux进行改进的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"描述软件架构与框架之间的区别与联系\"><a href=\"#描述软件架构与框架之间的区别与联系\" class=\"headerlink\" title=\"描述软件架构与框架之间的区别与联系\"></a>描述软件架构与框架之间的区别与联系</h2><h3 id=\"软件架构\"><a href=\"#软件架构\" class=\"headerlink\" title=\"软件架构\"></a>软件架构</h3><p>软件架构是一个系统的草图。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。</p>\n<h3 id=\"软件框架\"><a href=\"#软件框架\" class=\"headerlink\" title=\"软件框架\"></a>软件框架</h3><p>软件框架其实就是将代码放到一个我们看不到的容器中，规定架构。当我们使用的时候直接调用。</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><p>​    框架是软件，架构不是软件。</p>\n<p>​    框架是一种特殊的软件，它并不能提供完整无缺的解决方案，而是为构建解决方案提供良好的基础。框架是半成品。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用系统直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”</p>\n<p>​    软件架构不是软件，而是关于软件如何设计的重要决策。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。</p>\n<p>​    我们不能指着某些代码，说这就是软件架构，因为软件架构是比具体代码高一个抽象层次的概念。架构势必被代码所体现和遵循，但任何一段具体的代码都代表不了架构。</p>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><p>​    架构是框架的抽象，框架是架构的具体实现。</p>\n<p>​    框架可能集合了一种或多种架构。</p>\n<h2 id=\"以你的项目为案例\"><a href=\"#以你的项目为案例\" class=\"headerlink\" title=\"以你的项目为案例\"></a>以你的项目为案例</h2><h3 id=\"绘制三层架构模型图，细致到分区\"><a href=\"#绘制三层架构模型图，细致到分区\" class=\"headerlink\" title=\"绘制三层架构模型图，细致到分区\"></a>绘制三层架构模型图，细致到分区</h3><p><img src=\"/images/lesson13_1.png\" alt=\"\"></p>\n<h3 id=\"结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\"><a href=\"#结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\" class=\"headerlink\" title=\"结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\"></a>结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利</h3><p>1、开发人员可以只关注整个结构中的其中某一层；</p>\n<p>2、可以很容易的用新的实现来替换原有层次的实现；</p>\n<p>3、可以降低层与层之间的依赖；</p>\n<p>4、有利于标准化；</p>\n<p>5、利于各层逻辑的复用。</p>\n<p>6、结构更加的明确</p>\n<p>7、在后期维护的时候，极大地降低了维护成本和维护时间</p>\n<h2 id=\"研究-VUE-与-Flux-状态管理的异同\"><a href=\"#研究-VUE-与-Flux-状态管理的异同\" class=\"headerlink\" title=\"研究 VUE 与 Flux 状态管理的异同\"></a>研究 VUE 与 Flux 状态管理的异同</h2><h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>核心概念：</p>\n<ul>\n<li>State：Vuex 使用<strong>单一状态树</strong>——用一个对象就包含了全部的应用层级状态。</li>\n<li>Getter：Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</li>\n<li>Mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。</li>\n<li>Action：和Action 类似于 mutation，不同在于：<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n</li>\n<li>Module：<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。</li>\n</ul>\n<p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p>\n<ol>\n<li>应用层级的状态应该集中到单个 store 对象中。</li>\n<li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li>\n<li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li>\n</ol>\n<h3 id=\"Flux\"><a href=\"#Flux\" class=\"headerlink\" title=\"Flux\"></a>Flux</h3><p><a href=\"https://blog.csdn.net/u010644262/article/details/79443567\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>Flux是Facebook用于构建客户端Web应用程序的一个<strong>系统架构</strong>。它通过<strong>利用单向数据流来补充React的可组合视图组件</strong>。它更像是一种模式，而不是一个正式的框架。<br>Flux将一个应用分成<strong>四个部分</strong>。</p>\n<ul>\n<li>View： 视图层 </li>\n<li>Action（动作）：视图层发出的消息（比如mouseClick） </li>\n<li>Dispatcher（派发器）：用来接收Actions、执行回调函数</li>\n<li>Store（数据层）：用来存放应用的状态，一旦发生变动就提醒Views要更新页面</li>\n</ul>\n<p>流程：</p>\n<ol>\n<li>用户访问 View</li>\n<li>View 发出用户的 Action</li>\n<li>Dispatcher 收到 Action，要求 Store 进行相应的更新</li>\n<li>Store 更新后，发出一个”change”事件</li>\n<li>View 收到”change”事件后，更新页面</li>\n</ol>\n<h3 id=\"区别：\"><a href=\"#区别：\" class=\"headerlink\" title=\"区别：\"></a>区别：</h3><p>Vuex将action分为了异步和同步两种而Flux没有区分。</p>\n<h3 id=\"联系：\"><a href=\"#联系：\" class=\"headerlink\" title=\"联系：\"></a>联系：</h3><p>Vuex是基于Flux进行改进的。</p>\n"},{"title":"系统分析与设计作业十六","toc":true,"date":"2018-06-30T07:12:15.000Z","_content":"\n## 使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）\n\n### 用例简介\n\n用户提交订单后填写用户信息、确认房间和时间后完成订单。\n\n### 顺序图\n\n![](/images/lesson16_1.png)\n\n### 类图\n\n![](/images/lesson16_2.png)\n\n## 将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\n\n![](/images/lesson16_3.png)","source":"_posts/系统分析与设计作业十六.md","raw":"---\ntitle: 系统分析与设计作业十六\ntoc: true\ndate: 2018-06-30 15:12:15\ncategories:\n- 系统分析与设计\ntags:\n- UMLet\n- 用例图\n---\n\n## 使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）\n\n### 用例简介\n\n用户提交订单后填写用户信息、确认房间和时间后完成订单。\n\n### 顺序图\n\n![](/images/lesson16_1.png)\n\n### 类图\n\n![](/images/lesson16_2.png)\n\n## 将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\n\n![](/images/lesson16_3.png)","slug":"系统分析与设计作业十六","published":1,"updated":"2018-09-06T16:40:46.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0w002z7bago26vrftg","content":"<h2 id=\"使用-ECB-实现-make-reservation-用例的详细设计（包含用例简介，顺序图，类图）\"><a href=\"#使用-ECB-实现-make-reservation-用例的详细设计（包含用例简介，顺序图，类图）\" class=\"headerlink\" title=\"使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）\"></a>使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）</h2><h3 id=\"用例简介\"><a href=\"#用例简介\" class=\"headerlink\" title=\"用例简介\"></a>用例简介</h3><p>用户提交订单后填写用户信息、确认房间和时间后完成订单。</p>\n<h3 id=\"顺序图\"><a href=\"#顺序图\" class=\"headerlink\" title=\"顺序图\"></a>顺序图</h3><p><img src=\"/images/lesson16_1.png\" alt=\"\"></p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/images/lesson16_2.png\" alt=\"\"></p>\n<h2 id=\"将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\"><a href=\"#将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\" class=\"headerlink\" title=\"将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\"></a>将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类</h2><p><img src=\"/images/lesson16_3.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用-ECB-实现-make-reservation-用例的详细设计（包含用例简介，顺序图，类图）\"><a href=\"#使用-ECB-实现-make-reservation-用例的详细设计（包含用例简介，顺序图，类图）\" class=\"headerlink\" title=\"使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）\"></a>使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）</h2><h3 id=\"用例简介\"><a href=\"#用例简介\" class=\"headerlink\" title=\"用例简介\"></a>用例简介</h3><p>用户提交订单后填写用户信息、确认房间和时间后完成订单。</p>\n<h3 id=\"顺序图\"><a href=\"#顺序图\" class=\"headerlink\" title=\"顺序图\"></a>顺序图</h3><p><img src=\"/images/lesson16_1.png\" alt=\"\"></p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/images/lesson16_2.png\" alt=\"\"></p>\n<h2 id=\"将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\"><a href=\"#将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\" class=\"headerlink\" title=\"将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\"></a>将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类</h2><p><img src=\"/images/lesson16_3.png\" alt=\"\"></p>\n"},{"title":"遇见逆水寒男号女NPC奇物好感统计","toc":false,"date":"2018-08-23T11:42:20.000Z","_content":"\n特别感谢[秦沨_JONAS](https://weibo.com/u/3744087174?source=webim)及其小伙伴们的辛苦统计！\n\n---\n\n\n\n### 首字母索引\n\n[B](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#B) [C](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#C) [D](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#D) [F](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#F) [G](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#G) [H](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#H) [J](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#J) [K](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#K) [L](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#L) [M](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#M) [N](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#N) [P](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#P) [Q](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Q) [R](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#R) [S](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#S) [T](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#T) [W](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#W) [X](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#X) [Y](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Y) [Z](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Z)\n\n### B\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 半截蜡烛 | 2      | 2      | 2    | 2      | 5      |\n| 拨浪鼓   | 10     | 15     | 20   | 15     | 10     |\n| 筚篥     | 15     | 10     | 10   | 20     | 10     |\n| 薄荷     | 10     | 15     | 10   | 15     | 15     |\n| 剥皮小刀 | 20     | 10     | 15   | 10     | 10     |\n| 冰糖糕   | 15     | 15     | 10   | 15     | 15     |\n| 布老虎   |        | 15     | 10   |        |        |\n| 碧血战铠 | 15     | 5      | 5    | 5      | 5      |\n| 碧血战籍 | 15     | 10     | 5    | 5      | 5      |\n| 碧血毒蝎 | 20     | 5      | 5    | 5      | 5      |\n\n### C\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 草帽     | 15   | 15   | 10   | 10   | 10   |\n| 彩球     | 10 | 15 | 10   | 15   | 15   |\n| 词韵曲谱 |      | 15   |      | 20   | 15   |\n| 蹴鞠     | 10   | 10   | 20   | 10   | 10   |\n\n### D\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 冬虫夏草 | 10   | 10   | 10 |      | 20   |\n\n### F\n\n[返回首字母索引](#首字母索引)\n\n| 道具   | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| ------ | ------ | ------ | ---- | ------ | ------ |\n| 风俗画 | 5      | 5      |      |        | 20     |\n\n### G\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 弓箭     | 15   | 10   | 15   | 10   | 10   |\n| 枸杞     |      | 10   |      |      | 15   |\n| 蝈蝈笼   | 10   | 15   | 15   | 10   | 15   |\n| 关外鹿肉 | 10   | 10   | 15   | 10   | 10   |\n| 高丽泡菜 | 5    | 10   | 5    | 10   | 15   |\n| 鬼谷算盘 |      | 5    | 10   | 5    | 5 |\n| 关外鹿皮 | 15   | 10   | 15   | 10   | 10   |\n| 关外人参 | 15   | 10   | 15   | 15   | 20   |\n\n### H\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 花盆土     | 2    | 5    | 2    | 2    | 2    |\n| 红泪面脂 | 15 | 15 | 15 | 20 | 20 |\n| 花瓶       | 2    | 5    | 5    | 5    | 2    |\n| 虎皮围裙   | 10   | 10   | 15   | 10   | 10   |\n| 虎骨酒     | 15   | 5    | 15   | 10   | 10   |\n| 荷包       | 10   | 10   | 10   | 15   | 15   |\n| 和田玉坠   | 10   | 15   | 15   | 15   | 20   |\n| 和田玉石   | 10   | 15   | 15   | 20   | 20   |\n| 毁诺城女装 | 5    | 15   | 20   | 15   | 15   |\n| 河豚       | 10   | 10   | 15   | 15   | 15   |\n| 化骨水     | 20   | 5    | 5    | 5    | 5    |\n| 海螺       | 15   | 15   | 10   | 15   | 15   |\n| 胡笳十八拍 | 5    | 10   | 5    | 20   | 15   |\n| 火铳       | 20   | 5    | 20   | 5    | 5    |\n| 黑白玲珑子 | 15   | 10   | 15   | 15   | 10   |\n\n### J\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 毽子       | 5    | 15   | 15   | 10   | 10   |\n| 鸡毛掸子   | 5    | 10   | 15   | 10   | 5    |\n| 金秀铁骨扇 | 15   | 10   | 15   | 10   | 10   |\n| 金丝楠木   | 15   | 10   | 15   | 15   | 10   |\n| 绢花绸伞   | 10   | 15   | 10   | 15   | 15   |\n| 嘉禾肉粽   | 10   | 15   | 5    | 15   | 15   |\n| 机械鸟     | 15   | 15   | 20   | 15   | 10   |\n| 江山笔记   | 10   | 10   | 10   | 10 | 10 |\n| 剑门豆腐   | 15   | 15   | 15   | 15   | 15   |\n| 酒葫芦     | 10   | 10   | 15   | 10   | 15   |\n| 金叶子     | 10   | 10   | 10   | 15   | 15   |\n\n### K\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 孔雀石 | 10   | 15   | 10     | 15   | 20   |\n| 孔雀翎 |      | 15 | 10（20 | 15   | 15   |\n\n### L\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 绿茶茶叶   | 5    | 2    | 2    | 5    | 5    |\n| 莲花河灯   | 10   | 20   |      |      |      |\n| 狼毫笔     | 2    | 2    | 2    | 5    | 2    |\n| 鎏金碧玉勺 | 10   | 15   | 10   | 15   | 15   |\n| 楼兰蜜酒   | 10   | 15   | 15   | 15   | 20   |\n| 灵芝       | 15   | 15   | 15   | 20   | 20   |\n| 龙井黑猪肉 | 10   | 10   | 5 |      |      |\n| 柳笛       | 10   | 15   | 10   | 15   | 15   |\n| 龙渊       | 20   | 10   | 15   | 10   | 10   |\n\n### M\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 磨刀石   | 2    | 2    | 5    | 2    | 2    |\n| 沐浴香药 | 15   | 10   | 15   | 20   | 20   |\n| 明前龙井 |      | 15 | 10   | 20   |      |\n| 美人图 | |  |  |  | 20 |\n| 棉花     | 5    | 5    | 2    | 2    | 2    |\n\n### N\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 女儿红 | 10   | 15   | 20   | 15   | 15   |\n| 泥鳅   | 5    | 5    | 15   | 5    | 15   |\n\n### P\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 判官笔     | 5    | 5    | 5    | 10   | 10   |\n| 苹果       | 5    | 20   |      |      |      |\n| 霹雳堂火器 | 20   | 5    | 20   | 5    | 5    |\n| 霹雳堂炮仗 | 15   | 5    | 20   |      |      |\n\n### Q\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 青城脸谱   | 15   | 5      | 15   | 10   | 5    |\n| 邛窑茶盏   | 15   | 15     | 10   | 20   | 15   |\n| 契丹瓜子   | 15   | 15     | 15   | 10   | 15   |\n| 契丹牛乳   | 15   | 15     | 15   | 10   | 15   |\n| 青铜锭     | 5    | 10     | 5    | 10   | 10   |\n| 庆力善治方 | 10   | 10（15 | 10   | 10   | 10   |\n\n### R\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 阮       |      |      | 5    | 20   |      |\n| 汝窑茶盏 | 10   | 15   | 10   | 20   | 10   |\n\n### S\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 神秘妆匣   | 2    | 2    | 2    | 2    | 2    |\n| 时空碎片   | 2    | 2    | 2    | 2    | 2    |\n| 锁子甲     | 15   | 5    | 15   | 5    | 5    |\n| 水域全图   | 15   | 10   | 15   | 10   | 10 |\n| 兽皮包裹   | 15   | 10   | 15   | 10   | 10   |\n| 碎月海龟   | 10   | 10   | 15   | 15   | 10   |\n| 碎月明虾   | 15   | 15   | 10   | 15   | 15   |\n| 扇子       | 10   | 15   | 10   | 15   | 15   |\n| 蒜香排骨   |      | 10   | 10   | 5    | 10   |\n| 梳妆匣     | 10   | 15   | 20   | 20   | 20   |\n| 蛇骨手串   | 20   | 5    | 15   | 10   | 10   |\n| 司南       | 15   | 15   | 15   | 10   | 10   |\n| 三合美酒   | 10   | 15   | 20   | 15   | 15   |\n| 蓑衣（农家 | 15   | 10   | 10   | 10   | 10   |\n| 蓑衣（桃溪 | 15   |      |      |      |      |\n\n### T\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 陶罐     | 5    | 2    | 5    | 2    | 2    |\n| 桃溪钓竿 | 10   | 15 | 10   | 10 | 10   |\n| 桃溪花枝 | 10   | 20   |      | 10   | 10   |\n| 糖葫芦   | 10   | 20   | 15   | 15   | 10   |\n| 团扇     |      |      | 5    | 20   | 20   |\n| 桃木剑   | 10   | 15   | 10   | 10 | 10   |\n| 桃溪河虾 |  | 20 | 10 |  | 15 |\n| 桃花雪   | 10   | 20   | 15   | 15   | 15   |\n| 桃溪泥人 | 15   | 20 |      |      | 10   |\n| 桃溪豆腐 | 15   | 20   | 10   |      | 15   |\n| 铜镜     | 10   | 15   | 10   | 15   | 15 |\n| 铜丝手套 | 20   | 10   | 15   | 10   | 10   |\n\n### W\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 武经总要 | 5 | 10   | 5    | 10   | 5    |\n| 武安蹴鞠 | 10   | 10   | 20   | 5    | 10   |\n| 武林秘籍 | 20   | 10   | 15   | 5    | 5    |\n\n### X\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 小暖       | 15   | 20   | 20   | 15   | 10   |\n| 雪梨       | 15   | 15   | 10   | 15   | 15   |\n| 雪狐皮     | 20   | 15   | 15   | 15   | 15   |\n| 雪村鸡蛋   | 15   | 15   | 10   | 10 | 15 |\n| 熙春调味料 | 10   | 10   | 15   | 15   | 15   |\n| 宣州紫毫笔 | 10   | 15   | 10   | 15   | 10   |\n| 绣花娟帕   | 10   | 15   | 10   | 15   | 20   |\n| 西湖莲花   | 10   | 15   | 10 | 15   | 15   |\n| 西湖莲蓬   | 10   | 20   | 15   | 15   | 10   |\n| 西域葡萄   | 15   | 15   | 15   | 15   | 15   |\n| 西域炼乳   | 15   | 10   | 15   | 15   | 15   |\n\n### Y\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 一颗大白菜   | 2    | 2    | 2    | 2    | 2    |\n| 一块木板     | 2    | 2    | 2    | 2    | 2    |\n| 一块帆布     | 2    | 2    | 2    | 2    | 2    |\n| 一根茄子     | 2    | 2    | 2    | 2    | 5 |\n| 一根萝卜     | 2    | 2    | 2    | 2    | 2    |\n| 一片枫叶     | 5    | 5    | 2    | 2    | 5    |\n| 一袋面粉     | 2    | 2    | 2    | 2 | 2 |\n| 一捆麻绳     | 2    | 2    | 2    | 2    | 5    |\n| 一袋大麦     | 2    | 2    | 2    | 2    | 2    |\n| 一块粗麻布   | 2    | 2    | 2    | 2    | 2    |\n| 一袋麦麸     | 2    | 2    | 2    | 2    | 2    |\n| 一束桃花     |      | 20   |      | 15   | 15   |\n| 一袋红豆     | 2    | 2    | 2    | 5    | 2    |\n| 一捆线球     | 2    | 2    | 2    | 2    | 2    |\n| 一筐蔬菜     | 2    | 2    | 2    | 2    | 2    |\n| 一屉包子     | 10   |      |      |      | 10   |\n| 一只寒梅     | 20   |      |      |      | 15   |\n| 羊毫笔       | 2    | 2    | 2    | 5    | 2    |\n| 野生牛筋     | 10   | 10 | 15   |      | 10   |\n| 萤火虫       | 15   | 20   | 10   | 15   | 15   |\n| 云西竹笋     | 15   | 20   |      |      | 15   |\n| 月影碎空残卷 | 20   | 15   | 15   | 5    | 5    |\n| 养颜阿胶     | 20   | 20   | 20   | 20   | 20   |\n| 药粥         | 15   | 15   |      | 10 | 10 |\n| 玉扳指       | 20   | 5    | 15   | 15   | 15   |\n| 玉红叶       | 15   | 15   | 10   | 20   | 20   |\n\n### Z\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 针线包 | 2 | 5 | 2 | 2 | 2 |\n| 竹哨           | 15   | 15   | 10   | 10   | 10   |\n| 竹陀螺         | 10   | 15   | 20   | 10   | 10   |\n| 醉螺           | 10   | 10   | 15   | 10   | 15   |\n| 粽子           | 5 |      | 5    | 2 | 5    |\n| 竹笋           |      |      | 10   |      |      |\n| 竹竿           | 2    | 2    | 5    | 2    | 2 |\n| 追风翼（白帝城 | 15   | 10   | 20   | 10   | 10   |\n| 追风翼         | 15   | 10   | 15   | 10   | 10   |","source":"_posts/遇见逆水寒男号女NPC奇物好感统计.md","raw":"---\ntitle: 遇见逆水寒男号女NPC奇物好感统计\ntoc: false\ndate: 2018-08-23 19:42:20\ncategories:\ntags:\n- 遇见逆水寒\n---\n\n特别感谢[秦沨_JONAS](https://weibo.com/u/3744087174?source=webim)及其小伙伴们的辛苦统计！\n\n---\n\n\n\n### 首字母索引\n\n[B](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#B) [C](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#C) [D](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#D) [F](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#F) [G](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#G) [H](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#H) [J](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#J) [K](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#K) [L](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#L) [M](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#M) [N](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#N) [P](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#P) [Q](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Q) [R](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#R) [S](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#S) [T](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#T) [W](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#W) [X](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#X) [Y](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Y) [Z](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Z)\n\n### B\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 半截蜡烛 | 2      | 2      | 2    | 2      | 5      |\n| 拨浪鼓   | 10     | 15     | 20   | 15     | 10     |\n| 筚篥     | 15     | 10     | 10   | 20     | 10     |\n| 薄荷     | 10     | 15     | 10   | 15     | 15     |\n| 剥皮小刀 | 20     | 10     | 15   | 10     | 10     |\n| 冰糖糕   | 15     | 15     | 10   | 15     | 15     |\n| 布老虎   |        | 15     | 10   |        |        |\n| 碧血战铠 | 15     | 5      | 5    | 5      | 5      |\n| 碧血战籍 | 15     | 10     | 5    | 5      | 5      |\n| 碧血毒蝎 | 20     | 5      | 5    | 5      | 5      |\n\n### C\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 草帽     | 15   | 15   | 10   | 10   | 10   |\n| 彩球     | 10 | 15 | 10   | 15   | 15   |\n| 词韵曲谱 |      | 15   |      | 20   | 15   |\n| 蹴鞠     | 10   | 10   | 20   | 10   | 10   |\n\n### D\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 冬虫夏草 | 10   | 10   | 10 |      | 20   |\n\n### F\n\n[返回首字母索引](#首字母索引)\n\n| 道具   | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| ------ | ------ | ------ | ---- | ------ | ------ |\n| 风俗画 | 5      | 5      |      |        | 20     |\n\n### G\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 弓箭     | 15   | 10   | 15   | 10   | 10   |\n| 枸杞     |      | 10   |      |      | 15   |\n| 蝈蝈笼   | 10   | 15   | 15   | 10   | 15   |\n| 关外鹿肉 | 10   | 10   | 15   | 10   | 10   |\n| 高丽泡菜 | 5    | 10   | 5    | 10   | 15   |\n| 鬼谷算盘 |      | 5    | 10   | 5    | 5 |\n| 关外鹿皮 | 15   | 10   | 15   | 10   | 10   |\n| 关外人参 | 15   | 10   | 15   | 15   | 20   |\n\n### H\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 花盆土     | 2    | 5    | 2    | 2    | 2    |\n| 红泪面脂 | 15 | 15 | 15 | 20 | 20 |\n| 花瓶       | 2    | 5    | 5    | 5    | 2    |\n| 虎皮围裙   | 10   | 10   | 15   | 10   | 10   |\n| 虎骨酒     | 15   | 5    | 15   | 10   | 10   |\n| 荷包       | 10   | 10   | 10   | 15   | 15   |\n| 和田玉坠   | 10   | 15   | 15   | 15   | 20   |\n| 和田玉石   | 10   | 15   | 15   | 20   | 20   |\n| 毁诺城女装 | 5    | 15   | 20   | 15   | 15   |\n| 河豚       | 10   | 10   | 15   | 15   | 15   |\n| 化骨水     | 20   | 5    | 5    | 5    | 5    |\n| 海螺       | 15   | 15   | 10   | 15   | 15   |\n| 胡笳十八拍 | 5    | 10   | 5    | 20   | 15   |\n| 火铳       | 20   | 5    | 20   | 5    | 5    |\n| 黑白玲珑子 | 15   | 10   | 15   | 15   | 10   |\n\n### J\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 毽子       | 5    | 15   | 15   | 10   | 10   |\n| 鸡毛掸子   | 5    | 10   | 15   | 10   | 5    |\n| 金秀铁骨扇 | 15   | 10   | 15   | 10   | 10   |\n| 金丝楠木   | 15   | 10   | 15   | 15   | 10   |\n| 绢花绸伞   | 10   | 15   | 10   | 15   | 15   |\n| 嘉禾肉粽   | 10   | 15   | 5    | 15   | 15   |\n| 机械鸟     | 15   | 15   | 20   | 15   | 10   |\n| 江山笔记   | 10   | 10   | 10   | 10 | 10 |\n| 剑门豆腐   | 15   | 15   | 15   | 15   | 15   |\n| 酒葫芦     | 10   | 10   | 15   | 10   | 15   |\n| 金叶子     | 10   | 10   | 10   | 15   | 15   |\n\n### K\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 孔雀石 | 10   | 15   | 10     | 15   | 20   |\n| 孔雀翎 |      | 15 | 10（20 | 15   | 15   |\n\n### L\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 绿茶茶叶   | 5    | 2    | 2    | 5    | 5    |\n| 莲花河灯   | 10   | 20   |      |      |      |\n| 狼毫笔     | 2    | 2    | 2    | 5    | 2    |\n| 鎏金碧玉勺 | 10   | 15   | 10   | 15   | 15   |\n| 楼兰蜜酒   | 10   | 15   | 15   | 15   | 20   |\n| 灵芝       | 15   | 15   | 15   | 20   | 20   |\n| 龙井黑猪肉 | 10   | 10   | 5 |      |      |\n| 柳笛       | 10   | 15   | 10   | 15   | 15   |\n| 龙渊       | 20   | 10   | 15   | 10   | 10   |\n\n### M\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 磨刀石   | 2    | 2    | 5    | 2    | 2    |\n| 沐浴香药 | 15   | 10   | 15   | 20   | 20   |\n| 明前龙井 |      | 15 | 10   | 20   |      |\n| 美人图 | |  |  |  | 20 |\n| 棉花     | 5    | 5    | 2    | 2    | 2    |\n\n### N\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 女儿红 | 10   | 15   | 20   | 15   | 15   |\n| 泥鳅   | 5    | 5    | 15   | 5    | 15   |\n\n### P\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 判官笔     | 5    | 5    | 5    | 10   | 10   |\n| 苹果       | 5    | 20   |      |      |      |\n| 霹雳堂火器 | 20   | 5    | 20   | 5    | 5    |\n| 霹雳堂炮仗 | 15   | 5    | 20   |      |      |\n\n### Q\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 青城脸谱   | 15   | 5      | 15   | 10   | 5    |\n| 邛窑茶盏   | 15   | 15     | 10   | 20   | 15   |\n| 契丹瓜子   | 15   | 15     | 15   | 10   | 15   |\n| 契丹牛乳   | 15   | 15     | 15   | 10   | 15   |\n| 青铜锭     | 5    | 10     | 5    | 10   | 10   |\n| 庆力善治方 | 10   | 10（15 | 10   | 10   | 10   |\n\n### R\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 阮       |      |      | 5    | 20   |      |\n| 汝窑茶盏 | 10   | 15   | 10   | 20   | 10   |\n\n### S\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 神秘妆匣   | 2    | 2    | 2    | 2    | 2    |\n| 时空碎片   | 2    | 2    | 2    | 2    | 2    |\n| 锁子甲     | 15   | 5    | 15   | 5    | 5    |\n| 水域全图   | 15   | 10   | 15   | 10   | 10 |\n| 兽皮包裹   | 15   | 10   | 15   | 10   | 10   |\n| 碎月海龟   | 10   | 10   | 15   | 15   | 10   |\n| 碎月明虾   | 15   | 15   | 10   | 15   | 15   |\n| 扇子       | 10   | 15   | 10   | 15   | 15   |\n| 蒜香排骨   |      | 10   | 10   | 5    | 10   |\n| 梳妆匣     | 10   | 15   | 20   | 20   | 20   |\n| 蛇骨手串   | 20   | 5    | 15   | 10   | 10   |\n| 司南       | 15   | 15   | 15   | 10   | 10   |\n| 三合美酒   | 10   | 15   | 20   | 15   | 15   |\n| 蓑衣（农家 | 15   | 10   | 10   | 10   | 10   |\n| 蓑衣（桃溪 | 15   |      |      |      |      |\n\n### T\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 陶罐     | 5    | 2    | 5    | 2    | 2    |\n| 桃溪钓竿 | 10   | 15 | 10   | 10 | 10   |\n| 桃溪花枝 | 10   | 20   |      | 10   | 10   |\n| 糖葫芦   | 10   | 20   | 15   | 15   | 10   |\n| 团扇     |      |      | 5    | 20   | 20   |\n| 桃木剑   | 10   | 15   | 10   | 10 | 10   |\n| 桃溪河虾 |  | 20 | 10 |  | 15 |\n| 桃花雪   | 10   | 20   | 15   | 15   | 15   |\n| 桃溪泥人 | 15   | 20 |      |      | 10   |\n| 桃溪豆腐 | 15   | 20   | 10   |      | 15   |\n| 铜镜     | 10   | 15   | 10   | 15   | 15 |\n| 铜丝手套 | 20   | 10   | 15   | 10   | 10   |\n\n### W\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 武经总要 | 5 | 10   | 5    | 10   | 5    |\n| 武安蹴鞠 | 10   | 10   | 20   | 5    | 10   |\n| 武林秘籍 | 20   | 10   | 15   | 5    | 5    |\n\n### X\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 小暖       | 15   | 20   | 20   | 15   | 10   |\n| 雪梨       | 15   | 15   | 10   | 15   | 15   |\n| 雪狐皮     | 20   | 15   | 15   | 15   | 15   |\n| 雪村鸡蛋   | 15   | 15   | 10   | 10 | 15 |\n| 熙春调味料 | 10   | 10   | 15   | 15   | 15   |\n| 宣州紫毫笔 | 10   | 15   | 10   | 15   | 10   |\n| 绣花娟帕   | 10   | 15   | 10   | 15   | 20   |\n| 西湖莲花   | 10   | 15   | 10 | 15   | 15   |\n| 西湖莲蓬   | 10   | 20   | 15   | 15   | 10   |\n| 西域葡萄   | 15   | 15   | 15   | 15   | 15   |\n| 西域炼乳   | 15   | 10   | 15   | 15   | 15   |\n\n### Y\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 一颗大白菜   | 2    | 2    | 2    | 2    | 2    |\n| 一块木板     | 2    | 2    | 2    | 2    | 2    |\n| 一块帆布     | 2    | 2    | 2    | 2    | 2    |\n| 一根茄子     | 2    | 2    | 2    | 2    | 5 |\n| 一根萝卜     | 2    | 2    | 2    | 2    | 2    |\n| 一片枫叶     | 5    | 5    | 2    | 2    | 5    |\n| 一袋面粉     | 2    | 2    | 2    | 2 | 2 |\n| 一捆麻绳     | 2    | 2    | 2    | 2    | 5    |\n| 一袋大麦     | 2    | 2    | 2    | 2    | 2    |\n| 一块粗麻布   | 2    | 2    | 2    | 2    | 2    |\n| 一袋麦麸     | 2    | 2    | 2    | 2    | 2    |\n| 一束桃花     |      | 20   |      | 15   | 15   |\n| 一袋红豆     | 2    | 2    | 2    | 5    | 2    |\n| 一捆线球     | 2    | 2    | 2    | 2    | 2    |\n| 一筐蔬菜     | 2    | 2    | 2    | 2    | 2    |\n| 一屉包子     | 10   |      |      |      | 10   |\n| 一只寒梅     | 20   |      |      |      | 15   |\n| 羊毫笔       | 2    | 2    | 2    | 5    | 2    |\n| 野生牛筋     | 10   | 10 | 15   |      | 10   |\n| 萤火虫       | 15   | 20   | 10   | 15   | 15   |\n| 云西竹笋     | 15   | 20   |      |      | 15   |\n| 月影碎空残卷 | 20   | 15   | 15   | 5    | 5    |\n| 养颜阿胶     | 20   | 20   | 20   | 20   | 20   |\n| 药粥         | 15   | 15   |      | 10 | 10 |\n| 玉扳指       | 20   | 5    | 15   | 15   | 15   |\n| 玉红叶       | 15   | 15   | 10   | 20   | 20   |\n\n### Z\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 针线包 | 2 | 5 | 2 | 2 | 2 |\n| 竹哨           | 15   | 15   | 10   | 10   | 10   |\n| 竹陀螺         | 10   | 15   | 20   | 10   | 10   |\n| 醉螺           | 10   | 10   | 15   | 10   | 15   |\n| 粽子           | 5 |      | 5    | 2 | 5    |\n| 竹笋           |      |      | 10   |      |      |\n| 竹竿           | 2    | 2    | 5    | 2    | 2 |\n| 追风翼（白帝城 | 15   | 10   | 20   | 10   | 10   |\n| 追风翼         | 15   | 10   | 15   | 10   | 10   |","slug":"遇见逆水寒男号女NPC奇物好感统计","published":1,"updated":"2018-09-06T16:40:46.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru0y00337bag1ktp7902","content":"<p>特别感谢<a href=\"https://weibo.com/u/3744087174?source=webim\" target=\"_blank\" rel=\"noopener\">秦沨_JONAS</a>及其小伙伴们的辛苦统计！</p>\n<hr>\n<h3 id=\"首字母索引\"><a href=\"#首字母索引\" class=\"headerlink\" title=\"首字母索引\"></a>首字母索引</h3><p><a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#B\">B</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#C\">C</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#D\">D</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#F\">F</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#G\">G</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#H\">H</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#J\">J</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#K\">K</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#L\">L</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#M\">M</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#N\">N</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#P\">P</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Q\">Q</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#R\">R</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#S\">S</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#T\">T</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#W\">W</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#X\">X</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Y\">Y</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Z\">Z</a></p>\n<h3 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a>B</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>半截蜡烛</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>拨浪鼓</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>筚篥</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n</tr>\n<tr>\n<td>薄荷</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>剥皮小刀</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>冰糖糕</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>布老虎</td>\n<td></td>\n<td>15</td>\n<td>10</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>碧血战铠</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>碧血战籍</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>碧血毒蝎</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>草帽</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>彩球</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>词韵曲谱</td>\n<td></td>\n<td>15</td>\n<td></td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蹴鞠</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"D\"></a>D</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冬虫夏草</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td></td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"F\"></a>F</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>风俗画</td>\n<td>5</td>\n<td>5</td>\n<td></td>\n<td></td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"G\"><a href=\"#G\" class=\"headerlink\" title=\"G\"></a>G</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>弓箭</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>枸杞</td>\n<td></td>\n<td>10</td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>蝈蝈笼</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>关外鹿肉</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>高丽泡菜</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>鬼谷算盘</td>\n<td></td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>关外鹿皮</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>关外人参</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"H\"><a href=\"#H\" class=\"headerlink\" title=\"H\"></a>H</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>花盆土</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>红泪面脂</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>花瓶</td>\n<td>2</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>虎皮围裙</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>虎骨酒</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>荷包</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>和田玉坠</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>和田玉石</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>毁诺城女装</td>\n<td>5</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>河豚</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>化骨水</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>海螺</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>胡笳十八拍</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>火铳</td>\n<td>20</td>\n<td>5</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>黑白玲珑子</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"J\"><a href=\"#J\" class=\"headerlink\" title=\"J\"></a>J</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>毽子</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>鸡毛掸子</td>\n<td>5</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>金秀铁骨扇</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>金丝楠木</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>绢花绸伞</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>嘉禾肉粽</td>\n<td>10</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>机械鸟</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>江山笔记</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>剑门豆腐</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>酒葫芦</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>金叶子</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"K\"><a href=\"#K\" class=\"headerlink\" title=\"K\"></a>K</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>孔雀石</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>孔雀翎</td>\n<td></td>\n<td>15</td>\n<td>10（20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"L\"><a href=\"#L\" class=\"headerlink\" title=\"L\"></a>L</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>绿茶茶叶</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>莲花河灯</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>狼毫笔</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>鎏金碧玉勺</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>楼兰蜜酒</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>灵芝</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>龙井黑猪肉</td>\n<td>10</td>\n<td>10</td>\n<td>5</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>柳笛</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>龙渊</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"M\"><a href=\"#M\" class=\"headerlink\" title=\"M\"></a>M</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>磨刀石</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>沐浴香药</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>明前龙井</td>\n<td></td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>美人图</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>20</td>\n</tr>\n<tr>\n<td>棉花</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"N\"><a href=\"#N\" class=\"headerlink\" title=\"N\"></a>N</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>女儿红</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>泥鳅</td>\n<td>5</td>\n<td>5</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"P\"><a href=\"#P\" class=\"headerlink\" title=\"P\"></a>P</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>判官笔</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>苹果</td>\n<td>5</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>霹雳堂火器</td>\n<td>20</td>\n<td>5</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>霹雳堂炮仗</td>\n<td>15</td>\n<td>5</td>\n<td>20</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q\"></a>Q</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>青城脸谱</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>邛窑茶盏</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>契丹瓜子</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>契丹牛乳</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>青铜锭</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>庆力善治方</td>\n<td>10</td>\n<td>10（15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"R\"><a href=\"#R\" class=\"headerlink\" title=\"R\"></a>R</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>阮</td>\n<td></td>\n<td></td>\n<td>5</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>汝窑茶盏</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S\"></a>S</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>神秘妆匣</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>时空碎片</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>锁子甲</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>水域全图</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>兽皮包裹</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>碎月海龟</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>碎月明虾</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>扇子</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蒜香排骨</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n</tr>\n<tr>\n<td>梳妆匣</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>蛇骨手串</td>\n<td>20</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>司南</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>三合美酒</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蓑衣（农家</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>蓑衣（桃溪</td>\n<td>15</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"T\"><a href=\"#T\" class=\"headerlink\" title=\"T\"></a>T</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>陶罐</td>\n<td>5</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>桃溪钓竿</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪花枝</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>糖葫芦</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>团扇</td>\n<td></td>\n<td></td>\n<td>5</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>桃木剑</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪河虾</td>\n<td></td>\n<td>20</td>\n<td>10</td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>桃花雪</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>桃溪泥人</td>\n<td>15</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪豆腐</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>铜镜</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>铜丝手套</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"W\"><a href=\"#W\" class=\"headerlink\" title=\"W\"></a>W</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>武经总要</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>武安蹴鞠</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>5</td>\n<td>10</td>\n</tr>\n<tr>\n<td>武林秘籍</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"X\"><a href=\"#X\" class=\"headerlink\" title=\"X\"></a>X</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>小暖</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>雪梨</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>雪狐皮</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>雪村鸡蛋</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>熙春调味料</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>宣州紫毫笔</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>绣花娟帕</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>西湖莲花</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>西湖莲蓬</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>西域葡萄</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>西域炼乳</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Y\"><a href=\"#Y\" class=\"headerlink\" title=\"Y\"></a>Y</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一颗大白菜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块木板</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块帆布</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一根茄子</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一根萝卜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一片枫叶</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一袋面粉</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一捆麻绳</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一袋大麦</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块粗麻布</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一袋麦麸</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一束桃花</td>\n<td></td>\n<td>20</td>\n<td></td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>一袋红豆</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一捆线球</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一筐蔬菜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一屉包子</td>\n<td>10</td>\n<td></td>\n<td></td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>一只寒梅</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>羊毫笔</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>野生牛筋</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>萤火虫</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>云西竹笋</td>\n<td>15</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>月影碎空残卷</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>养颜阿胶</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>药粥</td>\n<td>15</td>\n<td>15</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>玉扳指</td>\n<td>20</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>玉红叶</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Z\"><a href=\"#Z\" class=\"headerlink\" title=\"Z\"></a>Z</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>针线包</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>竹哨</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>竹陀螺</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>醉螺</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>粽子</td>\n<td>5</td>\n<td></td>\n<td>5</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>竹笋</td>\n<td></td>\n<td></td>\n<td>10</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>竹竿</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>追风翼（白帝城</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>追风翼</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>特别感谢<a href=\"https://weibo.com/u/3744087174?source=webim\" target=\"_blank\" rel=\"noopener\">秦沨_JONAS</a>及其小伙伴们的辛苦统计！</p>\n<hr>\n<h3 id=\"首字母索引\"><a href=\"#首字母索引\" class=\"headerlink\" title=\"首字母索引\"></a>首字母索引</h3><p><a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#B\">B</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#C\">C</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#D\">D</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#F\">F</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#G\">G</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#H\">H</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#J\">J</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#K\">K</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#L\">L</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#M\">M</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#N\">N</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#P\">P</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Q\">Q</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#R\">R</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#S\">S</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#T\">T</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#W\">W</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#X\">X</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Y\">Y</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Z\">Z</a></p>\n<h3 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a>B</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>半截蜡烛</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>拨浪鼓</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>筚篥</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n</tr>\n<tr>\n<td>薄荷</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>剥皮小刀</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>冰糖糕</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>布老虎</td>\n<td></td>\n<td>15</td>\n<td>10</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>碧血战铠</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>碧血战籍</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>碧血毒蝎</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>草帽</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>彩球</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>词韵曲谱</td>\n<td></td>\n<td>15</td>\n<td></td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蹴鞠</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"D\"></a>D</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冬虫夏草</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td></td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"F\"></a>F</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>风俗画</td>\n<td>5</td>\n<td>5</td>\n<td></td>\n<td></td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"G\"><a href=\"#G\" class=\"headerlink\" title=\"G\"></a>G</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>弓箭</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>枸杞</td>\n<td></td>\n<td>10</td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>蝈蝈笼</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>关外鹿肉</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>高丽泡菜</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>鬼谷算盘</td>\n<td></td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>关外鹿皮</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>关外人参</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"H\"><a href=\"#H\" class=\"headerlink\" title=\"H\"></a>H</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>花盆土</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>红泪面脂</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>花瓶</td>\n<td>2</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>虎皮围裙</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>虎骨酒</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>荷包</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>和田玉坠</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>和田玉石</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>毁诺城女装</td>\n<td>5</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>河豚</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>化骨水</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>海螺</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>胡笳十八拍</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>火铳</td>\n<td>20</td>\n<td>5</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>黑白玲珑子</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"J\"><a href=\"#J\" class=\"headerlink\" title=\"J\"></a>J</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>毽子</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>鸡毛掸子</td>\n<td>5</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>金秀铁骨扇</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>金丝楠木</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>绢花绸伞</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>嘉禾肉粽</td>\n<td>10</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>机械鸟</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>江山笔记</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>剑门豆腐</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>酒葫芦</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>金叶子</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"K\"><a href=\"#K\" class=\"headerlink\" title=\"K\"></a>K</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>孔雀石</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>孔雀翎</td>\n<td></td>\n<td>15</td>\n<td>10（20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"L\"><a href=\"#L\" class=\"headerlink\" title=\"L\"></a>L</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>绿茶茶叶</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>莲花河灯</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>狼毫笔</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>鎏金碧玉勺</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>楼兰蜜酒</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>灵芝</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>龙井黑猪肉</td>\n<td>10</td>\n<td>10</td>\n<td>5</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>柳笛</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>龙渊</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"M\"><a href=\"#M\" class=\"headerlink\" title=\"M\"></a>M</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>磨刀石</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>沐浴香药</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>明前龙井</td>\n<td></td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>美人图</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>20</td>\n</tr>\n<tr>\n<td>棉花</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"N\"><a href=\"#N\" class=\"headerlink\" title=\"N\"></a>N</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>女儿红</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>泥鳅</td>\n<td>5</td>\n<td>5</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"P\"><a href=\"#P\" class=\"headerlink\" title=\"P\"></a>P</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>判官笔</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>苹果</td>\n<td>5</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>霹雳堂火器</td>\n<td>20</td>\n<td>5</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>霹雳堂炮仗</td>\n<td>15</td>\n<td>5</td>\n<td>20</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q\"></a>Q</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>青城脸谱</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>邛窑茶盏</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>契丹瓜子</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>契丹牛乳</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>青铜锭</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>庆力善治方</td>\n<td>10</td>\n<td>10（15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"R\"><a href=\"#R\" class=\"headerlink\" title=\"R\"></a>R</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>阮</td>\n<td></td>\n<td></td>\n<td>5</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>汝窑茶盏</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S\"></a>S</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>神秘妆匣</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>时空碎片</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>锁子甲</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>水域全图</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>兽皮包裹</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>碎月海龟</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>碎月明虾</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>扇子</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蒜香排骨</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n</tr>\n<tr>\n<td>梳妆匣</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>蛇骨手串</td>\n<td>20</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>司南</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>三合美酒</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蓑衣（农家</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>蓑衣（桃溪</td>\n<td>15</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"T\"><a href=\"#T\" class=\"headerlink\" title=\"T\"></a>T</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>陶罐</td>\n<td>5</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>桃溪钓竿</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪花枝</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>糖葫芦</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>团扇</td>\n<td></td>\n<td></td>\n<td>5</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>桃木剑</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪河虾</td>\n<td></td>\n<td>20</td>\n<td>10</td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>桃花雪</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>桃溪泥人</td>\n<td>15</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪豆腐</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>铜镜</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>铜丝手套</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"W\"><a href=\"#W\" class=\"headerlink\" title=\"W\"></a>W</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>武经总要</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>武安蹴鞠</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>5</td>\n<td>10</td>\n</tr>\n<tr>\n<td>武林秘籍</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"X\"><a href=\"#X\" class=\"headerlink\" title=\"X\"></a>X</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>小暖</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>雪梨</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>雪狐皮</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>雪村鸡蛋</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>熙春调味料</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>宣州紫毫笔</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>绣花娟帕</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>西湖莲花</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>西湖莲蓬</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>西域葡萄</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>西域炼乳</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Y\"><a href=\"#Y\" class=\"headerlink\" title=\"Y\"></a>Y</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一颗大白菜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块木板</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块帆布</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一根茄子</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一根萝卜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一片枫叶</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一袋面粉</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一捆麻绳</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一袋大麦</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块粗麻布</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一袋麦麸</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一束桃花</td>\n<td></td>\n<td>20</td>\n<td></td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>一袋红豆</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一捆线球</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一筐蔬菜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一屉包子</td>\n<td>10</td>\n<td></td>\n<td></td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>一只寒梅</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>羊毫笔</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>野生牛筋</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>萤火虫</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>云西竹笋</td>\n<td>15</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>月影碎空残卷</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>养颜阿胶</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>药粥</td>\n<td>15</td>\n<td>15</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>玉扳指</td>\n<td>20</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>玉红叶</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Z\"><a href=\"#Z\" class=\"headerlink\" title=\"Z\"></a>Z</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>针线包</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>竹哨</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>竹陀螺</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>醉螺</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>粽子</td>\n<td>5</td>\n<td></td>\n<td>5</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>竹笋</td>\n<td></td>\n<td></td>\n<td>10</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>竹竿</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>追风翼（白帝城</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>追风翼</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"部署hexo后github pages页面未更新或无法打开问题","date":"2018-03-30T07:34:29.000Z","_content":"\n\n\n# 部署\n\n本地编写完成后，要同步Github Pages，运行以下三个命令即可：\n\n```\nhexo clean\nhexo g\nhexo d\n```\n\n需要注意的是**这些命令应该在hexo目录的根目录下进行**。\n\n# 部署后页面未更新\n\n使用**无痕模式**浏览或者**等一段时间**再查看。\n\n\n\n---\n\n更推荐运行`hexo s`后利用本地服务器在**localhost:4000**查看效果，效果满意后直接部署，过段时间页面自然会更新的。","source":"_posts/部署hexo后github-pages页面未更新或无法打开问题.md","raw":"---\ntitle: 部署hexo后github pages页面未更新或无法打开问题\ndate: 2018-03-30 15:34:29\ncategories:\n- methods\ntags:\n- hexo\n- github pages\n---\n\n\n\n# 部署\n\n本地编写完成后，要同步Github Pages，运行以下三个命令即可：\n\n```\nhexo clean\nhexo g\nhexo d\n```\n\n需要注意的是**这些命令应该在hexo目录的根目录下进行**。\n\n# 部署后页面未更新\n\n使用**无痕模式**浏览或者**等一段时间**再查看。\n\n\n\n---\n\n更推荐运行`hexo s`后利用本地服务器在**localhost:4000**查看效果，效果满意后直接部署，过段时间页面自然会更新的。","slug":"部署hexo后github-pages页面未更新或无法打开问题","published":1,"updated":"2018-09-06T16:40:46.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlx9ru1000357bag7ucr09uf","content":"<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>本地编写完成后，要同步Github Pages，运行以下三个命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>需要注意的是<strong>这些命令应该在hexo目录的根目录下进行</strong>。</p>\n<h1 id=\"部署后页面未更新\"><a href=\"#部署后页面未更新\" class=\"headerlink\" title=\"部署后页面未更新\"></a>部署后页面未更新</h1><p>使用<strong>无痕模式</strong>浏览或者<strong>等一段时间</strong>再查看。</p>\n<hr>\n<p>更推荐运行<code>hexo s</code>后利用本地服务器在<strong>localhost:4000</strong>查看效果，效果满意后直接部署，过段时间页面自然会更新的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>本地编写完成后，要同步Github Pages，运行以下三个命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>需要注意的是<strong>这些命令应该在hexo目录的根目录下进行</strong>。</p>\n<h1 id=\"部署后页面未更新\"><a href=\"#部署后页面未更新\" class=\"headerlink\" title=\"部署后页面未更新\"></a>部署后页面未更新</h1><p>使用<strong>无痕模式</strong>浏览或者<strong>等一段时间</strong>再查看。</p>\n<hr>\n<p>更推荐运行<code>hexo s</code>后利用本地服务器在<strong>localhost:4000</strong>查看效果，效果满意后直接部署，过段时间页面自然会更新的。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjlx9rty900007bagqf9j86fw","category_id":"cjlx9rtym00037bagexj9b4up","_id":"cjlx9rtz1000d7bagf85r9mun"},{"post_id":"cjlx9rtyj00027baglj0q6znn","category_id":"cjlx9rtyu00087bag0kfzwj3f","_id":"cjlx9rtza000j7bagcprvrbzd"},{"post_id":"cjlx9rtyp00057bag99map85p","category_id":"cjlx9rtyu00087bag0kfzwj3f","_id":"cjlx9rtzh000o7bag3b2huajl"},{"post_id":"cjlx9rtz7000h7bagzizcz2wk","category_id":"cjlx9rtym00037bagexj9b4up","_id":"cjlx9rtzj000t7bag91s2hv78"},{"post_id":"cjlx9rtyr00067bag7paot0jv","category_id":"cjlx9rtz9000i7bagg2wgrw6o","_id":"cjlx9rtzl000w7bag78gqc3bj"},{"post_id":"cjlx9rtys00077bagvgfoj28e","category_id":"cjlx9rtz9000i7bagg2wgrw6o","_id":"cjlx9rtzo00117bagh95mrd9j"},{"post_id":"cjlx9rtzl000x7bagz2tpixus","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9rtzs00177baghc0ccu4i"},{"post_id":"cjlx9rtyw000b7bagvfq4usnh","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9rtzu001a7bagon70ugkb"},{"post_id":"cjlx9rtzn00107bagvb1k5ljl","category_id":"cjlx9rtz9000i7bagg2wgrw6o","_id":"cjlx9rtzx001e7bagsgp9hxg7"},{"post_id":"cjlx9rtzo00147bagenc420mu","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9rtzz001g7bag082g0ne4"},{"post_id":"cjlx9rtzr00167bagmzpbb10m","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9ru01001k7bagsz665yu9"},{"post_id":"cjlx9rtz0000c7bag1qbyhgts","category_id":"cjlx9rtzo00127bag1whkdga5","_id":"cjlx9ru03001n7bagk5zdpwpj"},{"post_id":"cjlx9rtzt00197bags6j77oxe","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9ru05001s7bag4bu7je1o"},{"post_id":"cjlx9rtz4000g7bags05vl0m2","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9ru07001v7bagvs71uqf1"},{"post_id":"cjlx9rtzy001f7bagzbjvsghm","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9ru0a001z7bagobeqq75q"},{"post_id":"cjlx9rtzd000l7bag1f7e95cl","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9ru0c00227bag8vmqh7iw"},{"post_id":"cjlx9ru02001m7bag0qqnat69","category_id":"cjlx9rtz9000i7bagg2wgrw6o","_id":"cjlx9ru0e00257bagx1nhj4l8"},{"post_id":"cjlx9ru04001r7bag70otq770","category_id":"cjlx9rtz9000i7bagg2wgrw6o","_id":"cjlx9ru0f00287bag127qg9ef"},{"post_id":"cjlx9rtzf000n7bag4b1iullr","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9ru0h002c7bagijbfsh2f"},{"post_id":"cjlx9ru06001u7bag92r4qi5o","category_id":"cjlx9rtz9000i7bagg2wgrw6o","_id":"cjlx9ru0j002g7bag0cb9d9gv"},{"post_id":"cjlx9ru08001y7bag2rb1245z","category_id":"cjlx9rtz9000i7bagg2wgrw6o","_id":"cjlx9ru0m002j7bagvjv6enk4"},{"post_id":"cjlx9rtzi000s7bagwdksjnca","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9ru0o002m7bag3hx18utb"},{"post_id":"cjlx9ru0b00217bagws0zzwb1","category_id":"cjlx9rtz9000i7bagg2wgrw6o","_id":"cjlx9ru0r002q7bagrclgohqx"},{"post_id":"cjlx9ru0d00247bag1hhfvffp","category_id":"cjlx9rtz9000i7bagg2wgrw6o","_id":"cjlx9ru0t002u7bagh7d32zmb"},{"post_id":"cjlx9rtzj000u7bag254cz8wq","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9ru0v002y7bag6mkicvtk"},{"post_id":"cjlx9ru0f00277bagssi57lul","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9ru0x00307bagopek22nx"},{"post_id":"cjlx9rtzw001d7bagggra04kd","category_id":"cjlx9ru0g00297bagjz3oz34i","_id":"cjlx9ru0z00347bageg1g3uvr"},{"post_id":"cjlx9ru00001j7baghgq4tziv","category_id":"cjlx9ru0g00297bagjz3oz34i","_id":"cjlx9ru1100367bagveaimfxl"},{"post_id":"cjlx9ru0p002p7bagtnq1mn2i","category_id":"cjlx9ru0o002n7bag9nynoomp","_id":"cjlx9ru1200397bagapf38bjv"},{"post_id":"cjlx9ru0g002b7bagdcmqawtt","category_id":"cjlx9ru0o002n7bag9nynoomp","_id":"cjlx9ru13003b7bagsek2dg52"},{"post_id":"cjlx9ru0s002t7bagt2luy7g8","category_id":"cjlx9ru0o002n7bag9nynoomp","_id":"cjlx9ru14003e7bag19xlyvj1"},{"post_id":"cjlx9ru0u002x7baguty7x2ny","category_id":"cjlx9ru0o002n7bag9nynoomp","_id":"cjlx9ru14003f7bagnu0rgu8o"},{"post_id":"cjlx9ru0i002f7bag3atuou94","category_id":"cjlx9ru0o002n7bag9nynoomp","_id":"cjlx9ru14003h7bagmi1ur2is"},{"post_id":"cjlx9ru0w002z7bago26vrftg","category_id":"cjlx9ru0o002n7bag9nynoomp","_id":"cjlx9ru14003i7bagwdk23eql"},{"post_id":"cjlx9ru0k002i7bagexr0rwxk","category_id":"cjlx9ru0o002n7bag9nynoomp","_id":"cjlx9ru15003k7bagqgp32wyq"},{"post_id":"cjlx9ru1000357bag7ucr09uf","category_id":"cjlx9rtzl000v7bag79c3p9nn","_id":"cjlx9ru16003m7bag68q3ouz8"},{"post_id":"cjlx9ru0n002l7bagqder4tb4","category_id":"cjlx9ru0o002n7bag9nynoomp","_id":"cjlx9ru17003p7bagt6mvmwlq"}],"PostTag":[{"post_id":"cjlx9rty900007bagqf9j86fw","tag_id":"cjlx9rtyo00047bagbguh3xzv","_id":"cjlx9rtyv000a7bag17fyhz94"},{"post_id":"cjlx9rtyj00027baglj0q6znn","tag_id":"cjlx9rtyu00097baglv6vvz5o","_id":"cjlx9rtzf000m7bagf02072bm"},{"post_id":"cjlx9rtyj00027baglj0q6znn","tag_id":"cjlx9rtz2000f7bag62j1bfd3","_id":"cjlx9rtzh000p7baghgan8vw0"},{"post_id":"cjlx9rtyp00057bag99map85p","tag_id":"cjlx9rtzc000k7bag9xsy464g","_id":"cjlx9rtzn000z7bag2rcpsef2"},{"post_id":"cjlx9rtyp00057bag99map85p","tag_id":"cjlx9rtzi000r7bagjd95ycxw","_id":"cjlx9rtzo00137bagn54ecj35"},{"post_id":"cjlx9rtyr00067bag7paot0jv","tag_id":"cjlx9rtzm000y7bagiaqdugqp","_id":"cjlx9rtzs00187bagh48un1dr"},{"post_id":"cjlx9rtys00077bagvgfoj28e","tag_id":"cjlx9rtzq00157bagignl785o","_id":"cjlx9ru01001l7bagzqrk6ff2"},{"post_id":"cjlx9rtys00077bagvgfoj28e","tag_id":"cjlx9rtzm000y7bagiaqdugqp","_id":"cjlx9ru03001p7bag3bd8zo5d"},{"post_id":"cjlx9rtyw000b7bagvfq4usnh","tag_id":"cjlx9rtzz001i7bagrftqg956","_id":"cjlx9ru06001t7bag8tptxn6e"},{"post_id":"cjlx9ru02001m7bag0qqnat69","tag_id":"cjlx9rtzm000y7bagiaqdugqp","_id":"cjlx9ru08001x7bag41gp11un"},{"post_id":"cjlx9rtz0000c7bag1qbyhgts","tag_id":"cjlx9ru04001q7bagsrfl84on","_id":"cjlx9ru0g002a7bag30jo5cxm"},{"post_id":"cjlx9rtz0000c7bag1qbyhgts","tag_id":"cjlx9ru0a00207bagkytkzz80","_id":"cjlx9ru0h002d7bagtjb2kcab"},{"post_id":"cjlx9rtz4000g7bags05vl0m2","tag_id":"cjlx9rtzz001i7bagrftqg956","_id":"cjlx9ru0o002o7bag4ayi4hxp"},{"post_id":"cjlx9rtz4000g7bags05vl0m2","tag_id":"cjlx9ru0i002e7bag6e57reaa","_id":"cjlx9ru0r002r7bagkrah1zwp"},{"post_id":"cjlx9rtz7000h7bagzizcz2wk","tag_id":"cjlx9ru0m002k7bag6qeaz3h8","_id":"cjlx9ru0u002w7baga0gs6ozx"},{"post_id":"cjlx9rtzd000l7bag1f7e95cl","tag_id":"cjlx9ru0s002s7bagvt0utjvl","_id":"cjlx9ru12003a7baga1huuekx"},{"post_id":"cjlx9rtzd000l7bag1f7e95cl","tag_id":"cjlx9ru0x00317bagss5nl45g","_id":"cjlx9ru13003c7bag1hnl3w09"},{"post_id":"cjlx9rtzf000n7bag4b1iullr","tag_id":"cjlx9ru0s002s7bagvt0utjvl","_id":"cjlx9ru16003l7bagna41jvz5"},{"post_id":"cjlx9rtzf000n7bag4b1iullr","tag_id":"cjlx9ru0x00317bagss5nl45g","_id":"cjlx9ru16003n7bagf03h27n7"},{"post_id":"cjlx9rtzf000n7bag4b1iullr","tag_id":"cjlx9ru14003g7bagu8ogwg3m","_id":"cjlx9ru17003q7bagx1uh5ftv"},{"post_id":"cjlx9rtzi000s7bagwdksjnca","tag_id":"cjlx9ru0s002s7bagvt0utjvl","_id":"cjlx9ru18003s7bagupl2gs50"},{"post_id":"cjlx9rtzi000s7bagwdksjnca","tag_id":"cjlx9ru16003o7bagifou5eiq","_id":"cjlx9ru18003t7bag5weoprdu"},{"post_id":"cjlx9rtzj000u7bag254cz8wq","tag_id":"cjlx9ru0s002s7bagvt0utjvl","_id":"cjlx9ru19003w7bag1kbfkhgx"},{"post_id":"cjlx9rtzj000u7bag254cz8wq","tag_id":"cjlx9ru18003u7bage1eyde77","_id":"cjlx9ru19003x7bagupuoqnmx"},{"post_id":"cjlx9rtzl000x7bagz2tpixus","tag_id":"cjlx9ru0s002s7bagvt0utjvl","_id":"cjlx9ru1b00407baggizansc5"},{"post_id":"cjlx9rtzl000x7bagz2tpixus","tag_id":"cjlx9ru16003o7bagifou5eiq","_id":"cjlx9ru1b00417bagnvd2zju2"},{"post_id":"cjlx9rtzn00107bagvb1k5ljl","tag_id":"cjlx9rtzm000y7bagiaqdugqp","_id":"cjlx9ru1c00437bagn7dbpnyq"},{"post_id":"cjlx9rtzn00107bagvb1k5ljl","tag_id":"cjlx9ru1a003z7bag2msrtszg","_id":"cjlx9ru1c00447bagfaruc4si"},{"post_id":"cjlx9rtzo00147bagenc420mu","tag_id":"cjlx9rtzz001i7bagrftqg956","_id":"cjlx9ru1d00477bagogsad7yj"},{"post_id":"cjlx9rtzo00147bagenc420mu","tag_id":"cjlx9ru1c00457bag2xawdnnr","_id":"cjlx9ru1d00487bagi0gprgrw"},{"post_id":"cjlx9rtzr00167bagmzpbb10m","tag_id":"cjlx9rtzz001i7bagrftqg956","_id":"cjlx9ru1e004d7bagb6cdend1"},{"post_id":"cjlx9rtzr00167bagmzpbb10m","tag_id":"cjlx9ru1d00497bag5vqdm4dh","_id":"cjlx9ru1e004e7bagkrdbnvzm"},{"post_id":"cjlx9rtzr00167bagmzpbb10m","tag_id":"cjlx9ru1d004a7bag6gp8vwg3","_id":"cjlx9ru1e004g7bagkzynzkek"},{"post_id":"cjlx9rtzr00167bagmzpbb10m","tag_id":"cjlx9ru1d004b7bagtqpk029j","_id":"cjlx9ru1e004h7bagfcmuavvx"},{"post_id":"cjlx9rtzt00197bags6j77oxe","tag_id":"cjlx9ru0s002s7bagvt0utjvl","_id":"cjlx9ru1f004k7bag7ia0qwzj"},{"post_id":"cjlx9rtzt00197bags6j77oxe","tag_id":"cjlx9ru1e004f7bag249csv2w","_id":"cjlx9ru1f004l7bag4do1pbd7"},{"post_id":"cjlx9rtzt00197bags6j77oxe","tag_id":"cjlx9ru1f004i7bag8c75nae4","_id":"cjlx9ru1g004n7baglxnfw3j1"},{"post_id":"cjlx9rtzw001d7bagggra04kd","tag_id":"cjlx9ru1f004j7bagqm479zqi","_id":"cjlx9ru1g004o7bag5pdbdvim"},{"post_id":"cjlx9rtzy001f7bagzbjvsghm","tag_id":"cjlx9rtzz001i7bagrftqg956","_id":"cjlx9ru1h004r7bag4svpw75f"},{"post_id":"cjlx9rtzy001f7bagzbjvsghm","tag_id":"cjlx9ru1d00497bag5vqdm4dh","_id":"cjlx9ru1h004s7bagyvn5qvrf"},{"post_id":"cjlx9ru00001j7baghgq4tziv","tag_id":"cjlx9ru1g004q7bagl53eyrvp","_id":"cjlx9ru1h004u7bag1p94w8ue"},{"post_id":"cjlx9ru04001r7bag70otq770","tag_id":"cjlx9ru1h004t7bag76zqczvz","_id":"cjlx9ru1i004w7bagpt4bx5y9"},{"post_id":"cjlx9ru06001u7bag92r4qi5o","tag_id":"cjlx9ru1h004v7bago1xtaw33","_id":"cjlx9ru1i004y7bagajd3sepk"},{"post_id":"cjlx9ru0f00277bagssi57lul","tag_id":"cjlx9ru1i004x7bagx5jimv90","_id":"cjlx9ru1j00517bagfuqhd470"},{"post_id":"cjlx9ru0f00277bagssi57lul","tag_id":"cjlx9ru1i004z7bagb1qyldtw","_id":"cjlx9ru1j00527bageblbuozv"},{"post_id":"cjlx9ru0i002f7bag3atuou94","tag_id":"cjlx9ru1i00507bagj4mpqivx","_id":"cjlx9ru1k00567bagqiw9p7xl"},{"post_id":"cjlx9ru0i002f7bag3atuou94","tag_id":"cjlx9ru1j00537bagytjbg8mc","_id":"cjlx9ru1k00577bagxq19ih7l"},{"post_id":"cjlx9ru0i002f7bag3atuou94","tag_id":"cjlx9ru1j00547bag6qa5ie53","_id":"cjlx9ru1l00597bagm2x418uw"},{"post_id":"cjlx9ru0k002i7bagexr0rwxk","tag_id":"cjlx9ru1i00507bagj4mpqivx","_id":"cjlx9ru1l005b7bag4f527sps"},{"post_id":"cjlx9ru0k002i7bagexr0rwxk","tag_id":"cjlx9ru1l00587bagduo0vicn","_id":"cjlx9ru1l005c7bag9ztg3jnb"},{"post_id":"cjlx9ru0n002l7bagqder4tb4","tag_id":"cjlx9ru1l005a7bag3ybgrnoe","_id":"cjlx9ru1m005e7bagwufq9qaq"},{"post_id":"cjlx9ru0n002l7bagqder4tb4","tag_id":"cjlx9rtyo00047bagbguh3xzv","_id":"cjlx9ru1m005f7bag9aktrole"},{"post_id":"cjlx9ru0p002p7bagtnq1mn2i","tag_id":"cjlx9ru1i00507bagj4mpqivx","_id":"cjlx9ru1o005j7bagulqt9ssx"},{"post_id":"cjlx9ru0p002p7bagtnq1mn2i","tag_id":"cjlx9ru1j00537bagytjbg8mc","_id":"cjlx9ru1p005k7bag6gk7xj51"},{"post_id":"cjlx9ru0p002p7bagtnq1mn2i","tag_id":"cjlx9ru1l00587bagduo0vicn","_id":"cjlx9ru1p005m7bag73kbnyva"},{"post_id":"cjlx9ru0s002t7bagt2luy7g8","tag_id":"cjlx9ru1i00507bagj4mpqivx","_id":"cjlx9ru1q005p7bagdg1euhnx"},{"post_id":"cjlx9ru0s002t7bagt2luy7g8","tag_id":"cjlx9ru1j00537bagytjbg8mc","_id":"cjlx9ru1q005q7bag4rye09go"},{"post_id":"cjlx9ru0s002t7bagt2luy7g8","tag_id":"cjlx9ru1p005n7bagpxwrau0s","_id":"cjlx9ru1q005s7bag99kbfop3"},{"post_id":"cjlx9ru0u002x7baguty7x2ny","tag_id":"cjlx9ru1q005o7baga3ywhs37","_id":"cjlx9ru1r005v7bag5wkspray"},{"post_id":"cjlx9ru0u002x7baguty7x2ny","tag_id":"cjlx9ru1q005r7bag3wpqa1dp","_id":"cjlx9ru1r005w7bag5qhzrarx"},{"post_id":"cjlx9ru0u002x7baguty7x2ny","tag_id":"cjlx9ru1q005t7bagnwpbv0xl","_id":"cjlx9ru1s005y7baguyyndmgy"},{"post_id":"cjlx9ru0w002z7bago26vrftg","tag_id":"cjlx9ru1i00507bagj4mpqivx","_id":"cjlx9ru1u00607bag2q8jwdj0"},{"post_id":"cjlx9ru0w002z7bago26vrftg","tag_id":"cjlx9ru1j00537bagytjbg8mc","_id":"cjlx9ru1u00617bag4n07qw45"},{"post_id":"cjlx9ru0y00337bag1ktp7902","tag_id":"cjlx9ru1s005z7bagz6e9nw5o","_id":"cjlx9ru1u00637bagxovzppor"},{"post_id":"cjlx9ru1000357bag7ucr09uf","tag_id":"cjlx9rtzz001i7bagrftqg956","_id":"cjlx9ru1v00647bagvcgyjen2"},{"post_id":"cjlx9ru1000357bag7ucr09uf","tag_id":"cjlx9ru1u00627bagc83eywba","_id":"cjlx9ru1v00657bag5c9xc03l"}],"Tag":[{"name":"Flask","_id":"cjlx9rtyo00047bagbguh3xzv"},{"name":"JavaScript","_id":"cjlx9rtyu00097baglv6vvz5o"},{"name":"prototype","_id":"cjlx9rtz2000f7bag62j1bfd3"},{"name":"HTML","_id":"cjlx9rtzc000k7bag9xsy464g"},{"name":"CSS","_id":"cjlx9rtzi000r7bagjd95ycxw"},{"name":"TensorFlow","_id":"cjlx9rtzm000y7bagiaqdugqp"},{"name":"MNIST","_id":"cjlx9rtzq00157bagignl785o"},{"name":"hexo","_id":"cjlx9rtzz001i7bagrftqg956"},{"name":"PAT","_id":"cjlx9ru04001q7bagsrfl84on"},{"name":"刷题","_id":"cjlx9ru0a00207bagkytkzz80"},{"name":"网站收录","_id":"cjlx9ru0i002e7bag6e57reaa"},{"name":"numpy","_id":"cjlx9ru0m002k7bag6qeaz3h8"},{"name":"ubuntu","_id":"cjlx9ru0s002s7bagvt0utjvl"},{"name":"Chrome","_id":"cjlx9ru0x00317bagss5nl45g"},{"name":"图片显示","_id":"cjlx9ru14003g7bagu8ogwg3m"},{"name":"iNode","_id":"cjlx9ru16003o7bagifou5eiq"},{"name":"快捷方式","_id":"cjlx9ru18003u7bage1eyde77"},{"name":"TensorBoard","_id":"cjlx9ru1a003z7bag2msrtszg"},{"name":"markdown","_id":"cjlx9ru1c00457bag2xawdnnr"},{"name":"gitment","_id":"cjlx9ru1d00497bag5vqdm4dh"},{"name":"OAuth","_id":"cjlx9ru1d004a7bag6gp8vwg3"},{"name":"阿里云","_id":"cjlx9ru1d004b7bagtqpk029j"},{"name":"Typora","_id":"cjlx9ru1e004f7bag249csv2w"},{"name":"Markdown","_id":"cjlx9ru1f004i7bag8c75nae4"},{"name":"内存","_id":"cjlx9ru1f004j7bagqm479zqi"},{"name":"指针","_id":"cjlx9ru1g004q7bagl53eyrvp"},{"name":"Tmux","_id":"cjlx9ru1h004t7bag76zqczvz"},{"name":"BN","_id":"cjlx9ru1h004v7bago1xtaw33"},{"name":"爬虫","_id":"cjlx9ru1i004x7bagx5jimv90"},{"name":"Python","_id":"cjlx9ru1i004z7bagb1qyldtw"},{"name":"UMLet","_id":"cjlx9ru1i00507bagj4mpqivx"},{"name":"用例图","_id":"cjlx9ru1j00537bagytjbg8mc"},{"name":"数据库建模","_id":"cjlx9ru1j00547bag6qa5ie53"},{"name":"建模","_id":"cjlx9ru1l00587bagduo0vicn"},{"name":"mongoDB","_id":"cjlx9ru1l005a7bag3ybgrnoe"},{"name":"SCRUM","_id":"cjlx9ru1p005n7bagpxwrau0s"},{"name":"VUE","_id":"cjlx9ru1q005o7baga3ywhs37"},{"name":"Flux","_id":"cjlx9ru1q005r7bag3wpqa1dp"},{"name":"三层架构","_id":"cjlx9ru1q005t7bagnwpbv0xl"},{"name":"遇见逆水寒","_id":"cjlx9ru1s005z7bagz6e9nw5o"},{"name":"github pages","_id":"cjlx9ru1u00627bagc83eywba"}]}}