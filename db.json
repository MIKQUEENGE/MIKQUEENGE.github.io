{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/BN_back.png","path":"images/BN_back.png","modified":1,"renderable":0},{"_id":"source/images/BN.png","path":"images/BN.png","modified":1,"renderable":0},{"_id":"source/images/BN_y.png","path":"images/BN_y.png","modified":1,"renderable":0},{"_id":"source/images/Capture.PNG","path":"images/Capture.PNG","modified":1,"renderable":0},{"_id":"source/images/Capture1.PNG","path":"images/Capture1.PNG","modified":1,"renderable":0},{"_id":"source/images/Capture2.PNG","path":"images/Capture2.PNG","modified":1,"renderable":0},{"_id":"source/images/Capture3.PNG","path":"images/Capture3.PNG","modified":1,"renderable":0},{"_id":"source/images/Capture4.PNG","path":"images/Capture4.PNG","modified":1,"renderable":0},{"_id":"source/images/Capture5.PNG","path":"images/Capture5.PNG","modified":1,"renderable":0},{"_id":"source/images/L1.jpg","path":"images/L1.jpg","modified":1,"renderable":0},{"_id":"source/images/L2.jpg","path":"images/L2.jpg","modified":1,"renderable":0},{"_id":"source/images/Untitled.png","path":"images/Untitled.png","modified":1,"renderable":0},{"_id":"source/images/analysis_final_1.PNG","path":"images/analysis_final_1.PNG","modified":1,"renderable":0},{"_id":"source/images/analysis_final_3.PNG","path":"images/analysis_final_3.PNG","modified":1,"renderable":0},{"_id":"source/images/analysis_final_5.PNG","path":"images/analysis_final_5.PNG","modified":1,"renderable":0},{"_id":"source/images/classification.PNG","path":"images/classification.PNG","modified":1,"renderable":0},{"_id":"source/images/filename_txt.PNG","path":"images/filename_txt.PNG","modified":1,"renderable":0},{"_id":"source/images/lesson13_1.png","path":"images/lesson13_1.png","modified":1,"renderable":0},{"_id":"source/images/lesson16_1.png","path":"images/lesson16_1.png","modified":1,"renderable":0},{"_id":"source/images/lesson16_2.png","path":"images/lesson16_2.png","modified":1,"renderable":0},{"_id":"source/images/lesson16_3.png","path":"images/lesson16_3.png","modified":1,"renderable":0},{"_id":"source/images/lesson6.png","path":"images/lesson6.png","modified":1,"renderable":0},{"_id":"source/images/lesson6_3.png","path":"images/lesson6_3.png","modified":1,"renderable":0},{"_id":"source/images/lesson6_3b.png","path":"images/lesson6_3b.png","modified":1,"renderable":0},{"_id":"source/images/lesson6_3c.png","path":"images/lesson6_3c.png","modified":1,"renderable":0},{"_id":"source/images/lesson7.png","path":"images/lesson7.png","modified":1,"renderable":0},{"_id":"source/images/lesson7_2.png","path":"images/lesson7_2.png","modified":1,"renderable":0},{"_id":"source/images/lesson8.png","path":"images/lesson8.png","modified":1,"renderable":0},{"_id":"source/images/lesson8_2.png","path":"images/lesson8_2.png","modified":1,"renderable":0},{"_id":"source/images/lesson9_1.png","path":"images/lesson9_1.png","modified":1,"renderable":0},{"_id":"source/images/lesson9_2.png","path":"images/lesson9_2.png","modified":1,"renderable":0},{"_id":"source/images/lesson9_3.png","path":"images/lesson9_3.png","modified":1,"renderable":0},{"_id":"source/images/lesson9_5.png","path":"images/lesson9_5.png","modified":1,"renderable":0},{"_id":"source/images/lesson9_4.png","path":"images/lesson9_4.png","modified":1,"renderable":0},{"_id":"source/images/pat_1086.jpg","path":"images/pat_1086.jpg","modified":1,"renderable":0},{"_id":"source/images/woff_decode.PNG","path":"images/woff_decode.PNG","modified":1,"renderable":0},{"_id":"themes/landscape/source/baidu_verify_CPVBgyCjF8.html","path":"baidu_verify_CPVBgyCjF8.html","modified":1,"renderable":1},{"_id":"themes/landscape/source/baidu_verify_KS1HHksWBu.html","path":"baidu_verify_KS1HHksWBu.html","modified":1,"renderable":1},{"_id":"source/images/analysis_final_2.PNG","path":"images/analysis_final_2.PNG","modified":1,"renderable":0},{"_id":"source/images/analysis_final_4.PNG","path":"images/analysis_final_4.PNG","modified":1,"renderable":0},{"_id":"source/images/lesson6b.png","path":"images/lesson6b.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/google9da4e92e637f6c53.html","path":"google9da4e92e637f6c53.html","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5f5cda3f6c72ad3ee0b593daafabfec550a41dc6","modified":1536644772973},{"_id":"source/README.md","hash":"d11066d2f7eb3171534982364d62645c0aa7a712","modified":1536644772973},{"_id":"source/favicon.ico","hash":"17b0ff4f4afab42c75b3b7afff59575631b514ae","modified":1536644772973},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1536644772981},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1536644772981},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1536644772981},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1536644772985},{"_id":"source/categories/index.md","hash":"998826a4be87e88a9d2d51684d52017839db4c3f","modified":1536644772973},{"_id":"source/_posts/Flask入门学习笔记.md","hash":"aacff75c58bb2e6210e7986255042e3b92d1689f","modified":1536644772973},{"_id":"themes/landscape/_config.yml","hash":"da5e461c141b206d3adcabdf2e7228c1da2aebbd","modified":1536822601024},{"_id":"source/_posts/HTTP学习记录.md","hash":"ec3f02ddab428ae5f0cea2a1ea03d4ae4ae3a0f1","modified":1537581475889},{"_id":"source/_posts/JavaScript原型链-prototype与-proto.md","hash":"99551ce6c2ee5059c787d6c3916011b5c725fdf1","modified":1536644772973},{"_id":"source/_posts/JavaScript学习记录一.md","hash":"01b111ef1a82ccdb0d42b934eb2463ab02240736","modified":1537067122653},{"_id":"source/_posts/HTML5与CSS3权威指南之HTML5学习记录.md","hash":"8031b9976c11e8f15939a717bc870f19002927e4","modified":1536654623631},{"_id":"source/_posts/JavaScript学习记录二.md","hash":"ce0f4f88d35a51926b117821fff87f8a951473f8","modified":1537067044269},{"_id":"source/_posts/HTML与CSS学习记录.md","hash":"54b722cb302fed342f11e97d99379de50a477ecb","modified":1536644772973},{"_id":"source/_posts/JavaScript学习记录三.md","hash":"3b58bcb996467fb67914a2f3bfcf4ce6216ec793","modified":1537100975550},{"_id":"source/_posts/TensorFlow基础知识.md","hash":"3d8a8b8338229bc56b390200a70bc9b0f9b3a6a7","modified":1536644772973},{"_id":"source/_posts/TensorFlow训练MNIST报错ResourceExhaustedError.md","hash":"5e67245a3c9f939de4e00937ca53f25ffb66740e","modified":1536644772973},{"_id":"source/_posts/PAT刷题记录.md","hash":"bb1c263b270985f27921749a7e90c8e94c2b3807","modified":1536644772973},{"_id":"source/_posts/Ubuntu下使用Deepin-wine的移植版安装qq微信等.md","hash":"0dbd1a3de49768ca85fa96039aa7e3a62fdf1fb0","modified":1537258750125},{"_id":"source/_posts/JavaScript学习记录四.md","hash":"04d61b3dc425b5a5402483d37bf8e6bcc6781859","modified":1537354411671},{"_id":"source/_posts/git相关整理.md","hash":"76f14b626245bf2129246d275d2252b20695f181","modified":1537801167003},{"_id":"source/_posts/hexo创建的tags和categories页面为空的解决办法.md","hash":"2023e1fd6d63cf0644e9ea6ba7641a33564a7e83","modified":1536644772973},{"_id":"source/_posts/hexo博客谷歌百度收录踩坑日记.md","hash":"1d83ac59fb184cef15fc8d1526cda6dd8c707f4e","modified":1536644772973},{"_id":"source/_posts/numpy常用函数和数据类型.md","hash":"4d9e59416f31eb7121a0e5e1e81f333ffd2c256e","modified":1536644772973},{"_id":"source/_posts/ubuntu-18-04下安装稳定版Chrome谷歌浏览器.md","hash":"6505cc8564d11897fa35aeeaf4d4a0f8332eb354","modified":1536644772973},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1536644772981},{"_id":"source/_posts/Vuex入门.md","hash":"29eeb2fa6dcc16ce6f8fe6ce8fa0ddd3770f9ade","modified":1537759911004},{"_id":"source/_posts/Web前端错题模糊题记录.md","hash":"bdad562debe0b59eca79d6d79b43c68a0ab5e882","modified":1537669930160},{"_id":"source/_posts/ubuntu18-04开机慢的解决办法.md","hash":"acf84159cf6b992002e8938f967a6c993558eef5","modified":1537766379580},{"_id":"source/_posts/ubuntu下创建文件夹快捷方式.md","hash":"68f29e20df557f0901a13752b83549f880440f85","modified":1536644772973},{"_id":"source/_posts/ubuntu下无法将iNode绑定到侧边栏的解决办法.md","hash":"7bc6c4118da0d083e5b5c2239328db4c75ae1967","modified":1536644772973},{"_id":"source/_posts/关于hexo-markdown添加的图片在github-page中无法显示的问题.md","hash":"19fabae46672060f6a3015db23d5431dd3a5e8ee","modified":1536644772973},{"_id":"source/_posts/使用TensorBoard可视化工具.md","hash":"3625f4478f20e02c33287737ae7342a44fc11f4e","modified":1536644772973},{"_id":"source/_posts/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法.md","hash":"9924e13dc054f4e840e60ee3e5a3046d45f95318","modified":1536644772973},{"_id":"source/_posts/在ubuntu中安装Markdown神器Typora.md","hash":"8bae1d7429924dfad8e7285734141f17ce9b5bec","modified":1536644772973},{"_id":"source/_posts/堆和栈的区别.md","hash":"bf944e472f09034ddf8606c2ae69c6fd8ccdb0ea","modified":1536644772973},{"_id":"source/_posts/接入gitment为hexo添加评论功能.md","hash":"04ee5ea1dfe3f3c76e774973b7a2ef8408fa79a0","modified":1536644772973},{"_id":"source/_posts/将hexo的评论系统由gitment改为Valine.md","hash":"18ae47044410cae1f24f3e72c26079e730543480","modified":1536896152809},{"_id":"source/_posts/智能指针.md","hash":"874a283ed3089cb203362668842c2ccc674c1cae","modified":1536644772973},{"_id":"source/_posts/深度学习周报week01-week02.md","hash":"afc056d6850f2d98a3857bab3f2a92fa3aff9131","modified":1536644772973},{"_id":"source/_posts/深度学习周报week03-week04.md","hash":"5941c65b818c059557630e11da1a6ec4808a3a7c","modified":1536644772973},{"_id":"source/_posts/求包含每个有序数组-共k个-至少一个元素的最小区间.md","hash":"5212777c4c00dcad503ee5713789d8b0e5ec3864","modified":1537629134243},{"_id":"source/_posts/深度学习周报week07-week08.md","hash":"25c24860dd03a538cf9862e3ba4b55dbcfbbfd05","modified":1536644772973},{"_id":"source/_posts/深度学习周报week09-week10.md","hash":"898fbe60feba4ca18fcf11714f91d98214be5891","modified":1536644772973},{"_id":"source/_posts/深度学习周报week05-week06.md","hash":"179e7e15fc0288f0394b121bd046c40a2627ccd8","modified":1536644772973},{"_id":"source/_posts/深度学习周报week11-week12.md","hash":"f0c3f0a46bc52e3eeac93c85fb357f4eaaf8d701","modified":1536644772973},{"_id":"source/_posts/猫眼电影加密数字破解（爬取评分票房票价）.md","hash":"f4df667e6a8e8791dfff45a91e0fc4fe01f4ab5b","modified":1536644772973},{"_id":"source/_posts/系统分析与设计作业FinalReport.md","hash":"7cc66e2cd153207668f3616a7d86a1839dce1c03","modified":1536644772973},{"_id":"source/_posts/系统分析与设计作业七.md","hash":"3ad75d7377376e8387b132b795144d906d688070","modified":1536644772973},{"_id":"source/_posts/系统分析与设计作业九.md","hash":"430fb561c3ddae3339225848c8defc50badf9cbb","modified":1536644772973},{"_id":"source/_posts/系统分析与设计作业五.md","hash":"e3d183bb7d47bf12dc51087f521439c0ee733b20","modified":1536644772973},{"_id":"source/_posts/系统分析与设计作业八.md","hash":"2546e3849c2bc0406fd943260869a55d278e9935","modified":1536644772973},{"_id":"source/_posts/系统分析与设计作业六.md","hash":"300701bdde7d84191909e67e0b826f15860b8e29","modified":1536644772973},{"_id":"source/_posts/系统分析与设计作业十三.md","hash":"269e682b669e462b3df983b93b7a0c6c30e21682","modified":1536644772973},{"_id":"source/_posts/系统分析与设计作业十六.md","hash":"3b5f633006bb4e03f26829913c1b5f422a74d2d1","modified":1536644772973},{"_id":"source/_posts/遇见逆水寒男号女NPC奇物好感统计.md","hash":"af5ab8d0c6a2a7653cadfa7959d48877641defa4","modified":1536644772973},{"_id":"source/_posts/部署hexo后github-pages页面未更新或无法打开问题.md","hash":"71f1ab005d21c3fca7c4fc3de8f971f8c4a558a8","modified":1536644772973},{"_id":"source/_posts/牛客网前端挑战编程题解.md","hash":"3e316236286e88a4aa6eff9408895f9b335e7b97","modified":1537442580988},{"_id":"source/images/BN_back.png","hash":"b1457ee4faac43b4e561ee259327bc9b43bd06a2","modified":1536644772977},{"_id":"source/images/BN.png","hash":"16a8d79aff9c062eb5654627f404cf37db042e8b","modified":1536644772973},{"_id":"source/images/BN_y.png","hash":"278d7811ac757a93d5067baecd1244e6012f031f","modified":1536644772977},{"_id":"source/images/Capture.PNG","hash":"92290ce107044453cc8f78bd1c73c0142e0190df","modified":1536644772977},{"_id":"source/images/Capture1.PNG","hash":"c6dd3c2cb3585bf7ce1dea86dfb6c433c589c355","modified":1536644772977},{"_id":"source/images/Capture2.PNG","hash":"c68af93d76ea39560435b0e5b3d768fbb2051462","modified":1536644772977},{"_id":"source/images/Capture3.PNG","hash":"a88eb075f4cfa82822fae098458cdc4617153dde","modified":1536644772977},{"_id":"source/images/Capture4.PNG","hash":"6902b1d3acd40c54183f7ec398ebfcdecf4037f2","modified":1536644772977},{"_id":"source/images/Capture5.PNG","hash":"97f3f8567f653b671854b5f96eb679c53c18bbd1","modified":1536644772977},{"_id":"source/images/L1.jpg","hash":"b43e8926a31012f34e6961897ee796f2be364ac5","modified":1536644772977},{"_id":"source/images/L2.jpg","hash":"99f85d9063828c1efd5fd712aa6249bc01c3c519","modified":1536644772977},{"_id":"source/images/Untitled.png","hash":"24ea3d0e09177d1cdf15371775079fef7e5e1c08","modified":1536644772977},{"_id":"source/images/analysis_final_1.PNG","hash":"311843a5328f609273a79c0907bdb397aeac4971","modified":1536644772977},{"_id":"source/images/analysis_final_3.PNG","hash":"61526342708461c189abd9ca54221db5c98bcc3e","modified":1536644772977},{"_id":"source/images/analysis_final_5.PNG","hash":"78aa509a5537c4f4f182eebc73e4ff41e153172f","modified":1536644772977},{"_id":"source/images/classification.PNG","hash":"db34d2712eec4a44cfc20488aac3020394797ca5","modified":1536644772977},{"_id":"source/images/filename_txt.PNG","hash":"4b587eadb4dd595b2a6f609f1087aa74fabc4058","modified":1536644772977},{"_id":"source/images/lesson13_1.png","hash":"31db137a072c31ed7bcb8b6f8e8ddf0187c2fdaa","modified":1536644772977},{"_id":"source/images/lesson16_1.png","hash":"7e45e0bea924348106203e0a4096b2f9628480fe","modified":1536644772981},{"_id":"source/images/lesson16_2.png","hash":"06d407682af5f02d0708a92278a99b4b2abd2ef2","modified":1536644772981},{"_id":"source/images/lesson16_3.png","hash":"ff2b64fd298bf00cb6f9a454798dd01e91dd16f1","modified":1536644772981},{"_id":"source/images/lesson6.png","hash":"c2bae02e87fe851ecc8881f6504f460f603d4d0b","modified":1536644772981},{"_id":"source/images/lesson6_3.png","hash":"43c087415436e9102156fd4bf4f59a8484cd6294","modified":1536644772981},{"_id":"source/images/lesson6_3b.png","hash":"774a6ae430d729a7fa41f1990e84e7c36f6c8ee4","modified":1536644772981},{"_id":"source/images/lesson6_3c.png","hash":"b37095a0a2092d82b90476d95391dd61629c29c0","modified":1536644772981},{"_id":"source/images/lesson7.png","hash":"5a8f624b8683b69f32fbc50d14b9cbafe30b2d06","modified":1536644772981},{"_id":"source/images/lesson7_2.png","hash":"eed9f4172450b140d60fd9d85d214f5a5f3d59ff","modified":1536644772981},{"_id":"source/images/lesson8.png","hash":"58bffcabfa1db623bdb317772483bd1ea8007835","modified":1536644772981},{"_id":"source/images/lesson8_2.png","hash":"5614c0b9f84ac4b46d5bd8a5489ea7bf86812853","modified":1536644772981},{"_id":"source/images/lesson9_1.png","hash":"c355a88e7a51dc46740790378a0605a603aeede9","modified":1536644772981},{"_id":"source/images/lesson9_2.png","hash":"c06f731136f43e58430ef6d5323a9ab105f60d37","modified":1536644772981},{"_id":"source/images/lesson9_3.png","hash":"fa4b73721a97c7806fc035d5d6d2a5c9ed614132","modified":1536644772981},{"_id":"source/images/lesson9_5.png","hash":"5950f6e6ecb706acd441fac3a326f38382203c8f","modified":1536644772981},{"_id":"source/images/lesson9_4.png","hash":"8457257aef5b457087086f2502b46d99bbd4cbef","modified":1536644772981},{"_id":"source/images/pat_1086.jpg","hash":"4e08fe072bcd69e9048ebf9714cc34a2476ae980","modified":1536644772981},{"_id":"source/images/woff_decode.PNG","hash":"21a52a39b4c9cb0e1a6ddbff1ec5a910db603167","modified":1536644772981},{"_id":"source/tags/index.md","hash":"b9c8710929fac0a1ff1a72a3138b3aa2067a03c0","modified":1536644772981},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1536644772981},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1536644772981},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1536644772981},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1536644772981},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1536644772981},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1536644772981},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1536644772981},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1536644772981},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1536644772981},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1536644772981},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1536644772985},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1536644772985},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1536644772985},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1536644772985},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1536644772985},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1536644772985},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1536644772985},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1536644772985},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1536644772985},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1536644772985},{"_id":"themes/landscape/source/baidu_verify_CPVBgyCjF8.html","hash":"bcdd113d9b4bd2f097dd7d3b43aefe54e4b67d82","modified":1536826598564},{"_id":"themes/landscape/source/baidu_verify_KS1HHksWBu.html","hash":"23c57476910e679926c1390de149bd9119ae6610","modified":1536827812160},{"_id":"source/images/analysis_final_2.PNG","hash":"519f5d48483b3cd810c61e06386ae566c9aa215a","modified":1536644772977},{"_id":"source/images/analysis_final_4.PNG","hash":"138983b8bc652fb041f94583221f99614dfa68e5","modified":1536644772977},{"_id":"source/images/lesson6b.png","hash":"d200d7a5d15cce2e0538c14ee21bf0c48b251702","modified":1536644772981},{"_id":"themes/landscape/source/google9da4e92e637f6c53.html","hash":"67e87478705d1c4257f2c5dd619d42f5fe83273d","modified":1536644772989},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1536644772985},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1536644772985},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1536644772985},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1536644772985},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"3b863739197521123cfd596e4782064d4263a202","modified":1537704223124},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"369d8ad8c727de9581ab4e2cee4dd9ce980e1c94","modified":1537090242489},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"399a5126d292ca7f8a98c0f0434e54e761b48ce5","modified":1536646514471},{"_id":"source/_posts/ubuntu18-04中安装iNode.md","hash":"9c784d1587d2a9ac0751006df23f2a8ec5cbc0bd","modified":1536644772973},{"_id":"source/_posts/ubuntu下Chrome谷歌浏览器部分网站图片显示不正常的解决方法.md","hash":"0cacb722366f991b8cb98179f938bc849196c1ac","modified":1536644772973},{"_id":"themes/landscape/source/css/_extend.styl","hash":"c42f3ca51806b35cd84c3d8583577a4f5a68a935","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/totop.ejs","hash":"5f7321b652c6698af5982f29fc1102afa946d976","modified":1536910458196},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536644772985},{"_id":"themes/landscape/source/css/_variables.styl","hash":"a88cf9c687d8610f5998ab79f266056c73cfb1f0","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1536644772985},{"_id":"themes/landscape/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1536909885838},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1536644772989},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1536644772989},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1536644772985},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1536644772985},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1536644772985},{"_id":"themes/landscape/source/js/totop.js","hash":"c14c7a191427269bafce8dcc770756a21abd3684","modified":1536910178327},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1536644772985},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1536644772985},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"2b07778ec0b24fd44b5946f8a4365fbdf28c5448","modified":1536644772985},{"_id":"themes/landscape/source/css/_partial/header.styl.bak","hash":"793abd37d8b8ae0e291c341e757f42e8b025f4e8","modified":1536644772985},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1536644772985},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1536644772985},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1536644772985},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1536644772985},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1536644772985},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1536644772985},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1536644772985},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1536644772985},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1536644772985},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1536644772985},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"b4e5b071137a37d064c18888a52e8800021fc1c6","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1536644772985},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1536644772985},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"4b6c4384c4f269d9af9557aebbd632b5f732daea","modified":1536909509304},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1536644772985},{"_id":"themes/landscape/source/css/_extend.styl.bak","hash":"7c95099628df6cdfc94e6e2fb9e47813452f0980","modified":1536644772985},{"_id":"themes/landscape/source/css/_variables.styl.bak","hash":"a6dcfc0b8dfe87aab360a12b84189c2e95662981","modified":1536644772985},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1536644772985},{"_id":"public/baidu_urls.txt","hash":"181f12f6bb2dea2cd02098c6cc731d79a3b5d3a9","modified":1537801185789},{"_id":"public/sitemap.xml","hash":"cfad096177d7470d4bfd6b41bb849b8453cd8c34","modified":1537801186335},{"_id":"public/categories/index.html","hash":"66e8347317587462303d9a3ce14ac7ff402ed115","modified":1537801186445},{"_id":"public/2018/06/21/Flask入门学习笔记/index.html","hash":"3f3afce10ef8fc454716b8c8a7beae389956629e","modified":1537801186487},{"_id":"public/categories/Python/index.html","hash":"f4ea3852ec07d62c9e589ae3e8fe9299ae659b75","modified":1537801186488},{"_id":"public/categories/OJ/index.html","hash":"7541afed9e2ccd7fcba356ac21b479cc9d9ac4e4","modified":1537801186489},{"_id":"public/categories/C-C/index.html","hash":"1a1ec1ae65f9596f93220cefb3a9af13ed6d3845","modified":1537801186489},{"_id":"public/archives/2018/03/index.html","hash":"19483007464e4d49a616f1ee78569fbbc6c07143","modified":1537801186489},{"_id":"public/archives/2018/05/index.html","hash":"1f2e38521ee01d7f19d5b3e37510b832f29cf8ee","modified":1537801186489},{"_id":"public/archives/2018/07/index.html","hash":"ddaf9d5b1ae727c69b29c3d74600e80a206209ba","modified":1537801186489},{"_id":"public/archives/2018/08/index.html","hash":"d636bc135c23665e36eaf3ead30e5542ebbe9d46","modified":1537801186489},{"_id":"public/tags/Flask/index.html","hash":"ff58cef6058a4b2c77b00833a2f4c84716af8529","modified":1537801186489},{"_id":"public/tags/HTTP/index.html","hash":"47e7dd03d0f58a8827536575674d39ae563dbff0","modified":1537801186489},{"_id":"public/tags/prototype/index.html","hash":"8eb68b1e59a3446bb8bba701cbf8efd2bb3f0817","modified":1537801186489},{"_id":"public/tags/HTML/index.html","hash":"40852f9edf3a176860f714f66cca76021a796a95","modified":1537801186489},{"_id":"public/tags/CSS/index.html","hash":"584e8ddb0a2ef2f4052a8774c943b1a10a5df146","modified":1537801186490},{"_id":"public/tags/TensorFlow/index.html","hash":"c6ae69bc330a4377b3e9691f0d4216c198cddb54","modified":1537801186490},{"_id":"public/tags/MNIST/index.html","hash":"778b8993b2271cfabdab66fac3d71794ce74a5cd","modified":1537801186490},{"_id":"public/tags/PAT/index.html","hash":"7512946cecec971c860f712dc62efd36fe9af4b0","modified":1537801186490},{"_id":"public/tags/刷题/index.html","hash":"db8f4f5217b6bb1b1038cd08b0c3972e8bef46ab","modified":1537801186490},{"_id":"public/tags/网站收录/index.html","hash":"5704880a26b9b357cbc1b6d1b2124abfe2f18311","modified":1537801186490},{"_id":"public/tags/numpy/index.html","hash":"440739aa6b0319b084041b93e972ff482123874b","modified":1537801186490},{"_id":"public/tags/Chrome/index.html","hash":"de96c819e911e0c634e6d230871f48b5dd80d230","modified":1537801186490},{"_id":"public/tags/快捷方式/index.html","hash":"08872445cdb76869b53ba5559096a663d489c711","modified":1537801186490},{"_id":"public/tags/iNode/index.html","hash":"103775c89488d6c57fdcf4578a3ff07145a58087","modified":1537801186490},{"_id":"public/tags/markdown/index.html","hash":"87362cd4edd20593c8ef469e00e5ba637f9defc4","modified":1537801186490},{"_id":"public/tags/TensorBoard/index.html","hash":"589092151d974990b272fd0ddc92ef02af5f2193","modified":1537801186490},{"_id":"public/tags/gitment/index.html","hash":"207aac7a07b708c6ff8d8e6431312ef6a23b9959","modified":1537801186491},{"_id":"public/tags/OAuth/index.html","hash":"909cf61b518e523ad1bce994f757c8941552b683","modified":1537801186491},{"_id":"public/tags/阿里云/index.html","hash":"ffc0782a6a780c0325a98d7abfcf28dd87657ac8","modified":1537801186491},{"_id":"public/tags/Typora/index.html","hash":"6db0d07470dd5cbb7b5fe5ac46418c76cd0e205e","modified":1537801186491},{"_id":"public/tags/Markdown/index.html","hash":"f9f88c159cc26eadd5db3edfded9195b39bc2403","modified":1537801186491},{"_id":"public/tags/内存/index.html","hash":"81c4e902b461838fd2bdecef9256723b9f16d7bd","modified":1537801186491},{"_id":"public/tags/Valine/index.html","hash":"f1e39e23bba48207ccf04b4d0bb49a027615a026","modified":1537801186491},{"_id":"public/tags/指针/index.html","hash":"29cade3c3c0d971fe3f567864ae54bbb4b54f6d5","modified":1537801186491},{"_id":"public/tags/Tmux/index.html","hash":"eef2ac07e89188426935bfc1b6f05ff0e6608357","modified":1537801186491},{"_id":"public/tags/归并/index.html","hash":"4b44608ec1fc9ef711e9a175314b53427e0ae747","modified":1537801186491},{"_id":"public/tags/BN/index.html","hash":"e2325e68051fef926185ba2a22ce8a4e0706908f","modified":1537801186491},{"_id":"public/tags/爬虫/index.html","hash":"802ad5141692aa2c4c1542cdd57d82ee3bb1716f","modified":1537801186491},{"_id":"public/tags/Python/index.html","hash":"9b113b0b381d02cf3fc0edd1b325fa1f840dcbad","modified":1537801186491},{"_id":"public/tags/UMLet/index.html","hash":"d6cf831fecb5b4b19ebf89c76fb7c5cdae1ee794","modified":1537801186491},{"_id":"public/tags/用例图/index.html","hash":"103b00c1a57fd30046a7ab1e13dc96e4e5fa7b1f","modified":1537801186492},{"_id":"public/tags/数据库建模/index.html","hash":"2bc25d48af511d5d3fab9faa0e5191c5f3005fa5","modified":1537801186492},{"_id":"public/tags/建模/index.html","hash":"4d23d8e5d292697e6f2bb3bbac594425376c28b7","modified":1537801186492},{"_id":"public/tags/mongoDB/index.html","hash":"8d2081e080d7a6a8458de29ef956ca54eb7bc5e1","modified":1537801186492},{"_id":"public/tags/SCRUM/index.html","hash":"dba5d1a4ab84cd71ad7e63e89cadf1ecbd4adf86","modified":1537801186492},{"_id":"public/tags/VUE/index.html","hash":"f82bbe8d5ab63bf1192f3fdc7e91cc3f0de61d8f","modified":1537801186492},{"_id":"public/tags/Flux/index.html","hash":"01cf505602f6a1bbb27eb30d7444009bf953c692","modified":1537801186492},{"_id":"public/tags/三层架构/index.html","hash":"c78ea03f6b2f1ea97a012141488a240d9ee9adea","modified":1537801186492},{"_id":"public/tags/遇见逆水寒/index.html","hash":"28bacee21c43bb0e81cba95700a76a0510cb2180","modified":1537801186492},{"_id":"public/tags/github-pages/index.html","hash":"7f980ff2ae9fdabd03c9e932ada3b253f667af18","modified":1537801186492},{"_id":"public/tags/图片显示/index.html","hash":"75b6803670305ef4adb91be2c17f26eb92b793cf","modified":1537801186492},{"_id":"public/tags/index.html","hash":"4743f532b38df8cbd328d5d1f60c5e265adc9259","modified":1537801186492},{"_id":"public/2018/09/22/求包含每个有序数组-共k个-至少一个元素的最小区间/index.html","hash":"55a696a16e004f7c0464895a9cca6d49320c4fc8","modified":1537801186492},{"_id":"public/2018/09/21/HTTP学习记录/index.html","hash":"29f6ee61d918aa9ec4fca677ff3fdfa05c6085d7","modified":1537801186492},{"_id":"public/2018/09/20/牛客网前端挑战编程题解/index.html","hash":"9c753d1b43732c058dcf0fea5927332c342a0456","modified":1537801186492},{"_id":"public/2018/09/20/Web前端错题模糊题记录/index.html","hash":"bcdd9d43db2da6c2b022edbd341d6de8ce91e507","modified":1537801186493},{"_id":"public/2018/09/18/Ubuntu下使用Deepin-wine的移植版安装qq微信等/index.html","hash":"52c2bc396e3df498c442fa540ecdeda45c64e012","modified":1537801186493},{"_id":"public/2018/09/16/JavaScript学习记录四/index.html","hash":"cf6cdc1be2f6810071693f0280d6ef0175eb24c4","modified":1537801186493},{"_id":"public/2018/09/14/JavaScript学习记录三/index.html","hash":"3ef4e976e2a90219cf46360ca4f4df9a02038165","modified":1537801186493},{"_id":"public/2018/09/13/将hexo的评论系统由gitment改为Valine/index.html","hash":"eec5fb4707c24452243e875f36df5291e24ea5b7","modified":1537801186493},{"_id":"public/2018/09/13/JavaScript学习记录二/index.html","hash":"6ae8bae60ca021181054976ff49fb941e788f1f6","modified":1537801186493},{"_id":"public/2018/09/11/JavaScript学习记录一/index.html","hash":"ed51e4d321f93f674f935ee577ae5a651e85ac46","modified":1537801186493},{"_id":"public/2018/09/11/HTML5与CSS3权威指南之HTML5学习记录/index.html","hash":"9d0a6bac1868f507a5bf251b393c98ad3ed18187","modified":1537801186493},{"_id":"public/2018/09/10/HTML与CSS学习记录/index.html","hash":"89cd1bfa5b405d597140cc46828ba8349fddecef","modified":1537801186493},{"_id":"public/2018/09/04/JavaScript原型链-prototype与-proto/index.html","hash":"ec9dd7c65cbdbb86627ed05c707ef36035a6b2a8","modified":1537801186493},{"_id":"public/2018/09/02/ubuntu下Chrome谷歌浏览器部分网站图片显示不正常的解决方法/index.html","hash":"f4668ae767bc1b1a45dc2a181cc6e670d4c0c8a0","modified":1537801186493},{"_id":"public/2018/09/02/ubuntu-18-04下安装稳定版Chrome谷歌浏览器/index.html","hash":"98c11c9d17339b214594997fbfd6ac9a0fe2f365","modified":1537801186493},{"_id":"public/2018/09/01/ubuntu18-04中安装iNode/index.html","hash":"709bc86342e4ec01c30ec74e4185d3c8b3515008","modified":1537801186494},{"_id":"public/2018/09/01/在ubuntu中安装Markdown神器Typora/index.html","hash":"b2c54e9545f763c87a6bd5c44199e832ac8786b8","modified":1537801186494},{"_id":"public/2018/09/01/ubuntu下无法将iNode绑定到侧边栏的解决办法/index.html","hash":"af94a0629ca2ee690ac1d0fcdecfc7f9c21f7c3d","modified":1537801186494},{"_id":"public/2018/09/01/ubuntu下创建文件夹快捷方式/index.html","hash":"b5a5e82138e0d8a979398b161caffaf6e7636ca7","modified":1537801186494},{"_id":"public/2018/08/23/遇见逆水寒男号女NPC奇物好感统计/index.html","hash":"3fa58b12989258b4981abaa54f32f90ce78acf63","modified":1537801186494},{"_id":"public/2018/07/19/PAT刷题记录/index.html","hash":"bed846f1612ce1c3f1e8b72505f8b14f6c6b23b7","modified":1537801186494},{"_id":"public/2018/07/01/猫眼电影加密数字破解（爬取评分票房票价）/index.html","hash":"efcc843409d3ee4d20fcdef46f1a09d7baff333a","modified":1537801186494},{"_id":"public/2018/06/30/系统分析与设计作业FinalReport/index.html","hash":"f350f928da83504c5fae8c7d30175d843db13985","modified":1537801186494},{"_id":"public/2018/06/30/系统分析与设计作业十六/index.html","hash":"a19706340d8d997c7ae28ec6c330894b68594d4b","modified":1537801186495},{"_id":"public/2018/06/27/深度学习周报week11-week12/index.html","hash":"262feb704bfa2105e694b77f0588cd3c4acf034d","modified":1537801186495},{"_id":"public/2018/06/27/深度学习周报week09-week10/index.html","hash":"1a444983da8aef3f81e5c269da23fcf7186f9e7e","modified":1537801186495},{"_id":"public/2018/06/06/系统分析与设计作业十三/index.html","hash":"7b56829ca492d4b7ba374800961a75c3aec8d3ff","modified":1537801186495},{"_id":"public/2018/05/19/深度学习周报week07-week08/index.html","hash":"958f00dcd461eeeecac463bfced45322f0e24d0e","modified":1537801186495},{"_id":"public/2018/05/13/系统分析与设计作业九/index.html","hash":"4a35e762c1cf2a19014d20b8dfd19ccd0927936d","modified":1537801186495},{"_id":"public/2018/05/12/深度学习周报week05-week06/index.html","hash":"dcab26c17a9eeece89154f0e8d1a8185142681ef","modified":1537801186495},{"_id":"public/2018/05/12/深度学习周报week03-week04/index.html","hash":"f0b9ebb020cb7ee2fd5a07a060c14c5ec5856933","modified":1537801186495},{"_id":"public/2018/05/06/系统分析与设计作业八/index.html","hash":"e9d3ac31843203a66b7831b7bc893dea5f406178","modified":1537801186495},{"_id":"public/2018/04/29/系统分析与设计作业七/index.html","hash":"82fad69756b009a41328ca245870cf08a0c86487","modified":1537801186495},{"_id":"public/2018/04/22/系统分析与设计作业六/index.html","hash":"be732ac5932a82f012181b11319169d54656f3d2","modified":1537801186495},{"_id":"public/2018/04/17/hexo博客谷歌百度收录踩坑日记/index.html","hash":"75ec2a0389369feccf883730c141f9ce8e91bd3a","modified":1537801186495},{"_id":"public/2018/04/16/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法/index.html","hash":"504996e5d39ffd011a3e3b1410f643e2c08134fe","modified":1537801186496},{"_id":"public/2018/04/16/接入gitment为hexo添加评论功能/index.html","hash":"d76f5492d3e0c2b6061b78c53921704ba76c1ff2","modified":1537801186496},{"_id":"public/2018/04/16/hexo创建的tags和categories页面为空的解决办法/index.html","hash":"c9983cc7f92d95b8d59f3c3427807c19dbf141bd","modified":1537801186496},{"_id":"public/2018/04/15/系统分析与设计作业五/index.html","hash":"bfb2b06da43001cf8fd5f8811360a75bb976a101","modified":1537801186496},{"_id":"public/2018/04/02/智能指针/index.html","hash":"f1ef8986ef4eb2ede011d479ac4d74ff3facbe2b","modified":1537801186496},{"_id":"public/2018/04/01/numpy常用函数和数据类型/index.html","hash":"4ef37aeb517a491177c89e5e2a8618b18afef0b5","modified":1537801186496},{"_id":"public/2018/04/01/使用TensorBoard可视化工具/index.html","hash":"482a82a96c162e893510c7473c37ae458c3b5ff2","modified":1537801186496},{"_id":"public/2018/04/01/TensorFlow训练MNIST报错ResourceExhaustedError/index.html","hash":"5cec028d30a6651993c888385fbaa81b759c443d","modified":1537801186496},{"_id":"public/2018/03/31/TensorFlow基础知识/index.html","hash":"33aa0687935a889cdf7d6e0cee5d030f722601d3","modified":1537801186496},{"_id":"public/2018/03/31/关于hexo-markdown添加的图片在github-page中无法显示的问题/index.html","hash":"0dd07eb50ac01293739bcffc066f761ce9c05c33","modified":1537801186496},{"_id":"public/2018/03/30/深度学习周报week01-week02/index.html","hash":"3fa3e21f62f8a0fc8abe8b08b5221824a44aac2f","modified":1537801186496},{"_id":"public/2018/03/30/部署hexo后github-pages页面未更新或无法打开问题/index.html","hash":"c261deeb617f7cda9e773b0ab84b072e3b985f0e","modified":1537801186496},{"_id":"public/2018/03/30/堆和栈的区别/index.html","hash":"29350e6f3d18a85340775ca34b25db985ae58331","modified":1537801186496},{"_id":"public/categories/Web/index.html","hash":"dc99686879d73084412549f0ceb3114765d0b5c3","modified":1537801186496},{"_id":"public/categories/deep-learning/index.html","hash":"c53b37f35cd33877d89eb801e2b9780aea839126","modified":1537801186497},{"_id":"public/categories/methods/index.html","hash":"e9ec11ed4565dae7084cf8a52155ac3a78202434","modified":1537801186497},{"_id":"public/categories/系统分析与设计/index.html","hash":"e0921f846f48acf8e9302ea9d356d95bfb4d8a3c","modified":1537801186497},{"_id":"public/index.html","hash":"bbe2b6e41c7466d57a3132d38d389ee5feddd745","modified":1537801186497},{"_id":"public/page/2/index.html","hash":"cd943830d70957f6fda485b30e8f6282189112d1","modified":1537801186497},{"_id":"public/page/3/index.html","hash":"5cc1ea7ee7934018ff4bbf7a293add71416494b7","modified":1537801186497},{"_id":"public/page/4/index.html","hash":"31624af16cf587ed1f6a7018ab6b68f0aac1be75","modified":1537801186497},{"_id":"public/page/5/index.html","hash":"b376b547f4815e0fcee7201ea24b800435223661","modified":1537801186497},{"_id":"public/page/6/index.html","hash":"416dfcc3ff053ef215a6fdbb79347cdbcdeea76c","modified":1537801186497},{"_id":"public/page/7/index.html","hash":"1b513e2aead2c8bccfc2922fe9990a642365bab2","modified":1537801186497},{"_id":"public/page/8/index.html","hash":"12a7f4502fce22fad14f31f735f3e2cb262bc53b","modified":1537801186497},{"_id":"public/page/9/index.html","hash":"8c07afc5f84688aa6571d9f58a34dcb547501664","modified":1537801186497},{"_id":"public/page/10/index.html","hash":"8e5a8c50e65d0c4dbd2f2bc760fc861ee35ca182","modified":1537801186497},{"_id":"public/archives/index.html","hash":"776636726671359f2cff3d485c4bbfcc9e848186","modified":1537801186497},{"_id":"public/archives/page/2/index.html","hash":"5d7139cb42d0e8fd7a4107127058c33ac9a938e7","modified":1537801186497},{"_id":"public/archives/page/3/index.html","hash":"1b420cde69f3fbcbcffadcc3fc251a079f17af01","modified":1537801186498},{"_id":"public/archives/2018/index.html","hash":"2bac43317432655851a386e89a557e1ccbdb724b","modified":1537801186498},{"_id":"public/archives/2018/page/2/index.html","hash":"9e682540fe6f3bc51e07c1917fbdb864d2478049","modified":1537801186498},{"_id":"public/archives/2018/page/3/index.html","hash":"805fa55c41e4ceead33aeabe49e409bc6c7bbffb","modified":1537801186498},{"_id":"public/archives/2018/04/index.html","hash":"3a5a36a1890632fd7fb7e3587ac98a6b86901649","modified":1537801186498},{"_id":"public/archives/2018/06/index.html","hash":"df5eb530e4f71dab32ea0aefe780a41b8d48362e","modified":1537801186498},{"_id":"public/archives/2018/09/index.html","hash":"f8c2dd55447e6e8a7a7c137e18aaf8d217e76b5c","modified":1537801186498},{"_id":"public/tags/JavaScript/index.html","hash":"d85ef3df878ffc5143188654952f2e5d55068341","modified":1537801186498},{"_id":"public/tags/ubuntu/index.html","hash":"7f2fd7e8b352627ff35ff01da4843cc43460c226","modified":1537801186498},{"_id":"public/tags/hexo/index.html","hash":"c01c5201d89592fe9013712f70ec6096ca9d1f9d","modified":1537801186498},{"_id":"public/archives/2018/09/page/2/index.html","hash":"1d98d44d6fbd69cc7df3485499c49543cb1354ae","modified":1537801186509},{"_id":"public/tags/git/index.html","hash":"61793d68dfdb9a1930def96f8139b14e0e604d88","modified":1537801186509},{"_id":"public/tags/Vue/index.html","hash":"f6022496080431680716303536afa96f2ceb5b32","modified":1537801186509},{"_id":"public/tags/Vuex/index.html","hash":"9e6a929e537887ff179c5ddc31157e4dad89f15a","modified":1537801186509},{"_id":"public/2018/09/24/git相关整理/index.html","hash":"b6be00524bad8a8f651b9e0758d8d5bb2b333341","modified":1537801186509},{"_id":"public/2018/09/24/ubuntu18-04开机慢的解决办法/index.html","hash":"39b33cc042cb055ac65cc23e117820092ef6c571","modified":1537801186509},{"_id":"public/2018/09/23/Vuex入门/index.html","hash":"153cb0aaabd99c36edb96d7b7b31f59fff37d9bf","modified":1537801186509},{"_id":"public/page/11/index.html","hash":"0693e302768f270fcac8bf28e2790cf52a651c0b","modified":1537801186509},{"_id":"public/CNAME","hash":"5f5cda3f6c72ad3ee0b593daafabfec550a41dc6","modified":1537801186515},{"_id":"public/README.md","hash":"d11066d2f7eb3171534982364d62645c0aa7a712","modified":1537801186515},{"_id":"public/favicon.ico","hash":"17b0ff4f4afab42c75b3b7afff59575631b514ae","modified":1537801186515},{"_id":"public/images/BN_back.png","hash":"b1457ee4faac43b4e561ee259327bc9b43bd06a2","modified":1537801186516},{"_id":"public/images/BN.png","hash":"16a8d79aff9c062eb5654627f404cf37db042e8b","modified":1537801186516},{"_id":"public/images/BN_y.png","hash":"278d7811ac757a93d5067baecd1244e6012f031f","modified":1537801186516},{"_id":"public/images/Capture1.PNG","hash":"c6dd3c2cb3585bf7ce1dea86dfb6c433c589c355","modified":1537801186516},{"_id":"public/images/Capture.PNG","hash":"92290ce107044453cc8f78bd1c73c0142e0190df","modified":1537801186516},{"_id":"public/images/Capture2.PNG","hash":"c68af93d76ea39560435b0e5b3d768fbb2051462","modified":1537801186516},{"_id":"public/images/Capture3.PNG","hash":"a88eb075f4cfa82822fae098458cdc4617153dde","modified":1537801186516},{"_id":"public/images/Capture4.PNG","hash":"6902b1d3acd40c54183f7ec398ebfcdecf4037f2","modified":1537801186516},{"_id":"public/images/Capture5.PNG","hash":"97f3f8567f653b671854b5f96eb679c53c18bbd1","modified":1537801186516},{"_id":"public/images/L1.jpg","hash":"b43e8926a31012f34e6961897ee796f2be364ac5","modified":1537801186516},{"_id":"public/images/L2.jpg","hash":"99f85d9063828c1efd5fd712aa6249bc01c3c519","modified":1537801186516},{"_id":"public/images/Untitled.png","hash":"24ea3d0e09177d1cdf15371775079fef7e5e1c08","modified":1537801186516},{"_id":"public/images/analysis_final_1.PNG","hash":"311843a5328f609273a79c0907bdb397aeac4971","modified":1537801186516},{"_id":"public/images/analysis_final_3.PNG","hash":"61526342708461c189abd9ca54221db5c98bcc3e","modified":1537801186516},{"_id":"public/images/classification.PNG","hash":"db34d2712eec4a44cfc20488aac3020394797ca5","modified":1537801186516},{"_id":"public/images/analysis_final_5.PNG","hash":"78aa509a5537c4f4f182eebc73e4ff41e153172f","modified":1537801186516},{"_id":"public/images/filename_txt.PNG","hash":"4b587eadb4dd595b2a6f609f1087aa74fabc4058","modified":1537801186517},{"_id":"public/images/lesson13_1.png","hash":"31db137a072c31ed7bcb8b6f8e8ddf0187c2fdaa","modified":1537801186517},{"_id":"public/images/lesson16_1.png","hash":"7e45e0bea924348106203e0a4096b2f9628480fe","modified":1537801186517},{"_id":"public/images/lesson16_2.png","hash":"06d407682af5f02d0708a92278a99b4b2abd2ef2","modified":1537801186517},{"_id":"public/images/lesson16_3.png","hash":"ff2b64fd298bf00cb6f9a454798dd01e91dd16f1","modified":1537801186517},{"_id":"public/images/lesson6.png","hash":"c2bae02e87fe851ecc8881f6504f460f603d4d0b","modified":1537801186517},{"_id":"public/images/lesson6_3.png","hash":"43c087415436e9102156fd4bf4f59a8484cd6294","modified":1537801186517},{"_id":"public/images/lesson6_3b.png","hash":"774a6ae430d729a7fa41f1990e84e7c36f6c8ee4","modified":1537801186517},{"_id":"public/images/lesson6_3c.png","hash":"b37095a0a2092d82b90476d95391dd61629c29c0","modified":1537801186517},{"_id":"public/images/lesson7.png","hash":"5a8f624b8683b69f32fbc50d14b9cbafe30b2d06","modified":1537801186517},{"_id":"public/images/lesson7_2.png","hash":"eed9f4172450b140d60fd9d85d214f5a5f3d59ff","modified":1537801186517},{"_id":"public/images/lesson8.png","hash":"58bffcabfa1db623bdb317772483bd1ea8007835","modified":1537801186517},{"_id":"public/images/lesson8_2.png","hash":"5614c0b9f84ac4b46d5bd8a5489ea7bf86812853","modified":1537801186517},{"_id":"public/images/lesson9_1.png","hash":"c355a88e7a51dc46740790378a0605a603aeede9","modified":1537801186517},{"_id":"public/images/lesson9_2.png","hash":"c06f731136f43e58430ef6d5323a9ab105f60d37","modified":1537801186517},{"_id":"public/images/lesson9_3.png","hash":"fa4b73721a97c7806fc035d5d6d2a5c9ed614132","modified":1537801186518},{"_id":"public/images/lesson9_5.png","hash":"5950f6e6ecb706acd441fac3a326f38382203c8f","modified":1537801186518},{"_id":"public/images/lesson9_4.png","hash":"8457257aef5b457087086f2502b46d99bbd4cbef","modified":1537801186518},{"_id":"public/images/pat_1086.jpg","hash":"4e08fe072bcd69e9048ebf9714cc34a2476ae980","modified":1537801186518},{"_id":"public/images/woff_decode.PNG","hash":"21a52a39b4c9cb0e1a6ddbff1ec5a910db603167","modified":1537801186518},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1537801186518},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1537801186518},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1537801186518},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1537801186518},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1537801186518},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1537801186518},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1537801186518},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1537801186518},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1537801186518},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1537801186518},{"_id":"public/css/images/banner.jpg","hash":"b4e5b071137a37d064c18888a52e8800021fc1c6","modified":1537801186518},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1537801186519},{"_id":"public/images/lesson6b.png","hash":"d200d7a5d15cce2e0538c14ee21bf0c48b251702","modified":1537801187322},{"_id":"public/images/analysis_final_4.PNG","hash":"138983b8bc652fb041f94583221f99614dfa68e5","modified":1537801187323},{"_id":"public/images/analysis_final_2.PNG","hash":"519f5d48483b3cd810c61e06386ae566c9aa215a","modified":1537801187324},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1537801187324},{"_id":"public/baidu_verify_CPVBgyCjF8.html","hash":"bcdd113d9b4bd2f097dd7d3b43aefe54e4b67d82","modified":1537801187332},{"_id":"public/baidu_verify_KS1HHksWBu.html","hash":"23c57476910e679926c1390de149bd9119ae6610","modified":1537801187332},{"_id":"public/google9da4e92e637f6c53.html","hash":"67e87478705d1c4257f2c5dd619d42f5fe83273d","modified":1537801187332},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1537801187332},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1537801187332},{"_id":"public/js/totop.js","hash":"c14c7a191427269bafce8dcc770756a21abd3684","modified":1537801187333},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1537801187333},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1537801187333},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1537801187333},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1537801187333},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1537801187333},{"_id":"public/css/style.css","hash":"ba715b8baa0312ce523936a1a3378faf12353b4e","modified":1537801187333},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1537801187333},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1537801187333},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1537801187339}],"Category":[{"name":"Python","_id":"cjmgf4azj0004crag6m34pxdj"},{"name":"Web","_id":"cjmgf4azs0009crag1lbvbl7n"},{"name":"deep learning","_id":"cjmgf4b0e000zcragoyq2wajr"},{"name":"OJ","_id":"cjmgf4b0l001fcragc3mizjbi"},{"name":"methods","_id":"cjmgf4b0o001mcragrii7vgjy"},{"name":"C/C++","_id":"cjmgf4b17002icragdzg4x1di"},{"name":"系统分析与设计","_id":"cjmgf4b1r003jcrag30mbdhfl"}],"Data":[],"Page":[{"title":"All categories","date":"2018-03-30T18:11:03.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: All categories\ndate: 2018-03-31 02:11:03\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2018-09-11T05:46:12.973Z","path":"categories/index.html","comments":1,"_id":"cjmgf4ayp0000crag3w4jj7l0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All tags","date":"2018-03-30T18:09:33.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2018-03-31 02:09:33\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2018-09-11T05:46:12.981Z","path":"tags/index.html","comments":1,"_id":"cjmgf4azg0002cragd92qrpvm","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Flask入门学习笔记","toc":true,"date":"2018-06-21T11:22:12.000Z","_content":"\n[前情链接](http://blog.zmj97.top/2018/04/15/系统分析与设计作业五/)\n\n","source":"_posts/Flask入门学习笔记.md","raw":"---\ntitle: Flask入门学习笔记\ntoc: true\ndate: 2018-06-21 19:22:12\ncategories:\n- Python\ntags:\n- Flask\n---\n\n[前情链接](http://blog.zmj97.top/2018/04/15/系统分析与设计作业五/)\n\n","slug":"Flask入门学习笔记","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4ayq0001cragnyp23giv","content":"<p><a href=\"http://blog.zmj97.top/2018/04/15/系统分析与设计作业五/\" target=\"_blank\" rel=\"noopener\">前情链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.zmj97.top/2018/04/15/系统分析与设计作业五/\" target=\"_blank\" rel=\"noopener\">前情链接</a></p>\n"},{"title":"HTTP学习记录","toc":true,"date":"2018-09-21T12:40:48.000Z","_content":"\nHTTP协议，HyperText Transfer Protocol，超文本传输协议，是因特网上应用最为 广泛的一种网络传输协议。\n\n## 版本\n\n### HTTP/0.9\n\n已过时，只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。\n\n因为这个版本不支持POST方法，因此客户端无法向服务器传递太多信息。\n\n### HTTP/1.0\n\n第一个在通讯中指定版本号的版本，至今仍被广泛采用，特别是在代理服务器中。\n\n### HTTP/1.1\n\n当前版本，默认采用持久连接，并能很好地配合代理服务器工作。\n\n支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。\n\n### SPDY\n\n[SPDY](https://zh.wikipedia.org/wiki/SPDY) (发音为\"speedy\") ，是一个由 [Google](https://zh.wikipedia.org/wiki/Google) 主导的研究项目发明的HTTP替代协议。SPDY一开始主要关注降低延迟，采用了TCP通道，但是使用了不同的协议来达到此目的。\n\n### HTTP/2.0\n\n简称为**h2**（基于TLS/1.2或以上版本的加密连接）或**h2c**（非加密连接）。\n\n### 协议之间的比较\n\n**HTTP/1.1相较于HTTP/1.0的主要区别**\n\n- 缓存处理\n- 带宽优化及网络连接的使用\n- 错误通知的管理\n- 消息在网络中的发送\n- 互联网地址的维护\n- 安全性及完整性\n\n**HTTP/2与HTTP/1.1比较**\n\nHTTP/2 相比 HTTP/1.1 的修改并不会破坏现有程序的工作，但是新的程序可以藉由新特性得到更好的速度。\n\nHTTP/2 保留了 HTTP/1.1 的大部分语义，例如[请求方法](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95)、[状态码](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E7%8A%B6%E6%80%81%E7%A0%81)乃至[URI](https://zh.wikipedia.org/wiki/URI)和绝大多数[HTTP头部](https://zh.wikipedia.org/w/index.php?title=HTTP%E5%A4%B4%E9%83%A8&action=edit&redlink=1)字段一致。\n\n但是 HTTP/2 采用了新的方法来编码、传输客户端/服务器间的数据。\n\n**HTTP/1.1与SPDY的区别**\n\n其与HTTP/1.1相比，SPDY主要的改变有：\n\n- 实现无需先入先出的[多路复用](https://zh.wikipedia.org/wiki/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8)\n- 为简化客户端和服务器开发的消息—帧机制\n- 强制性压缩（包括HTTP头部）\n- 优先级排序\n- 双向通讯\n\n**HTTP/2与SPDY的比较**\n\nHTTP/2的开发基于SPDY进行跃进式改进。在诸多修改中，最显著的改进在于，HTTP/2使用了一份经过定制的压缩算法，基于[霍夫曼编码](https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81)，以此替代了SPDY的动态流压缩算法，以避免对协议的Oracle攻击——这一类攻击以[CRIME](https://zh.wikipedia.org/wiki/CRIME)为代表。此外，HTTP/2禁用了诸多加密套件，以保证基于TLS的连接的前向安全。\n\n\n\n## 简介\n\n基于TCP/IP通信协议传递数据。\n\n### 工作原理\n\nHTTP协议工作在客户端-服务端架构（C/S）上，浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。\n\nWeb服务器有Apache服务器、IIS（Internet Informatica Services）服务器等。\n\nWeb服务器根据接收到的请求，向客户端发送响应信息。\n\nHTTP默认端口号为80，我们也可以改为8080或者其他端口。\n\nHTTP使用统一资源标识符（Uniform Resource Identifiers, URI）定位互联网上的资源。\n\n### 注意事项\n\nHTTP是：\n\n- **无连接的**：每次连接只处理一个请求。服务器处理完客户的请求并受到客户的应答后就断开连接。采用这种方式可以节省传输时间。\n- **媒体独立的**：只要客户端和服务端都知道如何处理数据内容，任何类型都可以通过HTTP发送。客户端和服务器指定合适的MIME-tyoe内容类型。\n- **无状态的**：协议对于事务处理没有记忆能力。HTTP协议自身不对请求和响应之间的通信状态进行保存。\n  - <u>这是为了更快地处理大量事务，确保协议的可伸缩性而特意设计的</u>。但这也导致业务处理变得棘手的情况增多，比如要保持登录状态，因为HTTP无状态，因此需要额外保存用户状态。\n  - HTTP/1.1虽然也是无状态协议，但是为了实现比如保持状态的功能，引入了Cookie技术，这让管理状态变得简单。\n  - Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。\n\nHTTP协议通信流程：\n\nWeb浏览器<=HTTP协议=>HTTP服务器<=>CGI（通用网关接口）应用程序<=>数据库\n\n其中CGI：\n\n是Web 服务器运行时外部程序的规范,按CGI 编写的程序可以扩展服务器功能。CGI 应用程序能与浏览器进行交互,还可通过数据库API 与数据库服务器等外部数据源进行通信,从数据库服务器中获取数据。格式化为HTML文档后，发送给浏览器，也可以将从浏览器获得的数据放到数据库中。\n\n![HTTP协议通信流程](https://7n.w3cschool.cn/attachments/image/20160225/1456372014816657.gif)\n\n## HTTP报文\n\n用于HTTP协议交互的信息称为HTTP报文。请求端(客户端)的HTTP报文称为请求报文，响应端（服务器端）的叫响应报文．\n\nHTTP报文本身是由多行（用CR+LF作为换行符）数据构成的字符串文本。\n\nHTTP报文大致可分为报文首部和报文主体，两者由最初出现的空行（CR+LF）来划分。\n\n通常并不一定要有报文主体。\n\n**报文首部**\n\n服务器端或客户端需处理的请求或响应的内容及内容\n\n**请求报文**的报文首部由请求行、请求首部字段、通用首部字段、实体首部字段、其他组成\n\n**响应报文**的报文首部由状态行、响应首部字段、通用首部字段、实体首部字段、其他组成\n\n**CR+LF**\n\nCR，Carriage Return，回车符，16进制0x0d\n\nLF，Line Feed，换行符，16进制0x0a\n\n**报文主体**\n\n应被发送的数据\n\n![图片来源于网络](http://ocs628urt.bkt.clouddn.com/http%E6%8A%A5%E6%96%87.png)\n\n## 常用请求首部信息\n\n（参考自红宝书）\n\n虽然不同浏览器实际发送的头部信息会有所不同，但下边这些基本上是所有浏览器都会发送的：\n\n- Accept：浏览器能够处理的内容类型\n- Accept-Charset：浏览器能够显示的字符集\n- Accept-Encoding：浏览器能够处理的压缩编码\n- Accept-Language：浏览器当前设置的语言\n- Connection：浏览器与服务器之间连接的类型\n- Cookie：当前页面设置的任何Cookie\n- Host：发出请求的页面所在的域\n- Referer：发出请求的页面的URI。注意HTTP规范将这个字段拼写错了（正确拼法为Referrer），但为了保证与规范一致，也只能将错就错了。\n- User-Agent：浏览器的代理用户字段。\n\n注意，这些字段名是一个字母都不应有区别的，一旦有区别，那它就不是首部字段。\n\n## 请求方法\n\n根据HTTP标准，HTTP请求可以使用多种请求方法。\n\nHTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。\n\nHTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n`GET`\n\nGET方法请求请求指定的页面信息. 使用GET的请求应该只被用于获取数据.\n\n`HEAD`\n\nHEAD方法请求一个与GET请求的响应相同的响应，但没有响应体.\n\n`POST`\n\nPOST方法用于向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。\n\n`PUT`\n\n从客户端向服务器传送的数据取代指定的文档的内容。\n\n`DELETE`\n\nDELETE方法删除指定的资源。\n\n`CONNECT`\n\nHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\n\n`OPTIONS`\n\n允许客户端查看服务器的性能。\n\n`TRACE`\n\n回显服务器收到的请求，主要用于测试或诊断。\n\n`PATCH`\n\nPATCH方法用于对资源进行部分修改。（PUT为对资源进行整体覆盖）\n\n## HTTP状态码\n\n- 1XX信息，服务器收到请求，需要请求者继续执行操作\n- 2XX成功，操作被成功接收并处理\n- 3XX重定向，需要进一步的操作以完成请求\n- 4XX客户端错误，请求包含语法错误或无法完成请求\n- 5XX服务器错误，服务器在处理请求的过程中发生了错误\n\n常见状态码：\n\n- **200 OK**， 一切正常，对GET和POST请求的应答文档跟在后面\n- 301 Moved Permanently，客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。\n- 302 Found，类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。\n- 304 Not Modified，客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。\n- 307 Temporary Redirect，和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是 POST，即使它实际上只能在POST请求的应答是303时才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清楚地区分几个状态代码： 当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只能跟随对GET请求的重定向。\n- **400 Bad Request**，请求出现语法错误。\n- 401 Unauthorized，客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的Authorization头后再次发出请求\n- **403 Forbidden**， 资源不可用。\n- **404 Not Found**，无法找到指定位置的资源\n- 410 Gone， 所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用\n- **500 Internal Server Error**，服务器遇到了意料不到的情况，不能完成客户的请求\n- 501 Not Implemented，服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求\n- **503 Service Unavailable**  ，服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个Retry-After头\n\n## Content-Type\n\n`Content-Type: text/html; charset=UTF-8`\n\n实体首部字段，表示实体主体的媒体类型。\n\n字段值采用type/subtype形式赋值。\n\n对照表链接：https://www.w3cschool.cn/http/ahkmgfmz.html\n\n\n\n\n\n---\n\n[W3C的教程](https://www.w3cschool.cn/http/)的学习笔记，过两天再啃一下MDN和《图解HTTP》，还要再复习一下计网，很多都忘了...\n\nemmmW3C有的是错的...使用网络教程需谨慎....\n\n关于HTTP/2.0以及SPDY等均来自维基百科。\n\n这里只是重新回忆一下什么是HTTP，还是要看文档！啃《图解HTTP》！复习计网！","source":"_posts/HTTP学习记录.md","raw":"---\ntitle: HTTP学习记录\ntoc: true\ndate: 2018-09-21 20:40:48\ncategories:\n- Web\ntags:\n- HTTP\n---\n\nHTTP协议，HyperText Transfer Protocol，超文本传输协议，是因特网上应用最为 广泛的一种网络传输协议。\n\n## 版本\n\n### HTTP/0.9\n\n已过时，只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。\n\n因为这个版本不支持POST方法，因此客户端无法向服务器传递太多信息。\n\n### HTTP/1.0\n\n第一个在通讯中指定版本号的版本，至今仍被广泛采用，特别是在代理服务器中。\n\n### HTTP/1.1\n\n当前版本，默认采用持久连接，并能很好地配合代理服务器工作。\n\n支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。\n\n### SPDY\n\n[SPDY](https://zh.wikipedia.org/wiki/SPDY) (发音为\"speedy\") ，是一个由 [Google](https://zh.wikipedia.org/wiki/Google) 主导的研究项目发明的HTTP替代协议。SPDY一开始主要关注降低延迟，采用了TCP通道，但是使用了不同的协议来达到此目的。\n\n### HTTP/2.0\n\n简称为**h2**（基于TLS/1.2或以上版本的加密连接）或**h2c**（非加密连接）。\n\n### 协议之间的比较\n\n**HTTP/1.1相较于HTTP/1.0的主要区别**\n\n- 缓存处理\n- 带宽优化及网络连接的使用\n- 错误通知的管理\n- 消息在网络中的发送\n- 互联网地址的维护\n- 安全性及完整性\n\n**HTTP/2与HTTP/1.1比较**\n\nHTTP/2 相比 HTTP/1.1 的修改并不会破坏现有程序的工作，但是新的程序可以藉由新特性得到更好的速度。\n\nHTTP/2 保留了 HTTP/1.1 的大部分语义，例如[请求方法](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95)、[状态码](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E7%8A%B6%E6%80%81%E7%A0%81)乃至[URI](https://zh.wikipedia.org/wiki/URI)和绝大多数[HTTP头部](https://zh.wikipedia.org/w/index.php?title=HTTP%E5%A4%B4%E9%83%A8&action=edit&redlink=1)字段一致。\n\n但是 HTTP/2 采用了新的方法来编码、传输客户端/服务器间的数据。\n\n**HTTP/1.1与SPDY的区别**\n\n其与HTTP/1.1相比，SPDY主要的改变有：\n\n- 实现无需先入先出的[多路复用](https://zh.wikipedia.org/wiki/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8)\n- 为简化客户端和服务器开发的消息—帧机制\n- 强制性压缩（包括HTTP头部）\n- 优先级排序\n- 双向通讯\n\n**HTTP/2与SPDY的比较**\n\nHTTP/2的开发基于SPDY进行跃进式改进。在诸多修改中，最显著的改进在于，HTTP/2使用了一份经过定制的压缩算法，基于[霍夫曼编码](https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81)，以此替代了SPDY的动态流压缩算法，以避免对协议的Oracle攻击——这一类攻击以[CRIME](https://zh.wikipedia.org/wiki/CRIME)为代表。此外，HTTP/2禁用了诸多加密套件，以保证基于TLS的连接的前向安全。\n\n\n\n## 简介\n\n基于TCP/IP通信协议传递数据。\n\n### 工作原理\n\nHTTP协议工作在客户端-服务端架构（C/S）上，浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。\n\nWeb服务器有Apache服务器、IIS（Internet Informatica Services）服务器等。\n\nWeb服务器根据接收到的请求，向客户端发送响应信息。\n\nHTTP默认端口号为80，我们也可以改为8080或者其他端口。\n\nHTTP使用统一资源标识符（Uniform Resource Identifiers, URI）定位互联网上的资源。\n\n### 注意事项\n\nHTTP是：\n\n- **无连接的**：每次连接只处理一个请求。服务器处理完客户的请求并受到客户的应答后就断开连接。采用这种方式可以节省传输时间。\n- **媒体独立的**：只要客户端和服务端都知道如何处理数据内容，任何类型都可以通过HTTP发送。客户端和服务器指定合适的MIME-tyoe内容类型。\n- **无状态的**：协议对于事务处理没有记忆能力。HTTP协议自身不对请求和响应之间的通信状态进行保存。\n  - <u>这是为了更快地处理大量事务，确保协议的可伸缩性而特意设计的</u>。但这也导致业务处理变得棘手的情况增多，比如要保持登录状态，因为HTTP无状态，因此需要额外保存用户状态。\n  - HTTP/1.1虽然也是无状态协议，但是为了实现比如保持状态的功能，引入了Cookie技术，这让管理状态变得简单。\n  - Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。\n\nHTTP协议通信流程：\n\nWeb浏览器<=HTTP协议=>HTTP服务器<=>CGI（通用网关接口）应用程序<=>数据库\n\n其中CGI：\n\n是Web 服务器运行时外部程序的规范,按CGI 编写的程序可以扩展服务器功能。CGI 应用程序能与浏览器进行交互,还可通过数据库API 与数据库服务器等外部数据源进行通信,从数据库服务器中获取数据。格式化为HTML文档后，发送给浏览器，也可以将从浏览器获得的数据放到数据库中。\n\n![HTTP协议通信流程](https://7n.w3cschool.cn/attachments/image/20160225/1456372014816657.gif)\n\n## HTTP报文\n\n用于HTTP协议交互的信息称为HTTP报文。请求端(客户端)的HTTP报文称为请求报文，响应端（服务器端）的叫响应报文．\n\nHTTP报文本身是由多行（用CR+LF作为换行符）数据构成的字符串文本。\n\nHTTP报文大致可分为报文首部和报文主体，两者由最初出现的空行（CR+LF）来划分。\n\n通常并不一定要有报文主体。\n\n**报文首部**\n\n服务器端或客户端需处理的请求或响应的内容及内容\n\n**请求报文**的报文首部由请求行、请求首部字段、通用首部字段、实体首部字段、其他组成\n\n**响应报文**的报文首部由状态行、响应首部字段、通用首部字段、实体首部字段、其他组成\n\n**CR+LF**\n\nCR，Carriage Return，回车符，16进制0x0d\n\nLF，Line Feed，换行符，16进制0x0a\n\n**报文主体**\n\n应被发送的数据\n\n![图片来源于网络](http://ocs628urt.bkt.clouddn.com/http%E6%8A%A5%E6%96%87.png)\n\n## 常用请求首部信息\n\n（参考自红宝书）\n\n虽然不同浏览器实际发送的头部信息会有所不同，但下边这些基本上是所有浏览器都会发送的：\n\n- Accept：浏览器能够处理的内容类型\n- Accept-Charset：浏览器能够显示的字符集\n- Accept-Encoding：浏览器能够处理的压缩编码\n- Accept-Language：浏览器当前设置的语言\n- Connection：浏览器与服务器之间连接的类型\n- Cookie：当前页面设置的任何Cookie\n- Host：发出请求的页面所在的域\n- Referer：发出请求的页面的URI。注意HTTP规范将这个字段拼写错了（正确拼法为Referrer），但为了保证与规范一致，也只能将错就错了。\n- User-Agent：浏览器的代理用户字段。\n\n注意，这些字段名是一个字母都不应有区别的，一旦有区别，那它就不是首部字段。\n\n## 请求方法\n\n根据HTTP标准，HTTP请求可以使用多种请求方法。\n\nHTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。\n\nHTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n`GET`\n\nGET方法请求请求指定的页面信息. 使用GET的请求应该只被用于获取数据.\n\n`HEAD`\n\nHEAD方法请求一个与GET请求的响应相同的响应，但没有响应体.\n\n`POST`\n\nPOST方法用于向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。\n\n`PUT`\n\n从客户端向服务器传送的数据取代指定的文档的内容。\n\n`DELETE`\n\nDELETE方法删除指定的资源。\n\n`CONNECT`\n\nHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\n\n`OPTIONS`\n\n允许客户端查看服务器的性能。\n\n`TRACE`\n\n回显服务器收到的请求，主要用于测试或诊断。\n\n`PATCH`\n\nPATCH方法用于对资源进行部分修改。（PUT为对资源进行整体覆盖）\n\n## HTTP状态码\n\n- 1XX信息，服务器收到请求，需要请求者继续执行操作\n- 2XX成功，操作被成功接收并处理\n- 3XX重定向，需要进一步的操作以完成请求\n- 4XX客户端错误，请求包含语法错误或无法完成请求\n- 5XX服务器错误，服务器在处理请求的过程中发生了错误\n\n常见状态码：\n\n- **200 OK**， 一切正常，对GET和POST请求的应答文档跟在后面\n- 301 Moved Permanently，客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。\n- 302 Found，类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。\n- 304 Not Modified，客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。\n- 307 Temporary Redirect，和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是 POST，即使它实际上只能在POST请求的应答是303时才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清楚地区分几个状态代码： 当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只能跟随对GET请求的重定向。\n- **400 Bad Request**，请求出现语法错误。\n- 401 Unauthorized，客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的Authorization头后再次发出请求\n- **403 Forbidden**， 资源不可用。\n- **404 Not Found**，无法找到指定位置的资源\n- 410 Gone， 所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用\n- **500 Internal Server Error**，服务器遇到了意料不到的情况，不能完成客户的请求\n- 501 Not Implemented，服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求\n- **503 Service Unavailable**  ，服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个Retry-After头\n\n## Content-Type\n\n`Content-Type: text/html; charset=UTF-8`\n\n实体首部字段，表示实体主体的媒体类型。\n\n字段值采用type/subtype形式赋值。\n\n对照表链接：https://www.w3cschool.cn/http/ahkmgfmz.html\n\n\n\n\n\n---\n\n[W3C的教程](https://www.w3cschool.cn/http/)的学习笔记，过两天再啃一下MDN和《图解HTTP》，还要再复习一下计网，很多都忘了...\n\nemmmW3C有的是错的...使用网络教程需谨慎....\n\n关于HTTP/2.0以及SPDY等均来自维基百科。\n\n这里只是重新回忆一下什么是HTTP，还是要看文档！啃《图解HTTP》！复习计网！","slug":"HTTP学习记录","published":1,"updated":"2018-09-22T01:57:55.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4azh0003craguyh3y8iq","content":"<p>HTTP协议，HyperText Transfer Protocol，超文本传输协议，是因特网上应用最为 广泛的一种网络传输协议。</p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><h3 id=\"HTTP-0-9\"><a href=\"#HTTP-0-9\" class=\"headerlink\" title=\"HTTP/0.9\"></a>HTTP/0.9</h3><p>已过时，只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。</p>\n<p>因为这个版本不支持POST方法，因此客户端无法向服务器传递太多信息。</p>\n<h3 id=\"HTTP-1-0\"><a href=\"#HTTP-1-0\" class=\"headerlink\" title=\"HTTP/1.0\"></a>HTTP/1.0</h3><p>第一个在通讯中指定版本号的版本，至今仍被广泛采用，特别是在代理服务器中。</p>\n<h3 id=\"HTTP-1-1\"><a href=\"#HTTP-1-1\" class=\"headerlink\" title=\"HTTP/1.1\"></a>HTTP/1.1</h3><p>当前版本，默认采用持久连接，并能很好地配合代理服务器工作。</p>\n<p>支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。</p>\n<h3 id=\"SPDY\"><a href=\"#SPDY\" class=\"headerlink\" title=\"SPDY\"></a>SPDY</h3><p><a href=\"https://zh.wikipedia.org/wiki/SPDY\" target=\"_blank\" rel=\"noopener\">SPDY</a> (发音为”speedy”) ，是一个由 <a href=\"https://zh.wikipedia.org/wiki/Google\" target=\"_blank\" rel=\"noopener\">Google</a> 主导的研究项目发明的HTTP替代协议。SPDY一开始主要关注降低延迟，采用了TCP通道，但是使用了不同的协议来达到此目的。</p>\n<h3 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP/2.0\"></a>HTTP/2.0</h3><p>简称为<strong>h2</strong>（基于TLS/1.2或以上版本的加密连接）或<strong>h2c</strong>（非加密连接）。</p>\n<h3 id=\"协议之间的比较\"><a href=\"#协议之间的比较\" class=\"headerlink\" title=\"协议之间的比较\"></a>协议之间的比较</h3><p><strong>HTTP/1.1相较于HTTP/1.0的主要区别</strong></p>\n<ul>\n<li>缓存处理</li>\n<li>带宽优化及网络连接的使用</li>\n<li>错误通知的管理</li>\n<li>消息在网络中的发送</li>\n<li>互联网地址的维护</li>\n<li>安全性及完整性</li>\n</ul>\n<p><strong>HTTP/2与HTTP/1.1比较</strong></p>\n<p>HTTP/2 相比 HTTP/1.1 的修改并不会破坏现有程序的工作，但是新的程序可以藉由新特性得到更好的速度。</p>\n<p>HTTP/2 保留了 HTTP/1.1 的大部分语义，例如<a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener\">请求方法</a>、<a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E7%8A%B6%E6%80%81%E7%A0%81\" target=\"_blank\" rel=\"noopener\">状态码</a>乃至<a href=\"https://zh.wikipedia.org/wiki/URI\" target=\"_blank\" rel=\"noopener\">URI</a>和绝大多数<a href=\"https://zh.wikipedia.org/w/index.php?title=HTTP%E5%A4%B4%E9%83%A8&amp;action=edit&amp;redlink=1\" target=\"_blank\" rel=\"noopener\">HTTP头部</a>字段一致。</p>\n<p>但是 HTTP/2 采用了新的方法来编码、传输客户端/服务器间的数据。</p>\n<p><strong>HTTP/1.1与SPDY的区别</strong></p>\n<p>其与HTTP/1.1相比，SPDY主要的改变有：</p>\n<ul>\n<li>实现无需先入先出的<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8\" target=\"_blank\" rel=\"noopener\">多路复用</a></li>\n<li>为简化客户端和服务器开发的消息—帧机制</li>\n<li>强制性压缩（包括HTTP头部）</li>\n<li>优先级排序</li>\n<li>双向通讯</li>\n</ul>\n<p><strong>HTTP/2与SPDY的比较</strong></p>\n<p>HTTP/2的开发基于SPDY进行跃进式改进。在诸多修改中，最显著的改进在于，HTTP/2使用了一份经过定制的压缩算法，基于<a href=\"https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81\" target=\"_blank\" rel=\"noopener\">霍夫曼编码</a>，以此替代了SPDY的动态流压缩算法，以避免对协议的Oracle攻击——这一类攻击以<a href=\"https://zh.wikipedia.org/wiki/CRIME\" target=\"_blank\" rel=\"noopener\">CRIME</a>为代表。此外，HTTP/2禁用了诸多加密套件，以保证基于TLS的连接的前向安全。</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>基于TCP/IP通信协议传递数据。</p>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>HTTP协议工作在客户端-服务端架构（C/S）上，浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</p>\n<p>Web服务器有Apache服务器、IIS（Internet Informatica Services）服务器等。</p>\n<p>Web服务器根据接收到的请求，向客户端发送响应信息。</p>\n<p>HTTP默认端口号为80，我们也可以改为8080或者其他端口。</p>\n<p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）定位互联网上的资源。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>HTTP是：</p>\n<ul>\n<li><strong>无连接的</strong>：每次连接只处理一个请求。服务器处理完客户的请求并受到客户的应答后就断开连接。采用这种方式可以节省传输时间。</li>\n<li><strong>媒体独立的</strong>：只要客户端和服务端都知道如何处理数据内容，任何类型都可以通过HTTP发送。客户端和服务器指定合适的MIME-tyoe内容类型。</li>\n<li><strong>无状态的</strong>：协议对于事务处理没有记忆能力。HTTP协议自身不对请求和响应之间的通信状态进行保存。<ul>\n<li><u>这是为了更快地处理大量事务，确保协议的可伸缩性而特意设计的</u>。但这也导致业务处理变得棘手的情况增多，比如要保持登录状态，因为HTTP无状态，因此需要额外保存用户状态。</li>\n<li>HTTP/1.1虽然也是无状态协议，但是为了实现比如保持状态的功能，引入了Cookie技术，这让管理状态变得简单。</li>\n<li>Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。</li>\n</ul>\n</li>\n</ul>\n<p>HTTP协议通信流程：</p>\n<p>Web浏览器&lt;=HTTP协议=&gt;HTTP服务器&lt;=&gt;CGI（通用网关接口）应用程序&lt;=&gt;数据库</p>\n<p>其中CGI：</p>\n<p>是Web 服务器运行时外部程序的规范,按CGI 编写的程序可以扩展服务器功能。CGI 应用程序能与浏览器进行交互,还可通过数据库API 与数据库服务器等外部数据源进行通信,从数据库服务器中获取数据。格式化为HTML文档后，发送给浏览器，也可以将从浏览器获得的数据放到数据库中。</p>\n<p><img src=\"https://7n.w3cschool.cn/attachments/image/20160225/1456372014816657.gif\" alt=\"HTTP协议通信流程\"></p>\n<h2 id=\"HTTP报文\"><a href=\"#HTTP报文\" class=\"headerlink\" title=\"HTTP报文\"></a>HTTP报文</h2><p>用于HTTP协议交互的信息称为HTTP报文。请求端(客户端)的HTTP报文称为请求报文，响应端（服务器端）的叫响应报文．</p>\n<p>HTTP报文本身是由多行（用CR+LF作为换行符）数据构成的字符串文本。</p>\n<p>HTTP报文大致可分为报文首部和报文主体，两者由最初出现的空行（CR+LF）来划分。</p>\n<p>通常并不一定要有报文主体。</p>\n<p><strong>报文首部</strong></p>\n<p>服务器端或客户端需处理的请求或响应的内容及内容</p>\n<p><strong>请求报文</strong>的报文首部由请求行、请求首部字段、通用首部字段、实体首部字段、其他组成</p>\n<p><strong>响应报文</strong>的报文首部由状态行、响应首部字段、通用首部字段、实体首部字段、其他组成</p>\n<p><strong>CR+LF</strong></p>\n<p>CR，Carriage Return，回车符，16进制0x0d</p>\n<p>LF，Line Feed，换行符，16进制0x0a</p>\n<p><strong>报文主体</strong></p>\n<p>应被发送的数据</p>\n<p><img src=\"http://ocs628urt.bkt.clouddn.com/http%E6%8A%A5%E6%96%87.png\" alt=\"图片来源于网络\"></p>\n<h2 id=\"常用请求首部信息\"><a href=\"#常用请求首部信息\" class=\"headerlink\" title=\"常用请求首部信息\"></a>常用请求首部信息</h2><p>（参考自红宝书）</p>\n<p>虽然不同浏览器实际发送的头部信息会有所不同，但下边这些基本上是所有浏览器都会发送的：</p>\n<ul>\n<li>Accept：浏览器能够处理的内容类型</li>\n<li>Accept-Charset：浏览器能够显示的字符集</li>\n<li>Accept-Encoding：浏览器能够处理的压缩编码</li>\n<li>Accept-Language：浏览器当前设置的语言</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cookie：当前页面设置的任何Cookie</li>\n<li>Host：发出请求的页面所在的域</li>\n<li>Referer：发出请求的页面的URI。注意HTTP规范将这个字段拼写错了（正确拼法为Referrer），但为了保证与规范一致，也只能将错就错了。</li>\n<li>User-Agent：浏览器的代理用户字段。</li>\n</ul>\n<p>注意，这些字段名是一个字母都不应有区别的，一旦有区别，那它就不是首部字段。</p>\n<h2 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h2><p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p>\n<p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</p>\n<p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n<p><code>GET</code></p>\n<p>GET方法请求请求指定的页面信息. 使用GET的请求应该只被用于获取数据.</p>\n<p><code>HEAD</code></p>\n<p>HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体.</p>\n<p><code>POST</code></p>\n<p>POST方法用于向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</p>\n<p><code>PUT</code></p>\n<p>从客户端向服务器传送的数据取代指定的文档的内容。</p>\n<p><code>DELETE</code></p>\n<p>DELETE方法删除指定的资源。</p>\n<p><code>CONNECT</code></p>\n<p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p>\n<p><code>OPTIONS</code></p>\n<p>允许客户端查看服务器的性能。</p>\n<p><code>TRACE</code></p>\n<p>回显服务器收到的请求，主要用于测试或诊断。</p>\n<p><code>PATCH</code></p>\n<p>PATCH方法用于对资源进行部分修改。（PUT为对资源进行整体覆盖）</p>\n<h2 id=\"HTTP状态码\"><a href=\"#HTTP状态码\" class=\"headerlink\" title=\"HTTP状态码\"></a>HTTP状态码</h2><ul>\n<li>1XX信息，服务器收到请求，需要请求者继续执行操作</li>\n<li>2XX成功，操作被成功接收并处理</li>\n<li>3XX重定向，需要进一步的操作以完成请求</li>\n<li>4XX客户端错误，请求包含语法错误或无法完成请求</li>\n<li>5XX服务器错误，服务器在处理请求的过程中发生了错误</li>\n</ul>\n<p>常见状态码：</p>\n<ul>\n<li><strong>200 OK</strong>， 一切正常，对GET和POST请求的应答文档跟在后面</li>\n<li>301 Moved Permanently，客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</li>\n<li>302 Found，类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。</li>\n<li>304 Not Modified，客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</li>\n<li>307 Temporary Redirect，和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是 POST，即使它实际上只能在POST请求的应答是303时才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清楚地区分几个状态代码： 当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只能跟随对GET请求的重定向。</li>\n<li><strong>400 Bad Request</strong>，请求出现语法错误。</li>\n<li>401 Unauthorized，客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的Authorization头后再次发出请求</li>\n<li><strong>403 Forbidden</strong>， 资源不可用。</li>\n<li><strong>404 Not Found</strong>，无法找到指定位置的资源</li>\n<li>410 Gone， 所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用</li>\n<li><strong>500 Internal Server Error</strong>，服务器遇到了意料不到的情况，不能完成客户的请求</li>\n<li>501 Not Implemented，服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求</li>\n<li><strong>503 Service Unavailable</strong>  ，服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个Retry-After头</li>\n</ul>\n<h2 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h2><p><code>Content-Type: text/html; charset=UTF-8</code></p>\n<p>实体首部字段，表示实体主体的媒体类型。</p>\n<p>字段值采用type/subtype形式赋值。</p>\n<p>对照表链接：<a href=\"https://www.w3cschool.cn/http/ahkmgfmz.html\" target=\"_blank\" rel=\"noopener\">https://www.w3cschool.cn/http/ahkmgfmz.html</a></p>\n<hr>\n<p><a href=\"https://www.w3cschool.cn/http/\" target=\"_blank\" rel=\"noopener\">W3C的教程</a>的学习笔记，过两天再啃一下MDN和《图解HTTP》，还要再复习一下计网，很多都忘了…</p>\n<p>emmmW3C有的是错的…使用网络教程需谨慎….</p>\n<p>关于HTTP/2.0以及SPDY等均来自维基百科。</p>\n<p>这里只是重新回忆一下什么是HTTP，还是要看文档！啃《图解HTTP》！复习计网！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>HTTP协议，HyperText Transfer Protocol，超文本传输协议，是因特网上应用最为 广泛的一种网络传输协议。</p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><h3 id=\"HTTP-0-9\"><a href=\"#HTTP-0-9\" class=\"headerlink\" title=\"HTTP/0.9\"></a>HTTP/0.9</h3><p>已过时，只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。</p>\n<p>因为这个版本不支持POST方法，因此客户端无法向服务器传递太多信息。</p>\n<h3 id=\"HTTP-1-0\"><a href=\"#HTTP-1-0\" class=\"headerlink\" title=\"HTTP/1.0\"></a>HTTP/1.0</h3><p>第一个在通讯中指定版本号的版本，至今仍被广泛采用，特别是在代理服务器中。</p>\n<h3 id=\"HTTP-1-1\"><a href=\"#HTTP-1-1\" class=\"headerlink\" title=\"HTTP/1.1\"></a>HTTP/1.1</h3><p>当前版本，默认采用持久连接，并能很好地配合代理服务器工作。</p>\n<p>支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。</p>\n<h3 id=\"SPDY\"><a href=\"#SPDY\" class=\"headerlink\" title=\"SPDY\"></a>SPDY</h3><p><a href=\"https://zh.wikipedia.org/wiki/SPDY\" target=\"_blank\" rel=\"noopener\">SPDY</a> (发音为”speedy”) ，是一个由 <a href=\"https://zh.wikipedia.org/wiki/Google\" target=\"_blank\" rel=\"noopener\">Google</a> 主导的研究项目发明的HTTP替代协议。SPDY一开始主要关注降低延迟，采用了TCP通道，但是使用了不同的协议来达到此目的。</p>\n<h3 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP/2.0\"></a>HTTP/2.0</h3><p>简称为<strong>h2</strong>（基于TLS/1.2或以上版本的加密连接）或<strong>h2c</strong>（非加密连接）。</p>\n<h3 id=\"协议之间的比较\"><a href=\"#协议之间的比较\" class=\"headerlink\" title=\"协议之间的比较\"></a>协议之间的比较</h3><p><strong>HTTP/1.1相较于HTTP/1.0的主要区别</strong></p>\n<ul>\n<li>缓存处理</li>\n<li>带宽优化及网络连接的使用</li>\n<li>错误通知的管理</li>\n<li>消息在网络中的发送</li>\n<li>互联网地址的维护</li>\n<li>安全性及完整性</li>\n</ul>\n<p><strong>HTTP/2与HTTP/1.1比较</strong></p>\n<p>HTTP/2 相比 HTTP/1.1 的修改并不会破坏现有程序的工作，但是新的程序可以藉由新特性得到更好的速度。</p>\n<p>HTTP/2 保留了 HTTP/1.1 的大部分语义，例如<a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener\">请求方法</a>、<a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E7%8A%B6%E6%80%81%E7%A0%81\" target=\"_blank\" rel=\"noopener\">状态码</a>乃至<a href=\"https://zh.wikipedia.org/wiki/URI\" target=\"_blank\" rel=\"noopener\">URI</a>和绝大多数<a href=\"https://zh.wikipedia.org/w/index.php?title=HTTP%E5%A4%B4%E9%83%A8&amp;action=edit&amp;redlink=1\" target=\"_blank\" rel=\"noopener\">HTTP头部</a>字段一致。</p>\n<p>但是 HTTP/2 采用了新的方法来编码、传输客户端/服务器间的数据。</p>\n<p><strong>HTTP/1.1与SPDY的区别</strong></p>\n<p>其与HTTP/1.1相比，SPDY主要的改变有：</p>\n<ul>\n<li>实现无需先入先出的<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8\" target=\"_blank\" rel=\"noopener\">多路复用</a></li>\n<li>为简化客户端和服务器开发的消息—帧机制</li>\n<li>强制性压缩（包括HTTP头部）</li>\n<li>优先级排序</li>\n<li>双向通讯</li>\n</ul>\n<p><strong>HTTP/2与SPDY的比较</strong></p>\n<p>HTTP/2的开发基于SPDY进行跃进式改进。在诸多修改中，最显著的改进在于，HTTP/2使用了一份经过定制的压缩算法，基于<a href=\"https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81\" target=\"_blank\" rel=\"noopener\">霍夫曼编码</a>，以此替代了SPDY的动态流压缩算法，以避免对协议的Oracle攻击——这一类攻击以<a href=\"https://zh.wikipedia.org/wiki/CRIME\" target=\"_blank\" rel=\"noopener\">CRIME</a>为代表。此外，HTTP/2禁用了诸多加密套件，以保证基于TLS的连接的前向安全。</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>基于TCP/IP通信协议传递数据。</p>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>HTTP协议工作在客户端-服务端架构（C/S）上，浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</p>\n<p>Web服务器有Apache服务器、IIS（Internet Informatica Services）服务器等。</p>\n<p>Web服务器根据接收到的请求，向客户端发送响应信息。</p>\n<p>HTTP默认端口号为80，我们也可以改为8080或者其他端口。</p>\n<p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）定位互联网上的资源。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>HTTP是：</p>\n<ul>\n<li><strong>无连接的</strong>：每次连接只处理一个请求。服务器处理完客户的请求并受到客户的应答后就断开连接。采用这种方式可以节省传输时间。</li>\n<li><strong>媒体独立的</strong>：只要客户端和服务端都知道如何处理数据内容，任何类型都可以通过HTTP发送。客户端和服务器指定合适的MIME-tyoe内容类型。</li>\n<li><strong>无状态的</strong>：协议对于事务处理没有记忆能力。HTTP协议自身不对请求和响应之间的通信状态进行保存。<ul>\n<li><u>这是为了更快地处理大量事务，确保协议的可伸缩性而特意设计的</u>。但这也导致业务处理变得棘手的情况增多，比如要保持登录状态，因为HTTP无状态，因此需要额外保存用户状态。</li>\n<li>HTTP/1.1虽然也是无状态协议，但是为了实现比如保持状态的功能，引入了Cookie技术，这让管理状态变得简单。</li>\n<li>Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。</li>\n</ul>\n</li>\n</ul>\n<p>HTTP协议通信流程：</p>\n<p>Web浏览器&lt;=HTTP协议=&gt;HTTP服务器&lt;=&gt;CGI（通用网关接口）应用程序&lt;=&gt;数据库</p>\n<p>其中CGI：</p>\n<p>是Web 服务器运行时外部程序的规范,按CGI 编写的程序可以扩展服务器功能。CGI 应用程序能与浏览器进行交互,还可通过数据库API 与数据库服务器等外部数据源进行通信,从数据库服务器中获取数据。格式化为HTML文档后，发送给浏览器，也可以将从浏览器获得的数据放到数据库中。</p>\n<p><img src=\"https://7n.w3cschool.cn/attachments/image/20160225/1456372014816657.gif\" alt=\"HTTP协议通信流程\"></p>\n<h2 id=\"HTTP报文\"><a href=\"#HTTP报文\" class=\"headerlink\" title=\"HTTP报文\"></a>HTTP报文</h2><p>用于HTTP协议交互的信息称为HTTP报文。请求端(客户端)的HTTP报文称为请求报文，响应端（服务器端）的叫响应报文．</p>\n<p>HTTP报文本身是由多行（用CR+LF作为换行符）数据构成的字符串文本。</p>\n<p>HTTP报文大致可分为报文首部和报文主体，两者由最初出现的空行（CR+LF）来划分。</p>\n<p>通常并不一定要有报文主体。</p>\n<p><strong>报文首部</strong></p>\n<p>服务器端或客户端需处理的请求或响应的内容及内容</p>\n<p><strong>请求报文</strong>的报文首部由请求行、请求首部字段、通用首部字段、实体首部字段、其他组成</p>\n<p><strong>响应报文</strong>的报文首部由状态行、响应首部字段、通用首部字段、实体首部字段、其他组成</p>\n<p><strong>CR+LF</strong></p>\n<p>CR，Carriage Return，回车符，16进制0x0d</p>\n<p>LF，Line Feed，换行符，16进制0x0a</p>\n<p><strong>报文主体</strong></p>\n<p>应被发送的数据</p>\n<p><img src=\"http://ocs628urt.bkt.clouddn.com/http%E6%8A%A5%E6%96%87.png\" alt=\"图片来源于网络\"></p>\n<h2 id=\"常用请求首部信息\"><a href=\"#常用请求首部信息\" class=\"headerlink\" title=\"常用请求首部信息\"></a>常用请求首部信息</h2><p>（参考自红宝书）</p>\n<p>虽然不同浏览器实际发送的头部信息会有所不同，但下边这些基本上是所有浏览器都会发送的：</p>\n<ul>\n<li>Accept：浏览器能够处理的内容类型</li>\n<li>Accept-Charset：浏览器能够显示的字符集</li>\n<li>Accept-Encoding：浏览器能够处理的压缩编码</li>\n<li>Accept-Language：浏览器当前设置的语言</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cookie：当前页面设置的任何Cookie</li>\n<li>Host：发出请求的页面所在的域</li>\n<li>Referer：发出请求的页面的URI。注意HTTP规范将这个字段拼写错了（正确拼法为Referrer），但为了保证与规范一致，也只能将错就错了。</li>\n<li>User-Agent：浏览器的代理用户字段。</li>\n</ul>\n<p>注意，这些字段名是一个字母都不应有区别的，一旦有区别，那它就不是首部字段。</p>\n<h2 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h2><p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p>\n<p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</p>\n<p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n<p><code>GET</code></p>\n<p>GET方法请求请求指定的页面信息. 使用GET的请求应该只被用于获取数据.</p>\n<p><code>HEAD</code></p>\n<p>HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体.</p>\n<p><code>POST</code></p>\n<p>POST方法用于向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</p>\n<p><code>PUT</code></p>\n<p>从客户端向服务器传送的数据取代指定的文档的内容。</p>\n<p><code>DELETE</code></p>\n<p>DELETE方法删除指定的资源。</p>\n<p><code>CONNECT</code></p>\n<p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p>\n<p><code>OPTIONS</code></p>\n<p>允许客户端查看服务器的性能。</p>\n<p><code>TRACE</code></p>\n<p>回显服务器收到的请求，主要用于测试或诊断。</p>\n<p><code>PATCH</code></p>\n<p>PATCH方法用于对资源进行部分修改。（PUT为对资源进行整体覆盖）</p>\n<h2 id=\"HTTP状态码\"><a href=\"#HTTP状态码\" class=\"headerlink\" title=\"HTTP状态码\"></a>HTTP状态码</h2><ul>\n<li>1XX信息，服务器收到请求，需要请求者继续执行操作</li>\n<li>2XX成功，操作被成功接收并处理</li>\n<li>3XX重定向，需要进一步的操作以完成请求</li>\n<li>4XX客户端错误，请求包含语法错误或无法完成请求</li>\n<li>5XX服务器错误，服务器在处理请求的过程中发生了错误</li>\n</ul>\n<p>常见状态码：</p>\n<ul>\n<li><strong>200 OK</strong>， 一切正常，对GET和POST请求的应答文档跟在后面</li>\n<li>301 Moved Permanently，客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</li>\n<li>302 Found，类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。</li>\n<li>304 Not Modified，客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</li>\n<li>307 Temporary Redirect，和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是 POST，即使它实际上只能在POST请求的应答是303时才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清楚地区分几个状态代码： 当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只能跟随对GET请求的重定向。</li>\n<li><strong>400 Bad Request</strong>，请求出现语法错误。</li>\n<li>401 Unauthorized，客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的Authorization头后再次发出请求</li>\n<li><strong>403 Forbidden</strong>， 资源不可用。</li>\n<li><strong>404 Not Found</strong>，无法找到指定位置的资源</li>\n<li>410 Gone， 所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用</li>\n<li><strong>500 Internal Server Error</strong>，服务器遇到了意料不到的情况，不能完成客户的请求</li>\n<li>501 Not Implemented，服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求</li>\n<li><strong>503 Service Unavailable</strong>  ，服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个Retry-After头</li>\n</ul>\n<h2 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h2><p><code>Content-Type: text/html; charset=UTF-8</code></p>\n<p>实体首部字段，表示实体主体的媒体类型。</p>\n<p>字段值采用type/subtype形式赋值。</p>\n<p>对照表链接：<a href=\"https://www.w3cschool.cn/http/ahkmgfmz.html\" target=\"_blank\" rel=\"noopener\">https://www.w3cschool.cn/http/ahkmgfmz.html</a></p>\n<hr>\n<p><a href=\"https://www.w3cschool.cn/http/\" target=\"_blank\" rel=\"noopener\">W3C的教程</a>的学习笔记，过两天再啃一下MDN和《图解HTTP》，还要再复习一下计网，很多都忘了…</p>\n<p>emmmW3C有的是错的…使用网络教程需谨慎….</p>\n<p>关于HTTP/2.0以及SPDY等均来自维基百科。</p>\n<p>这里只是重新回忆一下什么是HTTP，还是要看文档！啃《图解HTTP》！复习计网！</p>\n"},{"title":"JavaScript原型链:prototype与__proto__","toc":false,"date":"2018-09-04T03:16:54.000Z","_content":"\n\n\n主要看了[这一篇](https://www.w3cschool.cn/javascript/javascript-5isn2lax.html)，讲解的很清晰，最主要的一点为：\n\n\n\n若：\n\n```js\nvar Person = function () { };\nvar p = new Person();\n```\n\n则：\n\n```js\np.__proto__ = Person.prototype;\n```\n\n当调用`p.xxx()`时，首先在`p`中找`xxx`这个属性，没有的话从`p`的`__proto__`(即`Person`的`prototype`)中寻找，如果没有，则继续向上寻找（`p.__proto__.__proto__`即`Person.prototype.__proto__`, ...）。\n\n\n\n\n\n例如下面这个例子：\n\n```js\nvar Person = function() {\n    Person.prototype.Say = function () {\n        alert(\"Person say\");\n    }\n}\n\nvar Programmer = function() {}\nProgrammer.prototype = new Person();\nvar p = new Programmer();\n```\n\n我们可以得出：\n\n`p.__proto__ = Programmer.prototype`\n\n`p.__proto__.__proto__ = Programmer.prototype.__proto__ = Person.prototype`\n\n所以在调用`p.Say()`方法时，现在`p`中寻找这个属性，如果没有就在`p.__proto__`中寻找，然后一步一步往上，最后在`Person.prototype`找到这个方法。\n\n\n\n","source":"_posts/JavaScript原型链-prototype与-proto.md","raw":"---\ntitle: 'JavaScript原型链:prototype与__proto__'\ntoc: false\ndate: 2018-09-04 11:16:54\ncategories:\n- Web\ntags:\n- JavaScript\n- prototype\n---\n\n\n\n主要看了[这一篇](https://www.w3cschool.cn/javascript/javascript-5isn2lax.html)，讲解的很清晰，最主要的一点为：\n\n\n\n若：\n\n```js\nvar Person = function () { };\nvar p = new Person();\n```\n\n则：\n\n```js\np.__proto__ = Person.prototype;\n```\n\n当调用`p.xxx()`时，首先在`p`中找`xxx`这个属性，没有的话从`p`的`__proto__`(即`Person`的`prototype`)中寻找，如果没有，则继续向上寻找（`p.__proto__.__proto__`即`Person.prototype.__proto__`, ...）。\n\n\n\n\n\n例如下面这个例子：\n\n```js\nvar Person = function() {\n    Person.prototype.Say = function () {\n        alert(\"Person say\");\n    }\n}\n\nvar Programmer = function() {}\nProgrammer.prototype = new Person();\nvar p = new Programmer();\n```\n\n我们可以得出：\n\n`p.__proto__ = Programmer.prototype`\n\n`p.__proto__.__proto__ = Programmer.prototype.__proto__ = Person.prototype`\n\n所以在调用`p.Say()`方法时，现在`p`中寻找这个属性，如果没有就在`p.__proto__`中寻找，然后一步一步往上，最后在`Person.prototype`找到这个方法。\n\n\n\n","slug":"JavaScript原型链-prototype与-proto","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4azm0006cragc00wrhje","content":"<p>主要看了<a href=\"https://www.w3cschool.cn/javascript/javascript-5isn2lax.html\" target=\"_blank\" rel=\"noopener\">这一篇</a>，讲解的很清晰，最主要的一点为：</p>\n<p>若：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br></pre></td></tr></table></figure>\n<p>则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.__proto__ = Person.prototype;</span><br></pre></td></tr></table></figure>\n<p>当调用<code>p.xxx()</code>时，首先在<code>p</code>中找<code>xxx</code>这个属性，没有的话从<code>p</code>的<code>__proto__</code>(即<code>Person</code>的<code>prototype</code>)中寻找，如果没有，则继续向上寻找（<code>p.__proto__.__proto__</code>即<code>Person.prototype.__proto__</code>, …）。</p>\n<p>例如下面这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Person.prototype.Say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Person say\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Programmer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Programmer.prototype = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Programmer();</span><br></pre></td></tr></table></figure>\n<p>我们可以得出：</p>\n<p><code>p.__proto__ = Programmer.prototype</code></p>\n<p><code>p.__proto__.__proto__ = Programmer.prototype.__proto__ = Person.prototype</code></p>\n<p>所以在调用<code>p.Say()</code>方法时，现在<code>p</code>中寻找这个属性，如果没有就在<code>p.__proto__</code>中寻找，然后一步一步往上，最后在<code>Person.prototype</code>找到这个方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>主要看了<a href=\"https://www.w3cschool.cn/javascript/javascript-5isn2lax.html\" target=\"_blank\" rel=\"noopener\">这一篇</a>，讲解的很清晰，最主要的一点为：</p>\n<p>若：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br></pre></td></tr></table></figure>\n<p>则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.__proto__ = Person.prototype;</span><br></pre></td></tr></table></figure>\n<p>当调用<code>p.xxx()</code>时，首先在<code>p</code>中找<code>xxx</code>这个属性，没有的话从<code>p</code>的<code>__proto__</code>(即<code>Person</code>的<code>prototype</code>)中寻找，如果没有，则继续向上寻找（<code>p.__proto__.__proto__</code>即<code>Person.prototype.__proto__</code>, …）。</p>\n<p>例如下面这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Person.prototype.Say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Person say\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Programmer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Programmer.prototype = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Programmer();</span><br></pre></td></tr></table></figure>\n<p>我们可以得出：</p>\n<p><code>p.__proto__ = Programmer.prototype</code></p>\n<p><code>p.__proto__.__proto__ = Programmer.prototype.__proto__ = Person.prototype</code></p>\n<p>所以在调用<code>p.Say()</code>方法时，现在<code>p</code>中寻找这个属性，如果没有就在<code>p.__proto__</code>中寻找，然后一步一步往上，最后在<code>Person.prototype</code>找到这个方法。</p>\n"},{"title":"JavaScript学习记录一","toc":true,"date":"2018-09-11T10:26:52.000Z","_content":"\n——《JavaScript高级程序设计（第2版）》学习笔记\n\n要多查阅[MDN Web 文档](https://developer.mozilla.org/zh-CN/docs/Web)\n\n------\n\n# 简介\n\nJavaScript是一种专门为网页交互而设计的脚本语言，由以下三个不同的部分组成：\n\n- ECMAScript（发音 ek-ma-script，伪语言），由ECMA-262定义，提供核心语言功能；\n- 文档对象模型（DOM，Document Object Model），提供访问和操作网页内容的方法和接口；\n- 浏览器对象模型（BOM，Browser Object Model），提供与浏览器交互的方法和接口；\n\n在HTML中使用JavaScript：\n\n- 现代Web应用一般都把全部JavaScript引用放在`<body>`元素中，放在页面内容的后边来最后加载JavaScript代码（虽然defer属性可以实现同样的效果，但是不是所有浏览器都支持这个属性，因此一般不使用这个属性）；\n\n# 基本概念\n\n## 语法\n\n1. 区分大小写\n2. <b>标识符</b>，指变量、函数、属性的名字，或函数的参数，需要满足：\n   1. 第一个字符必须是字母、下划线(_)或者一个美元符号($)\n   2. 其他字符可以是数字、字母、下划线、美元符号\n   3. 按照惯例，采用**驼峰**大小写格式，即第一个字母小写，剩下的每个有意义的单词的首字母大写\n   4. 不能把**关键字、保留字、true、false、null**用作标识符\n3. 注释，跟C++相同\n4. 以分号结尾，可以不加分号，但是不推荐\n\n## 关键字和保留字\n\n- 关键字：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with\n- 保留字： abstract、boolean、byte、char、class、const、debugger、double、enum、export、extends、final、float、goto、implements、import、int、interface、long、native、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile\n\n## 变量\n\n- ECMAScript的变量是松散类型（弱类型）的，无需明确的类型声明，可以用来保存任何类型的数据。\n- 未初始化的变量值为`undefined`\n- 使用var操作符定义的变量将成为定义该变量的作用域中举局部变量\n- 不使用var操作符定义的变量是全局变量（不推荐）\n\n## 数据类型\n\nECMAScript有五种简单（基本/原始）数据类型：\n\n- Undefined\n- Null\n- Boolean\n- Number\n- String\n\n和一种复杂数据类型：\n\n- Object\n\n因为ECMAScript数据类型具有动态性，因此没有再定义其他数据类型的必要。\n\n### typeof操作符\n\n因为typeof是操作符，因此括号不是必需的，也就是可以`typeof 126`也可以`typeof(126)`。\n\n对一个值使用typeof操作符可能返回下列某个字符串：\n\n- undefined\n- boolean\n- string\n- number\n- object\n- function\n\n### Undefined类型\n\n只有一个值——undefined。\n\n虽然对声明未初始化的变量（假设为a）和未声明的变量（假设为b）使用typeof均返回undefined，但是对他们使用alert会得到不同的结果：\n\n对于a : 会弹出undefined\n\n对于b : 会返回错误Uncaught ReferenceError: b is not defined\n\n因此建议在声明时就进行初始化，以此来分别a和b。\n\n### Null类型\n\n只有一个值——null。\n\n从逻辑角度来看，null值表示一个空对象指针，因此：\n\n```javascript\nvar a = null;\nalert(typeof a); // \"object\"\n```\n\n因为undefined派生自null，因此ECMA-262规定`undefined == null`为true。\n\n只要意在保存对象的变量还没有真正的保存对象，都应该让它保存为null。\n\n### Boolean类型\n\n只有两个值——true和false。\n\n转换为Boolean的转换规则：\n\n| 数据类型  | 转换为true的值          | 转换为false的值 |\n| --------- | ----------------------- | --------------- |\n| Boolean   | true                    | false           |\n| Stirng    | 任何非空字符串          | “”（空字符串）  |\n| Number    | 任何非0值（包括无穷大） | 0和NaN          |\n| Object    | 任何对象                | null            |\n| Undefined | n/a（不适用）           | undefined       |\n\n### Number类型\n\n使用IEEE754格式表示整数和浮点数。\n\n- 八进制数以`0`开头如`070`表示八进制的56\n- 十六进制数以`0x`开头如`0xA`或`0xa`表示十六进制的10\n- 浮点数必须包含一个小数点，小数点前若为0则可以省略，但不推荐这么做\n- 若小数点后没有跟任何数字如`1.`或本身就是一个整数如`1.0`则会被保存为整数（因为保存浮点数值需要的内存空间是整数值的两倍）\n- 可以用科学计数法表示浮点数：例如使用`1.26e-9`表示1.26乘以10的-9次方\n- 浮点数最高精度为17位小数，但计算精度不如整数，例如0.1加0.2的计算结果不为0.3\n- Number.MAX_VALUE = 1.7976931348623157e+308, 超出值转换为Infinity\n- Number.MIN_VALUE = 5e-324， 超出值转换为-Infinity\n- 可以使用isFinite()函数判断一个数是否有穷\n- NaN, Not a Number，非数值，如任何数值除以0都会得到NaN\n- NaN与任何值都不相等，`NaN == NaN`返回false，因此可以用函数isNaN()判断是否为NaN，true和false可以转换为数值，因此都不是NaN，字符串无法转换为数值，因此是NaN\n- Number()可以将任何数据类型的非数值转换为数值，parseInt()和parseFloat()用于把字符串转换为数值\n\nNumber()转换规则：\n\n- true和false分别转换为1和0\n- 数值只是简单的传入传出\n- null返回0\n- undefined返回NaN\n- 字符串遵循以下规则：\n  - 若字符串只包含数字，则转换为十进制数值，忽略前置0\n  - 若字符串为有效的浮点格式，如“1.1”，不包含数字、小数点、负号以外的字符，则转换为对应的浮点数，忽略前置0\n  - 若字符串为有效的十六进制格式，如“0xf”，除了其他字符外还不可以有负号，转换为相同大小的十进制整数值\n  - 若字符串是空的，则返回0\n  - 其他格式返回NaN\n\n对于parseInt()和parseFloat()：\n\n- 关于前置0，我在Chrome里试了一下：\n  - parseInt(\"070\")返回的是70，并不会看做八进制数\n  - parseInt(070)返回的是56，看做八进制数\n- 有效的格式如有效的浮点格式指浮点数处于字符串开头，若字符串开头既不是数字也不是负号则不是有效格式，若以小数点开头，小数点跟有数字则是有效的浮点格式，小数点后跟的不是数字则不是有效的格式\n- 可以指定基数（进制）为第二个参数\n\n### String类型\n\n由零或多个16位Unicode字符组成的字符序列，即字符串。\n\n- 字符串用双引号或单引号表示都是有效且没有区别的，但左右引号必须匹配。\n- 字符串a的长度可以用它的属性`length`即`a.length`来获得。\n- JavaScript字符以UTF-16存储，即每个字符要么存储为2个字节，要么存储为4个字节（每个字节8位）；二String的length属性返回的是字符串中两个字节字符的数目，也就是说对于一个4个字节的字符，length会把它当做两个字符。\n- 字符串不能修改，只能销毁再填充。\n- 数的toString()可以传入基数（进制）为参数。\n- null和undefined没有toString()方法，但可以使用String()方法。\n\n字符字面量（转义序列）：\n\n| 字面量  | 含义                                                         |\n| ------- | ------------------------------------------------------------ |\n| \\n      | 换行                                                         |\n| \\t      | 制表                                                         |\n| \\b      | 空格                                                         |\n| \\r      | 回车                                                         |\n| \\f      | 进纸                                                         |\n| \\\\\\     | 斜杠                                                         |\n| \\\\'     | 单引号                                                       |\n| \\\\\"     | 双引号                                                       |\n| \\\\xnn   | 以16进制代码nn表示的一个字符（其中n为0-F），例如\\\\x41表示“A”。 |\n| \\\\unnnn | 以16进制代码nnnn表示的一个Unicode字符（其中n为0-F），\\\\u03a3表示希腊字符∑ |\n\n### Object类型\n\n对象是一组数据和功能的集合。具体的后边的章节会学到，这里就不展开了。\n\n## 操作符\n\n### 一元操作符\n\n- ++、--对整数、浮点数、字符串、布尔值、对象都适用\n  - 对非数值，先使用Number()将其转换为数值再进行加减1\n- +、- 同样对整数、浮点数、字符串、布尔值、对象都适用，规则和++、--的差不多\n\n### 位操作符\n\n先将64位的数值转换为32位数值，然后进行位操作，最后再转换为64位数值：\n\n- 对undefined、null、NaN和Infinity应用位操作这两者会被当成0来处理\n- 对非数值，先使用Number()将其转换为数值再应用位操作\n- 按位非(NOT) : `~`，返回反码，等于原值的负数减1\n- 按位与(AND) : `&`\n- 按位或(OR) : `|`\n- 按位异或(XOR) : `^`，异或指操作的两个位均为1或均为0则返回0，一个是1一个是0则返回1\n- 左移 : `<<`，左移不会影响符号位，左移出现的空位用0填充\n- 有符号右移 : `>>`，用符号位的值来填充右移出现的空位\n- 无符号右移 : `>>>`，所有32位都向右移动（包括符号位），并用0填充右移出现的空位\n\n### 布尔操作符\n\n- 逻辑非：`!`，先将操作数转换为布尔值，然后求反\n  - 对一个对象进行逻辑非操作，返回false\n  - 对一个空字符串进行逻辑非操作，返回true\n  - 对非空字符串进行逻辑非操作，返回false\n  - 对0、null、NaN、undefined进行逻辑非操作，返回true\n  - 对任意非0数值包括Infinity进行逻辑非操作，返回false\n  - 同时使用两个逻辑非操作符`!!`，实际上模拟了Boolean()转型函数的行为，0、空字符串、null、NaN、undefined返回false\n- 逻辑与：`&&`，逻辑与操作不一定返回布尔值\n  - 如果有一个操作数是null，则返回null\n  - 如果有一个操作数是NaN，则返回NaN\n  - 如果有一个操作数是undefined，则返回undefined\n  - 如果第一个操作数是对象或者两个都是对象，返回第二个操作数\n  - 如果第二个操作数是对象，则返回第一个操作数\n  - 如果第一个操作数为false，则返回false\n- 逻辑或：`||`\n  - 如果两个操作数都是null，则返回null\n  - 如果两个操作数都是NaN，则返回NaN\n  - 如果两个操作数都是undefined，则返回undefined\n  - 如果第一个操作数是对象或者两个都是对象，返回第一个操作数\n  - 如果第一个操作数求值结果为false，则返回第二个操作数\n  - 如果第一个操作数求值结果为true，则返回第一个操作数\n\n### 乘性操作符\n\n若操作数不是数值，则后台会先使用Number()将其转换为数值再进行计算\n\n- 乘法：`*`\n  - 若结果超出ECMAScript数值的表示范围，则返回Infinity或-Infinity\n  - 若一个操作数为NaN，则结果为NaN\n  - Infinity * 0 等于 NaN\n  - Infinity与非0值相乘，结果还是Infinity或-Infinity\n- 除法：`/`\n  - 若结果超出ECMAScript数值的表示范围，则返回Infinity或-Infinity\n  - 若一个操作数为NaN，则结果为NaN\n  - Infinity / Infinity 等于 NaN\n  - Infinity被任意数值除，结果仍为Infinity\n  - 0 / 0 等于 NaN\n  - 非零数（包括Infinity）除以0结果为Infinity或-Infinity\n- 求模：`%`\n  - Infinity % 有限值 的结果为NaN\n  - 任意值 % 0 的结果为NaN\n  - Infinity % Infinity 的结果为NaN\n  - 有限大值a % Infinity 的结果为a\n  - 0 % 任意值 的结果为0\n\n### 加性操作符\n\n- 加法：`+`\n  - 如果有一个操作符为NaN，则结果为NaN\n  - Infinity加-Infinity，结果为NaN\n  - +0加+0为+0，-0加-0结果为-0\n  - +0加-0结果为+0\n  - 如果两个操作数都为字符串，则拼接起来\n  - 若有一个操作数不是数值，则将两个都转换（toString()）为字符串，然后两个字符串拼接起来\n- 减法：`-`\n  - 如果有一个操作符为NaN，则结果为NaN\n  - Infinity减Infinity或者-Infinity减-Infinity结果为NaN\n  - +0减+0为+0，+0减-0为-0，-0减-0为+0\n  - 如果有操作数为字符串、布尔值、null、undefined，则先调用Number()函数将其转换为数值，若有一个转换后为NaN，则结果为NaN\n  - 如果有操作数为对象，则调用其valueOf()方法获取其数值，若值为NaN，则结果为NaN，若没有valueOf()方法，则调用其toString()方法并将得到的字符串转化为数值\n\n### 关系操作符\n\n`<`、`>`、`<=`、`>=`\n\n- 若两个操作数都是数值则进行数值比较\n- 若两个操作数都是字符串，则比较两个字符串的字符编码值\n- 如果一个是数值，则将另一个操作数转换为一个数值，然后执行数值比较\n- 如果一个操作数是对象，则先用valueOf()换取数值进行比较，若对象没有valueOf()方法，则调用toString()，然后转换为数值进行比较\n- 如果一个操作数是布尔值，则将其转换为数值然后进行比较\n- 如果一个操作数是NaN，则返回false\n\n### 相等操作符\n\n#### 相等和不相等\n\n`==`、`!=`，先转换再比较\n\n- 如果一个操作数为布尔值，则将其转换为数值进行比较\n- 如果一个操作数是字符串，一个操作符是数值，则将字符串转换成数值再进行比较\n- 如果一个操作数是对象而另一个不是，则调用对象的valueOf()方法，用得到的数值按照前边的规则进行比较\n- null和undefined是相等的\n- 在比较相等性之前，不能将null和undefined转换成其他任何值\n- NaN和任何值（包括NaN）都不相等\n- 如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则`==`返回true，`!=`返回false\n\n特殊情况结果：\n\n```javascript\nnull == undefined // true\n\"NaN\" == NaN // false\n5 == NaN // fale\nNaN == NaN // false\nNaN != NaN // true\nfalse == 0 // true\ntrue == 1 // true\ntrue == 2 // false\nundefined == 0 // false\nnull == 0 // false\n\"5\" == 5 // true\n```\n\n#### 全等和不全等\n\n`===`、`!==`，仅比较不转换，首先类型相同然后值相同\n\n### 条件操作符\n\n`variable = boolean_expression ? true_value : false_value`\n\n### 赋值操作符\n\n`=`\n\n复合操作符： `*=`,`/=`,`%=`,`+=`,`-=`,`<<=`,`>>=`,`>>>=`\n\n例如复合操作符加等于`+=`：\n\n```javascript\nvar num = 10;\nnum += 5;\n```\n\n相当于：\n\n```javascript\nvar num = 10;\nnum = num + 5;\n```\n\n### 逗号操作符\n\n声明多个变量、一条语句中执行多个操作用逗号隔开；\n\n在赋值时，逗号操作符总会返回表达式中的最后一项：\n\n```javascript\nvar num = (1, 2, 6, 5, 3, 0); // num的值为0\n```\n\n## 语句\n\n### if、while、for语句\n\n即使要执行的只有一句代码也要用`{}`括起来；\n\n关于循环的块作用域后边的章节会有讲解。\n\n### do-while语句\n\n在对条件表达式求值之前，循环体内的代码至少会执行一次，这种后测试语句最常用语循环体内的代码至少要执行一次的情形。\n\n### for-in语句\n\n`for (property in expression) statement`\n\n例如：\n\n```javascript\nfor (var propName in window) {\n  console.log(propName);\n}\n```\n\n### label、break、continue语句\n\nlabel语句的语法为`label: statement`，可以由`break`和`continue`语句引用，常用与和循环语句配合使用。\n\n例子可以看[这里](https://blog.csdn.net/x386277405/article/details/78673757)\n\n### with语句\n\n**由于大量使用with语句会导致性能下降，还会给调试代码造成困难，因此开发大型应用程序时不建议使用with语句。**\n\n`with (expression) statement`，将代码的作用于设置到一个特定的对象中。\n\n例如\n\n```javascript\nvar qs = location.search.substring(1);\nvar hostName = location.hostname;\nvar url = location.href;\n```\n\n等价于\n\n```javascript\nwith (location) {\n  var qs = search.substring(1);\n  var hostName = hostname;\n  var url = href;\n}\n```\n\n### switch语句\n\n- switch语句中可以使用任何数据类型\n- 每个case的值不一定是常量，可以是变量甚至是表达式\n- switch在比较值时使用的是全等操作符，因此不会发生类型转换（例如“10”不等于10）\n\n## 函数\n\n```js\nfunction functionName(arg0, arg1, ..., argN) {\n\tstatements\n}\n```\n\n返回值不是必需的。\n\n关于参数可以看[这篇文章](https://www.cnblogs.com/hanhanhan/p/5765920.html)中的例子来理解。需要注意的是：没有传递值的命名参数自动赋予undefined值，关于引用传递可以看[这里](https://www.cnblogs.com/refe/p/5101744.html)。\n\n因为ECMAScript函数没有签名（因为其参数是由包含零或多个值的数组来表示的），因此不能像传统意义上那样实现重载。但可以通过检查传入函数的参数类型和数量进行不同的操作来模拟重载。","source":"_posts/JavaScript学习记录一.md","raw":"---\ntitle: JavaScript学习记录一\ntoc: true\ndate: 2018-09-11 18:26:52\ncategories:\n- Web\ntags:\n- JavaScript\n\n---\n\n——《JavaScript高级程序设计（第2版）》学习笔记\n\n要多查阅[MDN Web 文档](https://developer.mozilla.org/zh-CN/docs/Web)\n\n------\n\n# 简介\n\nJavaScript是一种专门为网页交互而设计的脚本语言，由以下三个不同的部分组成：\n\n- ECMAScript（发音 ek-ma-script，伪语言），由ECMA-262定义，提供核心语言功能；\n- 文档对象模型（DOM，Document Object Model），提供访问和操作网页内容的方法和接口；\n- 浏览器对象模型（BOM，Browser Object Model），提供与浏览器交互的方法和接口；\n\n在HTML中使用JavaScript：\n\n- 现代Web应用一般都把全部JavaScript引用放在`<body>`元素中，放在页面内容的后边来最后加载JavaScript代码（虽然defer属性可以实现同样的效果，但是不是所有浏览器都支持这个属性，因此一般不使用这个属性）；\n\n# 基本概念\n\n## 语法\n\n1. 区分大小写\n2. <b>标识符</b>，指变量、函数、属性的名字，或函数的参数，需要满足：\n   1. 第一个字符必须是字母、下划线(_)或者一个美元符号($)\n   2. 其他字符可以是数字、字母、下划线、美元符号\n   3. 按照惯例，采用**驼峰**大小写格式，即第一个字母小写，剩下的每个有意义的单词的首字母大写\n   4. 不能把**关键字、保留字、true、false、null**用作标识符\n3. 注释，跟C++相同\n4. 以分号结尾，可以不加分号，但是不推荐\n\n## 关键字和保留字\n\n- 关键字：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with\n- 保留字： abstract、boolean、byte、char、class、const、debugger、double、enum、export、extends、final、float、goto、implements、import、int、interface、long、native、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile\n\n## 变量\n\n- ECMAScript的变量是松散类型（弱类型）的，无需明确的类型声明，可以用来保存任何类型的数据。\n- 未初始化的变量值为`undefined`\n- 使用var操作符定义的变量将成为定义该变量的作用域中举局部变量\n- 不使用var操作符定义的变量是全局变量（不推荐）\n\n## 数据类型\n\nECMAScript有五种简单（基本/原始）数据类型：\n\n- Undefined\n- Null\n- Boolean\n- Number\n- String\n\n和一种复杂数据类型：\n\n- Object\n\n因为ECMAScript数据类型具有动态性，因此没有再定义其他数据类型的必要。\n\n### typeof操作符\n\n因为typeof是操作符，因此括号不是必需的，也就是可以`typeof 126`也可以`typeof(126)`。\n\n对一个值使用typeof操作符可能返回下列某个字符串：\n\n- undefined\n- boolean\n- string\n- number\n- object\n- function\n\n### Undefined类型\n\n只有一个值——undefined。\n\n虽然对声明未初始化的变量（假设为a）和未声明的变量（假设为b）使用typeof均返回undefined，但是对他们使用alert会得到不同的结果：\n\n对于a : 会弹出undefined\n\n对于b : 会返回错误Uncaught ReferenceError: b is not defined\n\n因此建议在声明时就进行初始化，以此来分别a和b。\n\n### Null类型\n\n只有一个值——null。\n\n从逻辑角度来看，null值表示一个空对象指针，因此：\n\n```javascript\nvar a = null;\nalert(typeof a); // \"object\"\n```\n\n因为undefined派生自null，因此ECMA-262规定`undefined == null`为true。\n\n只要意在保存对象的变量还没有真正的保存对象，都应该让它保存为null。\n\n### Boolean类型\n\n只有两个值——true和false。\n\n转换为Boolean的转换规则：\n\n| 数据类型  | 转换为true的值          | 转换为false的值 |\n| --------- | ----------------------- | --------------- |\n| Boolean   | true                    | false           |\n| Stirng    | 任何非空字符串          | “”（空字符串）  |\n| Number    | 任何非0值（包括无穷大） | 0和NaN          |\n| Object    | 任何对象                | null            |\n| Undefined | n/a（不适用）           | undefined       |\n\n### Number类型\n\n使用IEEE754格式表示整数和浮点数。\n\n- 八进制数以`0`开头如`070`表示八进制的56\n- 十六进制数以`0x`开头如`0xA`或`0xa`表示十六进制的10\n- 浮点数必须包含一个小数点，小数点前若为0则可以省略，但不推荐这么做\n- 若小数点后没有跟任何数字如`1.`或本身就是一个整数如`1.0`则会被保存为整数（因为保存浮点数值需要的内存空间是整数值的两倍）\n- 可以用科学计数法表示浮点数：例如使用`1.26e-9`表示1.26乘以10的-9次方\n- 浮点数最高精度为17位小数，但计算精度不如整数，例如0.1加0.2的计算结果不为0.3\n- Number.MAX_VALUE = 1.7976931348623157e+308, 超出值转换为Infinity\n- Number.MIN_VALUE = 5e-324， 超出值转换为-Infinity\n- 可以使用isFinite()函数判断一个数是否有穷\n- NaN, Not a Number，非数值，如任何数值除以0都会得到NaN\n- NaN与任何值都不相等，`NaN == NaN`返回false，因此可以用函数isNaN()判断是否为NaN，true和false可以转换为数值，因此都不是NaN，字符串无法转换为数值，因此是NaN\n- Number()可以将任何数据类型的非数值转换为数值，parseInt()和parseFloat()用于把字符串转换为数值\n\nNumber()转换规则：\n\n- true和false分别转换为1和0\n- 数值只是简单的传入传出\n- null返回0\n- undefined返回NaN\n- 字符串遵循以下规则：\n  - 若字符串只包含数字，则转换为十进制数值，忽略前置0\n  - 若字符串为有效的浮点格式，如“1.1”，不包含数字、小数点、负号以外的字符，则转换为对应的浮点数，忽略前置0\n  - 若字符串为有效的十六进制格式，如“0xf”，除了其他字符外还不可以有负号，转换为相同大小的十进制整数值\n  - 若字符串是空的，则返回0\n  - 其他格式返回NaN\n\n对于parseInt()和parseFloat()：\n\n- 关于前置0，我在Chrome里试了一下：\n  - parseInt(\"070\")返回的是70，并不会看做八进制数\n  - parseInt(070)返回的是56，看做八进制数\n- 有效的格式如有效的浮点格式指浮点数处于字符串开头，若字符串开头既不是数字也不是负号则不是有效格式，若以小数点开头，小数点跟有数字则是有效的浮点格式，小数点后跟的不是数字则不是有效的格式\n- 可以指定基数（进制）为第二个参数\n\n### String类型\n\n由零或多个16位Unicode字符组成的字符序列，即字符串。\n\n- 字符串用双引号或单引号表示都是有效且没有区别的，但左右引号必须匹配。\n- 字符串a的长度可以用它的属性`length`即`a.length`来获得。\n- JavaScript字符以UTF-16存储，即每个字符要么存储为2个字节，要么存储为4个字节（每个字节8位）；二String的length属性返回的是字符串中两个字节字符的数目，也就是说对于一个4个字节的字符，length会把它当做两个字符。\n- 字符串不能修改，只能销毁再填充。\n- 数的toString()可以传入基数（进制）为参数。\n- null和undefined没有toString()方法，但可以使用String()方法。\n\n字符字面量（转义序列）：\n\n| 字面量  | 含义                                                         |\n| ------- | ------------------------------------------------------------ |\n| \\n      | 换行                                                         |\n| \\t      | 制表                                                         |\n| \\b      | 空格                                                         |\n| \\r      | 回车                                                         |\n| \\f      | 进纸                                                         |\n| \\\\\\     | 斜杠                                                         |\n| \\\\'     | 单引号                                                       |\n| \\\\\"     | 双引号                                                       |\n| \\\\xnn   | 以16进制代码nn表示的一个字符（其中n为0-F），例如\\\\x41表示“A”。 |\n| \\\\unnnn | 以16进制代码nnnn表示的一个Unicode字符（其中n为0-F），\\\\u03a3表示希腊字符∑ |\n\n### Object类型\n\n对象是一组数据和功能的集合。具体的后边的章节会学到，这里就不展开了。\n\n## 操作符\n\n### 一元操作符\n\n- ++、--对整数、浮点数、字符串、布尔值、对象都适用\n  - 对非数值，先使用Number()将其转换为数值再进行加减1\n- +、- 同样对整数、浮点数、字符串、布尔值、对象都适用，规则和++、--的差不多\n\n### 位操作符\n\n先将64位的数值转换为32位数值，然后进行位操作，最后再转换为64位数值：\n\n- 对undefined、null、NaN和Infinity应用位操作这两者会被当成0来处理\n- 对非数值，先使用Number()将其转换为数值再应用位操作\n- 按位非(NOT) : `~`，返回反码，等于原值的负数减1\n- 按位与(AND) : `&`\n- 按位或(OR) : `|`\n- 按位异或(XOR) : `^`，异或指操作的两个位均为1或均为0则返回0，一个是1一个是0则返回1\n- 左移 : `<<`，左移不会影响符号位，左移出现的空位用0填充\n- 有符号右移 : `>>`，用符号位的值来填充右移出现的空位\n- 无符号右移 : `>>>`，所有32位都向右移动（包括符号位），并用0填充右移出现的空位\n\n### 布尔操作符\n\n- 逻辑非：`!`，先将操作数转换为布尔值，然后求反\n  - 对一个对象进行逻辑非操作，返回false\n  - 对一个空字符串进行逻辑非操作，返回true\n  - 对非空字符串进行逻辑非操作，返回false\n  - 对0、null、NaN、undefined进行逻辑非操作，返回true\n  - 对任意非0数值包括Infinity进行逻辑非操作，返回false\n  - 同时使用两个逻辑非操作符`!!`，实际上模拟了Boolean()转型函数的行为，0、空字符串、null、NaN、undefined返回false\n- 逻辑与：`&&`，逻辑与操作不一定返回布尔值\n  - 如果有一个操作数是null，则返回null\n  - 如果有一个操作数是NaN，则返回NaN\n  - 如果有一个操作数是undefined，则返回undefined\n  - 如果第一个操作数是对象或者两个都是对象，返回第二个操作数\n  - 如果第二个操作数是对象，则返回第一个操作数\n  - 如果第一个操作数为false，则返回false\n- 逻辑或：`||`\n  - 如果两个操作数都是null，则返回null\n  - 如果两个操作数都是NaN，则返回NaN\n  - 如果两个操作数都是undefined，则返回undefined\n  - 如果第一个操作数是对象或者两个都是对象，返回第一个操作数\n  - 如果第一个操作数求值结果为false，则返回第二个操作数\n  - 如果第一个操作数求值结果为true，则返回第一个操作数\n\n### 乘性操作符\n\n若操作数不是数值，则后台会先使用Number()将其转换为数值再进行计算\n\n- 乘法：`*`\n  - 若结果超出ECMAScript数值的表示范围，则返回Infinity或-Infinity\n  - 若一个操作数为NaN，则结果为NaN\n  - Infinity * 0 等于 NaN\n  - Infinity与非0值相乘，结果还是Infinity或-Infinity\n- 除法：`/`\n  - 若结果超出ECMAScript数值的表示范围，则返回Infinity或-Infinity\n  - 若一个操作数为NaN，则结果为NaN\n  - Infinity / Infinity 等于 NaN\n  - Infinity被任意数值除，结果仍为Infinity\n  - 0 / 0 等于 NaN\n  - 非零数（包括Infinity）除以0结果为Infinity或-Infinity\n- 求模：`%`\n  - Infinity % 有限值 的结果为NaN\n  - 任意值 % 0 的结果为NaN\n  - Infinity % Infinity 的结果为NaN\n  - 有限大值a % Infinity 的结果为a\n  - 0 % 任意值 的结果为0\n\n### 加性操作符\n\n- 加法：`+`\n  - 如果有一个操作符为NaN，则结果为NaN\n  - Infinity加-Infinity，结果为NaN\n  - +0加+0为+0，-0加-0结果为-0\n  - +0加-0结果为+0\n  - 如果两个操作数都为字符串，则拼接起来\n  - 若有一个操作数不是数值，则将两个都转换（toString()）为字符串，然后两个字符串拼接起来\n- 减法：`-`\n  - 如果有一个操作符为NaN，则结果为NaN\n  - Infinity减Infinity或者-Infinity减-Infinity结果为NaN\n  - +0减+0为+0，+0减-0为-0，-0减-0为+0\n  - 如果有操作数为字符串、布尔值、null、undefined，则先调用Number()函数将其转换为数值，若有一个转换后为NaN，则结果为NaN\n  - 如果有操作数为对象，则调用其valueOf()方法获取其数值，若值为NaN，则结果为NaN，若没有valueOf()方法，则调用其toString()方法并将得到的字符串转化为数值\n\n### 关系操作符\n\n`<`、`>`、`<=`、`>=`\n\n- 若两个操作数都是数值则进行数值比较\n- 若两个操作数都是字符串，则比较两个字符串的字符编码值\n- 如果一个是数值，则将另一个操作数转换为一个数值，然后执行数值比较\n- 如果一个操作数是对象，则先用valueOf()换取数值进行比较，若对象没有valueOf()方法，则调用toString()，然后转换为数值进行比较\n- 如果一个操作数是布尔值，则将其转换为数值然后进行比较\n- 如果一个操作数是NaN，则返回false\n\n### 相等操作符\n\n#### 相等和不相等\n\n`==`、`!=`，先转换再比较\n\n- 如果一个操作数为布尔值，则将其转换为数值进行比较\n- 如果一个操作数是字符串，一个操作符是数值，则将字符串转换成数值再进行比较\n- 如果一个操作数是对象而另一个不是，则调用对象的valueOf()方法，用得到的数值按照前边的规则进行比较\n- null和undefined是相等的\n- 在比较相等性之前，不能将null和undefined转换成其他任何值\n- NaN和任何值（包括NaN）都不相等\n- 如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则`==`返回true，`!=`返回false\n\n特殊情况结果：\n\n```javascript\nnull == undefined // true\n\"NaN\" == NaN // false\n5 == NaN // fale\nNaN == NaN // false\nNaN != NaN // true\nfalse == 0 // true\ntrue == 1 // true\ntrue == 2 // false\nundefined == 0 // false\nnull == 0 // false\n\"5\" == 5 // true\n```\n\n#### 全等和不全等\n\n`===`、`!==`，仅比较不转换，首先类型相同然后值相同\n\n### 条件操作符\n\n`variable = boolean_expression ? true_value : false_value`\n\n### 赋值操作符\n\n`=`\n\n复合操作符： `*=`,`/=`,`%=`,`+=`,`-=`,`<<=`,`>>=`,`>>>=`\n\n例如复合操作符加等于`+=`：\n\n```javascript\nvar num = 10;\nnum += 5;\n```\n\n相当于：\n\n```javascript\nvar num = 10;\nnum = num + 5;\n```\n\n### 逗号操作符\n\n声明多个变量、一条语句中执行多个操作用逗号隔开；\n\n在赋值时，逗号操作符总会返回表达式中的最后一项：\n\n```javascript\nvar num = (1, 2, 6, 5, 3, 0); // num的值为0\n```\n\n## 语句\n\n### if、while、for语句\n\n即使要执行的只有一句代码也要用`{}`括起来；\n\n关于循环的块作用域后边的章节会有讲解。\n\n### do-while语句\n\n在对条件表达式求值之前，循环体内的代码至少会执行一次，这种后测试语句最常用语循环体内的代码至少要执行一次的情形。\n\n### for-in语句\n\n`for (property in expression) statement`\n\n例如：\n\n```javascript\nfor (var propName in window) {\n  console.log(propName);\n}\n```\n\n### label、break、continue语句\n\nlabel语句的语法为`label: statement`，可以由`break`和`continue`语句引用，常用与和循环语句配合使用。\n\n例子可以看[这里](https://blog.csdn.net/x386277405/article/details/78673757)\n\n### with语句\n\n**由于大量使用with语句会导致性能下降，还会给调试代码造成困难，因此开发大型应用程序时不建议使用with语句。**\n\n`with (expression) statement`，将代码的作用于设置到一个特定的对象中。\n\n例如\n\n```javascript\nvar qs = location.search.substring(1);\nvar hostName = location.hostname;\nvar url = location.href;\n```\n\n等价于\n\n```javascript\nwith (location) {\n  var qs = search.substring(1);\n  var hostName = hostname;\n  var url = href;\n}\n```\n\n### switch语句\n\n- switch语句中可以使用任何数据类型\n- 每个case的值不一定是常量，可以是变量甚至是表达式\n- switch在比较值时使用的是全等操作符，因此不会发生类型转换（例如“10”不等于10）\n\n## 函数\n\n```js\nfunction functionName(arg0, arg1, ..., argN) {\n\tstatements\n}\n```\n\n返回值不是必需的。\n\n关于参数可以看[这篇文章](https://www.cnblogs.com/hanhanhan/p/5765920.html)中的例子来理解。需要注意的是：没有传递值的命名参数自动赋予undefined值，关于引用传递可以看[这里](https://www.cnblogs.com/refe/p/5101744.html)。\n\n因为ECMAScript函数没有签名（因为其参数是由包含零或多个值的数组来表示的），因此不能像传统意义上那样实现重载。但可以通过检查传入函数的参数类型和数量进行不同的操作来模拟重载。","slug":"JavaScript学习记录一","published":1,"updated":"2018-09-16T03:05:22.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4azo0007cragckh5ox6r","content":"<p>——《JavaScript高级程序设计（第2版）》学习笔记</p>\n<p>要多查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web\" target=\"_blank\" rel=\"noopener\">MDN Web 文档</a></p>\n<hr>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>JavaScript是一种专门为网页交互而设计的脚本语言，由以下三个不同的部分组成：</p>\n<ul>\n<li>ECMAScript（发音 ek-ma-script，伪语言），由ECMA-262定义，提供核心语言功能；</li>\n<li>文档对象模型（DOM，Document Object Model），提供访问和操作网页内容的方法和接口；</li>\n<li>浏览器对象模型（BOM，Browser Object Model），提供与浏览器交互的方法和接口；</li>\n</ul>\n<p>在HTML中使用JavaScript：</p>\n<ul>\n<li>现代Web应用一般都把全部JavaScript引用放在<code>&lt;body&gt;</code>元素中，放在页面内容的后边来最后加载JavaScript代码（虽然defer属性可以实现同样的效果，但是不是所有浏览器都支持这个属性，因此一般不使用这个属性）；</li>\n</ul>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><ol>\n<li>区分大小写</li>\n<li><b>标识符</b>，指变量、函数、属性的名字，或函数的参数，需要满足：<ol>\n<li>第一个字符必须是字母、下划线(_)或者一个美元符号($)</li>\n<li>其他字符可以是数字、字母、下划线、美元符号</li>\n<li>按照惯例，采用<strong>驼峰</strong>大小写格式，即第一个字母小写，剩下的每个有意义的单词的首字母大写</li>\n<li>不能把<strong>关键字、保留字、true、false、null</strong>用作标识符</li>\n</ol>\n</li>\n<li>注释，跟C++相同</li>\n<li>以分号结尾，可以不加分号，但是不推荐</li>\n</ol>\n<h2 id=\"关键字和保留字\"><a href=\"#关键字和保留字\" class=\"headerlink\" title=\"关键字和保留字\"></a>关键字和保留字</h2><ul>\n<li>关键字：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with</li>\n<li>保留字： abstract、boolean、byte、char、class、const、debugger、double、enum、export、extends、final、float、goto、implements、import、int、interface、long、native、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>ECMAScript的变量是松散类型（弱类型）的，无需明确的类型声明，可以用来保存任何类型的数据。</li>\n<li>未初始化的变量值为<code>undefined</code></li>\n<li>使用var操作符定义的变量将成为定义该变量的作用域中举局部变量</li>\n<li>不使用var操作符定义的变量是全局变量（不推荐）</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>ECMAScript有五种简单（基本/原始）数据类型：</p>\n<ul>\n<li>Undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ul>\n<p>和一种复杂数据类型：</p>\n<ul>\n<li>Object</li>\n</ul>\n<p>因为ECMAScript数据类型具有动态性，因此没有再定义其他数据类型的必要。</p>\n<h3 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h3><p>因为typeof是操作符，因此括号不是必需的，也就是可以<code>typeof 126</code>也可以<code>typeof(126)</code>。</p>\n<p>对一个值使用typeof操作符可能返回下列某个字符串：</p>\n<ul>\n<li>undefined</li>\n<li>boolean</li>\n<li>string</li>\n<li>number</li>\n<li>object</li>\n<li>function</li>\n</ul>\n<h3 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h3><p>只有一个值——undefined。</p>\n<p>虽然对声明未初始化的变量（假设为a）和未声明的变量（假设为b）使用typeof均返回undefined，但是对他们使用alert会得到不同的结果：</p>\n<p>对于a : 会弹出undefined</p>\n<p>对于b : 会返回错误Uncaught ReferenceError: b is not defined</p>\n<p>因此建议在声明时就进行初始化，以此来分别a和b。</p>\n<h3 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h3><p>只有一个值——null。</p>\n<p>从逻辑角度来看，null值表示一个空对象指针，因此：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">null</span>;</span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// \"object\"</span></span><br></pre></td></tr></table></figure>\n<p>因为undefined派生自null，因此ECMA-262规定<code>undefined == null</code>为true。</p>\n<p>只要意在保存对象的变量还没有真正的保存对象，都应该让它保存为null。</p>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><p>只有两个值——true和false。</p>\n<p>转换为Boolean的转换规则：</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>转换为true的值</th>\n<th>转换为false的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Boolean</td>\n<td>true</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Stirng</td>\n<td>任何非空字符串</td>\n<td>“”（空字符串）</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>任何非0值（包括无穷大）</td>\n<td>0和NaN</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>任何对象</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Undefined</td>\n<td>n/a（不适用）</td>\n<td>undefined</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><p>使用IEEE754格式表示整数和浮点数。</p>\n<ul>\n<li>八进制数以<code>0</code>开头如<code>070</code>表示八进制的56</li>\n<li>十六进制数以<code>0x</code>开头如<code>0xA</code>或<code>0xa</code>表示十六进制的10</li>\n<li>浮点数必须包含一个小数点，小数点前若为0则可以省略，但不推荐这么做</li>\n<li>若小数点后没有跟任何数字如<code>1.</code>或本身就是一个整数如<code>1.0</code>则会被保存为整数（因为保存浮点数值需要的内存空间是整数值的两倍）</li>\n<li>可以用科学计数法表示浮点数：例如使用<code>1.26e-9</code>表示1.26乘以10的-9次方</li>\n<li>浮点数最高精度为17位小数，但计算精度不如整数，例如0.1加0.2的计算结果不为0.3</li>\n<li>Number.MAX_VALUE = 1.7976931348623157e+308, 超出值转换为Infinity</li>\n<li>Number.MIN_VALUE = 5e-324， 超出值转换为-Infinity</li>\n<li>可以使用isFinite()函数判断一个数是否有穷</li>\n<li>NaN, Not a Number，非数值，如任何数值除以0都会得到NaN</li>\n<li>NaN与任何值都不相等，<code>NaN == NaN</code>返回false，因此可以用函数isNaN()判断是否为NaN，true和false可以转换为数值，因此都不是NaN，字符串无法转换为数值，因此是NaN</li>\n<li>Number()可以将任何数据类型的非数值转换为数值，parseInt()和parseFloat()用于把字符串转换为数值</li>\n</ul>\n<p>Number()转换规则：</p>\n<ul>\n<li>true和false分别转换为1和0</li>\n<li>数值只是简单的传入传出</li>\n<li>null返回0</li>\n<li>undefined返回NaN</li>\n<li>字符串遵循以下规则：<ul>\n<li>若字符串只包含数字，则转换为十进制数值，忽略前置0</li>\n<li>若字符串为有效的浮点格式，如“1.1”，不包含数字、小数点、负号以外的字符，则转换为对应的浮点数，忽略前置0</li>\n<li>若字符串为有效的十六进制格式，如“0xf”，除了其他字符外还不可以有负号，转换为相同大小的十进制整数值</li>\n<li>若字符串是空的，则返回0</li>\n<li>其他格式返回NaN</li>\n</ul>\n</li>\n</ul>\n<p>对于parseInt()和parseFloat()：</p>\n<ul>\n<li>关于前置0，我在Chrome里试了一下：<ul>\n<li>parseInt(“070”)返回的是70，并不会看做八进制数</li>\n<li>parseInt(070)返回的是56，看做八进制数</li>\n</ul>\n</li>\n<li>有效的格式如有效的浮点格式指浮点数处于字符串开头，若字符串开头既不是数字也不是负号则不是有效格式，若以小数点开头，小数点跟有数字则是有效的浮点格式，小数点后跟的不是数字则不是有效的格式</li>\n<li>可以指定基数（进制）为第二个参数</li>\n</ul>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3><p>由零或多个16位Unicode字符组成的字符序列，即字符串。</p>\n<ul>\n<li>字符串用双引号或单引号表示都是有效且没有区别的，但左右引号必须匹配。</li>\n<li>字符串a的长度可以用它的属性<code>length</code>即<code>a.length</code>来获得。</li>\n<li>JavaScript字符以UTF-16存储，即每个字符要么存储为2个字节，要么存储为4个字节（每个字节8位）；二String的length属性返回的是字符串中两个字节字符的数目，也就是说对于一个4个字节的字符，length会把它当做两个字符。</li>\n<li>字符串不能修改，只能销毁再填充。</li>\n<li>数的toString()可以传入基数（进制）为参数。</li>\n<li>null和undefined没有toString()方法，但可以使用String()方法。</li>\n</ul>\n<p>字符字面量（转义序列）：</p>\n<table>\n<thead>\n<tr>\n<th>字面量</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>空格</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>进纸</td>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>斜杠</td>\n</tr>\n<tr>\n<td>\\‘</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>\\“</td>\n<td>双引号</td>\n</tr>\n<tr>\n<td>\\xnn</td>\n<td>以16进制代码nn表示的一个字符（其中n为0-F），例如\\x41表示“A”。</td>\n</tr>\n<tr>\n<td>\\unnnn</td>\n<td>以16进制代码nnnn表示的一个Unicode字符（其中n为0-F），\\u03a3表示希腊字符∑</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h3><p>对象是一组数据和功能的集合。具体的后边的章节会学到，这里就不展开了。</p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><h3 id=\"一元操作符\"><a href=\"#一元操作符\" class=\"headerlink\" title=\"一元操作符\"></a>一元操作符</h3><ul>\n<li>++、–对整数、浮点数、字符串、布尔值、对象都适用<ul>\n<li>对非数值，先使用Number()将其转换为数值再进行加减1</li>\n</ul>\n</li>\n<li>+、- 同样对整数、浮点数、字符串、布尔值、对象都适用，规则和++、–的差不多</li>\n</ul>\n<h3 id=\"位操作符\"><a href=\"#位操作符\" class=\"headerlink\" title=\"位操作符\"></a>位操作符</h3><p>先将64位的数值转换为32位数值，然后进行位操作，最后再转换为64位数值：</p>\n<ul>\n<li>对undefined、null、NaN和Infinity应用位操作这两者会被当成0来处理</li>\n<li>对非数值，先使用Number()将其转换为数值再应用位操作</li>\n<li>按位非(NOT) : <code>~</code>，返回反码，等于原值的负数减1</li>\n<li>按位与(AND) : <code>&amp;</code></li>\n<li>按位或(OR) : <code>|</code></li>\n<li>按位异或(XOR) : <code>^</code>，异或指操作的两个位均为1或均为0则返回0，一个是1一个是0则返回1</li>\n<li>左移 : <code>&lt;&lt;</code>，左移不会影响符号位，左移出现的空位用0填充</li>\n<li>有符号右移 : <code>&gt;&gt;</code>，用符号位的值来填充右移出现的空位</li>\n<li>无符号右移 : <code>&gt;&gt;&gt;</code>，所有32位都向右移动（包括符号位），并用0填充右移出现的空位</li>\n</ul>\n<h3 id=\"布尔操作符\"><a href=\"#布尔操作符\" class=\"headerlink\" title=\"布尔操作符\"></a>布尔操作符</h3><ul>\n<li>逻辑非：<code>!</code>，先将操作数转换为布尔值，然后求反<ul>\n<li>对一个对象进行逻辑非操作，返回false</li>\n<li>对一个空字符串进行逻辑非操作，返回true</li>\n<li>对非空字符串进行逻辑非操作，返回false</li>\n<li>对0、null、NaN、undefined进行逻辑非操作，返回true</li>\n<li>对任意非0数值包括Infinity进行逻辑非操作，返回false</li>\n<li>同时使用两个逻辑非操作符<code>!!</code>，实际上模拟了Boolean()转型函数的行为，0、空字符串、null、NaN、undefined返回false</li>\n</ul>\n</li>\n<li>逻辑与：<code>&amp;&amp;</code>，逻辑与操作不一定返回布尔值<ul>\n<li>如果有一个操作数是null，则返回null</li>\n<li>如果有一个操作数是NaN，则返回NaN</li>\n<li>如果有一个操作数是undefined，则返回undefined</li>\n<li>如果第一个操作数是对象或者两个都是对象，返回第二个操作数</li>\n<li>如果第二个操作数是对象，则返回第一个操作数</li>\n<li>如果第一个操作数为false，则返回false</li>\n</ul>\n</li>\n<li>逻辑或：<code>||</code><ul>\n<li>如果两个操作数都是null，则返回null</li>\n<li>如果两个操作数都是NaN，则返回NaN</li>\n<li>如果两个操作数都是undefined，则返回undefined</li>\n<li>如果第一个操作数是对象或者两个都是对象，返回第一个操作数</li>\n<li>如果第一个操作数求值结果为false，则返回第二个操作数</li>\n<li>如果第一个操作数求值结果为true，则返回第一个操作数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"乘性操作符\"><a href=\"#乘性操作符\" class=\"headerlink\" title=\"乘性操作符\"></a>乘性操作符</h3><p>若操作数不是数值，则后台会先使用Number()将其转换为数值再进行计算</p>\n<ul>\n<li>乘法：<code>*</code><ul>\n<li>若结果超出ECMAScript数值的表示范围，则返回Infinity或-Infinity</li>\n<li>若一个操作数为NaN，则结果为NaN</li>\n<li>Infinity * 0 等于 NaN</li>\n<li>Infinity与非0值相乘，结果还是Infinity或-Infinity</li>\n</ul>\n</li>\n<li>除法：<code>/</code><ul>\n<li>若结果超出ECMAScript数值的表示范围，则返回Infinity或-Infinity</li>\n<li>若一个操作数为NaN，则结果为NaN</li>\n<li>Infinity / Infinity 等于 NaN</li>\n<li>Infinity被任意数值除，结果仍为Infinity</li>\n<li>0 / 0 等于 NaN</li>\n<li>非零数（包括Infinity）除以0结果为Infinity或-Infinity</li>\n</ul>\n</li>\n<li>求模：<code>%</code><ul>\n<li>Infinity % 有限值 的结果为NaN</li>\n<li>任意值 % 0 的结果为NaN</li>\n<li>Infinity % Infinity 的结果为NaN</li>\n<li>有限大值a % Infinity 的结果为a</li>\n<li>0 % 任意值 的结果为0</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"加性操作符\"><a href=\"#加性操作符\" class=\"headerlink\" title=\"加性操作符\"></a>加性操作符</h3><ul>\n<li>加法：<code>+</code><ul>\n<li>如果有一个操作符为NaN，则结果为NaN</li>\n<li>Infinity加-Infinity，结果为NaN</li>\n<li>+0加+0为+0，-0加-0结果为-0</li>\n<li>+0加-0结果为+0</li>\n<li>如果两个操作数都为字符串，则拼接起来</li>\n<li>若有一个操作数不是数值，则将两个都转换（toString()）为字符串，然后两个字符串拼接起来</li>\n</ul>\n</li>\n<li>减法：<code>-</code><ul>\n<li>如果有一个操作符为NaN，则结果为NaN</li>\n<li>Infinity减Infinity或者-Infinity减-Infinity结果为NaN</li>\n<li>+0减+0为+0，+0减-0为-0，-0减-0为+0</li>\n<li>如果有操作数为字符串、布尔值、null、undefined，则先调用Number()函数将其转换为数值，若有一个转换后为NaN，则结果为NaN</li>\n<li>如果有操作数为对象，则调用其valueOf()方法获取其数值，若值为NaN，则结果为NaN，若没有valueOf()方法，则调用其toString()方法并将得到的字符串转化为数值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关系操作符\"><a href=\"#关系操作符\" class=\"headerlink\" title=\"关系操作符\"></a>关系操作符</h3><p><code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code></p>\n<ul>\n<li>若两个操作数都是数值则进行数值比较</li>\n<li>若两个操作数都是字符串，则比较两个字符串的字符编码值</li>\n<li>如果一个是数值，则将另一个操作数转换为一个数值，然后执行数值比较</li>\n<li>如果一个操作数是对象，则先用valueOf()换取数值进行比较，若对象没有valueOf()方法，则调用toString()，然后转换为数值进行比较</li>\n<li>如果一个操作数是布尔值，则将其转换为数值然后进行比较</li>\n<li>如果一个操作数是NaN，则返回false</li>\n</ul>\n<h3 id=\"相等操作符\"><a href=\"#相等操作符\" class=\"headerlink\" title=\"相等操作符\"></a>相等操作符</h3><h4 id=\"相等和不相等\"><a href=\"#相等和不相等\" class=\"headerlink\" title=\"相等和不相等\"></a>相等和不相等</h4><p><code>==</code>、<code>!=</code>，先转换再比较</p>\n<ul>\n<li>如果一个操作数为布尔值，则将其转换为数值进行比较</li>\n<li>如果一个操作数是字符串，一个操作符是数值，则将字符串转换成数值再进行比较</li>\n<li>如果一个操作数是对象而另一个不是，则调用对象的valueOf()方法，用得到的数值按照前边的规则进行比较</li>\n<li>null和undefined是相等的</li>\n<li>在比较相等性之前，不能将null和undefined转换成其他任何值</li>\n<li>NaN和任何值（包括NaN）都不相等</li>\n<li>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则<code>==</code>返回true，<code>!=</code>返回false</li>\n</ul>\n<p>特殊情况结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"NaN\"</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"number\">5</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// fale</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> != <span class=\"literal\">NaN</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">2</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">\"5\"</span> == <span class=\"number\">5</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"全等和不全等\"><a href=\"#全等和不全等\" class=\"headerlink\" title=\"全等和不全等\"></a>全等和不全等</h4><p><code>===</code>、<code>!==</code>，仅比较不转换，首先类型相同然后值相同</p>\n<h3 id=\"条件操作符\"><a href=\"#条件操作符\" class=\"headerlink\" title=\"条件操作符\"></a>条件操作符</h3><p><code>variable = boolean_expression ? true_value : false_value</code></p>\n<h3 id=\"赋值操作符\"><a href=\"#赋值操作符\" class=\"headerlink\" title=\"赋值操作符\"></a>赋值操作符</h3><p><code>=</code></p>\n<p>复合操作符： <code>*=</code>,<code>/=</code>,<code>%=</code>,<code>+=</code>,<code>-=</code>,<code>&lt;&lt;=</code>,<code>&gt;&gt;=</code>,<code>&gt;&gt;&gt;=</code></p>\n<p>例如复合操作符加等于<code>+=</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">num += <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n<p>相当于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">num = num + <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"逗号操作符\"><a href=\"#逗号操作符\" class=\"headerlink\" title=\"逗号操作符\"></a>逗号操作符</h3><p>声明多个变量、一条语句中执行多个操作用逗号隔开；</p>\n<p>在赋值时，逗号操作符总会返回表达式中的最后一项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>); <span class=\"comment\">// num的值为0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><h3 id=\"if、while、for语句\"><a href=\"#if、while、for语句\" class=\"headerlink\" title=\"if、while、for语句\"></a>if、while、for语句</h3><p>即使要执行的只有一句代码也要用<code>{}</code>括起来；</p>\n<p>关于循环的块作用域后边的章节会有讲解。</p>\n<h3 id=\"do-while语句\"><a href=\"#do-while语句\" class=\"headerlink\" title=\"do-while语句\"></a>do-while语句</h3><p>在对条件表达式求值之前，循环体内的代码至少会执行一次，这种后测试语句最常用语循环体内的代码至少要执行一次的情形。</p>\n<h3 id=\"for-in语句\"><a href=\"#for-in语句\" class=\"headerlink\" title=\"for-in语句\"></a>for-in语句</h3><p><code>for (property in expression) statement</code></p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> propName <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(propName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"label、break、continue语句\"><a href=\"#label、break、continue语句\" class=\"headerlink\" title=\"label、break、continue语句\"></a>label、break、continue语句</h3><p>label语句的语法为<code>label: statement</code>，可以由<code>break</code>和<code>continue</code>语句引用，常用与和循环语句配合使用。</p>\n<p>例子可以看<a href=\"https://blog.csdn.net/x386277405/article/details/78673757\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h3><p><strong>由于大量使用with语句会导致性能下降，还会给调试代码造成困难，因此开发大型应用程序时不建议使用with语句。</strong></p>\n<p><code>with (expression) statement</code>，将代码的作用于设置到一个特定的对象中。</p>\n<p>例如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> qs = location.search.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> hostName = location.hostname;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = location.href;</span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> (location) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> qs = search.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hostName = hostname;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = href;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h3><ul>\n<li>switch语句中可以使用任何数据类型</li>\n<li>每个case的值不一定是常量，可以是变量甚至是表达式</li>\n<li>switch在比较值时使用的是全等操作符，因此不会发生类型转换（例如“10”不等于10）</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionName</span>(<span class=\"params\">arg0, arg1, ..., argN</span>) </span>&#123;</span><br><span class=\"line\">\tstatements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回值不是必需的。</p>\n<p>关于参数可以看<a href=\"https://www.cnblogs.com/hanhanhan/p/5765920.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>中的例子来理解。需要注意的是：没有传递值的命名参数自动赋予undefined值，关于引用传递可以看<a href=\"https://www.cnblogs.com/refe/p/5101744.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>因为ECMAScript函数没有签名（因为其参数是由包含零或多个值的数组来表示的），因此不能像传统意义上那样实现重载。但可以通过检查传入函数的参数类型和数量进行不同的操作来模拟重载。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>——《JavaScript高级程序设计（第2版）》学习笔记</p>\n<p>要多查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web\" target=\"_blank\" rel=\"noopener\">MDN Web 文档</a></p>\n<hr>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>JavaScript是一种专门为网页交互而设计的脚本语言，由以下三个不同的部分组成：</p>\n<ul>\n<li>ECMAScript（发音 ek-ma-script，伪语言），由ECMA-262定义，提供核心语言功能；</li>\n<li>文档对象模型（DOM，Document Object Model），提供访问和操作网页内容的方法和接口；</li>\n<li>浏览器对象模型（BOM，Browser Object Model），提供与浏览器交互的方法和接口；</li>\n</ul>\n<p>在HTML中使用JavaScript：</p>\n<ul>\n<li>现代Web应用一般都把全部JavaScript引用放在<code>&lt;body&gt;</code>元素中，放在页面内容的后边来最后加载JavaScript代码（虽然defer属性可以实现同样的效果，但是不是所有浏览器都支持这个属性，因此一般不使用这个属性）；</li>\n</ul>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><ol>\n<li>区分大小写</li>\n<li><b>标识符</b>，指变量、函数、属性的名字，或函数的参数，需要满足：<ol>\n<li>第一个字符必须是字母、下划线(_)或者一个美元符号($)</li>\n<li>其他字符可以是数字、字母、下划线、美元符号</li>\n<li>按照惯例，采用<strong>驼峰</strong>大小写格式，即第一个字母小写，剩下的每个有意义的单词的首字母大写</li>\n<li>不能把<strong>关键字、保留字、true、false、null</strong>用作标识符</li>\n</ol>\n</li>\n<li>注释，跟C++相同</li>\n<li>以分号结尾，可以不加分号，但是不推荐</li>\n</ol>\n<h2 id=\"关键字和保留字\"><a href=\"#关键字和保留字\" class=\"headerlink\" title=\"关键字和保留字\"></a>关键字和保留字</h2><ul>\n<li>关键字：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with</li>\n<li>保留字： abstract、boolean、byte、char、class、const、debugger、double、enum、export、extends、final、float、goto、implements、import、int、interface、long、native、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>ECMAScript的变量是松散类型（弱类型）的，无需明确的类型声明，可以用来保存任何类型的数据。</li>\n<li>未初始化的变量值为<code>undefined</code></li>\n<li>使用var操作符定义的变量将成为定义该变量的作用域中举局部变量</li>\n<li>不使用var操作符定义的变量是全局变量（不推荐）</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>ECMAScript有五种简单（基本/原始）数据类型：</p>\n<ul>\n<li>Undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ul>\n<p>和一种复杂数据类型：</p>\n<ul>\n<li>Object</li>\n</ul>\n<p>因为ECMAScript数据类型具有动态性，因此没有再定义其他数据类型的必要。</p>\n<h3 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h3><p>因为typeof是操作符，因此括号不是必需的，也就是可以<code>typeof 126</code>也可以<code>typeof(126)</code>。</p>\n<p>对一个值使用typeof操作符可能返回下列某个字符串：</p>\n<ul>\n<li>undefined</li>\n<li>boolean</li>\n<li>string</li>\n<li>number</li>\n<li>object</li>\n<li>function</li>\n</ul>\n<h3 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h3><p>只有一个值——undefined。</p>\n<p>虽然对声明未初始化的变量（假设为a）和未声明的变量（假设为b）使用typeof均返回undefined，但是对他们使用alert会得到不同的结果：</p>\n<p>对于a : 会弹出undefined</p>\n<p>对于b : 会返回错误Uncaught ReferenceError: b is not defined</p>\n<p>因此建议在声明时就进行初始化，以此来分别a和b。</p>\n<h3 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h3><p>只有一个值——null。</p>\n<p>从逻辑角度来看，null值表示一个空对象指针，因此：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">null</span>;</span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// \"object\"</span></span><br></pre></td></tr></table></figure>\n<p>因为undefined派生自null，因此ECMA-262规定<code>undefined == null</code>为true。</p>\n<p>只要意在保存对象的变量还没有真正的保存对象，都应该让它保存为null。</p>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><p>只有两个值——true和false。</p>\n<p>转换为Boolean的转换规则：</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>转换为true的值</th>\n<th>转换为false的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Boolean</td>\n<td>true</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Stirng</td>\n<td>任何非空字符串</td>\n<td>“”（空字符串）</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>任何非0值（包括无穷大）</td>\n<td>0和NaN</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>任何对象</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Undefined</td>\n<td>n/a（不适用）</td>\n<td>undefined</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><p>使用IEEE754格式表示整数和浮点数。</p>\n<ul>\n<li>八进制数以<code>0</code>开头如<code>070</code>表示八进制的56</li>\n<li>十六进制数以<code>0x</code>开头如<code>0xA</code>或<code>0xa</code>表示十六进制的10</li>\n<li>浮点数必须包含一个小数点，小数点前若为0则可以省略，但不推荐这么做</li>\n<li>若小数点后没有跟任何数字如<code>1.</code>或本身就是一个整数如<code>1.0</code>则会被保存为整数（因为保存浮点数值需要的内存空间是整数值的两倍）</li>\n<li>可以用科学计数法表示浮点数：例如使用<code>1.26e-9</code>表示1.26乘以10的-9次方</li>\n<li>浮点数最高精度为17位小数，但计算精度不如整数，例如0.1加0.2的计算结果不为0.3</li>\n<li>Number.MAX_VALUE = 1.7976931348623157e+308, 超出值转换为Infinity</li>\n<li>Number.MIN_VALUE = 5e-324， 超出值转换为-Infinity</li>\n<li>可以使用isFinite()函数判断一个数是否有穷</li>\n<li>NaN, Not a Number，非数值，如任何数值除以0都会得到NaN</li>\n<li>NaN与任何值都不相等，<code>NaN == NaN</code>返回false，因此可以用函数isNaN()判断是否为NaN，true和false可以转换为数值，因此都不是NaN，字符串无法转换为数值，因此是NaN</li>\n<li>Number()可以将任何数据类型的非数值转换为数值，parseInt()和parseFloat()用于把字符串转换为数值</li>\n</ul>\n<p>Number()转换规则：</p>\n<ul>\n<li>true和false分别转换为1和0</li>\n<li>数值只是简单的传入传出</li>\n<li>null返回0</li>\n<li>undefined返回NaN</li>\n<li>字符串遵循以下规则：<ul>\n<li>若字符串只包含数字，则转换为十进制数值，忽略前置0</li>\n<li>若字符串为有效的浮点格式，如“1.1”，不包含数字、小数点、负号以外的字符，则转换为对应的浮点数，忽略前置0</li>\n<li>若字符串为有效的十六进制格式，如“0xf”，除了其他字符外还不可以有负号，转换为相同大小的十进制整数值</li>\n<li>若字符串是空的，则返回0</li>\n<li>其他格式返回NaN</li>\n</ul>\n</li>\n</ul>\n<p>对于parseInt()和parseFloat()：</p>\n<ul>\n<li>关于前置0，我在Chrome里试了一下：<ul>\n<li>parseInt(“070”)返回的是70，并不会看做八进制数</li>\n<li>parseInt(070)返回的是56，看做八进制数</li>\n</ul>\n</li>\n<li>有效的格式如有效的浮点格式指浮点数处于字符串开头，若字符串开头既不是数字也不是负号则不是有效格式，若以小数点开头，小数点跟有数字则是有效的浮点格式，小数点后跟的不是数字则不是有效的格式</li>\n<li>可以指定基数（进制）为第二个参数</li>\n</ul>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3><p>由零或多个16位Unicode字符组成的字符序列，即字符串。</p>\n<ul>\n<li>字符串用双引号或单引号表示都是有效且没有区别的，但左右引号必须匹配。</li>\n<li>字符串a的长度可以用它的属性<code>length</code>即<code>a.length</code>来获得。</li>\n<li>JavaScript字符以UTF-16存储，即每个字符要么存储为2个字节，要么存储为4个字节（每个字节8位）；二String的length属性返回的是字符串中两个字节字符的数目，也就是说对于一个4个字节的字符，length会把它当做两个字符。</li>\n<li>字符串不能修改，只能销毁再填充。</li>\n<li>数的toString()可以传入基数（进制）为参数。</li>\n<li>null和undefined没有toString()方法，但可以使用String()方法。</li>\n</ul>\n<p>字符字面量（转义序列）：</p>\n<table>\n<thead>\n<tr>\n<th>字面量</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>空格</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>进纸</td>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>斜杠</td>\n</tr>\n<tr>\n<td>\\‘</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>\\“</td>\n<td>双引号</td>\n</tr>\n<tr>\n<td>\\xnn</td>\n<td>以16进制代码nn表示的一个字符（其中n为0-F），例如\\x41表示“A”。</td>\n</tr>\n<tr>\n<td>\\unnnn</td>\n<td>以16进制代码nnnn表示的一个Unicode字符（其中n为0-F），\\u03a3表示希腊字符∑</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h3><p>对象是一组数据和功能的集合。具体的后边的章节会学到，这里就不展开了。</p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><h3 id=\"一元操作符\"><a href=\"#一元操作符\" class=\"headerlink\" title=\"一元操作符\"></a>一元操作符</h3><ul>\n<li>++、–对整数、浮点数、字符串、布尔值、对象都适用<ul>\n<li>对非数值，先使用Number()将其转换为数值再进行加减1</li>\n</ul>\n</li>\n<li>+、- 同样对整数、浮点数、字符串、布尔值、对象都适用，规则和++、–的差不多</li>\n</ul>\n<h3 id=\"位操作符\"><a href=\"#位操作符\" class=\"headerlink\" title=\"位操作符\"></a>位操作符</h3><p>先将64位的数值转换为32位数值，然后进行位操作，最后再转换为64位数值：</p>\n<ul>\n<li>对undefined、null、NaN和Infinity应用位操作这两者会被当成0来处理</li>\n<li>对非数值，先使用Number()将其转换为数值再应用位操作</li>\n<li>按位非(NOT) : <code>~</code>，返回反码，等于原值的负数减1</li>\n<li>按位与(AND) : <code>&amp;</code></li>\n<li>按位或(OR) : <code>|</code></li>\n<li>按位异或(XOR) : <code>^</code>，异或指操作的两个位均为1或均为0则返回0，一个是1一个是0则返回1</li>\n<li>左移 : <code>&lt;&lt;</code>，左移不会影响符号位，左移出现的空位用0填充</li>\n<li>有符号右移 : <code>&gt;&gt;</code>，用符号位的值来填充右移出现的空位</li>\n<li>无符号右移 : <code>&gt;&gt;&gt;</code>，所有32位都向右移动（包括符号位），并用0填充右移出现的空位</li>\n</ul>\n<h3 id=\"布尔操作符\"><a href=\"#布尔操作符\" class=\"headerlink\" title=\"布尔操作符\"></a>布尔操作符</h3><ul>\n<li>逻辑非：<code>!</code>，先将操作数转换为布尔值，然后求反<ul>\n<li>对一个对象进行逻辑非操作，返回false</li>\n<li>对一个空字符串进行逻辑非操作，返回true</li>\n<li>对非空字符串进行逻辑非操作，返回false</li>\n<li>对0、null、NaN、undefined进行逻辑非操作，返回true</li>\n<li>对任意非0数值包括Infinity进行逻辑非操作，返回false</li>\n<li>同时使用两个逻辑非操作符<code>!!</code>，实际上模拟了Boolean()转型函数的行为，0、空字符串、null、NaN、undefined返回false</li>\n</ul>\n</li>\n<li>逻辑与：<code>&amp;&amp;</code>，逻辑与操作不一定返回布尔值<ul>\n<li>如果有一个操作数是null，则返回null</li>\n<li>如果有一个操作数是NaN，则返回NaN</li>\n<li>如果有一个操作数是undefined，则返回undefined</li>\n<li>如果第一个操作数是对象或者两个都是对象，返回第二个操作数</li>\n<li>如果第二个操作数是对象，则返回第一个操作数</li>\n<li>如果第一个操作数为false，则返回false</li>\n</ul>\n</li>\n<li>逻辑或：<code>||</code><ul>\n<li>如果两个操作数都是null，则返回null</li>\n<li>如果两个操作数都是NaN，则返回NaN</li>\n<li>如果两个操作数都是undefined，则返回undefined</li>\n<li>如果第一个操作数是对象或者两个都是对象，返回第一个操作数</li>\n<li>如果第一个操作数求值结果为false，则返回第二个操作数</li>\n<li>如果第一个操作数求值结果为true，则返回第一个操作数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"乘性操作符\"><a href=\"#乘性操作符\" class=\"headerlink\" title=\"乘性操作符\"></a>乘性操作符</h3><p>若操作数不是数值，则后台会先使用Number()将其转换为数值再进行计算</p>\n<ul>\n<li>乘法：<code>*</code><ul>\n<li>若结果超出ECMAScript数值的表示范围，则返回Infinity或-Infinity</li>\n<li>若一个操作数为NaN，则结果为NaN</li>\n<li>Infinity * 0 等于 NaN</li>\n<li>Infinity与非0值相乘，结果还是Infinity或-Infinity</li>\n</ul>\n</li>\n<li>除法：<code>/</code><ul>\n<li>若结果超出ECMAScript数值的表示范围，则返回Infinity或-Infinity</li>\n<li>若一个操作数为NaN，则结果为NaN</li>\n<li>Infinity / Infinity 等于 NaN</li>\n<li>Infinity被任意数值除，结果仍为Infinity</li>\n<li>0 / 0 等于 NaN</li>\n<li>非零数（包括Infinity）除以0结果为Infinity或-Infinity</li>\n</ul>\n</li>\n<li>求模：<code>%</code><ul>\n<li>Infinity % 有限值 的结果为NaN</li>\n<li>任意值 % 0 的结果为NaN</li>\n<li>Infinity % Infinity 的结果为NaN</li>\n<li>有限大值a % Infinity 的结果为a</li>\n<li>0 % 任意值 的结果为0</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"加性操作符\"><a href=\"#加性操作符\" class=\"headerlink\" title=\"加性操作符\"></a>加性操作符</h3><ul>\n<li>加法：<code>+</code><ul>\n<li>如果有一个操作符为NaN，则结果为NaN</li>\n<li>Infinity加-Infinity，结果为NaN</li>\n<li>+0加+0为+0，-0加-0结果为-0</li>\n<li>+0加-0结果为+0</li>\n<li>如果两个操作数都为字符串，则拼接起来</li>\n<li>若有一个操作数不是数值，则将两个都转换（toString()）为字符串，然后两个字符串拼接起来</li>\n</ul>\n</li>\n<li>减法：<code>-</code><ul>\n<li>如果有一个操作符为NaN，则结果为NaN</li>\n<li>Infinity减Infinity或者-Infinity减-Infinity结果为NaN</li>\n<li>+0减+0为+0，+0减-0为-0，-0减-0为+0</li>\n<li>如果有操作数为字符串、布尔值、null、undefined，则先调用Number()函数将其转换为数值，若有一个转换后为NaN，则结果为NaN</li>\n<li>如果有操作数为对象，则调用其valueOf()方法获取其数值，若值为NaN，则结果为NaN，若没有valueOf()方法，则调用其toString()方法并将得到的字符串转化为数值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关系操作符\"><a href=\"#关系操作符\" class=\"headerlink\" title=\"关系操作符\"></a>关系操作符</h3><p><code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code></p>\n<ul>\n<li>若两个操作数都是数值则进行数值比较</li>\n<li>若两个操作数都是字符串，则比较两个字符串的字符编码值</li>\n<li>如果一个是数值，则将另一个操作数转换为一个数值，然后执行数值比较</li>\n<li>如果一个操作数是对象，则先用valueOf()换取数值进行比较，若对象没有valueOf()方法，则调用toString()，然后转换为数值进行比较</li>\n<li>如果一个操作数是布尔值，则将其转换为数值然后进行比较</li>\n<li>如果一个操作数是NaN，则返回false</li>\n</ul>\n<h3 id=\"相等操作符\"><a href=\"#相等操作符\" class=\"headerlink\" title=\"相等操作符\"></a>相等操作符</h3><h4 id=\"相等和不相等\"><a href=\"#相等和不相等\" class=\"headerlink\" title=\"相等和不相等\"></a>相等和不相等</h4><p><code>==</code>、<code>!=</code>，先转换再比较</p>\n<ul>\n<li>如果一个操作数为布尔值，则将其转换为数值进行比较</li>\n<li>如果一个操作数是字符串，一个操作符是数值，则将字符串转换成数值再进行比较</li>\n<li>如果一个操作数是对象而另一个不是，则调用对象的valueOf()方法，用得到的数值按照前边的规则进行比较</li>\n<li>null和undefined是相等的</li>\n<li>在比较相等性之前，不能将null和undefined转换成其他任何值</li>\n<li>NaN和任何值（包括NaN）都不相等</li>\n<li>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则<code>==</code>返回true，<code>!=</code>返回false</li>\n</ul>\n<p>特殊情况结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"NaN\"</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"number\">5</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// fale</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> != <span class=\"literal\">NaN</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">2</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">\"5\"</span> == <span class=\"number\">5</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"全等和不全等\"><a href=\"#全等和不全等\" class=\"headerlink\" title=\"全等和不全等\"></a>全等和不全等</h4><p><code>===</code>、<code>!==</code>，仅比较不转换，首先类型相同然后值相同</p>\n<h3 id=\"条件操作符\"><a href=\"#条件操作符\" class=\"headerlink\" title=\"条件操作符\"></a>条件操作符</h3><p><code>variable = boolean_expression ? true_value : false_value</code></p>\n<h3 id=\"赋值操作符\"><a href=\"#赋值操作符\" class=\"headerlink\" title=\"赋值操作符\"></a>赋值操作符</h3><p><code>=</code></p>\n<p>复合操作符： <code>*=</code>,<code>/=</code>,<code>%=</code>,<code>+=</code>,<code>-=</code>,<code>&lt;&lt;=</code>,<code>&gt;&gt;=</code>,<code>&gt;&gt;&gt;=</code></p>\n<p>例如复合操作符加等于<code>+=</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">num += <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n<p>相当于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">num = num + <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"逗号操作符\"><a href=\"#逗号操作符\" class=\"headerlink\" title=\"逗号操作符\"></a>逗号操作符</h3><p>声明多个变量、一条语句中执行多个操作用逗号隔开；</p>\n<p>在赋值时，逗号操作符总会返回表达式中的最后一项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>); <span class=\"comment\">// num的值为0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><h3 id=\"if、while、for语句\"><a href=\"#if、while、for语句\" class=\"headerlink\" title=\"if、while、for语句\"></a>if、while、for语句</h3><p>即使要执行的只有一句代码也要用<code>{}</code>括起来；</p>\n<p>关于循环的块作用域后边的章节会有讲解。</p>\n<h3 id=\"do-while语句\"><a href=\"#do-while语句\" class=\"headerlink\" title=\"do-while语句\"></a>do-while语句</h3><p>在对条件表达式求值之前，循环体内的代码至少会执行一次，这种后测试语句最常用语循环体内的代码至少要执行一次的情形。</p>\n<h3 id=\"for-in语句\"><a href=\"#for-in语句\" class=\"headerlink\" title=\"for-in语句\"></a>for-in语句</h3><p><code>for (property in expression) statement</code></p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> propName <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(propName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"label、break、continue语句\"><a href=\"#label、break、continue语句\" class=\"headerlink\" title=\"label、break、continue语句\"></a>label、break、continue语句</h3><p>label语句的语法为<code>label: statement</code>，可以由<code>break</code>和<code>continue</code>语句引用，常用与和循环语句配合使用。</p>\n<p>例子可以看<a href=\"https://blog.csdn.net/x386277405/article/details/78673757\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h3><p><strong>由于大量使用with语句会导致性能下降，还会给调试代码造成困难，因此开发大型应用程序时不建议使用with语句。</strong></p>\n<p><code>with (expression) statement</code>，将代码的作用于设置到一个特定的对象中。</p>\n<p>例如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> qs = location.search.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> hostName = location.hostname;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = location.href;</span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> (location) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> qs = search.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hostName = hostname;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = href;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h3><ul>\n<li>switch语句中可以使用任何数据类型</li>\n<li>每个case的值不一定是常量，可以是变量甚至是表达式</li>\n<li>switch在比较值时使用的是全等操作符，因此不会发生类型转换（例如“10”不等于10）</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionName</span>(<span class=\"params\">arg0, arg1, ..., argN</span>) </span>&#123;</span><br><span class=\"line\">\tstatements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回值不是必需的。</p>\n<p>关于参数可以看<a href=\"https://www.cnblogs.com/hanhanhan/p/5765920.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>中的例子来理解。需要注意的是：没有传递值的命名参数自动赋予undefined值，关于引用传递可以看<a href=\"https://www.cnblogs.com/refe/p/5101744.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>因为ECMAScript函数没有签名（因为其参数是由包含零或多个值的数组来表示的），因此不能像传统意义上那样实现重载。但可以通过检查传入函数的参数类型和数量进行不同的操作来模拟重载。</p>\n"},{"title":"HTML5与CSS3权威指南之HTML5学习记录","toc":true,"date":"2018-09-11T08:08:11.000Z","_content":"\n学习资料——《HTML5与CSS3权威指南》（第3版）\n\n官方网站：\n\n[华章图书](http://www.hzbook.com/)\n\n书中所有代码下载链接：\n\n链接：http://pan.baidu.com/s/1c0oGMn2 密码：f7zt\n\n[HTML5优缺点](https://blog.csdn.net/qq_34309704/article/details/80163001)\n\n---\n\n","source":"_posts/HTML5与CSS3权威指南之HTML5学习记录.md","raw":"---\ntitle: HTML5与CSS3权威指南之HTML5学习记录\ntoc: true\ndate: 2018-09-11 16:08:11\ncategories:\n- Web\ntags:\n- HTML\n---\n\n学习资料——《HTML5与CSS3权威指南》（第3版）\n\n官方网站：\n\n[华章图书](http://www.hzbook.com/)\n\n书中所有代码下载链接：\n\n链接：http://pan.baidu.com/s/1c0oGMn2 密码：f7zt\n\n[HTML5优缺点](https://blog.csdn.net/qq_34309704/article/details/80163001)\n\n---\n\n","slug":"HTML5与CSS3权威指南之HTML5学习记录","published":1,"updated":"2018-09-11T08:30:23.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4azq0008cragacodgexf","content":"<p>学习资料——《HTML5与CSS3权威指南》（第3版）</p>\n<p>官方网站：</p>\n<p><a href=\"http://www.hzbook.com/\" target=\"_blank\" rel=\"noopener\">华章图书</a></p>\n<p>书中所有代码下载链接：</p>\n<p>链接：<a href=\"http://pan.baidu.com/s/1c0oGMn2\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1c0oGMn2</a> 密码：f7zt</p>\n<p><a href=\"https://blog.csdn.net/qq_34309704/article/details/80163001\" target=\"_blank\" rel=\"noopener\">HTML5优缺点</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>学习资料——《HTML5与CSS3权威指南》（第3版）</p>\n<p>官方网站：</p>\n<p><a href=\"http://www.hzbook.com/\" target=\"_blank\" rel=\"noopener\">华章图书</a></p>\n<p>书中所有代码下载链接：</p>\n<p>链接：<a href=\"http://pan.baidu.com/s/1c0oGMn2\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1c0oGMn2</a> 密码：f7zt</p>\n<p><a href=\"https://blog.csdn.net/qq_34309704/article/details/80163001\" target=\"_blank\" rel=\"noopener\">HTML5优缺点</a></p>\n<hr>\n"},{"title":"JavaScript学习记录二","toc":true,"date":"2018-09-13T02:14:53.000Z","_content":"\n——《JavaScript高级程序设计（第2版）》学习笔记\n\n要多查阅[MDN Web 文档](https://developer.mozilla.org/zh-CN/docs/Web)\n\n---\n\n# 变量、作用域和内存问题\n\n## 基本类型和引用类型的值\n\nECMAScript变量可能包含两种不同数据类型的值：\n\n- **基本类型值**：保存在**栈内存**中的简单数据段，这种值完全保存在内存中的一个位置\n- **引用类型值**：保存在**堆内存**中的对象，保存的实际上是一个指针，指针指向内存中真正对象保存的位置\n\n五种基本数据类型：Undefined、Null、Boolean、Number、String在内存中占有固定大小的空间，因此可以保存在栈内存中。因为我们操作的是它们实际保存的值，所以它们是**按值**访问的。\n\n对于对象，先从栈中读取内存地址，然后再按照地址找到保存在堆中的值。因为我们操作的不是实际的值，而是那个值所引用的对象，因此我们称之为**按引用**访问的。（图片来源于网络，cr 水印）\n\n![栈内存与堆内存](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536816598256&di=246ab4e73e12049d497d375df4fd273b&imgtype=jpg&src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D2929764421%2C2277861536%26fm%3D214%26gp%3D0.jpg)\n\n### 动态属性\n\n对于对象，我们可以改变和删除其属性和方法，但是不能给基本类型的值添加属性。\n\n即只能给引用类型值动态地添加属性。\n\n### 复制变量值\n\n当复制基本类型值的时候，会在栈中为其开辟一块新的内存保存其值。\n\n但是当复制引用类型的值时，实际上复制保存的是这个对象在堆内存中的地址，也就是两者指向的是同一个对象。\n\n### 传递参数\n\nECMAScript中所有的函数的参数都是**按值传递**的。\n\n传递基本类型值就如基本类型变量的复制一样，传递引用类型变量时也如同引用变量的复制。\n\n因此传递引用类型的变量时，传递的相当于是拷贝的指针。\n\n可以看下边这个例子（我觉得可以把对象看做是一个指向对象的指针，然后函数传递的是一个拷贝的指针）：\n\n```javascript\nfunction setName(obj) {\n  obj.name = \"Nicholas\";\n  obj = new Object();\n  obj.name = \"Greg\";\n}\n\nvar person = new Obejct();\nsetName(person);\nalert(person.name); // \"Nicholas\"\n```\n\n### 检测类型\n\ntypeof检测null返回\"object\"\n\n当我们想知道一个对象是什么类型的对象时，可以使用`instanceof`，它的语法是：\n\n`result = variable instanceof constructor`\n\n如果变量是给定引用类型（由构造函数表示）的实例，则instanceof返回true：\n\n```javascript\nalert(person instanceof Object); // 变量person是Object么？\nalert(colors instanceof Array); // 变量colors是Array么？\n```\n\n当使用instanceof检测基本类型的值时始终返回false，因为基本类型不是对象。\n\n注： 在Safiri和Chrome中使用typeof检测正则表达式会错误的返回\"function\"。\n\n## 执行环境和作用域\n\n[执行环境](https://blog.csdn.net/wmaoshu/article/details/60466990)定义了变量或函数有权访问的其他数据，决定了它们各自的行为。\n\n每个执行环境都有一个与之关联的**变量对象**，环境中定义的所有变量和函数都保存在这个对象中。\n\n在Web浏览器中，全局执行环境被认为是window对象，因此所有全局变量和函数都是作为window对象的属性和方法创建的。\n\n一个执行环境中的所有代码执行完毕后，该环境和保存在其中的所有变量和函数定义都被销毁，\n\n全局执行环境直到关闭页面或者浏览器时才会被销毁。\n\n关于作用域链可以看[这里](https://blog.csdn.net/charlene0824/article/details/52252824)。\n\n### 延长作用域链\n\n- with语句： 其变量对象包含为指定的对象的所有属性和方法所做的变量声明。\n- catch语句： 包含被抛出的错误对象的声明\n\n在IE的JavaScript实现中，catch语句捕获的错误对象会被添加到执行环境的变量对象中。\n\n### 没有块级作用域\n\n- 使用if 、for语句创建的变量会保存在语句外部的执行环境中。\n\n- 函数内部是一个局部环境\n- 访问局部变量比全局变量快，因为不用向上搜索作用域链\n\n## 垃圾收集\n\nJavaScript具有自动垃圾收集机制，按照固定的时间间隔或代码执行中预定的收集时间，周期性地找出不再使用的变量释放其内存。\n\n关于垃圾收集方式的详细解释可以看[这里](https://www.cnblogs.com/scottjeremy/p/6870729.html)。\n\n关于性能问题和管理内存可以看[这里](https://www.cnblogs.com/yxField/p/4226591.html)。\n\n# 引用类型\n\n## Object类型\n\n创建Object实例的方式：\n\n- `var xxx = new Object()`\n- `var xxx = {age: 29}`, `{}`是对象字面量边界\n\n可以用`xxx.age`或者`xxx['age']`来访问属性，更建议用点表示法。\n\n## Array类型\n\nECMAScript数组的每一项可以保存任何类型的数据。\n\n数组的索引从0开始。\n\n数组的项数保存在其length属性中，它并不是只读的，可以通过设置它来在数组的末尾移除或添加项，添加项的初始值为undefined。\n\n因为JavaScript使用一个32位整数保存数组元素个数，因此数组最多可以包含4294967295项（2的32次方减1）。\n\n以下是创建数组的例子：\n\n```javascript\n// new 可以省略\nvar a = new Array(); // 创建一个空数组\nvar b = new Array(20); // 创造一个包含20项的数组，每一项的初始值都是undefined\nvar c = new Array(\"red\", \"blue\", \"green\"); // 创造一个包含三项：\"red\",\"blue\",\"green\"的数组\nvar d = [\"red\", \"blue\", \"green\"]; // 创造一个包含三项：\"red\",\"blue\",\"green\"的数组\nvar e = []; // 创建一个空数组\nvar f = [1,2,]; // 不要这样！这样会创建一个包含2或3项的数组\nvar g = [,,,,,]; // 不要这样！这样会创建一个包含5或6项的数组\n```\n\n### 转换方法\n\nvalueOf()返回当前对象的原始值；\n\ntoString()方法先调用每一项的toString()方法，然后用逗号将它们拼接起来并返回；\n\ntoLocalString()方法先调用每一项的toLocalString()方法，然后用逗号将它们拼接起来并返回；\n\n如果使用join()方法可以使用不同的分隔符来构建这个字符串：\n\n```javascript\nvar a = ['a','b','c'];\nalert(a.join(',')); // 'a,b,c'\nalert(a.join('||')); // 'a||b||c'\n```\n\n如果某一项是undefined或null，那么在toString()、toLocalString()、join()方法返回的结果中以空字符串表示。\n\n### 栈方法\n\nECMAScript为数组提供了push()和pop()方法，以便实现类似栈的行为（LIFO，后进先出）。\n\n- push()方法可以接受任意数量的参数，然后把它们逐个添加到数组末尾，并返回修改后的数组长度\n- pop()方法则从数组末尾移除最后一项，并将length减一，返回移除的项。\n\n### 队列方法\n\n可以使用push()和shift()方法，实现类似于队列的行为（FIFO，先进先出）。\n\n- shift()方法从数组开头移除第一项，并将length减一，返回移除的项。\n- ECMAScript还提供了unshift()方法，可以接受任意数量的参数，然后把它们逐个添加到数组头部，并返回修改后的数组长度（IE返回undefined）。\n\n关于unshift()的添加多个变量的顺序：\n\n```javascript\na = [\"a\", \"b\", \"c\", null]；\na.unshift('1','2'); // [\"1\", \"2\", \"a\", \"b\", \"c\", null]\n```\n\n### 重排序方法\n\nreverse()会反转数组项的顺序：\n\n```javascript\nvar a = [1,2,6,5,3,0];\na.reverse();\nalert(a); // 0,3,5,6,2,1\n```\n\nsort()为排序函数，默认从小到大排序，也可以传入一个比较函数：\n\n```javascript\nvar a = [1,2,6,5,3,0];\na.sort();\nalert(a); // 0,1,2,3,5,6\n\nfunction compare(v1, v2) {\n  if (v1 < v2) {\n    return 1;\n  } else if (v1 > v2) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\na.sort(compare);\nalert(a); // 6,5,3,2,1,0\n```\n\n对于数值类型或者其valueOf()方法会返回数值类型的对象类型，可以简化一下比较函数：\n\n```javascript\n// 升序排序\nfunction compare1(v1, v2) {\n  return v1 - v2;\n}\n\n// 降序排序\nfunction compare1(v1, v2) {\n  return v2 - v1;\n}\n```\n\n### 操作方法\n\n#### concat()\n\n——先创建一个当前数组的副本，然后将接收到的参数添加到这个副本的末尾，返回新构建的这个数组：\n\n```javascript\nvar a = ['1','2','3'];\nvar b = a.concat('4',['5','6']);\nalert(a); // 1,2,3\nalert(b); // 1,2,3,4,5,6\n```\n\n#### slice()\n\n——局部拷贝数组，接受一个参数或两个参数；\n\n一个参数时拷贝从这个参数指定的位置到结尾；\n\n两个参数时，拷贝两个参数之间的项，不包含结束为止的项。\n\n当参数为负数时，则用该数加数组长度：\n\n- 若加完之后大于等于零则用加完后的数计算\n- 若加完之后还小于0则把该数看做0\n\n若起始位置大于结束位置，则返回空数组。\n\n下边为一个简单的例子：\n\n```javascript\nvar a = [0,1,2,3,4];\nvar b = a.slice(1);\nvar c = a.slice(1,4);\nalert(a); // 1,2,3,4\nalert(b); // 1,2,3\n```\n\n#### splice()\n\n主要用途是向数组的中部插入项，对原数组进行操作\n\n使用方式主要有三种：\n\n- 删除： 指定两个参数——要删除的第一项的位置和要删除的项数，返回被删除的项\n- 插入： 指定三个参数——起始位置、0（要删除的项数）、要插入的项（任意数量），返回被删除的项（空）\n- 替换： 指定三个参数——起始位置、要删除的项数、要插入的项（任意数量），返回被删除的项（空）\n\n代码例子可以看[这里](https://blog.csdn.net/qq_33733970/article/details/78787726)。\n\n## Date类型\n\n是在早期Java中的java.util.Date类基础上构建的。\n\n因此Date类型使用自UTC（国际协调时间）1970年1月1日零时开始经过的毫秒数来保存日期。\n\nDate类型保存的日期能够精确到1970年1月1日前后285616年。\n\n关于创建日期和设置日期可以看[这里](http://www.runoob.com/js/js-obj-date.html)。\n\nDate对象属性及方法可以看[这里](http://www.runoob.com/jsref/jsref-obj-date.html)。\n\n将表示日期的字符串传递给Date构造函数，后台会自动调用Date.parse()，然后将得到的值传给构造函数。\n\nDate对象可以直接进行大小比较。\n\n可以进行日期加减，下边的例子表示五天后的日期：\n\n```javascript\nvar myDate=new Date();\nmyDate.setDate(myDate.getDate()+5);\n```\n\n## [RegExp类型](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n\n正则表达式： `var expression = / pattern / flags`\n\n正则表达式语法看[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_in_regular_expressions)。\n\nflags为一个或多个标志，正则表达式的匹配模式支持下面三个标志：\n\n- g——全局(global)模式，应用于所有字符串\n- i——不区分带小写(case-insensitive)模式\n- m——多行(multiiline)模式，到达一行文本末尾时还会继续查找喜爱航是否存在与模式匹配的项\n\n元字符：`()[]{}\\^$|?*+.`，元字符必须转义。\n\n以下是一些例子：\n\n```javascript\nvar pattern1 = /at/g;\t\t// 匹配字符串中所有\"at\"实例\nvar pattern2 = /.at/gi;\t\t// 匹配字符串中所有以\"at\"结尾的三个字符的实例，不区分大小写\nvar pattern3 = /\\.at/gi;\t// 匹配字符串中所有\".at\"实例，不区分大小写\nvar pattern4 = /[bc]at/i;\t// 匹配字符串中第一个\"bat\"或\"cat\"实例，不区分大小写\nvar pattern5 = /\\[bc\\]at/i;\t// 匹配字符串中第一个\"[bc]at\"实例，不区分大小写\n```\n\n也可以使用构造函数来定义，例如下边两个式子得到的值是等价==相同的：\n\n```javascript\nvar pattern1 = /[bc]at/i;\nvar pattern2 = new RegExp(\"[bc]at\", \"i\");\n```\n\n需要注意的是，构造函数的字符串中，元字符必须双重转义，比如`/\\./`双重转义为\"\\\\\\\\.\"\n\n### 实例属性\n\n- global——布尔值，表示是否设置了g标志\n- ignoreCase——布尔值，表示是否设置了i标志\n- multiline——布尔值，表示是否设置了m标志\n- lastIndex——整数，表示开始搜索下一个匹配项的字符位置，从0算起\n- source——正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回\n\n### RegExp实例方法\n\n关于exec()方法看[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)。\n\n关于test()方法看[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test)。\n\n### RegExp构造函数属性\n\n| 长属性名     | 短属性名 | 说明                                     |\n| ------------ | -------- | ---------------------------------------- |\n| input        | $_       | 最近一次要匹配的字符串                   |\n| lastMatch    | $&       | 最近一次的匹配项                         |\n| lastParen    | $+       | 最近一次匹配的捕获组                     |\n| leftContext  | $`       | input字符串中lastMatch之前的文本         |\n| rightContext | $'       | input字符串中lastMatch之后的文本         |\n| multiline    | $*       | 布尔值，表示是否所有表达式都使用多行模式 |\n\n注：书中说Opera不支持input、lastMatch、lastParent、multiline，但查阅MDN文档显示的是支持的，因此待验证。\n\n关于如何使用，以lastMatch为例：\n\n```javascript\nvar re = /hi/g;\nre.test('hi there!');\nRegExp.lastMatch; // \"hi\"\nRegExp['$&'];     // \"hi\"\n```\n\n\n\n另外对于书中提到的ECMAScript正则表达式不支持的特性，因为版本不断更新，比如现在已经支持Unicode，因此就不在这里列出来了。\n\n## Function类型\n\n所有函数实际上都是Function类型的实例，且与其他引用数据类型一样具有属性和方法。\n\n**“函数是对象，函数名是指针”。**\n\n定义函数的方式：\n\n```javascript\nfunction sum1(num1, num2) {\n  return num1 + num2;\n}\n\nvar sum2 = function(num1, num2) {\n  return num1 + num2;\n};\n\nvar sum3 = new Function('num1', 'num2', 'return num1 + num2'); // 不推荐\n```\n\n### 深入理解没有重载\n\n将函数名想象为指针，当用同一个函数名重新声明一个函数实际上相当于改变了指针的指向。\n\n指针只能指向一个对象。\n\n### 函数声明与函数表达式\n\n```javascript\n// 函数声明\nfunction sum1(num1, num2) {\n  return num1 + num2;\n}\n// 函数表达式\nvar sum2 = function(num1, num2) {\n  return num1 + num2;\n};\n```\n\n解析器会率先读取函数声明，并使其在执行任何代码之前可用，\n\n但是对于函数表达式，必须等到解析器执行到它所在的代码行才会真正被解释执行。\n\n可以同时使用函数声明和函数表达式`var sum1 = function sum2() {}`，但会在Safari中导致错误。\n\n### 作为值的函数\n\n函数名本身就是变量，因此可以把函数当做参数传递，[这里](https://blog.csdn.net/lingfeng2008w/article/details/50598431)有人总结了当做参数传递的用法。\n\n### 函数内部属性\n\n在函数内部有两个特殊的对象：arguments和this。\n\n**arguments**还有一个callee属性，该属性是一个指针，指向拥有这个arguments对象的函数，有什么用呢？可以看阶乘函数这个例子：\n\n```javascript\nfunction factorial(num) {\n  if (num <= 1) {\n    return 1;\n  } else {\n    return num * factorial(num-1);\n  }\n}\n```\n\n像这样递归，我们在修改函数名、拷贝函数后修改原函数内容后都会遇到麻烦，因此就要用到callee属性了：\n\n```javascript\nfunction factorial(num) {\n  if (num <= 1) {\n    return 1;\n  } else {\n    return num * arguments.callee(num-1); // 使用callee属性\n  }\n}\n\nvar trueFactorial = factorial;  // 拷贝函数\nfactorial = function() {  // 修改原函数定义\n  return 0;\n};\n\nalert(factorial(5));  // 0\nalert(trueFactorial(5));// 120\n```\n\n**this**是函数在执行时所处的作用域（挡在网页的全局作用域调用函数时，this对象引用的就是window），可以看下边这个例子：\n\n```javascript\nfunction sayColor() {\n  alert(this.color);\n}\n\nwindow.color = 'red';\nvar b = {color: 'blue'};\nb.sayColor = sayColor;\n\nsayColor();   //'red'\nb.sayColor(); //'blue'\n```\n\n### 函数属性和方法\n\n每个函数都包含两个属性：length和prototype。\n\n- length：函数希望接收的命名参数的个数\n- prototype：可以看我[这篇文章](https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/)。\n\n每个函数都包含两个非继承而来的方法：apply()和call()。\n\n这两个的用途都是给函数**指定函数体内this的值**。\n\n> `apply` 与 [`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call) 非常相似，不同之处在于提供参数的方式。\n>\n> `apply` 使用参数数组而不是一组参数列表。`apply` 可以使用数组字面量（array literal），如 `fun.apply(this, ['eat', 'bananas'])`，或数组对象， 如  `fun.apply(this, new Array('eat', 'bananas'))`。\n>\n> 而 `call`的语法为`fun.call(thisArg, arg1, arg2, ...)`。\n>\n> 需要注意的是，指定的`this`值并不一定是该函数执行时真正的`this`值，如果这个函数处于[非严格模式下](https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode)，则指定为`null`和`undefined`的`this`值会自动指向全局对象(浏览器中就是window对象)，同时值为原始值(数字，字符串，布尔值)的`this`会指向该原始值的自动[包装对象](https://www.cnblogs.com/moqing/p/5593986.html)。\n\n每个函数都一个非标准的caller属性，指向调用该函数的函数，\n\n因此一般在一个函数的内部，通过`arguments.callee.caller`来实现对调用栈的追溯，\n\n但只建议将该属性用于调试目的。\n\n## 基本包装类型\n\n先看[这篇文章](https://www.cnblogs.com/moqing/p/5593986.html)\n\n### Boolean类型\n\n- 基本类型的布尔值： `var a = false`\n- 引用类型的布尔值： `var b = new Boolean(false)`\n\n除了包装对象的问题，两个还有两个区别：\n\n- typeof 的结果一个是\"boolean\"一个是\"object\"\n- instanceof测试是否为Boolean对象一个是false，一个是true\n\n**建议永远不要使用Boolean对象。**\n\n### Number类型\n\n重写了valueOf()、toLocaleString()和toString()方法。\n\n- valueOf()返回对象表示的基本类型的数值。\n\n- 可以为toString()方法传递一个表示基数的参数，告诉它返回几进制数值的字符串形式。\n\n- toFixed()方法会按照指定的小数位返回数值的字符串表示（四舍五入）：`var num = 10;num.toFixed(2)`结果为“10.00”\n- toExponential()按照指定的小数位数返回数值的指数表示的字符串：`var num = 10;num.toExponential(2)`结果为“1.00e+1”\n- toPrecision()接受一个参数作为表示数值所有数字的位数（不包括指数部分），然后返回最合适的表示格式的字符串。\n\n### String类型\n\n#### 字符方法\n\n访问字符串中特定字符：`charAt()`、`charCodeAt()`\n\n```javascript\nvar s = 'hello world!';\ns.charAt(1);\t// \"e\", 返回字符\ns.charCodeAt(1);// \"101\"， 返回字符编码\ns[1];\t\t\t// \"e\"\n```\n\n#### 字符串操作方法\n\n- concat() ： *string*.concat(*string1*, *string2*, ..., *stringX*)， 连接字符串，不改变原字符串，返回连接后的字符串\n- slice()：*string*.slice(*start*,*end*)，提取字符串片断，start为要截取的片段的起始下标；end为要截取的片段的结尾下标加一，若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串，如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。\n- substring()：类似于slice()\n- substr()：*string*.substr(*start*,*length*)， 提取字符片段，start为要截取的片段的起始下标；length为要截取的长度，那么返回从 sstart到结尾的字串。\n\n```javascript\nvar str1 = \"Hello \";\nvar str2 = \"world!\";\nstr1.concat(str2); // \"Hello world!\"\nstr.slice(1,5); // \"ello\"\nstr.substring(1,5); // \"ello\"\nstr.substr(2,3); // \"llo\"\n```\n\n假设p为一个正确的坐标值，m为一个负值，则\n\n- string.concat(p,m)x相当于string.concat(p)\n- string.substring(p,m)相当于string.substring(p,0)相当于string.substring(0,p)\n- string.substr(p,m)相当于string.substr(p,0)，返回空字符串\n\n#### 字符串位置方法\n\n`indexOf()`和`lastIndexOf()`，传入一个字符串，返回这个字符串在源字符串中第一次和最后一次出现的位置，若没有找到则返回-1。\n\n还可以传入第二个参数表示开始查找的位置，`indexOf()`往后查找，`lastIndexOf()`往前查找。\n\n#### 字符串大小写转换方法\n\n- toLowerCase()、toUpperCase()\n- toLocaleLowerCase()、toLocaleUpperCase()，针对地区应用不同的规则\n\n#### 字符串的模式匹配方法\n\n1. `match()`，等价于调用RegExp对象的exec()方法。\n\n   `match()`接受一个正则表达式或者一个RegExp对象作为参数，返回一个数组，数组第一项是与整个模式匹配的字符串，之后的每一项都是和捕获组匹配的字符串。\n\n2. `search()`与`match()`唯一不同的是返回的是第一个匹配项的索引。\n\n3. `replace()`添加了一个传入的参数，表示匹配到的字符串要替换成的字符串。如果要全部替换，要记得在正则表达式中指定全局标志(g)。第二个参数也可以是函数，该函数的返回值将替换掉第一个参数匹配到的结果。\n\n   替换字符串可以插入下面的特殊变量名：\n\n| 变量名 | 代表的值                                                     |\n| ------ | ------------------------------------------------------------ |\n| `$$`   | 插入一个 \"$\"。                                               |\n| `$&`   | 插入匹配的子串。                                             |\n| $`     | 插入当前匹配的子串左边的内容。                               |\n| `$'`   | 插入当前匹配的子串右边的内容。                               |\n| `$*n*` | 假如第一个参数是 [`RegExp`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp)对象，并且 n 是个小于100的非负整数，那么插入第 n 个括号匹配的字符串。 |\n\n4. `splite()`，基于指定的分隔符`separator`将一个字符串分割成多个子字符串，还可以指定第二个参数，一个整数，限定返回的分割片段数量。\n\n```javascript\n\"Webkit Moz O ms Khtml\".split( \" \" )   // [\"Webkit\", \"Moz\", \"O\", \"ms\", \"Khtml\"]\nvar myString = \"Hello World. How are you doing?\";\nmyString.split(\" \", 3); // [\"Hello\", \"World.\", \"How\"]\n```\n\n如果 `separator` 包含捕获括号（capturing parentheses），则其匹配结果将会包含在返回的数组中。\n\n```js\nvar myString = \"Hello 1 word. Sentence number 2.\";\nvar splits = myString.split(/(\\d)/);\t// \\d匹配数字\n\nconsole.log(splits); // [ \"Hello \", \"1\", \" word. Sentence number \", \"2\", \".\" ]\n```\n\n#### localeCompare()方法\n\n`referenceStr.localeCompare(compareString[, locales[, options]])`\n\n判断字符串参数compareString是否在字母表中排在字符串referenceStr之前，是的话返回正数，不是返回负数，相等返回0。\n\nlocales和options都是可选参数，还没有被所有浏览器支持，具体的含义可以查阅[文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare)。\n\n下边是一个简单的例子：\n\n```js\n// \"c\" 在 \"a\" 之后， 返回负数\n'a'.localeCompare('c'); \n// -2 或者 -1 (或者其他负数)\n\n// \"against\" 在 \"check\" 之前\n'check'.localeCompare('against'); \n// 2 或者 1 (或者其他正数)\n\n// 相同\n'a'.localeCompare('a'); \n// 0\n```\n\n#### fromCharCode()方法\n\nString构造函数的的静态方法，接收一个或者多个字符编码，然后把它们转换成一个字符串。\n\n```js\nString.fromCharCode(104, 101, 108, 108, 111); // \"hello\"\n```\n\n#### HTML方法\n\n该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用这些特性。因此不再列出。\n\n## 内置对象\n\n### 全局(Global)对象\n\n在大多是ECMAScript实现中都不能直接访问Global对象，不过Web浏览器实现了承担该角色的window对象，因此在全局作用域中生命的所有变量核函数，就都成为了window对象的属性。\n\n#### 全局函数\n\n所有在全局作用域定义的属性和方法都是Global对象的属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。\n\n- [`eval()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)：将传入的字符串当做 JavaScript 代码进行执行。\n- [`uneval()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/uneval) ：返回代表传入对象的源代码的字符串，该特性是非标准的，请尽量不要在生产环境中使用它！\n- [`isFinite()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isFinite)：判定一个数字是否是有限数字。`isFinite` 方法检测它参数的数值。如果参数是 `NaN`，正无穷大或者负无穷大，会返回`false`，其他返回 `true`。\n- [`isNaN()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN)：确定一个值是否为[`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN) 。如果`isNaN`函数的参数不是`Number`类型， `isNaN`函数会首先尝试将这个参数转换为数值，然后才会对转换后的结果是否是[`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)进行判断。ECMAScript (ES2015)包含[`Number.isNaN()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN)函数。通过`Number.isNaN(x)`来检测`变量x`是否是一个`NaN`将会是一种可靠的做法。然而，在缺少`Number.isNaN`函数的情况下, 通过表达式`(x != x)` 来检测`变量x`是否是`NaN`会更加可靠。\n- [`parseFloat()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)：解析一个字符串参数并返回一个浮点数。\n- [`parseInt()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt)：返回解析后的整数值。 如果被解析参数的第一个字符无法被转化成数值类型，则返回 [`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)。\n- [`decodeURI()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI)：解码一个由[`encodeURI`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) 先前创建的统一资源标识符（URI）或类似的例程。\n- [`decodeURIComponent()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent) : 解码由 [`encodeURIComponent`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) 方法或者其它类似方法编码的部分统一资源标识符（URI）。\n- [`encodeURI()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)：对统一资源标识符（URI）进行编码，将有效的URI不能包含的字符替换为特殊的UTF-8编码。\n- [`encodeURIComponent()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) ：对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）。\n- [`escape()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/escape) ，已废弃。生成新的由十六进制转义序列替换的字符串. 使用 [`encodeURI`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) 或 [`encodeURIComponent`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) 代替。\n- [`unescape()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/unescape) ，已废弃。\n\n`encodeURI` 会替换所有的字符，但不包括以下字符，即使它们具有适当的UTF-8转义序列：\n\n| 类型         | 包含                                          |\n| ------------ | --------------------------------------------- |\n| 保留字符     | `;` `,` `/` `?` `:` `@` `&` `=` `+` `$`       |\n| 非转义的字符 | 字母 数字 `-` `_` `.` `!` `~` `*` `'` `(` `)` |\n| 数字符号     | `#`                                           |\n\n请注意，`encodeURI` 自身*无法*产生能适用于HTTP GET 或 POST 请求的URI，例如对于 XMLHTTPRequests, 因为 \"&\", \"+\", 和 \"=\" 不会被编码，然而在 GET 和 POST 请求中它们是特殊字符。\n\n然而`encodeURIComponent` 转义除了字母、数字、`(`、`)`、`.`、`!`、`~`、`*`、`'`、`-`和`_`之外的所有字符。\n\n例子：\n\n```js\n// 解码一个西里尔字母（Cyrillic）URL\ndecodeURI(\"https://developer.mozilla.org/ru/docs/JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\");\n// \"https://developer.mozilla.org/ru/docs/JavaScript_шеллы\"\n\n// 解码一个西里尔字母的URL\ndecodeURIComponent(\"JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\");\n// \"JavaScript_шеллы\"\n\n// *****************************************************************\n\nvar fileName = 'my file(2).txt';\nvar header = \"Content-Disposition: attachment; filename*=UTF-8''\" \n       + encodeRFC5987ValueChars(fileName);\n\nconsole.log(header); \n// 输出 \"Content-Disposition: attachment; filename*=UTF-8''my%20file%282%29.txt\"\n\nfunction encodeRFC5987ValueChars (str) {\n  return encodeURIComponent(str).\n    // 注意，仅管 RFC3986 保留 \"!\"，但 RFC5987 并没有\n    // 所以我们并不需要过滤它\n    replace(/['()]/g, escape). // i.e., %27 %28 %29\n    replace(/\\*/g, '%2A').\n      // 下面的并不是 RFC5987 中 URI 编码必须的\n      // 所以对于 |`^ 这3个字符我们可以稍稍提高一点可读性\n      replace(/%(?:7C|60|5E)/g, unescape);\n}\n```\n\n 注： [RFC 3986](http://tools.ietf.org/html/rfc3986)，保留 !, ', (, ), 和 *\n\n#### Global对象的属性\n\n特殊值如undefined等、所有原生引用类型的构造函数都是Global对象的属性。\n\n除了这些还有：\n\n- [`Error`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error)\n- [`EvalError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError)\n- [`InternalError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError)\n- [`RangeError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n- [`ReferenceError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)\n- [`SyntaxError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)\n- [`TypeError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n- [`URIError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError)\n\n### Math对象\n\n[**Math**](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math) 是一个内置对象， 它具有数学常数和函数的属性和方法。不是一个函数对象。\n\n`Math` 的所有属性和方法都是静态的：例如常数pi可以用 `Math.PI` 表示，用 `x` 作参数 Math.sin(x)调用sin函数。\n\n#### Math对象的属性\n\n[`Math.E`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/E)\n\n欧拉常数，也是自然对数的底数, 约等于 2.718.\n\n[`Math.LN2`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2)\n\n2的自然对数, 约等于0.693.\n\n[`Math.LN10`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10)\n\n10的自然对数, 约等于 2.303.\n\n[`Math.LOG2E`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E)\n\n以2为底E的对数, 约等于 1.443.\n\n[`Math.LOG10E`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E)\n\n以10为底E的对数, 约等于 0.434.\n\n[`Math.PI`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/PI)\n\n圆周率，一个圆的周长和直径之比，约等于 3.14159.\n\n[`Math.SQRT1_2`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2)\n\n1/2的平方根, 约等于 0.707.\n\n[`Math.SQRT2`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2)\n\n2的平方根,约等于 1.414.\n\n#### 常用方法\n\n[`Math.max()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max)\n\n返回0个到多个数值中最大值.\n\n[`Math.min()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min)\n\n返回0个到多个数值中最小值.\n\n[`Math.ceil(x)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\n\n返回x向上取整后的值.\n\n[`Math.floor(x)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\n\n返回小于x的最大整数。\n\n[`Math.round(x)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\n\n返回四舍五入后的整数.\n\n[`Math.random()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random)\n\n返回0到1之间的伪随机数.\n\n所有方法看[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math#Methods)。","source":"_posts/JavaScript学习记录二.md","raw":"---\ntitle: JavaScript学习记录二\ntoc: true\ndate: 2018-09-13 10:14:53\ncategories:\n- Web\ntags:\n- JavaScript\n---\n\n——《JavaScript高级程序设计（第2版）》学习笔记\n\n要多查阅[MDN Web 文档](https://developer.mozilla.org/zh-CN/docs/Web)\n\n---\n\n# 变量、作用域和内存问题\n\n## 基本类型和引用类型的值\n\nECMAScript变量可能包含两种不同数据类型的值：\n\n- **基本类型值**：保存在**栈内存**中的简单数据段，这种值完全保存在内存中的一个位置\n- **引用类型值**：保存在**堆内存**中的对象，保存的实际上是一个指针，指针指向内存中真正对象保存的位置\n\n五种基本数据类型：Undefined、Null、Boolean、Number、String在内存中占有固定大小的空间，因此可以保存在栈内存中。因为我们操作的是它们实际保存的值，所以它们是**按值**访问的。\n\n对于对象，先从栈中读取内存地址，然后再按照地址找到保存在堆中的值。因为我们操作的不是实际的值，而是那个值所引用的对象，因此我们称之为**按引用**访问的。（图片来源于网络，cr 水印）\n\n![栈内存与堆内存](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536816598256&di=246ab4e73e12049d497d375df4fd273b&imgtype=jpg&src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D2929764421%2C2277861536%26fm%3D214%26gp%3D0.jpg)\n\n### 动态属性\n\n对于对象，我们可以改变和删除其属性和方法，但是不能给基本类型的值添加属性。\n\n即只能给引用类型值动态地添加属性。\n\n### 复制变量值\n\n当复制基本类型值的时候，会在栈中为其开辟一块新的内存保存其值。\n\n但是当复制引用类型的值时，实际上复制保存的是这个对象在堆内存中的地址，也就是两者指向的是同一个对象。\n\n### 传递参数\n\nECMAScript中所有的函数的参数都是**按值传递**的。\n\n传递基本类型值就如基本类型变量的复制一样，传递引用类型变量时也如同引用变量的复制。\n\n因此传递引用类型的变量时，传递的相当于是拷贝的指针。\n\n可以看下边这个例子（我觉得可以把对象看做是一个指向对象的指针，然后函数传递的是一个拷贝的指针）：\n\n```javascript\nfunction setName(obj) {\n  obj.name = \"Nicholas\";\n  obj = new Object();\n  obj.name = \"Greg\";\n}\n\nvar person = new Obejct();\nsetName(person);\nalert(person.name); // \"Nicholas\"\n```\n\n### 检测类型\n\ntypeof检测null返回\"object\"\n\n当我们想知道一个对象是什么类型的对象时，可以使用`instanceof`，它的语法是：\n\n`result = variable instanceof constructor`\n\n如果变量是给定引用类型（由构造函数表示）的实例，则instanceof返回true：\n\n```javascript\nalert(person instanceof Object); // 变量person是Object么？\nalert(colors instanceof Array); // 变量colors是Array么？\n```\n\n当使用instanceof检测基本类型的值时始终返回false，因为基本类型不是对象。\n\n注： 在Safiri和Chrome中使用typeof检测正则表达式会错误的返回\"function\"。\n\n## 执行环境和作用域\n\n[执行环境](https://blog.csdn.net/wmaoshu/article/details/60466990)定义了变量或函数有权访问的其他数据，决定了它们各自的行为。\n\n每个执行环境都有一个与之关联的**变量对象**，环境中定义的所有变量和函数都保存在这个对象中。\n\n在Web浏览器中，全局执行环境被认为是window对象，因此所有全局变量和函数都是作为window对象的属性和方法创建的。\n\n一个执行环境中的所有代码执行完毕后，该环境和保存在其中的所有变量和函数定义都被销毁，\n\n全局执行环境直到关闭页面或者浏览器时才会被销毁。\n\n关于作用域链可以看[这里](https://blog.csdn.net/charlene0824/article/details/52252824)。\n\n### 延长作用域链\n\n- with语句： 其变量对象包含为指定的对象的所有属性和方法所做的变量声明。\n- catch语句： 包含被抛出的错误对象的声明\n\n在IE的JavaScript实现中，catch语句捕获的错误对象会被添加到执行环境的变量对象中。\n\n### 没有块级作用域\n\n- 使用if 、for语句创建的变量会保存在语句外部的执行环境中。\n\n- 函数内部是一个局部环境\n- 访问局部变量比全局变量快，因为不用向上搜索作用域链\n\n## 垃圾收集\n\nJavaScript具有自动垃圾收集机制，按照固定的时间间隔或代码执行中预定的收集时间，周期性地找出不再使用的变量释放其内存。\n\n关于垃圾收集方式的详细解释可以看[这里](https://www.cnblogs.com/scottjeremy/p/6870729.html)。\n\n关于性能问题和管理内存可以看[这里](https://www.cnblogs.com/yxField/p/4226591.html)。\n\n# 引用类型\n\n## Object类型\n\n创建Object实例的方式：\n\n- `var xxx = new Object()`\n- `var xxx = {age: 29}`, `{}`是对象字面量边界\n\n可以用`xxx.age`或者`xxx['age']`来访问属性，更建议用点表示法。\n\n## Array类型\n\nECMAScript数组的每一项可以保存任何类型的数据。\n\n数组的索引从0开始。\n\n数组的项数保存在其length属性中，它并不是只读的，可以通过设置它来在数组的末尾移除或添加项，添加项的初始值为undefined。\n\n因为JavaScript使用一个32位整数保存数组元素个数，因此数组最多可以包含4294967295项（2的32次方减1）。\n\n以下是创建数组的例子：\n\n```javascript\n// new 可以省略\nvar a = new Array(); // 创建一个空数组\nvar b = new Array(20); // 创造一个包含20项的数组，每一项的初始值都是undefined\nvar c = new Array(\"red\", \"blue\", \"green\"); // 创造一个包含三项：\"red\",\"blue\",\"green\"的数组\nvar d = [\"red\", \"blue\", \"green\"]; // 创造一个包含三项：\"red\",\"blue\",\"green\"的数组\nvar e = []; // 创建一个空数组\nvar f = [1,2,]; // 不要这样！这样会创建一个包含2或3项的数组\nvar g = [,,,,,]; // 不要这样！这样会创建一个包含5或6项的数组\n```\n\n### 转换方法\n\nvalueOf()返回当前对象的原始值；\n\ntoString()方法先调用每一项的toString()方法，然后用逗号将它们拼接起来并返回；\n\ntoLocalString()方法先调用每一项的toLocalString()方法，然后用逗号将它们拼接起来并返回；\n\n如果使用join()方法可以使用不同的分隔符来构建这个字符串：\n\n```javascript\nvar a = ['a','b','c'];\nalert(a.join(',')); // 'a,b,c'\nalert(a.join('||')); // 'a||b||c'\n```\n\n如果某一项是undefined或null，那么在toString()、toLocalString()、join()方法返回的结果中以空字符串表示。\n\n### 栈方法\n\nECMAScript为数组提供了push()和pop()方法，以便实现类似栈的行为（LIFO，后进先出）。\n\n- push()方法可以接受任意数量的参数，然后把它们逐个添加到数组末尾，并返回修改后的数组长度\n- pop()方法则从数组末尾移除最后一项，并将length减一，返回移除的项。\n\n### 队列方法\n\n可以使用push()和shift()方法，实现类似于队列的行为（FIFO，先进先出）。\n\n- shift()方法从数组开头移除第一项，并将length减一，返回移除的项。\n- ECMAScript还提供了unshift()方法，可以接受任意数量的参数，然后把它们逐个添加到数组头部，并返回修改后的数组长度（IE返回undefined）。\n\n关于unshift()的添加多个变量的顺序：\n\n```javascript\na = [\"a\", \"b\", \"c\", null]；\na.unshift('1','2'); // [\"1\", \"2\", \"a\", \"b\", \"c\", null]\n```\n\n### 重排序方法\n\nreverse()会反转数组项的顺序：\n\n```javascript\nvar a = [1,2,6,5,3,0];\na.reverse();\nalert(a); // 0,3,5,6,2,1\n```\n\nsort()为排序函数，默认从小到大排序，也可以传入一个比较函数：\n\n```javascript\nvar a = [1,2,6,5,3,0];\na.sort();\nalert(a); // 0,1,2,3,5,6\n\nfunction compare(v1, v2) {\n  if (v1 < v2) {\n    return 1;\n  } else if (v1 > v2) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\na.sort(compare);\nalert(a); // 6,5,3,2,1,0\n```\n\n对于数值类型或者其valueOf()方法会返回数值类型的对象类型，可以简化一下比较函数：\n\n```javascript\n// 升序排序\nfunction compare1(v1, v2) {\n  return v1 - v2;\n}\n\n// 降序排序\nfunction compare1(v1, v2) {\n  return v2 - v1;\n}\n```\n\n### 操作方法\n\n#### concat()\n\n——先创建一个当前数组的副本，然后将接收到的参数添加到这个副本的末尾，返回新构建的这个数组：\n\n```javascript\nvar a = ['1','2','3'];\nvar b = a.concat('4',['5','6']);\nalert(a); // 1,2,3\nalert(b); // 1,2,3,4,5,6\n```\n\n#### slice()\n\n——局部拷贝数组，接受一个参数或两个参数；\n\n一个参数时拷贝从这个参数指定的位置到结尾；\n\n两个参数时，拷贝两个参数之间的项，不包含结束为止的项。\n\n当参数为负数时，则用该数加数组长度：\n\n- 若加完之后大于等于零则用加完后的数计算\n- 若加完之后还小于0则把该数看做0\n\n若起始位置大于结束位置，则返回空数组。\n\n下边为一个简单的例子：\n\n```javascript\nvar a = [0,1,2,3,4];\nvar b = a.slice(1);\nvar c = a.slice(1,4);\nalert(a); // 1,2,3,4\nalert(b); // 1,2,3\n```\n\n#### splice()\n\n主要用途是向数组的中部插入项，对原数组进行操作\n\n使用方式主要有三种：\n\n- 删除： 指定两个参数——要删除的第一项的位置和要删除的项数，返回被删除的项\n- 插入： 指定三个参数——起始位置、0（要删除的项数）、要插入的项（任意数量），返回被删除的项（空）\n- 替换： 指定三个参数——起始位置、要删除的项数、要插入的项（任意数量），返回被删除的项（空）\n\n代码例子可以看[这里](https://blog.csdn.net/qq_33733970/article/details/78787726)。\n\n## Date类型\n\n是在早期Java中的java.util.Date类基础上构建的。\n\n因此Date类型使用自UTC（国际协调时间）1970年1月1日零时开始经过的毫秒数来保存日期。\n\nDate类型保存的日期能够精确到1970年1月1日前后285616年。\n\n关于创建日期和设置日期可以看[这里](http://www.runoob.com/js/js-obj-date.html)。\n\nDate对象属性及方法可以看[这里](http://www.runoob.com/jsref/jsref-obj-date.html)。\n\n将表示日期的字符串传递给Date构造函数，后台会自动调用Date.parse()，然后将得到的值传给构造函数。\n\nDate对象可以直接进行大小比较。\n\n可以进行日期加减，下边的例子表示五天后的日期：\n\n```javascript\nvar myDate=new Date();\nmyDate.setDate(myDate.getDate()+5);\n```\n\n## [RegExp类型](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n\n正则表达式： `var expression = / pattern / flags`\n\n正则表达式语法看[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_in_regular_expressions)。\n\nflags为一个或多个标志，正则表达式的匹配模式支持下面三个标志：\n\n- g——全局(global)模式，应用于所有字符串\n- i——不区分带小写(case-insensitive)模式\n- m——多行(multiiline)模式，到达一行文本末尾时还会继续查找喜爱航是否存在与模式匹配的项\n\n元字符：`()[]{}\\^$|?*+.`，元字符必须转义。\n\n以下是一些例子：\n\n```javascript\nvar pattern1 = /at/g;\t\t// 匹配字符串中所有\"at\"实例\nvar pattern2 = /.at/gi;\t\t// 匹配字符串中所有以\"at\"结尾的三个字符的实例，不区分大小写\nvar pattern3 = /\\.at/gi;\t// 匹配字符串中所有\".at\"实例，不区分大小写\nvar pattern4 = /[bc]at/i;\t// 匹配字符串中第一个\"bat\"或\"cat\"实例，不区分大小写\nvar pattern5 = /\\[bc\\]at/i;\t// 匹配字符串中第一个\"[bc]at\"实例，不区分大小写\n```\n\n也可以使用构造函数来定义，例如下边两个式子得到的值是等价==相同的：\n\n```javascript\nvar pattern1 = /[bc]at/i;\nvar pattern2 = new RegExp(\"[bc]at\", \"i\");\n```\n\n需要注意的是，构造函数的字符串中，元字符必须双重转义，比如`/\\./`双重转义为\"\\\\\\\\.\"\n\n### 实例属性\n\n- global——布尔值，表示是否设置了g标志\n- ignoreCase——布尔值，表示是否设置了i标志\n- multiline——布尔值，表示是否设置了m标志\n- lastIndex——整数，表示开始搜索下一个匹配项的字符位置，从0算起\n- source——正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回\n\n### RegExp实例方法\n\n关于exec()方法看[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)。\n\n关于test()方法看[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test)。\n\n### RegExp构造函数属性\n\n| 长属性名     | 短属性名 | 说明                                     |\n| ------------ | -------- | ---------------------------------------- |\n| input        | $_       | 最近一次要匹配的字符串                   |\n| lastMatch    | $&       | 最近一次的匹配项                         |\n| lastParen    | $+       | 最近一次匹配的捕获组                     |\n| leftContext  | $`       | input字符串中lastMatch之前的文本         |\n| rightContext | $'       | input字符串中lastMatch之后的文本         |\n| multiline    | $*       | 布尔值，表示是否所有表达式都使用多行模式 |\n\n注：书中说Opera不支持input、lastMatch、lastParent、multiline，但查阅MDN文档显示的是支持的，因此待验证。\n\n关于如何使用，以lastMatch为例：\n\n```javascript\nvar re = /hi/g;\nre.test('hi there!');\nRegExp.lastMatch; // \"hi\"\nRegExp['$&'];     // \"hi\"\n```\n\n\n\n另外对于书中提到的ECMAScript正则表达式不支持的特性，因为版本不断更新，比如现在已经支持Unicode，因此就不在这里列出来了。\n\n## Function类型\n\n所有函数实际上都是Function类型的实例，且与其他引用数据类型一样具有属性和方法。\n\n**“函数是对象，函数名是指针”。**\n\n定义函数的方式：\n\n```javascript\nfunction sum1(num1, num2) {\n  return num1 + num2;\n}\n\nvar sum2 = function(num1, num2) {\n  return num1 + num2;\n};\n\nvar sum3 = new Function('num1', 'num2', 'return num1 + num2'); // 不推荐\n```\n\n### 深入理解没有重载\n\n将函数名想象为指针，当用同一个函数名重新声明一个函数实际上相当于改变了指针的指向。\n\n指针只能指向一个对象。\n\n### 函数声明与函数表达式\n\n```javascript\n// 函数声明\nfunction sum1(num1, num2) {\n  return num1 + num2;\n}\n// 函数表达式\nvar sum2 = function(num1, num2) {\n  return num1 + num2;\n};\n```\n\n解析器会率先读取函数声明，并使其在执行任何代码之前可用，\n\n但是对于函数表达式，必须等到解析器执行到它所在的代码行才会真正被解释执行。\n\n可以同时使用函数声明和函数表达式`var sum1 = function sum2() {}`，但会在Safari中导致错误。\n\n### 作为值的函数\n\n函数名本身就是变量，因此可以把函数当做参数传递，[这里](https://blog.csdn.net/lingfeng2008w/article/details/50598431)有人总结了当做参数传递的用法。\n\n### 函数内部属性\n\n在函数内部有两个特殊的对象：arguments和this。\n\n**arguments**还有一个callee属性，该属性是一个指针，指向拥有这个arguments对象的函数，有什么用呢？可以看阶乘函数这个例子：\n\n```javascript\nfunction factorial(num) {\n  if (num <= 1) {\n    return 1;\n  } else {\n    return num * factorial(num-1);\n  }\n}\n```\n\n像这样递归，我们在修改函数名、拷贝函数后修改原函数内容后都会遇到麻烦，因此就要用到callee属性了：\n\n```javascript\nfunction factorial(num) {\n  if (num <= 1) {\n    return 1;\n  } else {\n    return num * arguments.callee(num-1); // 使用callee属性\n  }\n}\n\nvar trueFactorial = factorial;  // 拷贝函数\nfactorial = function() {  // 修改原函数定义\n  return 0;\n};\n\nalert(factorial(5));  // 0\nalert(trueFactorial(5));// 120\n```\n\n**this**是函数在执行时所处的作用域（挡在网页的全局作用域调用函数时，this对象引用的就是window），可以看下边这个例子：\n\n```javascript\nfunction sayColor() {\n  alert(this.color);\n}\n\nwindow.color = 'red';\nvar b = {color: 'blue'};\nb.sayColor = sayColor;\n\nsayColor();   //'red'\nb.sayColor(); //'blue'\n```\n\n### 函数属性和方法\n\n每个函数都包含两个属性：length和prototype。\n\n- length：函数希望接收的命名参数的个数\n- prototype：可以看我[这篇文章](https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/)。\n\n每个函数都包含两个非继承而来的方法：apply()和call()。\n\n这两个的用途都是给函数**指定函数体内this的值**。\n\n> `apply` 与 [`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call) 非常相似，不同之处在于提供参数的方式。\n>\n> `apply` 使用参数数组而不是一组参数列表。`apply` 可以使用数组字面量（array literal），如 `fun.apply(this, ['eat', 'bananas'])`，或数组对象， 如  `fun.apply(this, new Array('eat', 'bananas'))`。\n>\n> 而 `call`的语法为`fun.call(thisArg, arg1, arg2, ...)`。\n>\n> 需要注意的是，指定的`this`值并不一定是该函数执行时真正的`this`值，如果这个函数处于[非严格模式下](https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode)，则指定为`null`和`undefined`的`this`值会自动指向全局对象(浏览器中就是window对象)，同时值为原始值(数字，字符串，布尔值)的`this`会指向该原始值的自动[包装对象](https://www.cnblogs.com/moqing/p/5593986.html)。\n\n每个函数都一个非标准的caller属性，指向调用该函数的函数，\n\n因此一般在一个函数的内部，通过`arguments.callee.caller`来实现对调用栈的追溯，\n\n但只建议将该属性用于调试目的。\n\n## 基本包装类型\n\n先看[这篇文章](https://www.cnblogs.com/moqing/p/5593986.html)\n\n### Boolean类型\n\n- 基本类型的布尔值： `var a = false`\n- 引用类型的布尔值： `var b = new Boolean(false)`\n\n除了包装对象的问题，两个还有两个区别：\n\n- typeof 的结果一个是\"boolean\"一个是\"object\"\n- instanceof测试是否为Boolean对象一个是false，一个是true\n\n**建议永远不要使用Boolean对象。**\n\n### Number类型\n\n重写了valueOf()、toLocaleString()和toString()方法。\n\n- valueOf()返回对象表示的基本类型的数值。\n\n- 可以为toString()方法传递一个表示基数的参数，告诉它返回几进制数值的字符串形式。\n\n- toFixed()方法会按照指定的小数位返回数值的字符串表示（四舍五入）：`var num = 10;num.toFixed(2)`结果为“10.00”\n- toExponential()按照指定的小数位数返回数值的指数表示的字符串：`var num = 10;num.toExponential(2)`结果为“1.00e+1”\n- toPrecision()接受一个参数作为表示数值所有数字的位数（不包括指数部分），然后返回最合适的表示格式的字符串。\n\n### String类型\n\n#### 字符方法\n\n访问字符串中特定字符：`charAt()`、`charCodeAt()`\n\n```javascript\nvar s = 'hello world!';\ns.charAt(1);\t// \"e\", 返回字符\ns.charCodeAt(1);// \"101\"， 返回字符编码\ns[1];\t\t\t// \"e\"\n```\n\n#### 字符串操作方法\n\n- concat() ： *string*.concat(*string1*, *string2*, ..., *stringX*)， 连接字符串，不改变原字符串，返回连接后的字符串\n- slice()：*string*.slice(*start*,*end*)，提取字符串片断，start为要截取的片段的起始下标；end为要截取的片段的结尾下标加一，若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串，如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。\n- substring()：类似于slice()\n- substr()：*string*.substr(*start*,*length*)， 提取字符片段，start为要截取的片段的起始下标；length为要截取的长度，那么返回从 sstart到结尾的字串。\n\n```javascript\nvar str1 = \"Hello \";\nvar str2 = \"world!\";\nstr1.concat(str2); // \"Hello world!\"\nstr.slice(1,5); // \"ello\"\nstr.substring(1,5); // \"ello\"\nstr.substr(2,3); // \"llo\"\n```\n\n假设p为一个正确的坐标值，m为一个负值，则\n\n- string.concat(p,m)x相当于string.concat(p)\n- string.substring(p,m)相当于string.substring(p,0)相当于string.substring(0,p)\n- string.substr(p,m)相当于string.substr(p,0)，返回空字符串\n\n#### 字符串位置方法\n\n`indexOf()`和`lastIndexOf()`，传入一个字符串，返回这个字符串在源字符串中第一次和最后一次出现的位置，若没有找到则返回-1。\n\n还可以传入第二个参数表示开始查找的位置，`indexOf()`往后查找，`lastIndexOf()`往前查找。\n\n#### 字符串大小写转换方法\n\n- toLowerCase()、toUpperCase()\n- toLocaleLowerCase()、toLocaleUpperCase()，针对地区应用不同的规则\n\n#### 字符串的模式匹配方法\n\n1. `match()`，等价于调用RegExp对象的exec()方法。\n\n   `match()`接受一个正则表达式或者一个RegExp对象作为参数，返回一个数组，数组第一项是与整个模式匹配的字符串，之后的每一项都是和捕获组匹配的字符串。\n\n2. `search()`与`match()`唯一不同的是返回的是第一个匹配项的索引。\n\n3. `replace()`添加了一个传入的参数，表示匹配到的字符串要替换成的字符串。如果要全部替换，要记得在正则表达式中指定全局标志(g)。第二个参数也可以是函数，该函数的返回值将替换掉第一个参数匹配到的结果。\n\n   替换字符串可以插入下面的特殊变量名：\n\n| 变量名 | 代表的值                                                     |\n| ------ | ------------------------------------------------------------ |\n| `$$`   | 插入一个 \"$\"。                                               |\n| `$&`   | 插入匹配的子串。                                             |\n| $`     | 插入当前匹配的子串左边的内容。                               |\n| `$'`   | 插入当前匹配的子串右边的内容。                               |\n| `$*n*` | 假如第一个参数是 [`RegExp`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp)对象，并且 n 是个小于100的非负整数，那么插入第 n 个括号匹配的字符串。 |\n\n4. `splite()`，基于指定的分隔符`separator`将一个字符串分割成多个子字符串，还可以指定第二个参数，一个整数，限定返回的分割片段数量。\n\n```javascript\n\"Webkit Moz O ms Khtml\".split( \" \" )   // [\"Webkit\", \"Moz\", \"O\", \"ms\", \"Khtml\"]\nvar myString = \"Hello World. How are you doing?\";\nmyString.split(\" \", 3); // [\"Hello\", \"World.\", \"How\"]\n```\n\n如果 `separator` 包含捕获括号（capturing parentheses），则其匹配结果将会包含在返回的数组中。\n\n```js\nvar myString = \"Hello 1 word. Sentence number 2.\";\nvar splits = myString.split(/(\\d)/);\t// \\d匹配数字\n\nconsole.log(splits); // [ \"Hello \", \"1\", \" word. Sentence number \", \"2\", \".\" ]\n```\n\n#### localeCompare()方法\n\n`referenceStr.localeCompare(compareString[, locales[, options]])`\n\n判断字符串参数compareString是否在字母表中排在字符串referenceStr之前，是的话返回正数，不是返回负数，相等返回0。\n\nlocales和options都是可选参数，还没有被所有浏览器支持，具体的含义可以查阅[文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare)。\n\n下边是一个简单的例子：\n\n```js\n// \"c\" 在 \"a\" 之后， 返回负数\n'a'.localeCompare('c'); \n// -2 或者 -1 (或者其他负数)\n\n// \"against\" 在 \"check\" 之前\n'check'.localeCompare('against'); \n// 2 或者 1 (或者其他正数)\n\n// 相同\n'a'.localeCompare('a'); \n// 0\n```\n\n#### fromCharCode()方法\n\nString构造函数的的静态方法，接收一个或者多个字符编码，然后把它们转换成一个字符串。\n\n```js\nString.fromCharCode(104, 101, 108, 108, 111); // \"hello\"\n```\n\n#### HTML方法\n\n该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用这些特性。因此不再列出。\n\n## 内置对象\n\n### 全局(Global)对象\n\n在大多是ECMAScript实现中都不能直接访问Global对象，不过Web浏览器实现了承担该角色的window对象，因此在全局作用域中生命的所有变量核函数，就都成为了window对象的属性。\n\n#### 全局函数\n\n所有在全局作用域定义的属性和方法都是Global对象的属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。\n\n- [`eval()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)：将传入的字符串当做 JavaScript 代码进行执行。\n- [`uneval()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/uneval) ：返回代表传入对象的源代码的字符串，该特性是非标准的，请尽量不要在生产环境中使用它！\n- [`isFinite()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isFinite)：判定一个数字是否是有限数字。`isFinite` 方法检测它参数的数值。如果参数是 `NaN`，正无穷大或者负无穷大，会返回`false`，其他返回 `true`。\n- [`isNaN()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN)：确定一个值是否为[`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN) 。如果`isNaN`函数的参数不是`Number`类型， `isNaN`函数会首先尝试将这个参数转换为数值，然后才会对转换后的结果是否是[`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)进行判断。ECMAScript (ES2015)包含[`Number.isNaN()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN)函数。通过`Number.isNaN(x)`来检测`变量x`是否是一个`NaN`将会是一种可靠的做法。然而，在缺少`Number.isNaN`函数的情况下, 通过表达式`(x != x)` 来检测`变量x`是否是`NaN`会更加可靠。\n- [`parseFloat()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)：解析一个字符串参数并返回一个浮点数。\n- [`parseInt()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt)：返回解析后的整数值。 如果被解析参数的第一个字符无法被转化成数值类型，则返回 [`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)。\n- [`decodeURI()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI)：解码一个由[`encodeURI`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) 先前创建的统一资源标识符（URI）或类似的例程。\n- [`decodeURIComponent()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent) : 解码由 [`encodeURIComponent`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) 方法或者其它类似方法编码的部分统一资源标识符（URI）。\n- [`encodeURI()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)：对统一资源标识符（URI）进行编码，将有效的URI不能包含的字符替换为特殊的UTF-8编码。\n- [`encodeURIComponent()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) ：对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）。\n- [`escape()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/escape) ，已废弃。生成新的由十六进制转义序列替换的字符串. 使用 [`encodeURI`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) 或 [`encodeURIComponent`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) 代替。\n- [`unescape()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/unescape) ，已废弃。\n\n`encodeURI` 会替换所有的字符，但不包括以下字符，即使它们具有适当的UTF-8转义序列：\n\n| 类型         | 包含                                          |\n| ------------ | --------------------------------------------- |\n| 保留字符     | `;` `,` `/` `?` `:` `@` `&` `=` `+` `$`       |\n| 非转义的字符 | 字母 数字 `-` `_` `.` `!` `~` `*` `'` `(` `)` |\n| 数字符号     | `#`                                           |\n\n请注意，`encodeURI` 自身*无法*产生能适用于HTTP GET 或 POST 请求的URI，例如对于 XMLHTTPRequests, 因为 \"&\", \"+\", 和 \"=\" 不会被编码，然而在 GET 和 POST 请求中它们是特殊字符。\n\n然而`encodeURIComponent` 转义除了字母、数字、`(`、`)`、`.`、`!`、`~`、`*`、`'`、`-`和`_`之外的所有字符。\n\n例子：\n\n```js\n// 解码一个西里尔字母（Cyrillic）URL\ndecodeURI(\"https://developer.mozilla.org/ru/docs/JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\");\n// \"https://developer.mozilla.org/ru/docs/JavaScript_шеллы\"\n\n// 解码一个西里尔字母的URL\ndecodeURIComponent(\"JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\");\n// \"JavaScript_шеллы\"\n\n// *****************************************************************\n\nvar fileName = 'my file(2).txt';\nvar header = \"Content-Disposition: attachment; filename*=UTF-8''\" \n       + encodeRFC5987ValueChars(fileName);\n\nconsole.log(header); \n// 输出 \"Content-Disposition: attachment; filename*=UTF-8''my%20file%282%29.txt\"\n\nfunction encodeRFC5987ValueChars (str) {\n  return encodeURIComponent(str).\n    // 注意，仅管 RFC3986 保留 \"!\"，但 RFC5987 并没有\n    // 所以我们并不需要过滤它\n    replace(/['()]/g, escape). // i.e., %27 %28 %29\n    replace(/\\*/g, '%2A').\n      // 下面的并不是 RFC5987 中 URI 编码必须的\n      // 所以对于 |`^ 这3个字符我们可以稍稍提高一点可读性\n      replace(/%(?:7C|60|5E)/g, unescape);\n}\n```\n\n 注： [RFC 3986](http://tools.ietf.org/html/rfc3986)，保留 !, ', (, ), 和 *\n\n#### Global对象的属性\n\n特殊值如undefined等、所有原生引用类型的构造函数都是Global对象的属性。\n\n除了这些还有：\n\n- [`Error`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error)\n- [`EvalError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError)\n- [`InternalError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError)\n- [`RangeError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n- [`ReferenceError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)\n- [`SyntaxError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)\n- [`TypeError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n- [`URIError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError)\n\n### Math对象\n\n[**Math**](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math) 是一个内置对象， 它具有数学常数和函数的属性和方法。不是一个函数对象。\n\n`Math` 的所有属性和方法都是静态的：例如常数pi可以用 `Math.PI` 表示，用 `x` 作参数 Math.sin(x)调用sin函数。\n\n#### Math对象的属性\n\n[`Math.E`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/E)\n\n欧拉常数，也是自然对数的底数, 约等于 2.718.\n\n[`Math.LN2`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2)\n\n2的自然对数, 约等于0.693.\n\n[`Math.LN10`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10)\n\n10的自然对数, 约等于 2.303.\n\n[`Math.LOG2E`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E)\n\n以2为底E的对数, 约等于 1.443.\n\n[`Math.LOG10E`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E)\n\n以10为底E的对数, 约等于 0.434.\n\n[`Math.PI`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/PI)\n\n圆周率，一个圆的周长和直径之比，约等于 3.14159.\n\n[`Math.SQRT1_2`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2)\n\n1/2的平方根, 约等于 0.707.\n\n[`Math.SQRT2`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2)\n\n2的平方根,约等于 1.414.\n\n#### 常用方法\n\n[`Math.max()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max)\n\n返回0个到多个数值中最大值.\n\n[`Math.min()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min)\n\n返回0个到多个数值中最小值.\n\n[`Math.ceil(x)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\n\n返回x向上取整后的值.\n\n[`Math.floor(x)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\n\n返回小于x的最大整数。\n\n[`Math.round(x)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\n\n返回四舍五入后的整数.\n\n[`Math.random()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random)\n\n返回0到1之间的伪随机数.\n\n所有方法看[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math#Methods)。","slug":"JavaScript学习记录二","published":1,"updated":"2018-09-16T03:04:04.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4azu000ccragvvxbro4e","content":"<p>——《JavaScript高级程序设计（第2版）》学习笔记</p>\n<p>要多查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web\" target=\"_blank\" rel=\"noopener\">MDN Web 文档</a></p>\n<hr>\n<h1 id=\"变量、作用域和内存问题\"><a href=\"#变量、作用域和内存问题\" class=\"headerlink\" title=\"变量、作用域和内存问题\"></a>变量、作用域和内存问题</h1><h2 id=\"基本类型和引用类型的值\"><a href=\"#基本类型和引用类型的值\" class=\"headerlink\" title=\"基本类型和引用类型的值\"></a>基本类型和引用类型的值</h2><p>ECMAScript变量可能包含两种不同数据类型的值：</p>\n<ul>\n<li><strong>基本类型值</strong>：保存在<strong>栈内存</strong>中的简单数据段，这种值完全保存在内存中的一个位置</li>\n<li><strong>引用类型值</strong>：保存在<strong>堆内存</strong>中的对象，保存的实际上是一个指针，指针指向内存中真正对象保存的位置</li>\n</ul>\n<p>五种基本数据类型：Undefined、Null、Boolean、Number、String在内存中占有固定大小的空间，因此可以保存在栈内存中。因为我们操作的是它们实际保存的值，所以它们是<strong>按值</strong>访问的。</p>\n<p>对于对象，先从栈中读取内存地址，然后再按照地址找到保存在堆中的值。因为我们操作的不是实际的值，而是那个值所引用的对象，因此我们称之为<strong>按引用</strong>访问的。（图片来源于网络，cr 水印）</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536816598256&amp;di=246ab4e73e12049d497d375df4fd273b&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D2929764421%2C2277861536%26fm%3D214%26gp%3D0.jpg\" alt=\"栈内存与堆内存\"></p>\n<h3 id=\"动态属性\"><a href=\"#动态属性\" class=\"headerlink\" title=\"动态属性\"></a>动态属性</h3><p>对于对象，我们可以改变和删除其属性和方法，但是不能给基本类型的值添加属性。</p>\n<p>即只能给引用类型值动态地添加属性。</p>\n<h3 id=\"复制变量值\"><a href=\"#复制变量值\" class=\"headerlink\" title=\"复制变量值\"></a>复制变量值</h3><p>当复制基本类型值的时候，会在栈中为其开辟一块新的内存保存其值。</p>\n<p>但是当复制引用类型的值时，实际上复制保存的是这个对象在堆内存中的地址，也就是两者指向的是同一个对象。</p>\n<h3 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h3><p>ECMAScript中所有的函数的参数都是<strong>按值传递</strong>的。</p>\n<p>传递基本类型值就如基本类型变量的复制一样，传递引用类型变量时也如同引用变量的复制。</p>\n<p>因此传递引用类型的变量时，传递的相当于是拷贝的指针。</p>\n<p>可以看下边这个例子（我觉得可以把对象看做是一个指向对象的指针，然后函数传递的是一个拷贝的指针）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  obj.name = <span class=\"string\">\"Nicholas\"</span>;</span><br><span class=\"line\">  obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  obj.name = <span class=\"string\">\"Greg\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Obejct();</span><br><span class=\"line\">setName(person);</span><br><span class=\"line\">alert(person.name); <span class=\"comment\">// \"Nicholas\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检测类型\"><a href=\"#检测类型\" class=\"headerlink\" title=\"检测类型\"></a>检测类型</h3><p>typeof检测null返回”object”</p>\n<p>当我们想知道一个对象是什么类型的对象时，可以使用<code>instanceof</code>，它的语法是：</p>\n<p><code>result = variable instanceof constructor</code></p>\n<p>如果变量是给定引用类型（由构造函数表示）的实例，则instanceof返回true：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(person <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// 变量person是Object么？</span></span><br><span class=\"line\">alert(colors <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>); <span class=\"comment\">// 变量colors是Array么？</span></span><br></pre></td></tr></table></figure>\n<p>当使用instanceof检测基本类型的值时始终返回false，因为基本类型不是对象。</p>\n<p>注： 在Safiri和Chrome中使用typeof检测正则表达式会错误的返回”function”。</p>\n<h2 id=\"执行环境和作用域\"><a href=\"#执行环境和作用域\" class=\"headerlink\" title=\"执行环境和作用域\"></a>执行环境和作用域</h2><p><a href=\"https://blog.csdn.net/wmaoshu/article/details/60466990\" target=\"_blank\" rel=\"noopener\">执行环境</a>定义了变量或函数有权访问的其他数据，决定了它们各自的行为。</p>\n<p>每个执行环境都有一个与之关联的<strong>变量对象</strong>，环境中定义的所有变量和函数都保存在这个对象中。</p>\n<p>在Web浏览器中，全局执行环境被认为是window对象，因此所有全局变量和函数都是作为window对象的属性和方法创建的。</p>\n<p>一个执行环境中的所有代码执行完毕后，该环境和保存在其中的所有变量和函数定义都被销毁，</p>\n<p>全局执行环境直到关闭页面或者浏览器时才会被销毁。</p>\n<p>关于作用域链可以看<a href=\"https://blog.csdn.net/charlene0824/article/details/52252824\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"延长作用域链\"><a href=\"#延长作用域链\" class=\"headerlink\" title=\"延长作用域链\"></a>延长作用域链</h3><ul>\n<li>with语句： 其变量对象包含为指定的对象的所有属性和方法所做的变量声明。</li>\n<li>catch语句： 包含被抛出的错误对象的声明</li>\n</ul>\n<p>在IE的JavaScript实现中，catch语句捕获的错误对象会被添加到执行环境的变量对象中。</p>\n<h3 id=\"没有块级作用域\"><a href=\"#没有块级作用域\" class=\"headerlink\" title=\"没有块级作用域\"></a>没有块级作用域</h3><ul>\n<li><p>使用if 、for语句创建的变量会保存在语句外部的执行环境中。</p>\n</li>\n<li><p>函数内部是一个局部环境</p>\n</li>\n<li>访问局部变量比全局变量快，因为不用向上搜索作用域链</li>\n</ul>\n<h2 id=\"垃圾收集\"><a href=\"#垃圾收集\" class=\"headerlink\" title=\"垃圾收集\"></a>垃圾收集</h2><p>JavaScript具有自动垃圾收集机制，按照固定的时间间隔或代码执行中预定的收集时间，周期性地找出不再使用的变量释放其内存。</p>\n<p>关于垃圾收集方式的详细解释可以看<a href=\"https://www.cnblogs.com/scottjeremy/p/6870729.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>关于性能问题和管理内存可以看<a href=\"https://www.cnblogs.com/yxField/p/4226591.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h1 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h1><h2 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h2><p>创建Object实例的方式：</p>\n<ul>\n<li><code>var xxx = new Object()</code></li>\n<li><code>var xxx = {age: 29}</code>, <code>{}</code>是对象字面量边界</li>\n</ul>\n<p>可以用<code>xxx.age</code>或者<code>xxx[&#39;age&#39;]</code>来访问属性，更建议用点表示法。</p>\n<h2 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h2><p>ECMAScript数组的每一项可以保存任何类型的数据。</p>\n<p>数组的索引从0开始。</p>\n<p>数组的项数保存在其length属性中，它并不是只读的，可以通过设置它来在数组的末尾移除或添加项，添加项的初始值为undefined。</p>\n<p>因为JavaScript使用一个32位整数保存数组元素个数，因此数组最多可以包含4294967295项（2的32次方减1）。</p>\n<p>以下是创建数组的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new 可以省略</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); <span class=\"comment\">// 创建一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">20</span>); <span class=\"comment\">// 创造一个包含20项的数组，每一项的初始值都是undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>); <span class=\"comment\">// 创造一个包含三项：\"red\",\"blue\",\"green\"的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>]; <span class=\"comment\">// 创造一个包含三项：\"red\",\"blue\",\"green\"的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = []; <span class=\"comment\">// 创建一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,]; <span class=\"comment\">// 不要这样！这样会创建一个包含2或3项的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = [,,,,,]; <span class=\"comment\">// 不要这样！这样会创建一个包含5或6项的数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"转换方法\"><a href=\"#转换方法\" class=\"headerlink\" title=\"转换方法\"></a>转换方法</h3><p>valueOf()返回当前对象的原始值；</p>\n<p>toString()方法先调用每一项的toString()方法，然后用逗号将它们拼接起来并返回；</p>\n<p>toLocalString()方法先调用每一项的toLocalString()方法，然后用逗号将它们拼接起来并返回；</p>\n<p>如果使用join()方法可以使用不同的分隔符来构建这个字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>];</span><br><span class=\"line\">alert(a.join(<span class=\"string\">','</span>)); <span class=\"comment\">// 'a,b,c'</span></span><br><span class=\"line\">alert(a.join(<span class=\"string\">'||'</span>)); <span class=\"comment\">// 'a||b||c'</span></span><br></pre></td></tr></table></figure>\n<p>如果某一项是undefined或null，那么在toString()、toLocalString()、join()方法返回的结果中以空字符串表示。</p>\n<h3 id=\"栈方法\"><a href=\"#栈方法\" class=\"headerlink\" title=\"栈方法\"></a>栈方法</h3><p>ECMAScript为数组提供了push()和pop()方法，以便实现类似栈的行为（LIFO，后进先出）。</p>\n<ul>\n<li>push()方法可以接受任意数量的参数，然后把它们逐个添加到数组末尾，并返回修改后的数组长度</li>\n<li>pop()方法则从数组末尾移除最后一项，并将length减一，返回移除的项。</li>\n</ul>\n<h3 id=\"队列方法\"><a href=\"#队列方法\" class=\"headerlink\" title=\"队列方法\"></a>队列方法</h3><p>可以使用push()和shift()方法，实现类似于队列的行为（FIFO，先进先出）。</p>\n<ul>\n<li>shift()方法从数组开头移除第一项，并将length减一，返回移除的项。</li>\n<li>ECMAScript还提供了unshift()方法，可以接受任意数量的参数，然后把它们逐个添加到数组头部，并返回修改后的数组长度（IE返回undefined）。</li>\n</ul>\n<p>关于unshift()的添加多个变量的顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"literal\">null</span>]；</span><br><span class=\"line\">a.unshift(<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>); <span class=\"comment\">// [\"1\", \"2\", \"a\", \"b\", \"c\", null]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重排序方法\"><a href=\"#重排序方法\" class=\"headerlink\" title=\"重排序方法\"></a>重排序方法</h3><p>reverse()会反转数组项的顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\">a.reverse();</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 0,3,5,6,2,1</span></span><br></pre></td></tr></table></figure>\n<p>sort()为排序函数，默认从小到大排序，也可以传入一个比较函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\">a.sort();</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 0,1,2,3,5,6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">v1, v2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (v1 &lt; v2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v1 &gt; v2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.sort(compare);</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 6,5,3,2,1,0</span></span><br></pre></td></tr></table></figure>\n<p>对于数值类型或者其valueOf()方法会返回数值类型的对象类型，可以简化一下比较函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 升序排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare1</span>(<span class=\"params\">v1, v2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v1 - v2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 降序排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare1</span>(<span class=\"params\">v1, v2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v2 - v1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h3><h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h4><p>——先创建一个当前数组的副本，然后将接收到的参数添加到这个副本的末尾，返回新构建的这个数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.concat(<span class=\"string\">'4'</span>,[<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]);</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 1,2,3</span></span><br><span class=\"line\">alert(b); <span class=\"comment\">// 1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h4><p>——局部拷贝数组，接受一个参数或两个参数；</p>\n<p>一个参数时拷贝从这个参数指定的位置到结尾；</p>\n<p>两个参数时，拷贝两个参数之间的项，不包含结束为止的项。</p>\n<p>当参数为负数时，则用该数加数组长度：</p>\n<ul>\n<li>若加完之后大于等于零则用加完后的数计算</li>\n<li>若加完之后还小于0则把该数看做0</li>\n</ul>\n<p>若起始位置大于结束位置，则返回空数组。</p>\n<p>下边为一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a.slice(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 1,2,3,4</span></span><br><span class=\"line\">alert(b); <span class=\"comment\">// 1,2,3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h4><p>主要用途是向数组的中部插入项，对原数组进行操作</p>\n<p>使用方式主要有三种：</p>\n<ul>\n<li>删除： 指定两个参数——要删除的第一项的位置和要删除的项数，返回被删除的项</li>\n<li>插入： 指定三个参数——起始位置、0（要删除的项数）、要插入的项（任意数量），返回被删除的项（空）</li>\n<li>替换： 指定三个参数——起始位置、要删除的项数、要插入的项（任意数量），返回被删除的项（空）</li>\n</ul>\n<p>代码例子可以看<a href=\"https://blog.csdn.net/qq_33733970/article/details/78787726\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"Date类型\"><a href=\"#Date类型\" class=\"headerlink\" title=\"Date类型\"></a>Date类型</h2><p>是在早期Java中的java.util.Date类基础上构建的。</p>\n<p>因此Date类型使用自UTC（国际协调时间）1970年1月1日零时开始经过的毫秒数来保存日期。</p>\n<p>Date类型保存的日期能够精确到1970年1月1日前后285616年。</p>\n<p>关于创建日期和设置日期可以看<a href=\"http://www.runoob.com/js/js-obj-date.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>Date对象属性及方法可以看<a href=\"http://www.runoob.com/jsref/jsref-obj-date.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>将表示日期的字符串传递给Date构造函数，后台会自动调用Date.parse()，然后将得到的值传给构造函数。</p>\n<p>Date对象可以直接进行大小比较。</p>\n<p>可以进行日期加减，下边的例子表示五天后的日期：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myDate=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">myDate.setDate(myDate.getDate()+<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"RegExp类型\"><a href=\"#RegExp类型\" class=\"headerlink\" title=\"RegExp类型\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" target=\"_blank\" rel=\"noopener\">RegExp类型</a></h2><p>正则表达式： <code>var expression = / pattern / flags</code></p>\n<p>正则表达式语法看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_in_regular_expressions\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>flags为一个或多个标志，正则表达式的匹配模式支持下面三个标志：</p>\n<ul>\n<li>g——全局(global)模式，应用于所有字符串</li>\n<li>i——不区分带小写(case-insensitive)模式</li>\n<li>m——多行(multiiline)模式，到达一行文本末尾时还会继续查找喜爱航是否存在与模式匹配的项</li>\n</ul>\n<p>元字符：<code>()[]{}\\^$|?*+.</code>，元字符必须转义。</p>\n<p>以下是一些例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"regexp\">/at/g</span>;\t\t<span class=\"comment\">// 匹配字符串中所有\"at\"实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern2 = <span class=\"regexp\">/.at/gi</span>;\t\t<span class=\"comment\">// 匹配字符串中所有以\"at\"结尾的三个字符的实例，不区分大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern3 = <span class=\"regexp\">/\\.at/gi</span>;\t<span class=\"comment\">// 匹配字符串中所有\".at\"实例，不区分大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern4 = <span class=\"regexp\">/[bc]at/i</span>;\t<span class=\"comment\">// 匹配字符串中第一个\"bat\"或\"cat\"实例，不区分大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern5 = <span class=\"regexp\">/\\[bc\\]at/i</span>;\t<span class=\"comment\">// 匹配字符串中第一个\"[bc]at\"实例，不区分大小写</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用构造函数来定义，例如下边两个式子得到的值是等价==相同的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"regexp\">/[bc]at/i</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern2 = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"[bc]at\"</span>, <span class=\"string\">\"i\"</span>);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，构造函数的字符串中，元字符必须双重转义，比如<code>/\\./</code>双重转义为”\\\\.”</p>\n<h3 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h3><ul>\n<li>global——布尔值，表示是否设置了g标志</li>\n<li>ignoreCase——布尔值，表示是否设置了i标志</li>\n<li>multiline——布尔值，表示是否设置了m标志</li>\n<li>lastIndex——整数，表示开始搜索下一个匹配项的字符位置，从0算起</li>\n<li>source——正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回</li>\n</ul>\n<h3 id=\"RegExp实例方法\"><a href=\"#RegExp实例方法\" class=\"headerlink\" title=\"RegExp实例方法\"></a>RegExp实例方法</h3><p>关于exec()方法看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>关于test()方法看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"RegExp构造函数属性\"><a href=\"#RegExp构造函数属性\" class=\"headerlink\" title=\"RegExp构造函数属性\"></a>RegExp构造函数属性</h3><table>\n<thead>\n<tr>\n<th>长属性名</th>\n<th>短属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>input</td>\n<td>$_</td>\n<td>最近一次要匹配的字符串</td>\n</tr>\n<tr>\n<td>lastMatch</td>\n<td>$&amp;</td>\n<td>最近一次的匹配项</td>\n</tr>\n<tr>\n<td>lastParen</td>\n<td>$+</td>\n<td>最近一次匹配的捕获组</td>\n</tr>\n<tr>\n<td>leftContext</td>\n<td>$`</td>\n<td>input字符串中lastMatch之前的文本</td>\n</tr>\n<tr>\n<td>rightContext</td>\n<td>$’</td>\n<td>input字符串中lastMatch之后的文本</td>\n</tr>\n<tr>\n<td>multiline</td>\n<td>$*</td>\n<td>布尔值，表示是否所有表达式都使用多行模式</td>\n</tr>\n</tbody>\n</table>\n<p>注：书中说Opera不支持input、lastMatch、lastParent、multiline，但查阅MDN文档显示的是支持的，因此待验证。</p>\n<p>关于如何使用，以lastMatch为例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/hi/g</span>;</span><br><span class=\"line\">re.test(<span class=\"string\">'hi there!'</span>);</span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.lastMatch; <span class=\"comment\">// \"hi\"</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>[<span class=\"string\">'$&amp;'</span>];     <span class=\"comment\">// \"hi\"</span></span><br></pre></td></tr></table></figure>\n<p>另外对于书中提到的ECMAScript正则表达式不支持的特性，因为版本不断更新，比如现在已经支持Unicode，因此就不在这里列出来了。</p>\n<h2 id=\"Function类型\"><a href=\"#Function类型\" class=\"headerlink\" title=\"Function类型\"></a>Function类型</h2><p>所有函数实际上都是Function类型的实例，且与其他引用数据类型一样具有属性和方法。</p>\n<p><strong>“函数是对象，函数名是指针”。</strong></p>\n<p>定义函数的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum1</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'num1'</span>, <span class=\"string\">'num2'</span>, <span class=\"string\">'return num1 + num2'</span>); <span class=\"comment\">// 不推荐</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"深入理解没有重载\"><a href=\"#深入理解没有重载\" class=\"headerlink\" title=\"深入理解没有重载\"></a>深入理解没有重载</h3><p>将函数名想象为指针，当用同一个函数名重新声明一个函数实际上相当于改变了指针的指向。</p>\n<p>指针只能指向一个对象。</p>\n<h3 id=\"函数声明与函数表达式\"><a href=\"#函数声明与函数表达式\" class=\"headerlink\" title=\"函数声明与函数表达式\"></a>函数声明与函数表达式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum1</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>解析器会率先读取函数声明，并使其在执行任何代码之前可用，</p>\n<p>但是对于函数表达式，必须等到解析器执行到它所在的代码行才会真正被解释执行。</p>\n<p>可以同时使用函数声明和函数表达式<code>var sum1 = function sum2() {}</code>，但会在Safari中导致错误。</p>\n<h3 id=\"作为值的函数\"><a href=\"#作为值的函数\" class=\"headerlink\" title=\"作为值的函数\"></a>作为值的函数</h3><p>函数名本身就是变量，因此可以把函数当做参数传递，<a href=\"https://blog.csdn.net/lingfeng2008w/article/details/50598431\" target=\"_blank\" rel=\"noopener\">这里</a>有人总结了当做参数传递的用法。</p>\n<h3 id=\"函数内部属性\"><a href=\"#函数内部属性\" class=\"headerlink\" title=\"函数内部属性\"></a>函数内部属性</h3><p>在函数内部有两个特殊的对象：arguments和this。</p>\n<p><strong>arguments</strong>还有一个callee属性，该属性是一个指针，指向拥有这个arguments对象的函数，有什么用呢？可以看阶乘函数这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * factorial(num<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>像这样递归，我们在修改函数名、拷贝函数后修改原函数内容后都会遇到麻烦，因此就要用到callee属性了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num<span class=\"number\">-1</span>); <span class=\"comment\">// 使用callee属性</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> trueFactorial = factorial;  <span class=\"comment\">// 拷贝函数</span></span><br><span class=\"line\">factorial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 修改原函数定义</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(factorial(<span class=\"number\">5</span>));  <span class=\"comment\">// 0</span></span><br><span class=\"line\">alert(trueFactorial(<span class=\"number\">5</span>));<span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure>\n<p><strong>this</strong>是函数在执行时所处的作用域（挡在网页的全局作用域调用函数时，this对象引用的就是window），可以看下边这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayColor</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.color = <span class=\"string\">'red'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;<span class=\"attr\">color</span>: <span class=\"string\">'blue'</span>&#125;;</span><br><span class=\"line\">b.sayColor = sayColor;</span><br><span class=\"line\"></span><br><span class=\"line\">sayColor();   <span class=\"comment\">//'red'</span></span><br><span class=\"line\">b.sayColor(); <span class=\"comment\">//'blue'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数属性和方法\"><a href=\"#函数属性和方法\" class=\"headerlink\" title=\"函数属性和方法\"></a>函数属性和方法</h3><p>每个函数都包含两个属性：length和prototype。</p>\n<ul>\n<li>length：函数希望接收的命名参数的个数</li>\n<li>prototype：可以看我<a href=\"https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</li>\n</ul>\n<p>每个函数都包含两个非继承而来的方法：apply()和call()。</p>\n<p>这两个的用途都是给函数<strong>指定函数体内this的值</strong>。</p>\n<blockquote>\n<p><code>apply</code> 与 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a> 非常相似，不同之处在于提供参数的方式。</p>\n<p><code>apply</code> 使用参数数组而不是一组参数列表。<code>apply</code> 可以使用数组字面量（array literal），如 <code>fun.apply(this, [&#39;eat&#39;, &#39;bananas&#39;])</code>，或数组对象， 如  <code>fun.apply(this, new Array(&#39;eat&#39;, &#39;bananas&#39;))</code>。</p>\n<p>而 <code>call</code>的语法为<code>fun.call(thisArg, arg1, arg2, ...)</code>。</p>\n<p>需要注意的是，指定的<code>this</code>值并不一定是该函数执行时真正的<code>this</code>值，如果这个函数处于<a href=\"https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode\" target=\"_blank\" rel=\"noopener\">非严格模式下</a>，则指定为<code>null</code>和<code>undefined</code>的<code>this</code>值会自动指向全局对象(浏览器中就是window对象)，同时值为原始值(数字，字符串，布尔值)的<code>this</code>会指向该原始值的自动<a href=\"https://www.cnblogs.com/moqing/p/5593986.html\" target=\"_blank\" rel=\"noopener\">包装对象</a>。</p>\n</blockquote>\n<p>每个函数都一个非标准的caller属性，指向调用该函数的函数，</p>\n<p>因此一般在一个函数的内部，通过<code>arguments.callee.caller</code>来实现对调用栈的追溯，</p>\n<p>但只建议将该属性用于调试目的。</p>\n<h2 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h2><p>先看<a href=\"https://www.cnblogs.com/moqing/p/5593986.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><ul>\n<li>基本类型的布尔值： <code>var a = false</code></li>\n<li>引用类型的布尔值： <code>var b = new Boolean(false)</code></li>\n</ul>\n<p>除了包装对象的问题，两个还有两个区别：</p>\n<ul>\n<li>typeof 的结果一个是”boolean”一个是”object”</li>\n<li>instanceof测试是否为Boolean对象一个是false，一个是true</li>\n</ul>\n<p><strong>建议永远不要使用Boolean对象。</strong></p>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><p>重写了valueOf()、toLocaleString()和toString()方法。</p>\n<ul>\n<li><p>valueOf()返回对象表示的基本类型的数值。</p>\n</li>\n<li><p>可以为toString()方法传递一个表示基数的参数，告诉它返回几进制数值的字符串形式。</p>\n</li>\n<li><p>toFixed()方法会按照指定的小数位返回数值的字符串表示（四舍五入）：<code>var num = 10;num.toFixed(2)</code>结果为“10.00”</p>\n</li>\n<li>toExponential()按照指定的小数位数返回数值的指数表示的字符串：<code>var num = 10;num.toExponential(2)</code>结果为“1.00e+1”</li>\n<li>toPrecision()接受一个参数作为表示数值所有数字的位数（不包括指数部分），然后返回最合适的表示格式的字符串。</li>\n</ul>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3><h4 id=\"字符方法\"><a href=\"#字符方法\" class=\"headerlink\" title=\"字符方法\"></a>字符方法</h4><p>访问字符串中特定字符：<code>charAt()</code>、<code>charCodeAt()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello world!'</span>;</span><br><span class=\"line\">s.charAt(<span class=\"number\">1</span>);\t<span class=\"comment\">// \"e\", 返回字符</span></span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">1</span>);<span class=\"comment\">// \"101\"， 返回字符编码</span></span><br><span class=\"line\">s[<span class=\"number\">1</span>];\t\t\t<span class=\"comment\">// \"e\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串操作方法\"><a href=\"#字符串操作方法\" class=\"headerlink\" title=\"字符串操作方法\"></a>字符串操作方法</h4><ul>\n<li>concat() ： <em>string</em>.concat(<em>string1</em>, <em>string2</em>, …, <em>stringX</em>)， 连接字符串，不改变原字符串，返回连接后的字符串</li>\n<li>slice()：<em>string</em>.slice(<em>start</em>,<em>end</em>)，提取字符串片断，start为要截取的片段的起始下标；end为要截取的片段的结尾下标加一，若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串，如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。</li>\n<li>substring()：类似于slice()</li>\n<li>substr()：<em>string</em>.substr(<em>start</em>,<em>length</em>)， 提取字符片段，start为要截取的片段的起始下标；length为要截取的长度，那么返回从 sstart到结尾的字串。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">\"Hello \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">\"world!\"</span>;</span><br><span class=\"line\">str1.concat(str2); <span class=\"comment\">// \"Hello world!\"</span></span><br><span class=\"line\">str.slice(<span class=\"number\">1</span>,<span class=\"number\">5</span>); <span class=\"comment\">// \"ello\"</span></span><br><span class=\"line\">str.substring(<span class=\"number\">1</span>,<span class=\"number\">5</span>); <span class=\"comment\">// \"ello\"</span></span><br><span class=\"line\">str.substr(<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">// \"llo\"</span></span><br></pre></td></tr></table></figure>\n<p>假设p为一个正确的坐标值，m为一个负值，则</p>\n<ul>\n<li>string.concat(p,m)x相当于string.concat(p)</li>\n<li>string.substring(p,m)相当于string.substring(p,0)相当于string.substring(0,p)</li>\n<li>string.substr(p,m)相当于string.substr(p,0)，返回空字符串</li>\n</ul>\n<h4 id=\"字符串位置方法\"><a href=\"#字符串位置方法\" class=\"headerlink\" title=\"字符串位置方法\"></a>字符串位置方法</h4><p><code>indexOf()</code>和<code>lastIndexOf()</code>，传入一个字符串，返回这个字符串在源字符串中第一次和最后一次出现的位置，若没有找到则返回-1。</p>\n<p>还可以传入第二个参数表示开始查找的位置，<code>indexOf()</code>往后查找，<code>lastIndexOf()</code>往前查找。</p>\n<h4 id=\"字符串大小写转换方法\"><a href=\"#字符串大小写转换方法\" class=\"headerlink\" title=\"字符串大小写转换方法\"></a>字符串大小写转换方法</h4><ul>\n<li>toLowerCase()、toUpperCase()</li>\n<li>toLocaleLowerCase()、toLocaleUpperCase()，针对地区应用不同的规则</li>\n</ul>\n<h4 id=\"字符串的模式匹配方法\"><a href=\"#字符串的模式匹配方法\" class=\"headerlink\" title=\"字符串的模式匹配方法\"></a>字符串的模式匹配方法</h4><ol>\n<li><p><code>match()</code>，等价于调用RegExp对象的exec()方法。</p>\n<p><code>match()</code>接受一个正则表达式或者一个RegExp对象作为参数，返回一个数组，数组第一项是与整个模式匹配的字符串，之后的每一项都是和捕获组匹配的字符串。</p>\n</li>\n<li><p><code>search()</code>与<code>match()</code>唯一不同的是返回的是第一个匹配项的索引。</p>\n</li>\n<li><p><code>replace()</code>添加了一个传入的参数，表示匹配到的字符串要替换成的字符串。如果要全部替换，要记得在正则表达式中指定全局标志(g)。第二个参数也可以是函数，该函数的返回值将替换掉第一个参数匹配到的结果。</p>\n<p>替换字符串可以插入下面的特殊变量名：</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>代表的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$$</code></td>\n<td>插入一个 “$”。</td>\n</tr>\n<tr>\n<td><code>$&amp;</code></td>\n<td>插入匹配的子串。</td>\n</tr>\n<tr>\n<td>$`</td>\n<td>插入当前匹配的子串左边的内容。</td>\n</tr>\n<tr>\n<td><code>$&#39;</code></td>\n<td>插入当前匹配的子串右边的内容。</td>\n</tr>\n<tr>\n<td><code>$*n*</code></td>\n<td>假如第一个参数是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp\" target=\"_blank\" rel=\"noopener\"><code>RegExp</code></a>对象，并且 n 是个小于100的非负整数，那么插入第 n 个括号匹配的字符串。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li><code>splite()</code>，基于指定的分隔符<code>separator</code>将一个字符串分割成多个子字符串，还可以指定第二个参数，一个整数，限定返回的分割片段数量。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Webkit Moz O ms Khtml\"</span>.split( <span class=\"string\">\" \"</span> )   <span class=\"comment\">// [\"Webkit\", \"Moz\", \"O\", \"ms\", \"Khtml\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myString = <span class=\"string\">\"Hello World. How are you doing?\"</span>;</span><br><span class=\"line\">myString.split(<span class=\"string\">\" \"</span>, <span class=\"number\">3</span>); <span class=\"comment\">// [\"Hello\", \"World.\", \"How\"]</span></span><br></pre></td></tr></table></figure>\n<p>如果 <code>separator</code> 包含捕获括号（capturing parentheses），则其匹配结果将会包含在返回的数组中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myString = <span class=\"string\">\"Hello 1 word. Sentence number 2.\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> splits = myString.split(<span class=\"regexp\">/(\\d)/</span>);\t<span class=\"comment\">// \\d匹配数字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splits); <span class=\"comment\">// [ \"Hello \", \"1\", \" word. Sentence number \", \"2\", \".\" ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"localeCompare-方法\"><a href=\"#localeCompare-方法\" class=\"headerlink\" title=\"localeCompare()方法\"></a>localeCompare()方法</h4><p><code>referenceStr.localeCompare(compareString[, locales[, options]])</code></p>\n<p>判断字符串参数compareString是否在字母表中排在字符串referenceStr之前，是的话返回正数，不是返回负数，相等返回0。</p>\n<p>locales和options都是可选参数，还没有被所有浏览器支持，具体的含义可以查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\" target=\"_blank\" rel=\"noopener\">文档</a>。</p>\n<p>下边是一个简单的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// \"c\" 在 \"a\" 之后， 返回负数</span></span><br><span class=\"line\"><span class=\"string\">'a'</span>.localeCompare(<span class=\"string\">'c'</span>); </span><br><span class=\"line\"><span class=\"comment\">// -2 或者 -1 (或者其他负数)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// \"against\" 在 \"check\" 之前</span></span><br><span class=\"line\"><span class=\"string\">'check'</span>.localeCompare(<span class=\"string\">'against'</span>); </span><br><span class=\"line\"><span class=\"comment\">// 2 或者 1 (或者其他正数)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相同</span></span><br><span class=\"line\"><span class=\"string\">'a'</span>.localeCompare(<span class=\"string\">'a'</span>); </span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"fromCharCode-方法\"><a href=\"#fromCharCode-方法\" class=\"headerlink\" title=\"fromCharCode()方法\"></a>fromCharCode()方法</h4><p>String构造函数的的静态方法，接收一个或者多个字符编码，然后把它们转换成一个字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>); <span class=\"comment\">// \"hello\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML方法\"><a href=\"#HTML方法\" class=\"headerlink\" title=\"HTML方法\"></a>HTML方法</h4><p>该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用这些特性。因此不再列出。</p>\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><h3 id=\"全局-Global-对象\"><a href=\"#全局-Global-对象\" class=\"headerlink\" title=\"全局(Global)对象\"></a>全局(Global)对象</h3><p>在大多是ECMAScript实现中都不能直接访问Global对象，不过Web浏览器实现了承担该角色的window对象，因此在全局作用域中生命的所有变量核函数，就都成为了window对象的属性。</p>\n<h4 id=\"全局函数\"><a href=\"#全局函数\" class=\"headerlink\" title=\"全局函数\"></a>全局函数</h4><p>所有在全局作用域定义的属性和方法都是Global对象的属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\" target=\"_blank\" rel=\"noopener\"><code>eval()</code></a>：将传入的字符串当做 JavaScript 代码进行执行。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/uneval\" target=\"_blank\" rel=\"noopener\"><code>uneval()</code></a> ：返回代表传入对象的源代码的字符串，该特性是非标准的，请尽量不要在生产环境中使用它！</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isFinite\" target=\"_blank\" rel=\"noopener\"><code>isFinite()</code></a>：判定一个数字是否是有限数字。<code>isFinite</code> 方法检测它参数的数值。如果参数是 <code>NaN</code>，正无穷大或者负无穷大，会返回<code>false</code>，其他返回 <code>true</code>。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN\" target=\"_blank\" rel=\"noopener\"><code>isNaN()</code></a>：确定一个值是否为<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\" target=\"_blank\" rel=\"noopener\"><code>NaN</code></a> 。如果<code>isNaN</code>函数的参数不是<code>Number</code>类型， <code>isNaN</code>函数会首先尝试将这个参数转换为数值，然后才会对转换后的结果是否是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\" target=\"_blank\" rel=\"noopener\"><code>NaN</code></a>进行判断。ECMAScript (ES2015)包含<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\" target=\"_blank\" rel=\"noopener\"><code>Number.isNaN()</code></a>函数。通过<code>Number.isNaN(x)</code>来检测<code>变量x</code>是否是一个<code>NaN</code>将会是一种可靠的做法。然而，在缺少<code>Number.isNaN</code>函数的情况下, 通过表达式<code>(x != x)</code> 来检测<code>变量x</code>是否是<code>NaN</code>会更加可靠。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\" target=\"_blank\" rel=\"noopener\"><code>parseFloat()</code></a>：解析一个字符串参数并返回一个浮点数。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\" target=\"_blank\" rel=\"noopener\"><code>parseInt()</code></a>：返回解析后的整数值。 如果被解析参数的第一个字符无法被转化成数值类型，则返回 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\" target=\"_blank\" rel=\"noopener\"><code>NaN</code></a>。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\" target=\"_blank\" rel=\"noopener\"><code>decodeURI()</code></a>：解码一个由<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\" target=\"_blank\" rel=\"noopener\"><code>encodeURI</code></a> 先前创建的统一资源标识符（URI）或类似的例程。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\" target=\"_blank\" rel=\"noopener\"><code>decodeURIComponent()</code></a> : 解码由 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"noopener\"><code>encodeURIComponent</code></a> 方法或者其它类似方法编码的部分统一资源标识符（URI）。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\" target=\"_blank\" rel=\"noopener\"><code>encodeURI()</code></a>：对统一资源标识符（URI）进行编码，将有效的URI不能包含的字符替换为特殊的UTF-8编码。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"noopener\"><code>encodeURIComponent()</code></a> ：对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/escape\" target=\"_blank\" rel=\"noopener\"><code>escape()</code></a> ，已废弃。生成新的由十六进制转义序列替换的字符串. 使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\" target=\"_blank\" rel=\"noopener\"><code>encodeURI</code></a> 或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"noopener\"><code>encodeURIComponent</code></a> 代替。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/unescape\" target=\"_blank\" rel=\"noopener\"><code>unescape()</code></a> ，已废弃。</li>\n</ul>\n<p><code>encodeURI</code> 会替换所有的字符，但不包括以下字符，即使它们具有适当的UTF-8转义序列：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>包含</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>保留字符</td>\n<td><code>;</code> <code>,</code> <code>/</code> <code>?</code> <code>:</code> <code>@</code> <code>&amp;</code> <code>=</code> <code>+</code> <code>$</code></td>\n</tr>\n<tr>\n<td>非转义的字符</td>\n<td>字母 数字 <code>-</code> <code>_</code> <code>.</code> <code>!</code> <code>~</code> <code>*</code> <code>&#39;</code> <code>(</code> <code>)</code></td>\n</tr>\n<tr>\n<td>数字符号</td>\n<td><code>#</code></td>\n</tr>\n</tbody>\n</table>\n<p>请注意，<code>encodeURI</code> 自身<em>无法</em>产生能适用于HTTP GET 或 POST 请求的URI，例如对于 XMLHTTPRequests, 因为 “&amp;”, “+”, 和 “=” 不会被编码，然而在 GET 和 POST 请求中它们是特殊字符。</p>\n<p>然而<code>encodeURIComponent</code> 转义除了字母、数字、<code>(</code>、<code>)</code>、<code>.</code>、<code>!</code>、<code>~</code>、<code>*</code>、<code>&#39;</code>、<code>-</code>和<code>_</code>之外的所有字符。</p>\n<p>例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解码一个西里尔字母（Cyrillic）URL</span></span><br><span class=\"line\"><span class=\"built_in\">decodeURI</span>(<span class=\"string\">\"https://developer.mozilla.org/ru/docs/JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// \"https://developer.mozilla.org/ru/docs/JavaScript_шеллы\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解码一个西里尔字母的URL</span></span><br><span class=\"line\"><span class=\"built_in\">decodeURIComponent</span>(<span class=\"string\">\"JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// \"JavaScript_шеллы\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// *****************************************************************</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fileName = <span class=\"string\">'my file(2).txt'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> header = <span class=\"string\">\"Content-Disposition: attachment; filename*=UTF-8''\"</span> </span><br><span class=\"line\">       + encodeRFC5987ValueChars(fileName);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(header); </span><br><span class=\"line\"><span class=\"comment\">// 输出 \"Content-Disposition: attachment; filename*=UTF-8''my%20file%282%29.txt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encodeRFC5987ValueChars</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">encodeURIComponent</span>(str).</span><br><span class=\"line\">    <span class=\"comment\">// 注意，仅管 RFC3986 保留 \"!\"，但 RFC5987 并没有</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以我们并不需要过滤它</span></span><br><span class=\"line\">    replace(<span class=\"regexp\">/['()]/g</span>, <span class=\"built_in\">escape</span>). <span class=\"comment\">// i.e., %27 %28 %29</span></span><br><span class=\"line\">    replace(<span class=\"regexp\">/\\*/g</span>, <span class=\"string\">'%2A'</span>).</span><br><span class=\"line\">      <span class=\"comment\">// 下面的并不是 RFC5987 中 URI 编码必须的</span></span><br><span class=\"line\">      <span class=\"comment\">// 所以对于 |`^ 这3个字符我们可以稍稍提高一点可读性</span></span><br><span class=\"line\">      replace(<span class=\"regexp\">/%(?:7C|60|5E)/g</span>, <span class=\"built_in\">unescape</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 注： <a href=\"http://tools.ietf.org/html/rfc3986\" target=\"_blank\" rel=\"noopener\">RFC 3986</a>，保留 !, ‘, (, ), 和 *</p>\n<h4 id=\"Global对象的属性\"><a href=\"#Global对象的属性\" class=\"headerlink\" title=\"Global对象的属性\"></a>Global对象的属性</h4><p>特殊值如undefined等、所有原生引用类型的构造函数都是Global对象的属性。</p>\n<p>除了这些还有：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error\" target=\"_blank\" rel=\"noopener\"><code>Error</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError\" target=\"_blank\" rel=\"noopener\"><code>EvalError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError\" target=\"_blank\" rel=\"noopener\"><code>InternalError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\" target=\"_blank\" rel=\"noopener\"><code>RangeError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\" target=\"_blank\" rel=\"noopener\"><code>ReferenceError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\" target=\"_blank\" rel=\"noopener\"><code>SyntaxError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\" target=\"_blank\" rel=\"noopener\"><code>TypeError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError\" target=\"_blank\" rel=\"noopener\"><code>URIError</code></a></li>\n</ul>\n<h3 id=\"Math对象\"><a href=\"#Math对象\" class=\"headerlink\" title=\"Math对象\"></a>Math对象</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math\" target=\"_blank\" rel=\"noopener\"><strong>Math</strong></a> 是一个内置对象， 它具有数学常数和函数的属性和方法。不是一个函数对象。</p>\n<p><code>Math</code> 的所有属性和方法都是静态的：例如常数pi可以用 <code>Math.PI</code> 表示，用 <code>x</code> 作参数 Math.sin(x)调用sin函数。</p>\n<h4 id=\"Math对象的属性\"><a href=\"#Math对象的属性\" class=\"headerlink\" title=\"Math对象的属性\"></a>Math对象的属性</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/E\" target=\"_blank\" rel=\"noopener\"><code>Math.E</code></a></p>\n<p>欧拉常数，也是自然对数的底数, 约等于 2.718.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2\" target=\"_blank\" rel=\"noopener\"><code>Math.LN2</code></a></p>\n<p>2的自然对数, 约等于0.693.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10\" target=\"_blank\" rel=\"noopener\"><code>Math.LN10</code></a></p>\n<p>10的自然对数, 约等于 2.303.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E\" target=\"_blank\" rel=\"noopener\"><code>Math.LOG2E</code></a></p>\n<p>以2为底E的对数, 约等于 1.443.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E\" target=\"_blank\" rel=\"noopener\"><code>Math.LOG10E</code></a></p>\n<p>以10为底E的对数, 约等于 0.434.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\" target=\"_blank\" rel=\"noopener\"><code>Math.PI</code></a></p>\n<p>圆周率，一个圆的周长和直径之比，约等于 3.14159.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2\" target=\"_blank\" rel=\"noopener\"><code>Math.SQRT1_2</code></a></p>\n<p>1/2的平方根, 约等于 0.707.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2\" target=\"_blank\" rel=\"noopener\"><code>Math.SQRT2</code></a></p>\n<p>2的平方根,约等于 1.414.</p>\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max\" target=\"_blank\" rel=\"noopener\"><code>Math.max()</code></a></p>\n<p>返回0个到多个数值中最大值.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min\" target=\"_blank\" rel=\"noopener\"><code>Math.min()</code></a></p>\n<p>返回0个到多个数值中最小值.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\" target=\"_blank\" rel=\"noopener\"><code>Math.ceil(x)</code></a></p>\n<p>返回x向上取整后的值.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" target=\"_blank\" rel=\"noopener\"><code>Math.floor(x)</code></a></p>\n<p>返回小于x的最大整数。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round\" target=\"_blank\" rel=\"noopener\"><code>Math.round(x)</code></a></p>\n<p>返回四舍五入后的整数.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random\" target=\"_blank\" rel=\"noopener\"><code>Math.random()</code></a></p>\n<p>返回0到1之间的伪随机数.</p>\n<p>所有方法看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math#Methods\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>——《JavaScript高级程序设计（第2版）》学习笔记</p>\n<p>要多查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web\" target=\"_blank\" rel=\"noopener\">MDN Web 文档</a></p>\n<hr>\n<h1 id=\"变量、作用域和内存问题\"><a href=\"#变量、作用域和内存问题\" class=\"headerlink\" title=\"变量、作用域和内存问题\"></a>变量、作用域和内存问题</h1><h2 id=\"基本类型和引用类型的值\"><a href=\"#基本类型和引用类型的值\" class=\"headerlink\" title=\"基本类型和引用类型的值\"></a>基本类型和引用类型的值</h2><p>ECMAScript变量可能包含两种不同数据类型的值：</p>\n<ul>\n<li><strong>基本类型值</strong>：保存在<strong>栈内存</strong>中的简单数据段，这种值完全保存在内存中的一个位置</li>\n<li><strong>引用类型值</strong>：保存在<strong>堆内存</strong>中的对象，保存的实际上是一个指针，指针指向内存中真正对象保存的位置</li>\n</ul>\n<p>五种基本数据类型：Undefined、Null、Boolean、Number、String在内存中占有固定大小的空间，因此可以保存在栈内存中。因为我们操作的是它们实际保存的值，所以它们是<strong>按值</strong>访问的。</p>\n<p>对于对象，先从栈中读取内存地址，然后再按照地址找到保存在堆中的值。因为我们操作的不是实际的值，而是那个值所引用的对象，因此我们称之为<strong>按引用</strong>访问的。（图片来源于网络，cr 水印）</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536816598256&amp;di=246ab4e73e12049d497d375df4fd273b&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D2929764421%2C2277861536%26fm%3D214%26gp%3D0.jpg\" alt=\"栈内存与堆内存\"></p>\n<h3 id=\"动态属性\"><a href=\"#动态属性\" class=\"headerlink\" title=\"动态属性\"></a>动态属性</h3><p>对于对象，我们可以改变和删除其属性和方法，但是不能给基本类型的值添加属性。</p>\n<p>即只能给引用类型值动态地添加属性。</p>\n<h3 id=\"复制变量值\"><a href=\"#复制变量值\" class=\"headerlink\" title=\"复制变量值\"></a>复制变量值</h3><p>当复制基本类型值的时候，会在栈中为其开辟一块新的内存保存其值。</p>\n<p>但是当复制引用类型的值时，实际上复制保存的是这个对象在堆内存中的地址，也就是两者指向的是同一个对象。</p>\n<h3 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h3><p>ECMAScript中所有的函数的参数都是<strong>按值传递</strong>的。</p>\n<p>传递基本类型值就如基本类型变量的复制一样，传递引用类型变量时也如同引用变量的复制。</p>\n<p>因此传递引用类型的变量时，传递的相当于是拷贝的指针。</p>\n<p>可以看下边这个例子（我觉得可以把对象看做是一个指向对象的指针，然后函数传递的是一个拷贝的指针）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  obj.name = <span class=\"string\">\"Nicholas\"</span>;</span><br><span class=\"line\">  obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  obj.name = <span class=\"string\">\"Greg\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Obejct();</span><br><span class=\"line\">setName(person);</span><br><span class=\"line\">alert(person.name); <span class=\"comment\">// \"Nicholas\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检测类型\"><a href=\"#检测类型\" class=\"headerlink\" title=\"检测类型\"></a>检测类型</h3><p>typeof检测null返回”object”</p>\n<p>当我们想知道一个对象是什么类型的对象时，可以使用<code>instanceof</code>，它的语法是：</p>\n<p><code>result = variable instanceof constructor</code></p>\n<p>如果变量是给定引用类型（由构造函数表示）的实例，则instanceof返回true：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(person <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// 变量person是Object么？</span></span><br><span class=\"line\">alert(colors <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>); <span class=\"comment\">// 变量colors是Array么？</span></span><br></pre></td></tr></table></figure>\n<p>当使用instanceof检测基本类型的值时始终返回false，因为基本类型不是对象。</p>\n<p>注： 在Safiri和Chrome中使用typeof检测正则表达式会错误的返回”function”。</p>\n<h2 id=\"执行环境和作用域\"><a href=\"#执行环境和作用域\" class=\"headerlink\" title=\"执行环境和作用域\"></a>执行环境和作用域</h2><p><a href=\"https://blog.csdn.net/wmaoshu/article/details/60466990\" target=\"_blank\" rel=\"noopener\">执行环境</a>定义了变量或函数有权访问的其他数据，决定了它们各自的行为。</p>\n<p>每个执行环境都有一个与之关联的<strong>变量对象</strong>，环境中定义的所有变量和函数都保存在这个对象中。</p>\n<p>在Web浏览器中，全局执行环境被认为是window对象，因此所有全局变量和函数都是作为window对象的属性和方法创建的。</p>\n<p>一个执行环境中的所有代码执行完毕后，该环境和保存在其中的所有变量和函数定义都被销毁，</p>\n<p>全局执行环境直到关闭页面或者浏览器时才会被销毁。</p>\n<p>关于作用域链可以看<a href=\"https://blog.csdn.net/charlene0824/article/details/52252824\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"延长作用域链\"><a href=\"#延长作用域链\" class=\"headerlink\" title=\"延长作用域链\"></a>延长作用域链</h3><ul>\n<li>with语句： 其变量对象包含为指定的对象的所有属性和方法所做的变量声明。</li>\n<li>catch语句： 包含被抛出的错误对象的声明</li>\n</ul>\n<p>在IE的JavaScript实现中，catch语句捕获的错误对象会被添加到执行环境的变量对象中。</p>\n<h3 id=\"没有块级作用域\"><a href=\"#没有块级作用域\" class=\"headerlink\" title=\"没有块级作用域\"></a>没有块级作用域</h3><ul>\n<li><p>使用if 、for语句创建的变量会保存在语句外部的执行环境中。</p>\n</li>\n<li><p>函数内部是一个局部环境</p>\n</li>\n<li>访问局部变量比全局变量快，因为不用向上搜索作用域链</li>\n</ul>\n<h2 id=\"垃圾收集\"><a href=\"#垃圾收集\" class=\"headerlink\" title=\"垃圾收集\"></a>垃圾收集</h2><p>JavaScript具有自动垃圾收集机制，按照固定的时间间隔或代码执行中预定的收集时间，周期性地找出不再使用的变量释放其内存。</p>\n<p>关于垃圾收集方式的详细解释可以看<a href=\"https://www.cnblogs.com/scottjeremy/p/6870729.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>关于性能问题和管理内存可以看<a href=\"https://www.cnblogs.com/yxField/p/4226591.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h1 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h1><h2 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h2><p>创建Object实例的方式：</p>\n<ul>\n<li><code>var xxx = new Object()</code></li>\n<li><code>var xxx = {age: 29}</code>, <code>{}</code>是对象字面量边界</li>\n</ul>\n<p>可以用<code>xxx.age</code>或者<code>xxx[&#39;age&#39;]</code>来访问属性，更建议用点表示法。</p>\n<h2 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h2><p>ECMAScript数组的每一项可以保存任何类型的数据。</p>\n<p>数组的索引从0开始。</p>\n<p>数组的项数保存在其length属性中，它并不是只读的，可以通过设置它来在数组的末尾移除或添加项，添加项的初始值为undefined。</p>\n<p>因为JavaScript使用一个32位整数保存数组元素个数，因此数组最多可以包含4294967295项（2的32次方减1）。</p>\n<p>以下是创建数组的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new 可以省略</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); <span class=\"comment\">// 创建一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">20</span>); <span class=\"comment\">// 创造一个包含20项的数组，每一项的初始值都是undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>); <span class=\"comment\">// 创造一个包含三项：\"red\",\"blue\",\"green\"的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>]; <span class=\"comment\">// 创造一个包含三项：\"red\",\"blue\",\"green\"的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = []; <span class=\"comment\">// 创建一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,]; <span class=\"comment\">// 不要这样！这样会创建一个包含2或3项的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = [,,,,,]; <span class=\"comment\">// 不要这样！这样会创建一个包含5或6项的数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"转换方法\"><a href=\"#转换方法\" class=\"headerlink\" title=\"转换方法\"></a>转换方法</h3><p>valueOf()返回当前对象的原始值；</p>\n<p>toString()方法先调用每一项的toString()方法，然后用逗号将它们拼接起来并返回；</p>\n<p>toLocalString()方法先调用每一项的toLocalString()方法，然后用逗号将它们拼接起来并返回；</p>\n<p>如果使用join()方法可以使用不同的分隔符来构建这个字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>];</span><br><span class=\"line\">alert(a.join(<span class=\"string\">','</span>)); <span class=\"comment\">// 'a,b,c'</span></span><br><span class=\"line\">alert(a.join(<span class=\"string\">'||'</span>)); <span class=\"comment\">// 'a||b||c'</span></span><br></pre></td></tr></table></figure>\n<p>如果某一项是undefined或null，那么在toString()、toLocalString()、join()方法返回的结果中以空字符串表示。</p>\n<h3 id=\"栈方法\"><a href=\"#栈方法\" class=\"headerlink\" title=\"栈方法\"></a>栈方法</h3><p>ECMAScript为数组提供了push()和pop()方法，以便实现类似栈的行为（LIFO，后进先出）。</p>\n<ul>\n<li>push()方法可以接受任意数量的参数，然后把它们逐个添加到数组末尾，并返回修改后的数组长度</li>\n<li>pop()方法则从数组末尾移除最后一项，并将length减一，返回移除的项。</li>\n</ul>\n<h3 id=\"队列方法\"><a href=\"#队列方法\" class=\"headerlink\" title=\"队列方法\"></a>队列方法</h3><p>可以使用push()和shift()方法，实现类似于队列的行为（FIFO，先进先出）。</p>\n<ul>\n<li>shift()方法从数组开头移除第一项，并将length减一，返回移除的项。</li>\n<li>ECMAScript还提供了unshift()方法，可以接受任意数量的参数，然后把它们逐个添加到数组头部，并返回修改后的数组长度（IE返回undefined）。</li>\n</ul>\n<p>关于unshift()的添加多个变量的顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"literal\">null</span>]；</span><br><span class=\"line\">a.unshift(<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>); <span class=\"comment\">// [\"1\", \"2\", \"a\", \"b\", \"c\", null]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重排序方法\"><a href=\"#重排序方法\" class=\"headerlink\" title=\"重排序方法\"></a>重排序方法</h3><p>reverse()会反转数组项的顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\">a.reverse();</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 0,3,5,6,2,1</span></span><br></pre></td></tr></table></figure>\n<p>sort()为排序函数，默认从小到大排序，也可以传入一个比较函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\">a.sort();</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 0,1,2,3,5,6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">v1, v2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (v1 &lt; v2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v1 &gt; v2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.sort(compare);</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 6,5,3,2,1,0</span></span><br></pre></td></tr></table></figure>\n<p>对于数值类型或者其valueOf()方法会返回数值类型的对象类型，可以简化一下比较函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 升序排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare1</span>(<span class=\"params\">v1, v2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v1 - v2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 降序排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare1</span>(<span class=\"params\">v1, v2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v2 - v1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h3><h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h4><p>——先创建一个当前数组的副本，然后将接收到的参数添加到这个副本的末尾，返回新构建的这个数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.concat(<span class=\"string\">'4'</span>,[<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]);</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 1,2,3</span></span><br><span class=\"line\">alert(b); <span class=\"comment\">// 1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h4><p>——局部拷贝数组，接受一个参数或两个参数；</p>\n<p>一个参数时拷贝从这个参数指定的位置到结尾；</p>\n<p>两个参数时，拷贝两个参数之间的项，不包含结束为止的项。</p>\n<p>当参数为负数时，则用该数加数组长度：</p>\n<ul>\n<li>若加完之后大于等于零则用加完后的数计算</li>\n<li>若加完之后还小于0则把该数看做0</li>\n</ul>\n<p>若起始位置大于结束位置，则返回空数组。</p>\n<p>下边为一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a.slice(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">alert(a); <span class=\"comment\">// 1,2,3,4</span></span><br><span class=\"line\">alert(b); <span class=\"comment\">// 1,2,3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h4><p>主要用途是向数组的中部插入项，对原数组进行操作</p>\n<p>使用方式主要有三种：</p>\n<ul>\n<li>删除： 指定两个参数——要删除的第一项的位置和要删除的项数，返回被删除的项</li>\n<li>插入： 指定三个参数——起始位置、0（要删除的项数）、要插入的项（任意数量），返回被删除的项（空）</li>\n<li>替换： 指定三个参数——起始位置、要删除的项数、要插入的项（任意数量），返回被删除的项（空）</li>\n</ul>\n<p>代码例子可以看<a href=\"https://blog.csdn.net/qq_33733970/article/details/78787726\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"Date类型\"><a href=\"#Date类型\" class=\"headerlink\" title=\"Date类型\"></a>Date类型</h2><p>是在早期Java中的java.util.Date类基础上构建的。</p>\n<p>因此Date类型使用自UTC（国际协调时间）1970年1月1日零时开始经过的毫秒数来保存日期。</p>\n<p>Date类型保存的日期能够精确到1970年1月1日前后285616年。</p>\n<p>关于创建日期和设置日期可以看<a href=\"http://www.runoob.com/js/js-obj-date.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>Date对象属性及方法可以看<a href=\"http://www.runoob.com/jsref/jsref-obj-date.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>将表示日期的字符串传递给Date构造函数，后台会自动调用Date.parse()，然后将得到的值传给构造函数。</p>\n<p>Date对象可以直接进行大小比较。</p>\n<p>可以进行日期加减，下边的例子表示五天后的日期：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myDate=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">myDate.setDate(myDate.getDate()+<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"RegExp类型\"><a href=\"#RegExp类型\" class=\"headerlink\" title=\"RegExp类型\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" target=\"_blank\" rel=\"noopener\">RegExp类型</a></h2><p>正则表达式： <code>var expression = / pattern / flags</code></p>\n<p>正则表达式语法看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_in_regular_expressions\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>flags为一个或多个标志，正则表达式的匹配模式支持下面三个标志：</p>\n<ul>\n<li>g——全局(global)模式，应用于所有字符串</li>\n<li>i——不区分带小写(case-insensitive)模式</li>\n<li>m——多行(multiiline)模式，到达一行文本末尾时还会继续查找喜爱航是否存在与模式匹配的项</li>\n</ul>\n<p>元字符：<code>()[]{}\\^$|?*+.</code>，元字符必须转义。</p>\n<p>以下是一些例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"regexp\">/at/g</span>;\t\t<span class=\"comment\">// 匹配字符串中所有\"at\"实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern2 = <span class=\"regexp\">/.at/gi</span>;\t\t<span class=\"comment\">// 匹配字符串中所有以\"at\"结尾的三个字符的实例，不区分大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern3 = <span class=\"regexp\">/\\.at/gi</span>;\t<span class=\"comment\">// 匹配字符串中所有\".at\"实例，不区分大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern4 = <span class=\"regexp\">/[bc]at/i</span>;\t<span class=\"comment\">// 匹配字符串中第一个\"bat\"或\"cat\"实例，不区分大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern5 = <span class=\"regexp\">/\\[bc\\]at/i</span>;\t<span class=\"comment\">// 匹配字符串中第一个\"[bc]at\"实例，不区分大小写</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用构造函数来定义，例如下边两个式子得到的值是等价==相同的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pattern1 = <span class=\"regexp\">/[bc]at/i</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern2 = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"[bc]at\"</span>, <span class=\"string\">\"i\"</span>);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，构造函数的字符串中，元字符必须双重转义，比如<code>/\\./</code>双重转义为”\\\\.”</p>\n<h3 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h3><ul>\n<li>global——布尔值，表示是否设置了g标志</li>\n<li>ignoreCase——布尔值，表示是否设置了i标志</li>\n<li>multiline——布尔值，表示是否设置了m标志</li>\n<li>lastIndex——整数，表示开始搜索下一个匹配项的字符位置，从0算起</li>\n<li>source——正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回</li>\n</ul>\n<h3 id=\"RegExp实例方法\"><a href=\"#RegExp实例方法\" class=\"headerlink\" title=\"RegExp实例方法\"></a>RegExp实例方法</h3><p>关于exec()方法看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>关于test()方法看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"RegExp构造函数属性\"><a href=\"#RegExp构造函数属性\" class=\"headerlink\" title=\"RegExp构造函数属性\"></a>RegExp构造函数属性</h3><table>\n<thead>\n<tr>\n<th>长属性名</th>\n<th>短属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>input</td>\n<td>$_</td>\n<td>最近一次要匹配的字符串</td>\n</tr>\n<tr>\n<td>lastMatch</td>\n<td>$&amp;</td>\n<td>最近一次的匹配项</td>\n</tr>\n<tr>\n<td>lastParen</td>\n<td>$+</td>\n<td>最近一次匹配的捕获组</td>\n</tr>\n<tr>\n<td>leftContext</td>\n<td>$`</td>\n<td>input字符串中lastMatch之前的文本</td>\n</tr>\n<tr>\n<td>rightContext</td>\n<td>$’</td>\n<td>input字符串中lastMatch之后的文本</td>\n</tr>\n<tr>\n<td>multiline</td>\n<td>$*</td>\n<td>布尔值，表示是否所有表达式都使用多行模式</td>\n</tr>\n</tbody>\n</table>\n<p>注：书中说Opera不支持input、lastMatch、lastParent、multiline，但查阅MDN文档显示的是支持的，因此待验证。</p>\n<p>关于如何使用，以lastMatch为例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/hi/g</span>;</span><br><span class=\"line\">re.test(<span class=\"string\">'hi there!'</span>);</span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.lastMatch; <span class=\"comment\">// \"hi\"</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>[<span class=\"string\">'$&amp;'</span>];     <span class=\"comment\">// \"hi\"</span></span><br></pre></td></tr></table></figure>\n<p>另外对于书中提到的ECMAScript正则表达式不支持的特性，因为版本不断更新，比如现在已经支持Unicode，因此就不在这里列出来了。</p>\n<h2 id=\"Function类型\"><a href=\"#Function类型\" class=\"headerlink\" title=\"Function类型\"></a>Function类型</h2><p>所有函数实际上都是Function类型的实例，且与其他引用数据类型一样具有属性和方法。</p>\n<p><strong>“函数是对象，函数名是指针”。</strong></p>\n<p>定义函数的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum1</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'num1'</span>, <span class=\"string\">'num2'</span>, <span class=\"string\">'return num1 + num2'</span>); <span class=\"comment\">// 不推荐</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"深入理解没有重载\"><a href=\"#深入理解没有重载\" class=\"headerlink\" title=\"深入理解没有重载\"></a>深入理解没有重载</h3><p>将函数名想象为指针，当用同一个函数名重新声明一个函数实际上相当于改变了指针的指向。</p>\n<p>指针只能指向一个对象。</p>\n<h3 id=\"函数声明与函数表达式\"><a href=\"#函数声明与函数表达式\" class=\"headerlink\" title=\"函数声明与函数表达式\"></a>函数声明与函数表达式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum1</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>解析器会率先读取函数声明，并使其在执行任何代码之前可用，</p>\n<p>但是对于函数表达式，必须等到解析器执行到它所在的代码行才会真正被解释执行。</p>\n<p>可以同时使用函数声明和函数表达式<code>var sum1 = function sum2() {}</code>，但会在Safari中导致错误。</p>\n<h3 id=\"作为值的函数\"><a href=\"#作为值的函数\" class=\"headerlink\" title=\"作为值的函数\"></a>作为值的函数</h3><p>函数名本身就是变量，因此可以把函数当做参数传递，<a href=\"https://blog.csdn.net/lingfeng2008w/article/details/50598431\" target=\"_blank\" rel=\"noopener\">这里</a>有人总结了当做参数传递的用法。</p>\n<h3 id=\"函数内部属性\"><a href=\"#函数内部属性\" class=\"headerlink\" title=\"函数内部属性\"></a>函数内部属性</h3><p>在函数内部有两个特殊的对象：arguments和this。</p>\n<p><strong>arguments</strong>还有一个callee属性，该属性是一个指针，指向拥有这个arguments对象的函数，有什么用呢？可以看阶乘函数这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * factorial(num<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>像这样递归，我们在修改函数名、拷贝函数后修改原函数内容后都会遇到麻烦，因此就要用到callee属性了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num<span class=\"number\">-1</span>); <span class=\"comment\">// 使用callee属性</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> trueFactorial = factorial;  <span class=\"comment\">// 拷贝函数</span></span><br><span class=\"line\">factorial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 修改原函数定义</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(factorial(<span class=\"number\">5</span>));  <span class=\"comment\">// 0</span></span><br><span class=\"line\">alert(trueFactorial(<span class=\"number\">5</span>));<span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure>\n<p><strong>this</strong>是函数在执行时所处的作用域（挡在网页的全局作用域调用函数时，this对象引用的就是window），可以看下边这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayColor</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.color = <span class=\"string\">'red'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;<span class=\"attr\">color</span>: <span class=\"string\">'blue'</span>&#125;;</span><br><span class=\"line\">b.sayColor = sayColor;</span><br><span class=\"line\"></span><br><span class=\"line\">sayColor();   <span class=\"comment\">//'red'</span></span><br><span class=\"line\">b.sayColor(); <span class=\"comment\">//'blue'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数属性和方法\"><a href=\"#函数属性和方法\" class=\"headerlink\" title=\"函数属性和方法\"></a>函数属性和方法</h3><p>每个函数都包含两个属性：length和prototype。</p>\n<ul>\n<li>length：函数希望接收的命名参数的个数</li>\n<li>prototype：可以看我<a href=\"https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</li>\n</ul>\n<p>每个函数都包含两个非继承而来的方法：apply()和call()。</p>\n<p>这两个的用途都是给函数<strong>指定函数体内this的值</strong>。</p>\n<blockquote>\n<p><code>apply</code> 与 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a> 非常相似，不同之处在于提供参数的方式。</p>\n<p><code>apply</code> 使用参数数组而不是一组参数列表。<code>apply</code> 可以使用数组字面量（array literal），如 <code>fun.apply(this, [&#39;eat&#39;, &#39;bananas&#39;])</code>，或数组对象， 如  <code>fun.apply(this, new Array(&#39;eat&#39;, &#39;bananas&#39;))</code>。</p>\n<p>而 <code>call</code>的语法为<code>fun.call(thisArg, arg1, arg2, ...)</code>。</p>\n<p>需要注意的是，指定的<code>this</code>值并不一定是该函数执行时真正的<code>this</code>值，如果这个函数处于<a href=\"https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode\" target=\"_blank\" rel=\"noopener\">非严格模式下</a>，则指定为<code>null</code>和<code>undefined</code>的<code>this</code>值会自动指向全局对象(浏览器中就是window对象)，同时值为原始值(数字，字符串，布尔值)的<code>this</code>会指向该原始值的自动<a href=\"https://www.cnblogs.com/moqing/p/5593986.html\" target=\"_blank\" rel=\"noopener\">包装对象</a>。</p>\n</blockquote>\n<p>每个函数都一个非标准的caller属性，指向调用该函数的函数，</p>\n<p>因此一般在一个函数的内部，通过<code>arguments.callee.caller</code>来实现对调用栈的追溯，</p>\n<p>但只建议将该属性用于调试目的。</p>\n<h2 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h2><p>先看<a href=\"https://www.cnblogs.com/moqing/p/5593986.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><ul>\n<li>基本类型的布尔值： <code>var a = false</code></li>\n<li>引用类型的布尔值： <code>var b = new Boolean(false)</code></li>\n</ul>\n<p>除了包装对象的问题，两个还有两个区别：</p>\n<ul>\n<li>typeof 的结果一个是”boolean”一个是”object”</li>\n<li>instanceof测试是否为Boolean对象一个是false，一个是true</li>\n</ul>\n<p><strong>建议永远不要使用Boolean对象。</strong></p>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><p>重写了valueOf()、toLocaleString()和toString()方法。</p>\n<ul>\n<li><p>valueOf()返回对象表示的基本类型的数值。</p>\n</li>\n<li><p>可以为toString()方法传递一个表示基数的参数，告诉它返回几进制数值的字符串形式。</p>\n</li>\n<li><p>toFixed()方法会按照指定的小数位返回数值的字符串表示（四舍五入）：<code>var num = 10;num.toFixed(2)</code>结果为“10.00”</p>\n</li>\n<li>toExponential()按照指定的小数位数返回数值的指数表示的字符串：<code>var num = 10;num.toExponential(2)</code>结果为“1.00e+1”</li>\n<li>toPrecision()接受一个参数作为表示数值所有数字的位数（不包括指数部分），然后返回最合适的表示格式的字符串。</li>\n</ul>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3><h4 id=\"字符方法\"><a href=\"#字符方法\" class=\"headerlink\" title=\"字符方法\"></a>字符方法</h4><p>访问字符串中特定字符：<code>charAt()</code>、<code>charCodeAt()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello world!'</span>;</span><br><span class=\"line\">s.charAt(<span class=\"number\">1</span>);\t<span class=\"comment\">// \"e\", 返回字符</span></span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">1</span>);<span class=\"comment\">// \"101\"， 返回字符编码</span></span><br><span class=\"line\">s[<span class=\"number\">1</span>];\t\t\t<span class=\"comment\">// \"e\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串操作方法\"><a href=\"#字符串操作方法\" class=\"headerlink\" title=\"字符串操作方法\"></a>字符串操作方法</h4><ul>\n<li>concat() ： <em>string</em>.concat(<em>string1</em>, <em>string2</em>, …, <em>stringX</em>)， 连接字符串，不改变原字符串，返回连接后的字符串</li>\n<li>slice()：<em>string</em>.slice(<em>start</em>,<em>end</em>)，提取字符串片断，start为要截取的片段的起始下标；end为要截取的片段的结尾下标加一，若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串，如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。</li>\n<li>substring()：类似于slice()</li>\n<li>substr()：<em>string</em>.substr(<em>start</em>,<em>length</em>)， 提取字符片段，start为要截取的片段的起始下标；length为要截取的长度，那么返回从 sstart到结尾的字串。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">\"Hello \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">\"world!\"</span>;</span><br><span class=\"line\">str1.concat(str2); <span class=\"comment\">// \"Hello world!\"</span></span><br><span class=\"line\">str.slice(<span class=\"number\">1</span>,<span class=\"number\">5</span>); <span class=\"comment\">// \"ello\"</span></span><br><span class=\"line\">str.substring(<span class=\"number\">1</span>,<span class=\"number\">5</span>); <span class=\"comment\">// \"ello\"</span></span><br><span class=\"line\">str.substr(<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">// \"llo\"</span></span><br></pre></td></tr></table></figure>\n<p>假设p为一个正确的坐标值，m为一个负值，则</p>\n<ul>\n<li>string.concat(p,m)x相当于string.concat(p)</li>\n<li>string.substring(p,m)相当于string.substring(p,0)相当于string.substring(0,p)</li>\n<li>string.substr(p,m)相当于string.substr(p,0)，返回空字符串</li>\n</ul>\n<h4 id=\"字符串位置方法\"><a href=\"#字符串位置方法\" class=\"headerlink\" title=\"字符串位置方法\"></a>字符串位置方法</h4><p><code>indexOf()</code>和<code>lastIndexOf()</code>，传入一个字符串，返回这个字符串在源字符串中第一次和最后一次出现的位置，若没有找到则返回-1。</p>\n<p>还可以传入第二个参数表示开始查找的位置，<code>indexOf()</code>往后查找，<code>lastIndexOf()</code>往前查找。</p>\n<h4 id=\"字符串大小写转换方法\"><a href=\"#字符串大小写转换方法\" class=\"headerlink\" title=\"字符串大小写转换方法\"></a>字符串大小写转换方法</h4><ul>\n<li>toLowerCase()、toUpperCase()</li>\n<li>toLocaleLowerCase()、toLocaleUpperCase()，针对地区应用不同的规则</li>\n</ul>\n<h4 id=\"字符串的模式匹配方法\"><a href=\"#字符串的模式匹配方法\" class=\"headerlink\" title=\"字符串的模式匹配方法\"></a>字符串的模式匹配方法</h4><ol>\n<li><p><code>match()</code>，等价于调用RegExp对象的exec()方法。</p>\n<p><code>match()</code>接受一个正则表达式或者一个RegExp对象作为参数，返回一个数组，数组第一项是与整个模式匹配的字符串，之后的每一项都是和捕获组匹配的字符串。</p>\n</li>\n<li><p><code>search()</code>与<code>match()</code>唯一不同的是返回的是第一个匹配项的索引。</p>\n</li>\n<li><p><code>replace()</code>添加了一个传入的参数，表示匹配到的字符串要替换成的字符串。如果要全部替换，要记得在正则表达式中指定全局标志(g)。第二个参数也可以是函数，该函数的返回值将替换掉第一个参数匹配到的结果。</p>\n<p>替换字符串可以插入下面的特殊变量名：</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>代表的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$$</code></td>\n<td>插入一个 “$”。</td>\n</tr>\n<tr>\n<td><code>$&amp;</code></td>\n<td>插入匹配的子串。</td>\n</tr>\n<tr>\n<td>$`</td>\n<td>插入当前匹配的子串左边的内容。</td>\n</tr>\n<tr>\n<td><code>$&#39;</code></td>\n<td>插入当前匹配的子串右边的内容。</td>\n</tr>\n<tr>\n<td><code>$*n*</code></td>\n<td>假如第一个参数是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp\" target=\"_blank\" rel=\"noopener\"><code>RegExp</code></a>对象，并且 n 是个小于100的非负整数，那么插入第 n 个括号匹配的字符串。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li><code>splite()</code>，基于指定的分隔符<code>separator</code>将一个字符串分割成多个子字符串，还可以指定第二个参数，一个整数，限定返回的分割片段数量。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Webkit Moz O ms Khtml\"</span>.split( <span class=\"string\">\" \"</span> )   <span class=\"comment\">// [\"Webkit\", \"Moz\", \"O\", \"ms\", \"Khtml\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myString = <span class=\"string\">\"Hello World. How are you doing?\"</span>;</span><br><span class=\"line\">myString.split(<span class=\"string\">\" \"</span>, <span class=\"number\">3</span>); <span class=\"comment\">// [\"Hello\", \"World.\", \"How\"]</span></span><br></pre></td></tr></table></figure>\n<p>如果 <code>separator</code> 包含捕获括号（capturing parentheses），则其匹配结果将会包含在返回的数组中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myString = <span class=\"string\">\"Hello 1 word. Sentence number 2.\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> splits = myString.split(<span class=\"regexp\">/(\\d)/</span>);\t<span class=\"comment\">// \\d匹配数字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splits); <span class=\"comment\">// [ \"Hello \", \"1\", \" word. Sentence number \", \"2\", \".\" ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"localeCompare-方法\"><a href=\"#localeCompare-方法\" class=\"headerlink\" title=\"localeCompare()方法\"></a>localeCompare()方法</h4><p><code>referenceStr.localeCompare(compareString[, locales[, options]])</code></p>\n<p>判断字符串参数compareString是否在字母表中排在字符串referenceStr之前，是的话返回正数，不是返回负数，相等返回0。</p>\n<p>locales和options都是可选参数，还没有被所有浏览器支持，具体的含义可以查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\" target=\"_blank\" rel=\"noopener\">文档</a>。</p>\n<p>下边是一个简单的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// \"c\" 在 \"a\" 之后， 返回负数</span></span><br><span class=\"line\"><span class=\"string\">'a'</span>.localeCompare(<span class=\"string\">'c'</span>); </span><br><span class=\"line\"><span class=\"comment\">// -2 或者 -1 (或者其他负数)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// \"against\" 在 \"check\" 之前</span></span><br><span class=\"line\"><span class=\"string\">'check'</span>.localeCompare(<span class=\"string\">'against'</span>); </span><br><span class=\"line\"><span class=\"comment\">// 2 或者 1 (或者其他正数)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相同</span></span><br><span class=\"line\"><span class=\"string\">'a'</span>.localeCompare(<span class=\"string\">'a'</span>); </span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"fromCharCode-方法\"><a href=\"#fromCharCode-方法\" class=\"headerlink\" title=\"fromCharCode()方法\"></a>fromCharCode()方法</h4><p>String构造函数的的静态方法，接收一个或者多个字符编码，然后把它们转换成一个字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>); <span class=\"comment\">// \"hello\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML方法\"><a href=\"#HTML方法\" class=\"headerlink\" title=\"HTML方法\"></a>HTML方法</h4><p>该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用这些特性。因此不再列出。</p>\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><h3 id=\"全局-Global-对象\"><a href=\"#全局-Global-对象\" class=\"headerlink\" title=\"全局(Global)对象\"></a>全局(Global)对象</h3><p>在大多是ECMAScript实现中都不能直接访问Global对象，不过Web浏览器实现了承担该角色的window对象，因此在全局作用域中生命的所有变量核函数，就都成为了window对象的属性。</p>\n<h4 id=\"全局函数\"><a href=\"#全局函数\" class=\"headerlink\" title=\"全局函数\"></a>全局函数</h4><p>所有在全局作用域定义的属性和方法都是Global对象的属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\" target=\"_blank\" rel=\"noopener\"><code>eval()</code></a>：将传入的字符串当做 JavaScript 代码进行执行。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/uneval\" target=\"_blank\" rel=\"noopener\"><code>uneval()</code></a> ：返回代表传入对象的源代码的字符串，该特性是非标准的，请尽量不要在生产环境中使用它！</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isFinite\" target=\"_blank\" rel=\"noopener\"><code>isFinite()</code></a>：判定一个数字是否是有限数字。<code>isFinite</code> 方法检测它参数的数值。如果参数是 <code>NaN</code>，正无穷大或者负无穷大，会返回<code>false</code>，其他返回 <code>true</code>。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN\" target=\"_blank\" rel=\"noopener\"><code>isNaN()</code></a>：确定一个值是否为<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\" target=\"_blank\" rel=\"noopener\"><code>NaN</code></a> 。如果<code>isNaN</code>函数的参数不是<code>Number</code>类型， <code>isNaN</code>函数会首先尝试将这个参数转换为数值，然后才会对转换后的结果是否是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\" target=\"_blank\" rel=\"noopener\"><code>NaN</code></a>进行判断。ECMAScript (ES2015)包含<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\" target=\"_blank\" rel=\"noopener\"><code>Number.isNaN()</code></a>函数。通过<code>Number.isNaN(x)</code>来检测<code>变量x</code>是否是一个<code>NaN</code>将会是一种可靠的做法。然而，在缺少<code>Number.isNaN</code>函数的情况下, 通过表达式<code>(x != x)</code> 来检测<code>变量x</code>是否是<code>NaN</code>会更加可靠。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\" target=\"_blank\" rel=\"noopener\"><code>parseFloat()</code></a>：解析一个字符串参数并返回一个浮点数。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\" target=\"_blank\" rel=\"noopener\"><code>parseInt()</code></a>：返回解析后的整数值。 如果被解析参数的第一个字符无法被转化成数值类型，则返回 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\" target=\"_blank\" rel=\"noopener\"><code>NaN</code></a>。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\" target=\"_blank\" rel=\"noopener\"><code>decodeURI()</code></a>：解码一个由<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\" target=\"_blank\" rel=\"noopener\"><code>encodeURI</code></a> 先前创建的统一资源标识符（URI）或类似的例程。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\" target=\"_blank\" rel=\"noopener\"><code>decodeURIComponent()</code></a> : 解码由 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"noopener\"><code>encodeURIComponent</code></a> 方法或者其它类似方法编码的部分统一资源标识符（URI）。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\" target=\"_blank\" rel=\"noopener\"><code>encodeURI()</code></a>：对统一资源标识符（URI）进行编码，将有效的URI不能包含的字符替换为特殊的UTF-8编码。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"noopener\"><code>encodeURIComponent()</code></a> ：对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/escape\" target=\"_blank\" rel=\"noopener\"><code>escape()</code></a> ，已废弃。生成新的由十六进制转义序列替换的字符串. 使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\" target=\"_blank\" rel=\"noopener\"><code>encodeURI</code></a> 或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"noopener\"><code>encodeURIComponent</code></a> 代替。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/unescape\" target=\"_blank\" rel=\"noopener\"><code>unescape()</code></a> ，已废弃。</li>\n</ul>\n<p><code>encodeURI</code> 会替换所有的字符，但不包括以下字符，即使它们具有适当的UTF-8转义序列：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>包含</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>保留字符</td>\n<td><code>;</code> <code>,</code> <code>/</code> <code>?</code> <code>:</code> <code>@</code> <code>&amp;</code> <code>=</code> <code>+</code> <code>$</code></td>\n</tr>\n<tr>\n<td>非转义的字符</td>\n<td>字母 数字 <code>-</code> <code>_</code> <code>.</code> <code>!</code> <code>~</code> <code>*</code> <code>&#39;</code> <code>(</code> <code>)</code></td>\n</tr>\n<tr>\n<td>数字符号</td>\n<td><code>#</code></td>\n</tr>\n</tbody>\n</table>\n<p>请注意，<code>encodeURI</code> 自身<em>无法</em>产生能适用于HTTP GET 或 POST 请求的URI，例如对于 XMLHTTPRequests, 因为 “&amp;”, “+”, 和 “=” 不会被编码，然而在 GET 和 POST 请求中它们是特殊字符。</p>\n<p>然而<code>encodeURIComponent</code> 转义除了字母、数字、<code>(</code>、<code>)</code>、<code>.</code>、<code>!</code>、<code>~</code>、<code>*</code>、<code>&#39;</code>、<code>-</code>和<code>_</code>之外的所有字符。</p>\n<p>例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解码一个西里尔字母（Cyrillic）URL</span></span><br><span class=\"line\"><span class=\"built_in\">decodeURI</span>(<span class=\"string\">\"https://developer.mozilla.org/ru/docs/JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// \"https://developer.mozilla.org/ru/docs/JavaScript_шеллы\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解码一个西里尔字母的URL</span></span><br><span class=\"line\"><span class=\"built_in\">decodeURIComponent</span>(<span class=\"string\">\"JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// \"JavaScript_шеллы\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// *****************************************************************</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fileName = <span class=\"string\">'my file(2).txt'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> header = <span class=\"string\">\"Content-Disposition: attachment; filename*=UTF-8''\"</span> </span><br><span class=\"line\">       + encodeRFC5987ValueChars(fileName);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(header); </span><br><span class=\"line\"><span class=\"comment\">// 输出 \"Content-Disposition: attachment; filename*=UTF-8''my%20file%282%29.txt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encodeRFC5987ValueChars</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">encodeURIComponent</span>(str).</span><br><span class=\"line\">    <span class=\"comment\">// 注意，仅管 RFC3986 保留 \"!\"，但 RFC5987 并没有</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以我们并不需要过滤它</span></span><br><span class=\"line\">    replace(<span class=\"regexp\">/['()]/g</span>, <span class=\"built_in\">escape</span>). <span class=\"comment\">// i.e., %27 %28 %29</span></span><br><span class=\"line\">    replace(<span class=\"regexp\">/\\*/g</span>, <span class=\"string\">'%2A'</span>).</span><br><span class=\"line\">      <span class=\"comment\">// 下面的并不是 RFC5987 中 URI 编码必须的</span></span><br><span class=\"line\">      <span class=\"comment\">// 所以对于 |`^ 这3个字符我们可以稍稍提高一点可读性</span></span><br><span class=\"line\">      replace(<span class=\"regexp\">/%(?:7C|60|5E)/g</span>, <span class=\"built_in\">unescape</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 注： <a href=\"http://tools.ietf.org/html/rfc3986\" target=\"_blank\" rel=\"noopener\">RFC 3986</a>，保留 !, ‘, (, ), 和 *</p>\n<h4 id=\"Global对象的属性\"><a href=\"#Global对象的属性\" class=\"headerlink\" title=\"Global对象的属性\"></a>Global对象的属性</h4><p>特殊值如undefined等、所有原生引用类型的构造函数都是Global对象的属性。</p>\n<p>除了这些还有：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error\" target=\"_blank\" rel=\"noopener\"><code>Error</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError\" target=\"_blank\" rel=\"noopener\"><code>EvalError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError\" target=\"_blank\" rel=\"noopener\"><code>InternalError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\" target=\"_blank\" rel=\"noopener\"><code>RangeError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\" target=\"_blank\" rel=\"noopener\"><code>ReferenceError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\" target=\"_blank\" rel=\"noopener\"><code>SyntaxError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\" target=\"_blank\" rel=\"noopener\"><code>TypeError</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError\" target=\"_blank\" rel=\"noopener\"><code>URIError</code></a></li>\n</ul>\n<h3 id=\"Math对象\"><a href=\"#Math对象\" class=\"headerlink\" title=\"Math对象\"></a>Math对象</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math\" target=\"_blank\" rel=\"noopener\"><strong>Math</strong></a> 是一个内置对象， 它具有数学常数和函数的属性和方法。不是一个函数对象。</p>\n<p><code>Math</code> 的所有属性和方法都是静态的：例如常数pi可以用 <code>Math.PI</code> 表示，用 <code>x</code> 作参数 Math.sin(x)调用sin函数。</p>\n<h4 id=\"Math对象的属性\"><a href=\"#Math对象的属性\" class=\"headerlink\" title=\"Math对象的属性\"></a>Math对象的属性</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/E\" target=\"_blank\" rel=\"noopener\"><code>Math.E</code></a></p>\n<p>欧拉常数，也是自然对数的底数, 约等于 2.718.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2\" target=\"_blank\" rel=\"noopener\"><code>Math.LN2</code></a></p>\n<p>2的自然对数, 约等于0.693.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10\" target=\"_blank\" rel=\"noopener\"><code>Math.LN10</code></a></p>\n<p>10的自然对数, 约等于 2.303.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E\" target=\"_blank\" rel=\"noopener\"><code>Math.LOG2E</code></a></p>\n<p>以2为底E的对数, 约等于 1.443.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E\" target=\"_blank\" rel=\"noopener\"><code>Math.LOG10E</code></a></p>\n<p>以10为底E的对数, 约等于 0.434.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\" target=\"_blank\" rel=\"noopener\"><code>Math.PI</code></a></p>\n<p>圆周率，一个圆的周长和直径之比，约等于 3.14159.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2\" target=\"_blank\" rel=\"noopener\"><code>Math.SQRT1_2</code></a></p>\n<p>1/2的平方根, 约等于 0.707.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2\" target=\"_blank\" rel=\"noopener\"><code>Math.SQRT2</code></a></p>\n<p>2的平方根,约等于 1.414.</p>\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max\" target=\"_blank\" rel=\"noopener\"><code>Math.max()</code></a></p>\n<p>返回0个到多个数值中最大值.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min\" target=\"_blank\" rel=\"noopener\"><code>Math.min()</code></a></p>\n<p>返回0个到多个数值中最小值.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\" target=\"_blank\" rel=\"noopener\"><code>Math.ceil(x)</code></a></p>\n<p>返回x向上取整后的值.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" target=\"_blank\" rel=\"noopener\"><code>Math.floor(x)</code></a></p>\n<p>返回小于x的最大整数。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round\" target=\"_blank\" rel=\"noopener\"><code>Math.round(x)</code></a></p>\n<p>返回四舍五入后的整数.</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random\" target=\"_blank\" rel=\"noopener\"><code>Math.random()</code></a></p>\n<p>返回0到1之间的伪随机数.</p>\n<p>所有方法看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math#Methods\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n"},{"title":"HTML与CSS学习记录","toc":true,"date":"2018-09-10T06:04:59.000Z","_content":"\n\n\n《HTML与CSS进阶教程读书笔记》\n\n---\n\n\n\n# HTML基础知识\n\n## HTML与XHTML\n\nHTML指超文本标记语言，是构成网页文档的主要语言。我们常说的HTML指HTML4.01。\n\nXHTML指扩展的超文本标记语言，是XML风格的、更严格、更纯净的HTML。\n\n两者的主要区别：\n\n- XHTML标签必须闭合。\n- XHTML标签和属性必须小写。\n- XHTML标签属性必须加引号。\n- XHTML标签用id属性代替name属性。\n\n## id和class\n\n由于id属性具有唯一性，因此W3C建议，对于页面关键的结构或大结构，才能使用id属性，其他地方使用class属性。\n\n<u>因为搜索引擎是根据标签的语义和id属性来识别的，因此id属性的使用和命名都需要谨慎。</u>\n\n一般来说，定义多个class的目的在于：一个class抽取公共样式，一个class定义单独样式。\n\n## 标题栏小图标\n\n在`head`标签内加入：\n\n```html\n<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"图标路径.ico\" />\n```\n\n其中`rel`和`type`是固定属性不用更改，只需要修改图片路径即可。\n\n\n\n# 语义化\n\nHTML的精髓在于标签的语义。搜索引擎根据HTML代码识别页面结构。\n\n编写语意结构良好的页面的好处：\n\n- 利于开发调试和后期维护。\n- 利于搜索引擎优化。\n\n应优先使用正确的语义化标签，如果没有语义化标签可用，再考虑div或者span等无语义标签。\n\n## 标题语义化\n\nh1-h6是标题标签，相比于其他标签，它们在搜索引擎优化（SEO）中占有相当重要的地位。\n\n一般用到h4，h5和h6权重和普通标签差不多，很少使用。\n\n对于标题语义化，我们需要注意的是：\n\n- 一个页面只能有一个h1标签。\n- h1-h6之间不要出现断层。\n- 不要用标题标签来定义样式（如为了加粗字体而为文本加上标题标签）。\n- 不要用div来代替标题标签。\n\ndiv是无语义的标签，如果使用div代替标题标签会使网页在SEO中丢失大量权重。\n\n## 图片语义化\n\n### alt属性和title属性\n\nalt是给搜索引擎看的，title是给用户看的。\n\n搜索引擎根据alt属性或上下文判断图片内容。\n\n因此**img标签必须添加alt属性。**\n\n### figure元素和figcaption元素\n\n对于图片+图注的效果，使用figure和figcaption来增强图片语义化。\n\n例：\n\n```html\n<figure>\n    <img src=\"xxx\" alt=\"xxx\" />\n    <figcaption>这是一个图注</figcaption>\n</figure>\n```\n\n更详细的介绍可以看[这一篇博客](https://www.w3cplus.com/html5/quick-tip-the-right-way-to-use-figure-and-figcaption-elements.html)。\n\n## 表格语义化\n\n| 标签    | 说明             |\n| ------- | ---------------- |\n| table   | 表格             |\n| caption | 标题             |\n| thead   | 表头（语义划分） |\n| tbody   | 表身（语义划分） |\n| tfoot   | 表尾（语义划分） |\n| tr      | 行               |\n| th      | 表头单元格       |\n| td      | 表格单元格       |\n\n## 表单语义化\n\n### label标签\n\nlabel标签的for属性有两个作用：\n\n- 语义上绑定了label元素和表单元素。（\\<label for=\"*element_id*\">）\n- 当我们点击label中的文本时，其关联的表单元素也会获得焦点。\n\n例：\n\n```html\n<input id=\"rdo\" name=\"rdo\" type=\"radio\" /><label for=\"rdo\">单选框</label>\n```\n\n### fieldset标签和legend标签\n\nfieldset标签用于给表单元素进行分组并绘制一个边框，legend标签用于定义某一组表单的标题。\n\n例如这个[例子](http://www.runoob.com/tags/tag-fieldset.html)：\n\n```html\n<form>\n  <fieldset>\n    <legend>Personalia:</legend>\n    Name: <input type=\"text\"><br>\n    Email: <input type=\"text\"><br>\n    Date of birth: <input type=\"text\">\n  </fieldset>\n</form>\n```\n\n作用：\n\n- 增强表单语义。\n- 可以使用fieldset标签的disabled属性来禁用整个组中的表单元素。\n\n## 其他语义化\n\n### 换行符\\<br />\n\nW3C标准规定，\\<br />标签只能用于段落中的换行。即只能用于p标签内部。\n\n### 无序列表ul\n\n对于列表型数据，不建议使用div实现，而应用无序列表或有序列表实现。\n\n为了实现外观效果，一般使用无序列表而不是有序列表。\n\n### strong 标签和em标签\n\nW3C对这两个标签赋予了“强调”的语义。\n\n可以在CSS中重新定义它们的样式而不会改变它们的语义。\n\n### del标签和ins标签\n\n这两个标签一般是配合使用表示更新文本：“delete”和“insert”，被删除的文本和被更新的文本。\n\n一般会用CSS重新定义它们的样式。\n\n[实例链接](http://www.runoob.com/tags/tag-del.html)\n\n### img标签\n\n对于什么时候使用img标签，什么时候使用背景图片，应该根据HTML的语义来判断。\n\n- img标签：作为HTML的一部分，希望被搜索引擎识别。\n\n- 背景图片： 只起到修饰作用，不希望被搜索引擎识别。\n\n## 语义化验证\n\n通过去掉CSS样式，观察页面是否还有很好的可读性来判断一个页面是否语义良好。\n\n## HTML5舍弃的标签\n\n下边这些已经被舍弃的标签(仅为了定义样式的标签和很少使用或已经被新标签代替的标签)应停止使用：\n\n- \\<acronym>  定义首字母缩写，应用abbr代替。\n- \\<applet> 定义嵌入的applet，应用object代替。\n- \\<basefont>\n- \\<big>\n- \\<center>\n- \\<dir> 定义目录列表，应用ul代替。\n- \\<font>\n- \\<frame>\n- \\<frameset>\n- \\<noframes>\n- \\<strike>\n- \\<tt>\n\n# CSS基础知识\n\n## CSS单位\n\n### px\n\npixel，像素，一个图片或计算机屏幕中最小的点。\n\n### %\n\nCSS中支持百分比的属性：\n\n- **width、height、font-size**，它们的百分比是相对于父元素的“相同元素”的值来计算的。\n- **line-height**，它的百分比是相对于**父元素**的**font-size**值来计算的。\n- **vertical-align**，它的百分比是相对于**当前元素**继承的**line-height**值来计算的。\n\n### em\n\n1em等于当前元素的以px为单位的font-size值，\n\n若当前元素的font-size值没有定义，则从父元素继承，\n\n若当前元素的所有祖先元素都没有定义font-size，则继承浏览器默认的font-size值：16px。\n\n<u>使用em的小技巧：</u>首行缩进使用 `text-indent: 2em`实现。\n\n### rem\n\nCSS3新引入的单位，指相对根元素（即html元素）的字体大小。\n\n## CSS特性\n\n### 继承性\n\n指子元素继承了父元素的某些样式属性。\n\n在CSS中，具有继承性的样式有三大类：\n\n- **文本**相关属性： font--family，font-size，font-style，font-weight，font，line-height，text-align，text-indent，word-spacing。\n- **列表**相关属性： list-style-image，list-style-position，list-style-type，list-style。\n- **颜色**相关属性： color。\n\n### 层叠性\n\n“后者居上”原则。\n\nCSS的层叠性指样式的覆盖。对于具有**相同权重**的**相同属性**，以最后定义的值为准。\n\n## CSS优先级\n\n### 引用方式\n\n行内样式>(内部样式=外部样式)\n\n若同时存在权重相同内部样式和外部样式，则以最后引入的样式为准。\n\n### 继承方式\n\n以最近的祖先元素为准。\n\n### 指定样式\n\n常见的伪元素——:before、:after、:first-letter、:first-line。\n\n常见的伪类——:hover、:first-child等。\n\n常用的选择器优先级：行内样式>id选择器>class选择器>元素选择器。\n\n选择器权值表：\n\n| 选择器      | 权值 |\n| ----------- | ---- |\n| 通配符      | 0    |\n| 伪元素      | 1    |\n| 元素选择器  | 1    |\n| class选择器 | 10   |\n| 伪类        | 10   |\n| 属性选择器  | 10   |\n| id选择器    | 100  |\n| 行内样式    | 1000 |\n\n### 继承样式和和指定样式\n\n指定样式权重更高。\n\n### !important\n\n权值最高，不推荐使用。\n\n## CSS引入方式\n\n- 导入样式表（加载html后加载css，不推荐）\n- 外部样式表（link标签）\n- 内部样式表（style标签）\n- 行内样式表\n\n## CSS选择器\n\nCSS出去基本的选择器（元素选择器、id选择器、class选择器、群组或分组选择器），\n\n还有<u>层次选择器</u>：\n\n| 选择器 | 说明                                      |\n| ------ | ----------------------------------------- |\n| M N    | 后代选择器，选择M元素所有内部后代N元素    |\n| M>N    | 子代选择器，选择M元素所有内部子代N元素    |\n| M~N    | 兄弟选择器，选择M元素所有同级N元素        |\n| M+N    | 相邻选择器，选择M元素相邻的下一个同级元素 |\n\n# CSS规范\n\n## 命名规范\n\n### CSS文件命名\n\n开发阶段按照功能模块划分CSS文件。\n\n| 文件名      | 说明                                 |\n| ----------- | ------------------------------------ |\n| reset.css   | 重置样式，重置元素默认样式           |\n| global.css  | 全局样式，全站公用，定义页面基础样式 |\n| themes.css  | 主题样式，用于实现换肤功能           |\n| module.css  | 模块样式，用于模块的样式             |\n| master.css  | 母版样式，用于母版页的样式           |\n| columes.css | 专栏样式，用于专栏的样式             |\n| forms.css   | 表单样式，用于表单的样式             |\n| mend.css    | 补丁样式，用于维护、修改的样式       |\n| print.css   | 打印样式，用于打印的样式             |\n\n### id和class命名\n\n建议使用中划线命名，例如`column-title`。\n\n为了避免class命名的重复，一般取父元素的class名作为前缀，例如`column-title`。\n\n| 网页主体部分 | 命名                          |\n| ------------ | ----------------------------- |\n| 最外层       | wrapper(一般用于包裹整个页面) |\n| 头部         | header                        |\n| 内容         | content                       |\n| 侧栏         | sidebar                       |\n| 栏目         | column                        |\n| 热点         | hot                           |\n| 新闻         | news                          |\n| 下载         | download                      |\n| 标志         | logo                          |\n| 导航条       | nav                           |\n| 主体         | main                          |\n| 左侧         | main-left                     |\n| 右侧         | main-right                    |\n| 底部         | footer                        |\n| 友情链接     | friendlink                    |\n| 加入我们     | joinus                        |\n| 版权         | copyright                     |\n| 服务         | service                       |\n| 登录         | login                         |\n| 注册         | register                      |\n\n| 导航部分 | 命名          |\n| -------- | ------------- |\n| 主导航   | main-nav      |\n| 子导航   | sub-nav       |\n| 边导航   | side-nav      |\n| 左导航   | leftside-nav  |\n| 右导航   | rightside-nav |\n| 顶导航   | top-nav       |\n\n| 菜单部分 | 命名    |\n| -------- | ------- |\n| 菜单     | menu    |\n| 子菜单   | submenu |\n\n| 其他     | 命名          |\n| -------- | ------------- |\n| 标题     | title         |\n| 摘要     | summary       |\n| 登录条   | loginbar      |\n| 搜索     | search        |\n| 标签页   | tab           |\n| 广告     | banner        |\n| 小技巧   | tips          |\n| 图标     | icon          |\n| 法律声明 | siteinfolegal |\n| 网站地图 | sitemap       |\n| 工具条   | tool、toolbar |\n| 首页     | homepage      |\n| 子页     | subpage       |\n| 合作伙伴 | partner       |\n| 帮助     | help          |\n| 指南     | guide         |\n| 滚动     | scroll        |\n| 提示信息 | msg           |\n| 投票     | vote          |\n| 相关文章 | related       |\n| 文章列表 | list          |\n\n## 书写规范\n\n对于功能代码，应该集中放在一起，\n\n对于其他代码，应按照如下顺序：\n\n1. 影响文档流属性（布局属性）——display，position，float，clear等\n2. 自身盒模型属性——width，height，padding，margin，border，overflow等\n3. 文本性属性——font，line-height，text-align，text-indent，vertical-align等\n4. 装饰性属性——color，background-color，opacity等\n5. 其他属性——cursor，content，list-style，quotes等\n\n例如：\n\n```css\n#main {\n  /* 影响文档流属性 */\n  display: inline-block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  /* 盒子模型属性 */\n  width: 100px;\n  height: 100px;\n  border: 2px solid gray;\n  /* 文本性属性 */\n  font-size: 15px;\n  font-weight: bold;\n  text-indent: 2em;\n  /* 装饰性属性 */\n  color: white;\n  background-color: red;\n  /* 其他属性 */\n  cursor: pointer;\n}\n```\n\n## 注释规范\n\n由于压缩工具会删除所有的注释，因此有时为了保留版权声明等注释信息，需要在注释内容前加一个叹号，如`/*! 注释内容 */`，这样压缩工具就不会删除这条注释信息。\n\n### 顶部注释\n\n```css\n/*\n *@description:说明\n *@author:作者\n *@update:更新时间，如2018-09-10 17:42\n */\n```\n\n### 模块注释\n\n```css\n/* 导航部分，开始 */\n......\n/* 导航部分，结束 */\n```\n\n### 简单注释\n\n```css\n/* 单行注释 */\n```\n\n或者\n\n```css\n/*多行注释\n *多行注释\n *多行注释\n */\n```\n\n## CSS reset\n\n重置样式，去除元素在浏览器中的默认样式。\n\n是否使用CSS reset根据实际开发需求而定。\n\n# 盒子模型\n\n![标准盒子模型](https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=5ad0ba6a0c7b02080c9c37e752e9deeb/0824ab18972bd407012c41327d899e510eb30911.jpg)\n\n![IE盒子模型](https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=6cdf3ae9fbfaaf5184b689b9bc64b8d6/1b4c510fd9f9d72ac29d82d2d22a2834359bbb00.jpg)\n\n## 外边距叠加\n\n又称为“margin叠加”，指当两个外边距相遇时会“合二为一”。叠加后的外边距为两个外边距的最大值。\n\n<u>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</u>\n\n以下图片均来自[w3school](http://www.w3school.com.cn/css/css_margin_collapsing.asp)\n\n![同级元素](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_1.gif)\n\n![父子元素](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_2.gif)\n\n![空元素1](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_3.gif)\n\n![空元素2](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_4.gif)\n\n![外边距合并的意义](http://www.w3school.com.cn/i/ct_css_margin_collapsing.gif)\n\n## 负margin\n\n- 当margin-top或者margin-left为负数时，**当前元素**会被拉向指定方向。\n- 当margin-bottom或者margin-right为负数时，**后续元素**会被拉向指定方向。\n\n[这里有一篇文章](https://www.jianshu.com/p/549aaa5fabaa)讲得不错，可以参考一下。\n\n[圣杯布局、双飞翼布局](https://www.cnblogs.com/star91/p/5773436.html)就是利用这个实现的。\n\n## overflow\n\n当浮动引起父元素高度塌陷时，可以为父元素加上`overflow: hidden`来清除浮动。\n\n# display属性\n\n| 属性值       | 说明                               |\n| ------------ | ---------------------------------- |\n| inline       | 行内元素                           |\n| block        | 块元素                             |\n| inline-block | 行内块元素                         |\n| table        | 以表格形式显示，类似于table元素    |\n| table-row    | 以表格行形式显示，类似于tr元素     |\n| table-cell   | 以表格单元格形式显示，类似于td元素 |\n| none         | 隐藏元素                           |\n\n## 块元素\n\n- 独占一行\n- 内部可以容纳其他块元素或行元素\n- 可以定义width和height\n- 可以定义四个方向的margin\n\n## inline元素\n\n- 可以与其他行内元素位于同一行\n- 可以容纳行内元素，但不能容纳块元素\n- 无法定义width和height\n- 可以定义margin-left和margin-right，不能定义margin-top和margin-bottom\n\n## inline-block元素\n\n- 可以定义width和height\n- 可以与其他行内元素位于同一行\n\n常见的inline-block元素：img元素和input元素\n\n## display: table-cell\n\n可以用于实现：\n\n- [图片垂直居中](https://www.jianshu.com/p/a7ee7dd60166)于元素\n- 等高布局\n- 自动平均划分元素，并在同一行显示\n\n## 去除inline-block元素间距\n\n在父元素中添加`font-size: 0`\n\n# 文本效果\n\n| 文本属性        | 说明                         |\n| --------------- | ---------------------------- |\n| text-decoration | 下划线、删除线、顶划线       |\n| text-transform  | 文本大小写                   |\n| font-variant    | 将英文文本转换为小型大写字母 |\n| text-indent     | 段落首行缩进                 |\n| text-align      | 文本水平对齐                 |\n| vertical-align  | 文本垂直对齐                 |\n| line-height     | 行高                         |\n| letter-spacing  | 字距                         |\n| word-spacing    | 词距                         |\n\n## text-indent\n\n可以使用\t`text-indent: -9999px;`来隐藏文本。\n\n## text-align\n\n主要使用的值为left、right、center，对文字、inline元素、inline-block元素都起作用，对块元素不起作用。\n\n利用`margin: 0 auto`实现块元素的水平居中。\n\n`text-align: center`在父元素中定义，`margin: 0 auto`在当前元素中定义。\n\n## line-height\n\n关于顶线、中线、基线、底线可以自行查阅。\n\n行高（line-height）指的是两行基线之间的距离。\n\n- 将height和line-height设为相同值可以实现文字垂直居中。\n- 当取值为%或者em时，是相对与父元素的font-size计算的。\n- 当取值为无单位数字时，是相对于当前元素的font-size计算的。\n\n## vertical-align\n\nvertical-align对inline、inline-block、table-cell元素有效，对块元素无效。\n\n用于定义<u>周围的文字、inline元素、inline-block元素</u>相对于该元素**基线**的垂直对齐方式。\n\n可以取负长度值和百分比值。\n\n### 取值\n\n1. 负值 ： `vertical-align: -2px`指的是该元素相对于基线向下偏移2px；\n\n2. 百分比 ： 相对于当前元素继承的line-height值计算的，也是该元素相对于基线偏移的值；\n\n3. [关键字](http://www.runoob.com/cssref/pr-pos-vertical-align.html) （前四个比较常用）：\n\n   | 值           | 描述                                           |\n   | ------------ | ---------------------------------------------- |\n   | **top**      | 把元素的顶端与行中最高元素的顶端对齐           |\n   | **middle**   | 把此元素放置在父元素的中部。                   |\n   | **baseline** | 默认。元素放置在父元素的基线上。               |\n   | **bottom**   | 把元素的底端与行中最低的元素的顶端对齐。       |\n   | text-top     | 把元素的顶端与父元素字体的顶端对齐             |\n   | text-bottom  | 把元素的底端与父元素字体的底端对齐。           |\n   | sub          | 垂直对齐文本的下标。                           |\n   | super        | 垂直对齐文本的上标                             |\n   | inherit      | 规定应该从父元素继承 vertical-align 属性的值。 |\n\n### 应用\n\n- 为img添加`vertical-align: middle`可以实现图片与周围的文字居中对齐\n- 要使块元素（如div）也可以使用此属性，可以为其先定义`display: table-cell`\n\n# 表单效果\n\n## radio与checkbox\n\n默认情况下由于是基线对齐因此视觉上会感觉单选框或复选框旁边的文字比它们低，这个时候可以使用vertical-align来让他们垂直居中对齐。\n\n可以使用关键字，也可以使用数值。\n\n## textarea\n\n- 可以使用max-width和max-height来限制拖拽大小\n- 可以使用`resize: none`来禁止拖拽\n\n要使textarea在不同浏览器中具有相同的外观，可以：\n\n- 使用CSS的width和height定义大小\n- 使用`overflow: auto`来定义textarea滚动条自适应\n\n## 表单对齐\n\n书上给了**注册**的例子：\n\n![图片来源于网络](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536639853274&di=16c88d63b9118620ba546c2f6237b78c&imgtype=0&src=http%3A%2F%2Fpic.orsoon.com%2Fuploads%2Fallimg%2F24631428484696.png)\n\n实现方法：\n\n1. 每一行表单分为左栏加若干右栏\n   1. 所有行的左栏长度相等\n   2. 所有行的右栏所有盒子长度之和相等\n   3. 左栏一般为一个label，右栏为若干文本框\n2. 所有左栏和右栏盒子都设为左浮动\n3. 左栏添加属性`text-align: right`使得文字右对齐\n4. 每一行左栏盒子长度加上所有右栏盒子长度之和等于行宽\n5. 每一行由一个p包裹住，并为p添加`overflow: hidden`来清除浮动\n\n然后我又去看了一下各网站的**登录**界面，基本上是一个icon+一个input的模式：\n\n![图片来源于网络](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536641005969&di=02e6a2469281303e926eb8878cf64db9&imgtype=0&src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fexp%2Fw%3D480%2Fsign%3D00237679845494ee87220e111df7e0e1%2Fa686c9177f3e67093ac0b23933c79f3df9dc5530.jpg)\n\n\n\n实现方法：\n\n- icon使用`position: absolute`脱离文档流并盖在input上\n- input将padding-left调到合适大小使得输入框不被icon盖住\n\n#　浮动布局\n\n## 文档流\n\n简单来说就是元素在页面中出现的先后顺序。\n\n- 正常文档流 ： “normal flow”，指默认情况下页面元素的布局情况。\n- 脱离文档流：脱离正常文档流。要改变正常文档流，使用浮动和定位方法。\n\n## 浮动\n\n可以使元素移到左边或者右边，并且允许后边的文字和元素环绕着它。\n\n浮动后使用margin来定义和其他元素之间的间距。\n\n绝对定位的元素忽略float属性。\n\nfloat的取值表如下，默认为**none**：\n\n| 值      | 描述                                                 |\n| ------- | ---------------------------------------------------- |\n| left    | 元素向左浮动。                                       |\n| right   | 元素向右浮动。                                       |\n| none    | 默认值。元素不浮动，并会显示在其在文本中出现的位置。 |\n| inherit | 规定应该从父元素继承 float 属性的值。                |\n\n\n\n- 当一个元素添加float属性为left或者right时，它将变为block类型。\n- 浮动元素脱离正常文档流，若其height大于父元素的height或者父元素的height未定义，会造成父元素高度塌陷。可以为父元素添加`overflow: hidden`来解决。\n- 若父元素和子元素都是浮动元素，则父元素会自适应地包含子元素。\n\n- 若兄弟元素不是浮动元素，由于浮动元素脱离文档流，可能会出现覆盖等情况。\n\n## 清除浮动\n\n- `clear: both`，用于浮动元素后边的元素，表示两边不允许出现浮动元素。\n- `overflow: hidden`，用于浮动元素的父元素，但会隐藏超出父元素的内容部分。\n- 实际开发中，更经常使用`:after`伪元素结合`clear: both`来实现。\n- 为了兼容ie，为父元素添加`zoom: 1`来消除浮动。\n\n# 定位布局\n\n## [属性值](http://www.runoob.com/cssref/pr-class-position.html)\n\n| 值                                                           | 描述                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [static](http://www.runoob.com/css/css-positioning.html#position-static) | <u>默认值</u>。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。 |\n| [absolute](http://www.runoob.com/css/css-positioning.html#position-absolute) | 生成绝对定位的元素，相对于 <u>static 定位以外的第一个父元素</u>进行定位。元素的位置通过 \"left\", \"top\", \"right\" 以及 \"bottom\" 属性进行规定。 |\n| [fixed](http://www.runoob.com/css/css-positioning.html#position-fixed) | 生成固定定位的元素，相对于<u>浏览器窗口</u>进行定位。元素的位置通过 \"left\", \"top\", \"right\" 以及 \"bottom\" 属性进行规定。 |\n| [relative](http://www.runoob.com/css/css-positioning.html#position-relative) | 生成相对定位的元素，相对于<u>其正常位置</u>进行定位。因此，\"left:20\" 会向元素的 LEFT 位置添加 20 像素。 |\n| [sticky](http://www.runoob.com/css/css-positioning.html#position-sticky) | 粘性定位，该定位基于用户滚动的位置。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。**注意:** Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。 |\n| inherit                                                      | 规定应该从父元素继承 position 属性的值。                     |\n| initial                                                      | 设置该属性为默认值，详情查看 [CSS initial 关键字](http://www.runoob.com/cssref/css-inherit.html)。 |\n\n- absolute会将元素转换为块元素。\n- 若想要子元素相对于父元素定位，一般给父元素添加`position: relative`，给子元素定义`position: absolute`来实现。祖先元素同理。\n\n## z-index属性\n\n默认情况下设置z-index无效，只有当元素定义position为relative、absolute、fixed时才会激活，z-index值越大，其堆叠顺序越高，越靠上（z方向上的靠上）。\n\n# CSS图形\n\n由于图片大小比较大，数据传输量大且一张图片会引发一次HTTP请求，因此对徐图形效果，一般更倾向于用CSS实现。\n\n这里有一篇[CSS制作图形速查表](https://www.w3cplus.com/css/css-simple-shapes-cheat-sheet)总结得比较全面，可以参考。\n\n另外对于带有边框的图形，一般是用大小不同的两个相同图形实现，小的覆盖在大的上边。\n\n# 性能优化\n\n## 属性缩写\n\n- border：`border: 1px solid red`\n  - 若不想要底边框，可以加上`border-bottom: 0`\n  - 若只想要底边框，可以`border-bottom: 1px solid red`\n\n- padding： \n  - `padding: 10px`指上右下左均为10px\n  - `padding: 10px 20px`指上下为10px，左右为20px\n  - `padding: 10px 20px 30px 40px`的顺序为上右下左，从上开始按照顺时针顺序\n\n- margin： 类似于padding\n- background： `background: url('xxx.jpg') no-repeat 80px 40px`,最后为background-position\n- font： `font: \"微软雅黑\" 12px/1.5em bold`\n  - 顺序为`font-family`、`font-size`、`line-height`、`font-weight`\n  - 简写形式必须指定`font-family`和`font-size`的值，其他属性没有指定则为默认值\n  - 简写形式中`font-size`和`line-height`之间需要加入一个斜杠`/`\n\n- color： 十六进制的颜色值若每两位值相同，可以缩写一半，比如`color: #112233`可以缩写为`color: #123`\n\n##　语法压缩\n\n- 当一个CSS规则只有一两个属性的时候，使用横向书写\n- 可以省略最后一个属性的分号\n- background-image、cursor等属性url()中的路径不用加引号\n- 如果某一个属性值为0，则不需要加单位\n- 如果某一个属性值是以0为开头的小数，可以吧0省略\n- 使用群组选择器合并相同样式\n- 若同一个父元素的多个子元素都定义了相同的可继承属性，把这些属性定义在父元素中来精简代码\n\n## CSS压缩\n\n书中推荐了两个在线的压缩工具：[CSS Compressor](https://csscompressor.com) 和 [YUI Compressor](http://tool.oschina.net/jscompress)\n\n以YUI Compressor为例，它会对CSS文件执行如下操作：\n\n- 删除所有注释\n- 删除无用空白符\n- 删除结尾分号\n- 删除属性值为0的单位\n- 删除以0开头的小数前的0\n- 合并相似属性（属性缩写）\n- 将RGB颜色转换为十六进制颜色\n\n## 图片压缩\n\n书中推荐的图片压缩工具：\n\n在线的[JPEGmini](https://www.jpegmini.com)和[TinyPNG](https://tinypng.com)以及本地的[ImageOptim](https://imageoptim.com/versions.html)\n\n## 高性能的选择器\n\n浏览器对选择器规则是从右到左进行解析的。\n\nCSS选择的匹配效率：\n\n1. id选择器\n2. class选择器\n3. 元素选择器\n4. 相邻选择器\n5. 子选择器\n6. 后代选择器\n7. 通配符选择器\n8. 属性选择器\n9. 伪类选择器\n\n因此在使用选择器时应注意：\n\n- 尽量不要使用通配符\n- 不要在id选择器和class选择器前添加元素名\n- 选择器最好不要超过三层，靠右的选择条件应尽可能精确\n- 避免使用后代选择器，尽量少使用子选择器\n\n# CSS技巧\n\n## 水平居中\n\n- 文字、inline元素和inline-*元素： `text-align: center`\n- 块元素： `margin: 0 auto`\n\n## 垂直居中\n\n- 行内块元素使用`vertical-align: middle`\n- 块元素将display改为table-cell然后使用vertical-align\n- 多行文字使用一个标签将文字包起来并设为table-cell，然后再设置vertical-align\n- 单行文字设置line-height和height属性值相同来实现\n\n## CSS Sprite\n\n又称为CSS精灵或CSS**雪碧图**，它将零散的小背景图合并成一张大背景图，然后再利用background-position属性进行定位从而现实小背景图。\n\n使用CSS Sprite技术时，需要注意：\n\n- 在开发后期而不是开发前期使用此技术\n- 有条理地组织图片顺序，应将小背景图按照类别、风格、大小等分门别类地放好\n- 控制雪碧图的大小，当图片大小小于200KB时传输时间是差不多的，因此雪碧图应控制在200KB以内\n\n书中推荐了两个CSS Sprite工具：[CSS Sprite Generator](http://css.spritegen.com/) 和 [Sprite Cow](http://www.spritecow.com/)\n\n## Icon Font图标\n\n使用字体文件实现小图标效果，从而减少图片的使用。\n\n推荐的Icon Font网站：http://www.iconfont.cn/\n\n网站上就有[使用教程](http://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d0091c141&helptype=code)\n\n# 重要概念\n\n## 包含块\n\ncontaining block，决定一个元素大小和定位的元素。\n\n时视觉格式化模型中的一个重要概念，与CSS盒子模型类似。其作用主要是为其内部的后代元素提供一个参考。\n\n- 根元素（HTML元素）没有父元素，它存在的包含块被称为初始包含块\n- 定位为fixed的元素的包含块为浏览器窗口\n- 定位为是static和relative的元素的包含块是它最近的块级（block、inline-block或table-cell）祖先元素创建的\n- 定位为absolute的元素的包含块是它最近的定位不是static的祖先元素，可以是块元素也可以是行内元素\n\n## 层叠上下文\n\n![层叠级别图](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1537245373&di=c7455fbd6881b1a07ae8ac81a79f474e&imgtype=jpg&er=1&src=http%3A%2F%2Fwww.w3cplus.com%2Fsites%2Fdefault%2Ffiles%2Fblogs%2F2018%2F1808%2Fz-index-15.png)\n\n一个元素在z轴上的堆叠顺序：\n\n- 层叠级别越大越靠上\n- 同等层叠级别，后边的堆叠在前边的上边（后来者居上）\n- 不同的层叠上下文比较的是父级层叠上下文，与自身无关\n\n## BFC和IFC\n\nBFC： block formatting context， 块级格式上下文\n\nIFC： inline formatting context， 行级格式上下文\n\n若一个元素具备以下任何一个条件，则会创造创造一个新的BFC：\n\n- 根元素\n- float属性不是none\n- position属性是absolute或fixed\n- overflow属性值不是visible\n- display属性为inline-block、table-caption、table-cell\n\nW3C描述BFC的特点为：\n\n- 在一个BFC中，盒子从顶端开始垂直一个接着一个地排列。两个相邻盒子之间的垂直间距有margin决定。**同一个BFC中**，两个相邻块盒子之间**垂直方向上的外边距**会叠加。\n- 在一个BFC中，每一个盒子的左外边界（margin-left）会紧贴着容器的border-left，右边同理，即使存在浮动元素也是如此。\n\n可以得到结论：\n\n1. 在一个BFC内部，盒子会在垂直方向上一个接着一个地排列\n2. 在一个BFC内部，相邻的margin-top、margin-bottom会叠加\n3. 在一个BFC内部，每一个盒子的左外边界（margin-left）会紧贴着容器（包含盒子）的border-left，即使存在浮动元素也是如此\n4. 在一个BFC内部，如果存在内部元素是一个新的BFC，并且存在内部元素是浮动元素，则这个新的BFC的区域不会与浮动元素的区域重叠\n5. BFC就是页面上一个隔离的盒子，该盒子内部的子元素不会影响到外边的元素\n6. 计算一个BFC的高度时，其内部浮动元素的高度也会计算其中\n\nBFC的用途：\n\n- 创建BFC来避免垂直外边距叠加（例如使用div将一个盒子包起来并给这个div添加overflow属性）\n- 创建BFC来清除浮动（为父元素添加`overflow: hidden`，利用结论第六条）\n- 创建BFC来实现[自适应布局](https://blog.csdn.net/michael8512/article/details/76473835)\n\n\n\n---\n\n好了到这里，这本书就看完了，一些细节的东西了解到了很多，下面开始看html5+css3。\n\n\\- 2018 - 09 - 11 -","source":"_posts/HTML与CSS学习记录.md","raw":"---\ntitle: HTML与CSS学习记录\ntoc: true\ndate: 2018-09-10 14:04:59\ncategories:\n- Web\ntags:\n- HTML\n- CSS\n---\n\n\n\n《HTML与CSS进阶教程读书笔记》\n\n---\n\n\n\n# HTML基础知识\n\n## HTML与XHTML\n\nHTML指超文本标记语言，是构成网页文档的主要语言。我们常说的HTML指HTML4.01。\n\nXHTML指扩展的超文本标记语言，是XML风格的、更严格、更纯净的HTML。\n\n两者的主要区别：\n\n- XHTML标签必须闭合。\n- XHTML标签和属性必须小写。\n- XHTML标签属性必须加引号。\n- XHTML标签用id属性代替name属性。\n\n## id和class\n\n由于id属性具有唯一性，因此W3C建议，对于页面关键的结构或大结构，才能使用id属性，其他地方使用class属性。\n\n<u>因为搜索引擎是根据标签的语义和id属性来识别的，因此id属性的使用和命名都需要谨慎。</u>\n\n一般来说，定义多个class的目的在于：一个class抽取公共样式，一个class定义单独样式。\n\n## 标题栏小图标\n\n在`head`标签内加入：\n\n```html\n<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"图标路径.ico\" />\n```\n\n其中`rel`和`type`是固定属性不用更改，只需要修改图片路径即可。\n\n\n\n# 语义化\n\nHTML的精髓在于标签的语义。搜索引擎根据HTML代码识别页面结构。\n\n编写语意结构良好的页面的好处：\n\n- 利于开发调试和后期维护。\n- 利于搜索引擎优化。\n\n应优先使用正确的语义化标签，如果没有语义化标签可用，再考虑div或者span等无语义标签。\n\n## 标题语义化\n\nh1-h6是标题标签，相比于其他标签，它们在搜索引擎优化（SEO）中占有相当重要的地位。\n\n一般用到h4，h5和h6权重和普通标签差不多，很少使用。\n\n对于标题语义化，我们需要注意的是：\n\n- 一个页面只能有一个h1标签。\n- h1-h6之间不要出现断层。\n- 不要用标题标签来定义样式（如为了加粗字体而为文本加上标题标签）。\n- 不要用div来代替标题标签。\n\ndiv是无语义的标签，如果使用div代替标题标签会使网页在SEO中丢失大量权重。\n\n## 图片语义化\n\n### alt属性和title属性\n\nalt是给搜索引擎看的，title是给用户看的。\n\n搜索引擎根据alt属性或上下文判断图片内容。\n\n因此**img标签必须添加alt属性。**\n\n### figure元素和figcaption元素\n\n对于图片+图注的效果，使用figure和figcaption来增强图片语义化。\n\n例：\n\n```html\n<figure>\n    <img src=\"xxx\" alt=\"xxx\" />\n    <figcaption>这是一个图注</figcaption>\n</figure>\n```\n\n更详细的介绍可以看[这一篇博客](https://www.w3cplus.com/html5/quick-tip-the-right-way-to-use-figure-and-figcaption-elements.html)。\n\n## 表格语义化\n\n| 标签    | 说明             |\n| ------- | ---------------- |\n| table   | 表格             |\n| caption | 标题             |\n| thead   | 表头（语义划分） |\n| tbody   | 表身（语义划分） |\n| tfoot   | 表尾（语义划分） |\n| tr      | 行               |\n| th      | 表头单元格       |\n| td      | 表格单元格       |\n\n## 表单语义化\n\n### label标签\n\nlabel标签的for属性有两个作用：\n\n- 语义上绑定了label元素和表单元素。（\\<label for=\"*element_id*\">）\n- 当我们点击label中的文本时，其关联的表单元素也会获得焦点。\n\n例：\n\n```html\n<input id=\"rdo\" name=\"rdo\" type=\"radio\" /><label for=\"rdo\">单选框</label>\n```\n\n### fieldset标签和legend标签\n\nfieldset标签用于给表单元素进行分组并绘制一个边框，legend标签用于定义某一组表单的标题。\n\n例如这个[例子](http://www.runoob.com/tags/tag-fieldset.html)：\n\n```html\n<form>\n  <fieldset>\n    <legend>Personalia:</legend>\n    Name: <input type=\"text\"><br>\n    Email: <input type=\"text\"><br>\n    Date of birth: <input type=\"text\">\n  </fieldset>\n</form>\n```\n\n作用：\n\n- 增强表单语义。\n- 可以使用fieldset标签的disabled属性来禁用整个组中的表单元素。\n\n## 其他语义化\n\n### 换行符\\<br />\n\nW3C标准规定，\\<br />标签只能用于段落中的换行。即只能用于p标签内部。\n\n### 无序列表ul\n\n对于列表型数据，不建议使用div实现，而应用无序列表或有序列表实现。\n\n为了实现外观效果，一般使用无序列表而不是有序列表。\n\n### strong 标签和em标签\n\nW3C对这两个标签赋予了“强调”的语义。\n\n可以在CSS中重新定义它们的样式而不会改变它们的语义。\n\n### del标签和ins标签\n\n这两个标签一般是配合使用表示更新文本：“delete”和“insert”，被删除的文本和被更新的文本。\n\n一般会用CSS重新定义它们的样式。\n\n[实例链接](http://www.runoob.com/tags/tag-del.html)\n\n### img标签\n\n对于什么时候使用img标签，什么时候使用背景图片，应该根据HTML的语义来判断。\n\n- img标签：作为HTML的一部分，希望被搜索引擎识别。\n\n- 背景图片： 只起到修饰作用，不希望被搜索引擎识别。\n\n## 语义化验证\n\n通过去掉CSS样式，观察页面是否还有很好的可读性来判断一个页面是否语义良好。\n\n## HTML5舍弃的标签\n\n下边这些已经被舍弃的标签(仅为了定义样式的标签和很少使用或已经被新标签代替的标签)应停止使用：\n\n- \\<acronym>  定义首字母缩写，应用abbr代替。\n- \\<applet> 定义嵌入的applet，应用object代替。\n- \\<basefont>\n- \\<big>\n- \\<center>\n- \\<dir> 定义目录列表，应用ul代替。\n- \\<font>\n- \\<frame>\n- \\<frameset>\n- \\<noframes>\n- \\<strike>\n- \\<tt>\n\n# CSS基础知识\n\n## CSS单位\n\n### px\n\npixel，像素，一个图片或计算机屏幕中最小的点。\n\n### %\n\nCSS中支持百分比的属性：\n\n- **width、height、font-size**，它们的百分比是相对于父元素的“相同元素”的值来计算的。\n- **line-height**，它的百分比是相对于**父元素**的**font-size**值来计算的。\n- **vertical-align**，它的百分比是相对于**当前元素**继承的**line-height**值来计算的。\n\n### em\n\n1em等于当前元素的以px为单位的font-size值，\n\n若当前元素的font-size值没有定义，则从父元素继承，\n\n若当前元素的所有祖先元素都没有定义font-size，则继承浏览器默认的font-size值：16px。\n\n<u>使用em的小技巧：</u>首行缩进使用 `text-indent: 2em`实现。\n\n### rem\n\nCSS3新引入的单位，指相对根元素（即html元素）的字体大小。\n\n## CSS特性\n\n### 继承性\n\n指子元素继承了父元素的某些样式属性。\n\n在CSS中，具有继承性的样式有三大类：\n\n- **文本**相关属性： font--family，font-size，font-style，font-weight，font，line-height，text-align，text-indent，word-spacing。\n- **列表**相关属性： list-style-image，list-style-position，list-style-type，list-style。\n- **颜色**相关属性： color。\n\n### 层叠性\n\n“后者居上”原则。\n\nCSS的层叠性指样式的覆盖。对于具有**相同权重**的**相同属性**，以最后定义的值为准。\n\n## CSS优先级\n\n### 引用方式\n\n行内样式>(内部样式=外部样式)\n\n若同时存在权重相同内部样式和外部样式，则以最后引入的样式为准。\n\n### 继承方式\n\n以最近的祖先元素为准。\n\n### 指定样式\n\n常见的伪元素——:before、:after、:first-letter、:first-line。\n\n常见的伪类——:hover、:first-child等。\n\n常用的选择器优先级：行内样式>id选择器>class选择器>元素选择器。\n\n选择器权值表：\n\n| 选择器      | 权值 |\n| ----------- | ---- |\n| 通配符      | 0    |\n| 伪元素      | 1    |\n| 元素选择器  | 1    |\n| class选择器 | 10   |\n| 伪类        | 10   |\n| 属性选择器  | 10   |\n| id选择器    | 100  |\n| 行内样式    | 1000 |\n\n### 继承样式和和指定样式\n\n指定样式权重更高。\n\n### !important\n\n权值最高，不推荐使用。\n\n## CSS引入方式\n\n- 导入样式表（加载html后加载css，不推荐）\n- 外部样式表（link标签）\n- 内部样式表（style标签）\n- 行内样式表\n\n## CSS选择器\n\nCSS出去基本的选择器（元素选择器、id选择器、class选择器、群组或分组选择器），\n\n还有<u>层次选择器</u>：\n\n| 选择器 | 说明                                      |\n| ------ | ----------------------------------------- |\n| M N    | 后代选择器，选择M元素所有内部后代N元素    |\n| M>N    | 子代选择器，选择M元素所有内部子代N元素    |\n| M~N    | 兄弟选择器，选择M元素所有同级N元素        |\n| M+N    | 相邻选择器，选择M元素相邻的下一个同级元素 |\n\n# CSS规范\n\n## 命名规范\n\n### CSS文件命名\n\n开发阶段按照功能模块划分CSS文件。\n\n| 文件名      | 说明                                 |\n| ----------- | ------------------------------------ |\n| reset.css   | 重置样式，重置元素默认样式           |\n| global.css  | 全局样式，全站公用，定义页面基础样式 |\n| themes.css  | 主题样式，用于实现换肤功能           |\n| module.css  | 模块样式，用于模块的样式             |\n| master.css  | 母版样式，用于母版页的样式           |\n| columes.css | 专栏样式，用于专栏的样式             |\n| forms.css   | 表单样式，用于表单的样式             |\n| mend.css    | 补丁样式，用于维护、修改的样式       |\n| print.css   | 打印样式，用于打印的样式             |\n\n### id和class命名\n\n建议使用中划线命名，例如`column-title`。\n\n为了避免class命名的重复，一般取父元素的class名作为前缀，例如`column-title`。\n\n| 网页主体部分 | 命名                          |\n| ------------ | ----------------------------- |\n| 最外层       | wrapper(一般用于包裹整个页面) |\n| 头部         | header                        |\n| 内容         | content                       |\n| 侧栏         | sidebar                       |\n| 栏目         | column                        |\n| 热点         | hot                           |\n| 新闻         | news                          |\n| 下载         | download                      |\n| 标志         | logo                          |\n| 导航条       | nav                           |\n| 主体         | main                          |\n| 左侧         | main-left                     |\n| 右侧         | main-right                    |\n| 底部         | footer                        |\n| 友情链接     | friendlink                    |\n| 加入我们     | joinus                        |\n| 版权         | copyright                     |\n| 服务         | service                       |\n| 登录         | login                         |\n| 注册         | register                      |\n\n| 导航部分 | 命名          |\n| -------- | ------------- |\n| 主导航   | main-nav      |\n| 子导航   | sub-nav       |\n| 边导航   | side-nav      |\n| 左导航   | leftside-nav  |\n| 右导航   | rightside-nav |\n| 顶导航   | top-nav       |\n\n| 菜单部分 | 命名    |\n| -------- | ------- |\n| 菜单     | menu    |\n| 子菜单   | submenu |\n\n| 其他     | 命名          |\n| -------- | ------------- |\n| 标题     | title         |\n| 摘要     | summary       |\n| 登录条   | loginbar      |\n| 搜索     | search        |\n| 标签页   | tab           |\n| 广告     | banner        |\n| 小技巧   | tips          |\n| 图标     | icon          |\n| 法律声明 | siteinfolegal |\n| 网站地图 | sitemap       |\n| 工具条   | tool、toolbar |\n| 首页     | homepage      |\n| 子页     | subpage       |\n| 合作伙伴 | partner       |\n| 帮助     | help          |\n| 指南     | guide         |\n| 滚动     | scroll        |\n| 提示信息 | msg           |\n| 投票     | vote          |\n| 相关文章 | related       |\n| 文章列表 | list          |\n\n## 书写规范\n\n对于功能代码，应该集中放在一起，\n\n对于其他代码，应按照如下顺序：\n\n1. 影响文档流属性（布局属性）——display，position，float，clear等\n2. 自身盒模型属性——width，height，padding，margin，border，overflow等\n3. 文本性属性——font，line-height，text-align，text-indent，vertical-align等\n4. 装饰性属性——color，background-color，opacity等\n5. 其他属性——cursor，content，list-style，quotes等\n\n例如：\n\n```css\n#main {\n  /* 影响文档流属性 */\n  display: inline-block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  /* 盒子模型属性 */\n  width: 100px;\n  height: 100px;\n  border: 2px solid gray;\n  /* 文本性属性 */\n  font-size: 15px;\n  font-weight: bold;\n  text-indent: 2em;\n  /* 装饰性属性 */\n  color: white;\n  background-color: red;\n  /* 其他属性 */\n  cursor: pointer;\n}\n```\n\n## 注释规范\n\n由于压缩工具会删除所有的注释，因此有时为了保留版权声明等注释信息，需要在注释内容前加一个叹号，如`/*! 注释内容 */`，这样压缩工具就不会删除这条注释信息。\n\n### 顶部注释\n\n```css\n/*\n *@description:说明\n *@author:作者\n *@update:更新时间，如2018-09-10 17:42\n */\n```\n\n### 模块注释\n\n```css\n/* 导航部分，开始 */\n......\n/* 导航部分，结束 */\n```\n\n### 简单注释\n\n```css\n/* 单行注释 */\n```\n\n或者\n\n```css\n/*多行注释\n *多行注释\n *多行注释\n */\n```\n\n## CSS reset\n\n重置样式，去除元素在浏览器中的默认样式。\n\n是否使用CSS reset根据实际开发需求而定。\n\n# 盒子模型\n\n![标准盒子模型](https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=5ad0ba6a0c7b02080c9c37e752e9deeb/0824ab18972bd407012c41327d899e510eb30911.jpg)\n\n![IE盒子模型](https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=6cdf3ae9fbfaaf5184b689b9bc64b8d6/1b4c510fd9f9d72ac29d82d2d22a2834359bbb00.jpg)\n\n## 外边距叠加\n\n又称为“margin叠加”，指当两个外边距相遇时会“合二为一”。叠加后的外边距为两个外边距的最大值。\n\n<u>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</u>\n\n以下图片均来自[w3school](http://www.w3school.com.cn/css/css_margin_collapsing.asp)\n\n![同级元素](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_1.gif)\n\n![父子元素](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_2.gif)\n\n![空元素1](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_3.gif)\n\n![空元素2](http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_4.gif)\n\n![外边距合并的意义](http://www.w3school.com.cn/i/ct_css_margin_collapsing.gif)\n\n## 负margin\n\n- 当margin-top或者margin-left为负数时，**当前元素**会被拉向指定方向。\n- 当margin-bottom或者margin-right为负数时，**后续元素**会被拉向指定方向。\n\n[这里有一篇文章](https://www.jianshu.com/p/549aaa5fabaa)讲得不错，可以参考一下。\n\n[圣杯布局、双飞翼布局](https://www.cnblogs.com/star91/p/5773436.html)就是利用这个实现的。\n\n## overflow\n\n当浮动引起父元素高度塌陷时，可以为父元素加上`overflow: hidden`来清除浮动。\n\n# display属性\n\n| 属性值       | 说明                               |\n| ------------ | ---------------------------------- |\n| inline       | 行内元素                           |\n| block        | 块元素                             |\n| inline-block | 行内块元素                         |\n| table        | 以表格形式显示，类似于table元素    |\n| table-row    | 以表格行形式显示，类似于tr元素     |\n| table-cell   | 以表格单元格形式显示，类似于td元素 |\n| none         | 隐藏元素                           |\n\n## 块元素\n\n- 独占一行\n- 内部可以容纳其他块元素或行元素\n- 可以定义width和height\n- 可以定义四个方向的margin\n\n## inline元素\n\n- 可以与其他行内元素位于同一行\n- 可以容纳行内元素，但不能容纳块元素\n- 无法定义width和height\n- 可以定义margin-left和margin-right，不能定义margin-top和margin-bottom\n\n## inline-block元素\n\n- 可以定义width和height\n- 可以与其他行内元素位于同一行\n\n常见的inline-block元素：img元素和input元素\n\n## display: table-cell\n\n可以用于实现：\n\n- [图片垂直居中](https://www.jianshu.com/p/a7ee7dd60166)于元素\n- 等高布局\n- 自动平均划分元素，并在同一行显示\n\n## 去除inline-block元素间距\n\n在父元素中添加`font-size: 0`\n\n# 文本效果\n\n| 文本属性        | 说明                         |\n| --------------- | ---------------------------- |\n| text-decoration | 下划线、删除线、顶划线       |\n| text-transform  | 文本大小写                   |\n| font-variant    | 将英文文本转换为小型大写字母 |\n| text-indent     | 段落首行缩进                 |\n| text-align      | 文本水平对齐                 |\n| vertical-align  | 文本垂直对齐                 |\n| line-height     | 行高                         |\n| letter-spacing  | 字距                         |\n| word-spacing    | 词距                         |\n\n## text-indent\n\n可以使用\t`text-indent: -9999px;`来隐藏文本。\n\n## text-align\n\n主要使用的值为left、right、center，对文字、inline元素、inline-block元素都起作用，对块元素不起作用。\n\n利用`margin: 0 auto`实现块元素的水平居中。\n\n`text-align: center`在父元素中定义，`margin: 0 auto`在当前元素中定义。\n\n## line-height\n\n关于顶线、中线、基线、底线可以自行查阅。\n\n行高（line-height）指的是两行基线之间的距离。\n\n- 将height和line-height设为相同值可以实现文字垂直居中。\n- 当取值为%或者em时，是相对与父元素的font-size计算的。\n- 当取值为无单位数字时，是相对于当前元素的font-size计算的。\n\n## vertical-align\n\nvertical-align对inline、inline-block、table-cell元素有效，对块元素无效。\n\n用于定义<u>周围的文字、inline元素、inline-block元素</u>相对于该元素**基线**的垂直对齐方式。\n\n可以取负长度值和百分比值。\n\n### 取值\n\n1. 负值 ： `vertical-align: -2px`指的是该元素相对于基线向下偏移2px；\n\n2. 百分比 ： 相对于当前元素继承的line-height值计算的，也是该元素相对于基线偏移的值；\n\n3. [关键字](http://www.runoob.com/cssref/pr-pos-vertical-align.html) （前四个比较常用）：\n\n   | 值           | 描述                                           |\n   | ------------ | ---------------------------------------------- |\n   | **top**      | 把元素的顶端与行中最高元素的顶端对齐           |\n   | **middle**   | 把此元素放置在父元素的中部。                   |\n   | **baseline** | 默认。元素放置在父元素的基线上。               |\n   | **bottom**   | 把元素的底端与行中最低的元素的顶端对齐。       |\n   | text-top     | 把元素的顶端与父元素字体的顶端对齐             |\n   | text-bottom  | 把元素的底端与父元素字体的底端对齐。           |\n   | sub          | 垂直对齐文本的下标。                           |\n   | super        | 垂直对齐文本的上标                             |\n   | inherit      | 规定应该从父元素继承 vertical-align 属性的值。 |\n\n### 应用\n\n- 为img添加`vertical-align: middle`可以实现图片与周围的文字居中对齐\n- 要使块元素（如div）也可以使用此属性，可以为其先定义`display: table-cell`\n\n# 表单效果\n\n## radio与checkbox\n\n默认情况下由于是基线对齐因此视觉上会感觉单选框或复选框旁边的文字比它们低，这个时候可以使用vertical-align来让他们垂直居中对齐。\n\n可以使用关键字，也可以使用数值。\n\n## textarea\n\n- 可以使用max-width和max-height来限制拖拽大小\n- 可以使用`resize: none`来禁止拖拽\n\n要使textarea在不同浏览器中具有相同的外观，可以：\n\n- 使用CSS的width和height定义大小\n- 使用`overflow: auto`来定义textarea滚动条自适应\n\n## 表单对齐\n\n书上给了**注册**的例子：\n\n![图片来源于网络](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536639853274&di=16c88d63b9118620ba546c2f6237b78c&imgtype=0&src=http%3A%2F%2Fpic.orsoon.com%2Fuploads%2Fallimg%2F24631428484696.png)\n\n实现方法：\n\n1. 每一行表单分为左栏加若干右栏\n   1. 所有行的左栏长度相等\n   2. 所有行的右栏所有盒子长度之和相等\n   3. 左栏一般为一个label，右栏为若干文本框\n2. 所有左栏和右栏盒子都设为左浮动\n3. 左栏添加属性`text-align: right`使得文字右对齐\n4. 每一行左栏盒子长度加上所有右栏盒子长度之和等于行宽\n5. 每一行由一个p包裹住，并为p添加`overflow: hidden`来清除浮动\n\n然后我又去看了一下各网站的**登录**界面，基本上是一个icon+一个input的模式：\n\n![图片来源于网络](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536641005969&di=02e6a2469281303e926eb8878cf64db9&imgtype=0&src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fexp%2Fw%3D480%2Fsign%3D00237679845494ee87220e111df7e0e1%2Fa686c9177f3e67093ac0b23933c79f3df9dc5530.jpg)\n\n\n\n实现方法：\n\n- icon使用`position: absolute`脱离文档流并盖在input上\n- input将padding-left调到合适大小使得输入框不被icon盖住\n\n#　浮动布局\n\n## 文档流\n\n简单来说就是元素在页面中出现的先后顺序。\n\n- 正常文档流 ： “normal flow”，指默认情况下页面元素的布局情况。\n- 脱离文档流：脱离正常文档流。要改变正常文档流，使用浮动和定位方法。\n\n## 浮动\n\n可以使元素移到左边或者右边，并且允许后边的文字和元素环绕着它。\n\n浮动后使用margin来定义和其他元素之间的间距。\n\n绝对定位的元素忽略float属性。\n\nfloat的取值表如下，默认为**none**：\n\n| 值      | 描述                                                 |\n| ------- | ---------------------------------------------------- |\n| left    | 元素向左浮动。                                       |\n| right   | 元素向右浮动。                                       |\n| none    | 默认值。元素不浮动，并会显示在其在文本中出现的位置。 |\n| inherit | 规定应该从父元素继承 float 属性的值。                |\n\n\n\n- 当一个元素添加float属性为left或者right时，它将变为block类型。\n- 浮动元素脱离正常文档流，若其height大于父元素的height或者父元素的height未定义，会造成父元素高度塌陷。可以为父元素添加`overflow: hidden`来解决。\n- 若父元素和子元素都是浮动元素，则父元素会自适应地包含子元素。\n\n- 若兄弟元素不是浮动元素，由于浮动元素脱离文档流，可能会出现覆盖等情况。\n\n## 清除浮动\n\n- `clear: both`，用于浮动元素后边的元素，表示两边不允许出现浮动元素。\n- `overflow: hidden`，用于浮动元素的父元素，但会隐藏超出父元素的内容部分。\n- 实际开发中，更经常使用`:after`伪元素结合`clear: both`来实现。\n- 为了兼容ie，为父元素添加`zoom: 1`来消除浮动。\n\n# 定位布局\n\n## [属性值](http://www.runoob.com/cssref/pr-class-position.html)\n\n| 值                                                           | 描述                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [static](http://www.runoob.com/css/css-positioning.html#position-static) | <u>默认值</u>。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。 |\n| [absolute](http://www.runoob.com/css/css-positioning.html#position-absolute) | 生成绝对定位的元素，相对于 <u>static 定位以外的第一个父元素</u>进行定位。元素的位置通过 \"left\", \"top\", \"right\" 以及 \"bottom\" 属性进行规定。 |\n| [fixed](http://www.runoob.com/css/css-positioning.html#position-fixed) | 生成固定定位的元素，相对于<u>浏览器窗口</u>进行定位。元素的位置通过 \"left\", \"top\", \"right\" 以及 \"bottom\" 属性进行规定。 |\n| [relative](http://www.runoob.com/css/css-positioning.html#position-relative) | 生成相对定位的元素，相对于<u>其正常位置</u>进行定位。因此，\"left:20\" 会向元素的 LEFT 位置添加 20 像素。 |\n| [sticky](http://www.runoob.com/css/css-positioning.html#position-sticky) | 粘性定位，该定位基于用户滚动的位置。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。**注意:** Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。 |\n| inherit                                                      | 规定应该从父元素继承 position 属性的值。                     |\n| initial                                                      | 设置该属性为默认值，详情查看 [CSS initial 关键字](http://www.runoob.com/cssref/css-inherit.html)。 |\n\n- absolute会将元素转换为块元素。\n- 若想要子元素相对于父元素定位，一般给父元素添加`position: relative`，给子元素定义`position: absolute`来实现。祖先元素同理。\n\n## z-index属性\n\n默认情况下设置z-index无效，只有当元素定义position为relative、absolute、fixed时才会激活，z-index值越大，其堆叠顺序越高，越靠上（z方向上的靠上）。\n\n# CSS图形\n\n由于图片大小比较大，数据传输量大且一张图片会引发一次HTTP请求，因此对徐图形效果，一般更倾向于用CSS实现。\n\n这里有一篇[CSS制作图形速查表](https://www.w3cplus.com/css/css-simple-shapes-cheat-sheet)总结得比较全面，可以参考。\n\n另外对于带有边框的图形，一般是用大小不同的两个相同图形实现，小的覆盖在大的上边。\n\n# 性能优化\n\n## 属性缩写\n\n- border：`border: 1px solid red`\n  - 若不想要底边框，可以加上`border-bottom: 0`\n  - 若只想要底边框，可以`border-bottom: 1px solid red`\n\n- padding： \n  - `padding: 10px`指上右下左均为10px\n  - `padding: 10px 20px`指上下为10px，左右为20px\n  - `padding: 10px 20px 30px 40px`的顺序为上右下左，从上开始按照顺时针顺序\n\n- margin： 类似于padding\n- background： `background: url('xxx.jpg') no-repeat 80px 40px`,最后为background-position\n- font： `font: \"微软雅黑\" 12px/1.5em bold`\n  - 顺序为`font-family`、`font-size`、`line-height`、`font-weight`\n  - 简写形式必须指定`font-family`和`font-size`的值，其他属性没有指定则为默认值\n  - 简写形式中`font-size`和`line-height`之间需要加入一个斜杠`/`\n\n- color： 十六进制的颜色值若每两位值相同，可以缩写一半，比如`color: #112233`可以缩写为`color: #123`\n\n##　语法压缩\n\n- 当一个CSS规则只有一两个属性的时候，使用横向书写\n- 可以省略最后一个属性的分号\n- background-image、cursor等属性url()中的路径不用加引号\n- 如果某一个属性值为0，则不需要加单位\n- 如果某一个属性值是以0为开头的小数，可以吧0省略\n- 使用群组选择器合并相同样式\n- 若同一个父元素的多个子元素都定义了相同的可继承属性，把这些属性定义在父元素中来精简代码\n\n## CSS压缩\n\n书中推荐了两个在线的压缩工具：[CSS Compressor](https://csscompressor.com) 和 [YUI Compressor](http://tool.oschina.net/jscompress)\n\n以YUI Compressor为例，它会对CSS文件执行如下操作：\n\n- 删除所有注释\n- 删除无用空白符\n- 删除结尾分号\n- 删除属性值为0的单位\n- 删除以0开头的小数前的0\n- 合并相似属性（属性缩写）\n- 将RGB颜色转换为十六进制颜色\n\n## 图片压缩\n\n书中推荐的图片压缩工具：\n\n在线的[JPEGmini](https://www.jpegmini.com)和[TinyPNG](https://tinypng.com)以及本地的[ImageOptim](https://imageoptim.com/versions.html)\n\n## 高性能的选择器\n\n浏览器对选择器规则是从右到左进行解析的。\n\nCSS选择的匹配效率：\n\n1. id选择器\n2. class选择器\n3. 元素选择器\n4. 相邻选择器\n5. 子选择器\n6. 后代选择器\n7. 通配符选择器\n8. 属性选择器\n9. 伪类选择器\n\n因此在使用选择器时应注意：\n\n- 尽量不要使用通配符\n- 不要在id选择器和class选择器前添加元素名\n- 选择器最好不要超过三层，靠右的选择条件应尽可能精确\n- 避免使用后代选择器，尽量少使用子选择器\n\n# CSS技巧\n\n## 水平居中\n\n- 文字、inline元素和inline-*元素： `text-align: center`\n- 块元素： `margin: 0 auto`\n\n## 垂直居中\n\n- 行内块元素使用`vertical-align: middle`\n- 块元素将display改为table-cell然后使用vertical-align\n- 多行文字使用一个标签将文字包起来并设为table-cell，然后再设置vertical-align\n- 单行文字设置line-height和height属性值相同来实现\n\n## CSS Sprite\n\n又称为CSS精灵或CSS**雪碧图**，它将零散的小背景图合并成一张大背景图，然后再利用background-position属性进行定位从而现实小背景图。\n\n使用CSS Sprite技术时，需要注意：\n\n- 在开发后期而不是开发前期使用此技术\n- 有条理地组织图片顺序，应将小背景图按照类别、风格、大小等分门别类地放好\n- 控制雪碧图的大小，当图片大小小于200KB时传输时间是差不多的，因此雪碧图应控制在200KB以内\n\n书中推荐了两个CSS Sprite工具：[CSS Sprite Generator](http://css.spritegen.com/) 和 [Sprite Cow](http://www.spritecow.com/)\n\n## Icon Font图标\n\n使用字体文件实现小图标效果，从而减少图片的使用。\n\n推荐的Icon Font网站：http://www.iconfont.cn/\n\n网站上就有[使用教程](http://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d0091c141&helptype=code)\n\n# 重要概念\n\n## 包含块\n\ncontaining block，决定一个元素大小和定位的元素。\n\n时视觉格式化模型中的一个重要概念，与CSS盒子模型类似。其作用主要是为其内部的后代元素提供一个参考。\n\n- 根元素（HTML元素）没有父元素，它存在的包含块被称为初始包含块\n- 定位为fixed的元素的包含块为浏览器窗口\n- 定位为是static和relative的元素的包含块是它最近的块级（block、inline-block或table-cell）祖先元素创建的\n- 定位为absolute的元素的包含块是它最近的定位不是static的祖先元素，可以是块元素也可以是行内元素\n\n## 层叠上下文\n\n![层叠级别图](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1537245373&di=c7455fbd6881b1a07ae8ac81a79f474e&imgtype=jpg&er=1&src=http%3A%2F%2Fwww.w3cplus.com%2Fsites%2Fdefault%2Ffiles%2Fblogs%2F2018%2F1808%2Fz-index-15.png)\n\n一个元素在z轴上的堆叠顺序：\n\n- 层叠级别越大越靠上\n- 同等层叠级别，后边的堆叠在前边的上边（后来者居上）\n- 不同的层叠上下文比较的是父级层叠上下文，与自身无关\n\n## BFC和IFC\n\nBFC： block formatting context， 块级格式上下文\n\nIFC： inline formatting context， 行级格式上下文\n\n若一个元素具备以下任何一个条件，则会创造创造一个新的BFC：\n\n- 根元素\n- float属性不是none\n- position属性是absolute或fixed\n- overflow属性值不是visible\n- display属性为inline-block、table-caption、table-cell\n\nW3C描述BFC的特点为：\n\n- 在一个BFC中，盒子从顶端开始垂直一个接着一个地排列。两个相邻盒子之间的垂直间距有margin决定。**同一个BFC中**，两个相邻块盒子之间**垂直方向上的外边距**会叠加。\n- 在一个BFC中，每一个盒子的左外边界（margin-left）会紧贴着容器的border-left，右边同理，即使存在浮动元素也是如此。\n\n可以得到结论：\n\n1. 在一个BFC内部，盒子会在垂直方向上一个接着一个地排列\n2. 在一个BFC内部，相邻的margin-top、margin-bottom会叠加\n3. 在一个BFC内部，每一个盒子的左外边界（margin-left）会紧贴着容器（包含盒子）的border-left，即使存在浮动元素也是如此\n4. 在一个BFC内部，如果存在内部元素是一个新的BFC，并且存在内部元素是浮动元素，则这个新的BFC的区域不会与浮动元素的区域重叠\n5. BFC就是页面上一个隔离的盒子，该盒子内部的子元素不会影响到外边的元素\n6. 计算一个BFC的高度时，其内部浮动元素的高度也会计算其中\n\nBFC的用途：\n\n- 创建BFC来避免垂直外边距叠加（例如使用div将一个盒子包起来并给这个div添加overflow属性）\n- 创建BFC来清除浮动（为父元素添加`overflow: hidden`，利用结论第六条）\n- 创建BFC来实现[自适应布局](https://blog.csdn.net/michael8512/article/details/76473835)\n\n\n\n---\n\n好了到这里，这本书就看完了，一些细节的东西了解到了很多，下面开始看html5+css3。\n\n\\- 2018 - 09 - 11 -","slug":"HTML与CSS学习记录","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4azx000dcrag3rdwsyno","content":"<p>《HTML与CSS进阶教程读书笔记》</p>\n<hr>\n<h1 id=\"HTML基础知识\"><a href=\"#HTML基础知识\" class=\"headerlink\" title=\"HTML基础知识\"></a>HTML基础知识</h1><h2 id=\"HTML与XHTML\"><a href=\"#HTML与XHTML\" class=\"headerlink\" title=\"HTML与XHTML\"></a>HTML与XHTML</h2><p>HTML指超文本标记语言，是构成网页文档的主要语言。我们常说的HTML指HTML4.01。</p>\n<p>XHTML指扩展的超文本标记语言，是XML风格的、更严格、更纯净的HTML。</p>\n<p>两者的主要区别：</p>\n<ul>\n<li>XHTML标签必须闭合。</li>\n<li>XHTML标签和属性必须小写。</li>\n<li>XHTML标签属性必须加引号。</li>\n<li>XHTML标签用id属性代替name属性。</li>\n</ul>\n<h2 id=\"id和class\"><a href=\"#id和class\" class=\"headerlink\" title=\"id和class\"></a>id和class</h2><p>由于id属性具有唯一性，因此W3C建议，对于页面关键的结构或大结构，才能使用id属性，其他地方使用class属性。</p>\n<p><u>因为搜索引擎是根据标签的语义和id属性来识别的，因此id属性的使用和命名都需要谨慎。</u></p>\n<p>一般来说，定义多个class的目的在于：一个class抽取公共样式，一个class定义单独样式。</p>\n<h2 id=\"标题栏小图标\"><a href=\"#标题栏小图标\" class=\"headerlink\" title=\"标题栏小图标\"></a>标题栏小图标</h2><p>在<code>head</code>标签内加入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"图标路径.ico\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中<code>rel</code>和<code>type</code>是固定属性不用更改，只需要修改图片路径即可。</p>\n<h1 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h1><p>HTML的精髓在于标签的语义。搜索引擎根据HTML代码识别页面结构。</p>\n<p>编写语意结构良好的页面的好处：</p>\n<ul>\n<li>利于开发调试和后期维护。</li>\n<li>利于搜索引擎优化。</li>\n</ul>\n<p>应优先使用正确的语义化标签，如果没有语义化标签可用，再考虑div或者span等无语义标签。</p>\n<h2 id=\"标题语义化\"><a href=\"#标题语义化\" class=\"headerlink\" title=\"标题语义化\"></a>标题语义化</h2><p>h1-h6是标题标签，相比于其他标签，它们在搜索引擎优化（SEO）中占有相当重要的地位。</p>\n<p>一般用到h4，h5和h6权重和普通标签差不多，很少使用。</p>\n<p>对于标题语义化，我们需要注意的是：</p>\n<ul>\n<li>一个页面只能有一个h1标签。</li>\n<li>h1-h6之间不要出现断层。</li>\n<li>不要用标题标签来定义样式（如为了加粗字体而为文本加上标题标签）。</li>\n<li>不要用div来代替标题标签。</li>\n</ul>\n<p>div是无语义的标签，如果使用div代替标题标签会使网页在SEO中丢失大量权重。</p>\n<h2 id=\"图片语义化\"><a href=\"#图片语义化\" class=\"headerlink\" title=\"图片语义化\"></a>图片语义化</h2><h3 id=\"alt属性和title属性\"><a href=\"#alt属性和title属性\" class=\"headerlink\" title=\"alt属性和title属性\"></a>alt属性和title属性</h3><p>alt是给搜索引擎看的，title是给用户看的。</p>\n<p>搜索引擎根据alt属性或上下文判断图片内容。</p>\n<p>因此<strong>img标签必须添加alt属性。</strong></p>\n<h3 id=\"figure元素和figcaption元素\"><a href=\"#figure元素和figcaption元素\" class=\"headerlink\" title=\"figure元素和figcaption元素\"></a>figure元素和figcaption元素</h3><p>对于图片+图注的效果，使用figure和figcaption来增强图片语义化。</p>\n<p>例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"xxx\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">figcaption</span>&gt;</span>这是一个图注<span class=\"tag\">&lt;/<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更详细的介绍可以看<a href=\"https://www.w3cplus.com/html5/quick-tip-the-right-way-to-use-figure-and-figcaption-elements.html\" target=\"_blank\" rel=\"noopener\">这一篇博客</a>。</p>\n<h2 id=\"表格语义化\"><a href=\"#表格语义化\" class=\"headerlink\" title=\"表格语义化\"></a>表格语义化</h2><table>\n<thead>\n<tr>\n<th>标签</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>table</td>\n<td>表格</td>\n</tr>\n<tr>\n<td>caption</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>thead</td>\n<td>表头（语义划分）</td>\n</tr>\n<tr>\n<td>tbody</td>\n<td>表身（语义划分）</td>\n</tr>\n<tr>\n<td>tfoot</td>\n<td>表尾（语义划分）</td>\n</tr>\n<tr>\n<td>tr</td>\n<td>行</td>\n</tr>\n<tr>\n<td>th</td>\n<td>表头单元格</td>\n</tr>\n<tr>\n<td>td</td>\n<td>表格单元格</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"表单语义化\"><a href=\"#表单语义化\" class=\"headerlink\" title=\"表单语义化\"></a>表单语义化</h2><h3 id=\"label标签\"><a href=\"#label标签\" class=\"headerlink\" title=\"label标签\"></a>label标签</h3><p>label标签的for属性有两个作用：</p>\n<ul>\n<li>语义上绑定了label元素和表单元素。（\\<label for=\"*element_id*\">）</label></li>\n<li>当我们点击label中的文本时，其关联的表单元素也会获得焦点。</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"rdo\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rdo\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"rdo\"</span>&gt;</span>单选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"fieldset标签和legend标签\"><a href=\"#fieldset标签和legend标签\" class=\"headerlink\" title=\"fieldset标签和legend标签\"></a>fieldset标签和legend标签</h3><p>fieldset标签用于给表单元素进行分组并绘制一个边框，legend标签用于定义某一组表单的标题。</p>\n<p>例如这个<a href=\"http://www.runoob.com/tags/tag-fieldset.html\" target=\"_blank\" rel=\"noopener\">例子</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Personalia:<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">    Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Email: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Date of birth: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<ul>\n<li>增强表单语义。</li>\n<li>可以使用fieldset标签的disabled属性来禁用整个组中的表单元素。</li>\n</ul>\n<h2 id=\"其他语义化\"><a href=\"#其他语义化\" class=\"headerlink\" title=\"其他语义化\"></a>其他语义化</h2><h3 id=\"换行符\"><a href=\"#换行符\" class=\"headerlink\" title=\"换行符\\\"></a>换行符\\<br></h3><p>W3C标准规定，\\<br>标签只能用于段落中的换行。即只能用于p标签内部。</p>\n<h3 id=\"无序列表ul\"><a href=\"#无序列表ul\" class=\"headerlink\" title=\"无序列表ul\"></a>无序列表ul</h3><p>对于列表型数据，不建议使用div实现，而应用无序列表或有序列表实现。</p>\n<p>为了实现外观效果，一般使用无序列表而不是有序列表。</p>\n<h3 id=\"strong-标签和em标签\"><a href=\"#strong-标签和em标签\" class=\"headerlink\" title=\"strong 标签和em标签\"></a>strong 标签和em标签</h3><p>W3C对这两个标签赋予了“强调”的语义。</p>\n<p>可以在CSS中重新定义它们的样式而不会改变它们的语义。</p>\n<h3 id=\"del标签和ins标签\"><a href=\"#del标签和ins标签\" class=\"headerlink\" title=\"del标签和ins标签\"></a>del标签和ins标签</h3><p>这两个标签一般是配合使用表示更新文本：“delete”和“insert”，被删除的文本和被更新的文本。</p>\n<p>一般会用CSS重新定义它们的样式。</p>\n<p><a href=\"http://www.runoob.com/tags/tag-del.html\" target=\"_blank\" rel=\"noopener\">实例链接</a></p>\n<h3 id=\"img标签\"><a href=\"#img标签\" class=\"headerlink\" title=\"img标签\"></a>img标签</h3><p>对于什么时候使用img标签，什么时候使用背景图片，应该根据HTML的语义来判断。</p>\n<ul>\n<li><p>img标签：作为HTML的一部分，希望被搜索引擎识别。</p>\n</li>\n<li><p>背景图片： 只起到修饰作用，不希望被搜索引擎识别。</p>\n</li>\n</ul>\n<h2 id=\"语义化验证\"><a href=\"#语义化验证\" class=\"headerlink\" title=\"语义化验证\"></a>语义化验证</h2><p>通过去掉CSS样式，观察页面是否还有很好的可读性来判断一个页面是否语义良好。</p>\n<h2 id=\"HTML5舍弃的标签\"><a href=\"#HTML5舍弃的标签\" class=\"headerlink\" title=\"HTML5舍弃的标签\"></a>HTML5舍弃的标签</h2><p>下边这些已经被舍弃的标签(仅为了定义样式的标签和很少使用或已经被新标签代替的标签)应停止使用：</p>\n<ul>\n<li>\\<acronym>  定义首字母缩写，应用abbr代替。</acronym></li>\n<li>\\<applet> 定义嵌入的applet，应用object代替。</applet></li>\n<li>\\<basefont></li>\n<li>\\<big></big></li>\n<li>\\<center></center></li>\n<li>\\<dir> 定义目录列表，应用ul代替。</dir></li>\n<li>\\<font></font></li>\n<li>\\<frame></li>\n<li>\\<frameset></frameset></li>\n<li>\\<noframes></noframes></li>\n<li>\\<strike></strike></li>\n<li>\\<tt></tt></li>\n</ul>\n<h1 id=\"CSS基础知识\"><a href=\"#CSS基础知识\" class=\"headerlink\" title=\"CSS基础知识\"></a>CSS基础知识</h1><h2 id=\"CSS单位\"><a href=\"#CSS单位\" class=\"headerlink\" title=\"CSS单位\"></a>CSS单位</h2><h3 id=\"px\"><a href=\"#px\" class=\"headerlink\" title=\"px\"></a>px</h3><p>pixel，像素，一个图片或计算机屏幕中最小的点。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"%\"></a>%</h3><p>CSS中支持百分比的属性：</p>\n<ul>\n<li><strong>width、height、font-size</strong>，它们的百分比是相对于父元素的“相同元素”的值来计算的。</li>\n<li><strong>line-height</strong>，它的百分比是相对于<strong>父元素</strong>的<strong>font-size</strong>值来计算的。</li>\n<li><strong>vertical-align</strong>，它的百分比是相对于<strong>当前元素</strong>继承的<strong>line-height</strong>值来计算的。</li>\n</ul>\n<h3 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h3><p>1em等于当前元素的以px为单位的font-size值，</p>\n<p>若当前元素的font-size值没有定义，则从父元素继承，</p>\n<p>若当前元素的所有祖先元素都没有定义font-size，则继承浏览器默认的font-size值：16px。</p>\n<p><u>使用em的小技巧：</u>首行缩进使用 <code>text-indent: 2em</code>实现。</p>\n<h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>CSS3新引入的单位，指相对根元素（即html元素）的字体大小。</p>\n<h2 id=\"CSS特性\"><a href=\"#CSS特性\" class=\"headerlink\" title=\"CSS特性\"></a>CSS特性</h2><h3 id=\"继承性\"><a href=\"#继承性\" class=\"headerlink\" title=\"继承性\"></a>继承性</h3><p>指子元素继承了父元素的某些样式属性。</p>\n<p>在CSS中，具有继承性的样式有三大类：</p>\n<ul>\n<li><strong>文本</strong>相关属性： font–family，font-size，font-style，font-weight，font，line-height，text-align，text-indent，word-spacing。</li>\n<li><strong>列表</strong>相关属性： list-style-image，list-style-position，list-style-type，list-style。</li>\n<li><strong>颜色</strong>相关属性： color。</li>\n</ul>\n<h3 id=\"层叠性\"><a href=\"#层叠性\" class=\"headerlink\" title=\"层叠性\"></a>层叠性</h3><p>“后者居上”原则。</p>\n<p>CSS的层叠性指样式的覆盖。对于具有<strong>相同权重</strong>的<strong>相同属性</strong>，以最后定义的值为准。</p>\n<h2 id=\"CSS优先级\"><a href=\"#CSS优先级\" class=\"headerlink\" title=\"CSS优先级\"></a>CSS优先级</h2><h3 id=\"引用方式\"><a href=\"#引用方式\" class=\"headerlink\" title=\"引用方式\"></a>引用方式</h3><p>行内样式&gt;(内部样式=外部样式)</p>\n<p>若同时存在权重相同内部样式和外部样式，则以最后引入的样式为准。</p>\n<h3 id=\"继承方式\"><a href=\"#继承方式\" class=\"headerlink\" title=\"继承方式\"></a>继承方式</h3><p>以最近的祖先元素为准。</p>\n<h3 id=\"指定样式\"><a href=\"#指定样式\" class=\"headerlink\" title=\"指定样式\"></a>指定样式</h3><p>常见的伪元素——:before、:after、:first-letter、:first-line。</p>\n<p>常见的伪类——:hover、:first-child等。</p>\n<p>常用的选择器优先级：行内样式&gt;id选择器&gt;class选择器&gt;元素选择器。</p>\n<p>选择器权值表：</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>权值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>通配符</td>\n<td>0</td>\n</tr>\n<tr>\n<td>伪元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>元素选择器</td>\n<td>1</td>\n</tr>\n<tr>\n<td>class选择器</td>\n<td>10</td>\n</tr>\n<tr>\n<td>伪类</td>\n<td>10</td>\n</tr>\n<tr>\n<td>属性选择器</td>\n<td>10</td>\n</tr>\n<tr>\n<td>id选择器</td>\n<td>100</td>\n</tr>\n<tr>\n<td>行内样式</td>\n<td>1000</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"继承样式和和指定样式\"><a href=\"#继承样式和和指定样式\" class=\"headerlink\" title=\"继承样式和和指定样式\"></a>继承样式和和指定样式</h3><p>指定样式权重更高。</p>\n<h3 id=\"important\"><a href=\"#important\" class=\"headerlink\" title=\"!important\"></a>!important</h3><p>权值最高，不推荐使用。</p>\n<h2 id=\"CSS引入方式\"><a href=\"#CSS引入方式\" class=\"headerlink\" title=\"CSS引入方式\"></a>CSS引入方式</h2><ul>\n<li>导入样式表（加载html后加载css，不推荐）</li>\n<li>外部样式表（link标签）</li>\n<li>内部样式表（style标签）</li>\n<li>行内样式表</li>\n</ul>\n<h2 id=\"CSS选择器\"><a href=\"#CSS选择器\" class=\"headerlink\" title=\"CSS选择器\"></a>CSS选择器</h2><p>CSS出去基本的选择器（元素选择器、id选择器、class选择器、群组或分组选择器），</p>\n<p>还有<u>层次选择器</u>：</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M N</td>\n<td>后代选择器，选择M元素所有内部后代N元素</td>\n</tr>\n<tr>\n<td>M&gt;N</td>\n<td>子代选择器，选择M元素所有内部子代N元素</td>\n</tr>\n<tr>\n<td>M~N</td>\n<td>兄弟选择器，选择M元素所有同级N元素</td>\n</tr>\n<tr>\n<td>M+N</td>\n<td>相邻选择器，选择M元素相邻的下一个同级元素</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"CSS规范\"><a href=\"#CSS规范\" class=\"headerlink\" title=\"CSS规范\"></a>CSS规范</h1><h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><h3 id=\"CSS文件命名\"><a href=\"#CSS文件命名\" class=\"headerlink\" title=\"CSS文件命名\"></a>CSS文件命名</h3><p>开发阶段按照功能模块划分CSS文件。</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reset.css</td>\n<td>重置样式，重置元素默认样式</td>\n</tr>\n<tr>\n<td>global.css</td>\n<td>全局样式，全站公用，定义页面基础样式</td>\n</tr>\n<tr>\n<td>themes.css</td>\n<td>主题样式，用于实现换肤功能</td>\n</tr>\n<tr>\n<td>module.css</td>\n<td>模块样式，用于模块的样式</td>\n</tr>\n<tr>\n<td>master.css</td>\n<td>母版样式，用于母版页的样式</td>\n</tr>\n<tr>\n<td>columes.css</td>\n<td>专栏样式，用于专栏的样式</td>\n</tr>\n<tr>\n<td>forms.css</td>\n<td>表单样式，用于表单的样式</td>\n</tr>\n<tr>\n<td>mend.css</td>\n<td>补丁样式，用于维护、修改的样式</td>\n</tr>\n<tr>\n<td>print.css</td>\n<td>打印样式，用于打印的样式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"id和class命名\"><a href=\"#id和class命名\" class=\"headerlink\" title=\"id和class命名\"></a>id和class命名</h3><p>建议使用中划线命名，例如<code>column-title</code>。</p>\n<p>为了避免class命名的重复，一般取父元素的class名作为前缀，例如<code>column-title</code>。</p>\n<table>\n<thead>\n<tr>\n<th>网页主体部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最外层</td>\n<td>wrapper(一般用于包裹整个页面)</td>\n</tr>\n<tr>\n<td>头部</td>\n<td>header</td>\n</tr>\n<tr>\n<td>内容</td>\n<td>content</td>\n</tr>\n<tr>\n<td>侧栏</td>\n<td>sidebar</td>\n</tr>\n<tr>\n<td>栏目</td>\n<td>column</td>\n</tr>\n<tr>\n<td>热点</td>\n<td>hot</td>\n</tr>\n<tr>\n<td>新闻</td>\n<td>news</td>\n</tr>\n<tr>\n<td>下载</td>\n<td>download</td>\n</tr>\n<tr>\n<td>标志</td>\n<td>logo</td>\n</tr>\n<tr>\n<td>导航条</td>\n<td>nav</td>\n</tr>\n<tr>\n<td>主体</td>\n<td>main</td>\n</tr>\n<tr>\n<td>左侧</td>\n<td>main-left</td>\n</tr>\n<tr>\n<td>右侧</td>\n<td>main-right</td>\n</tr>\n<tr>\n<td>底部</td>\n<td>footer</td>\n</tr>\n<tr>\n<td>友情链接</td>\n<td>friendlink</td>\n</tr>\n<tr>\n<td>加入我们</td>\n<td>joinus</td>\n</tr>\n<tr>\n<td>版权</td>\n<td>copyright</td>\n</tr>\n<tr>\n<td>服务</td>\n<td>service</td>\n</tr>\n<tr>\n<td>登录</td>\n<td>login</td>\n</tr>\n<tr>\n<td>注册</td>\n<td>register</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>导航部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主导航</td>\n<td>main-nav</td>\n</tr>\n<tr>\n<td>子导航</td>\n<td>sub-nav</td>\n</tr>\n<tr>\n<td>边导航</td>\n<td>side-nav</td>\n</tr>\n<tr>\n<td>左导航</td>\n<td>leftside-nav</td>\n</tr>\n<tr>\n<td>右导航</td>\n<td>rightside-nav</td>\n</tr>\n<tr>\n<td>顶导航</td>\n<td>top-nav</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>菜单部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>菜单</td>\n<td>menu</td>\n</tr>\n<tr>\n<td>子菜单</td>\n<td>submenu</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>其他</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>标题</td>\n<td>title</td>\n</tr>\n<tr>\n<td>摘要</td>\n<td>summary</td>\n</tr>\n<tr>\n<td>登录条</td>\n<td>loginbar</td>\n</tr>\n<tr>\n<td>搜索</td>\n<td>search</td>\n</tr>\n<tr>\n<td>标签页</td>\n<td>tab</td>\n</tr>\n<tr>\n<td>广告</td>\n<td>banner</td>\n</tr>\n<tr>\n<td>小技巧</td>\n<td>tips</td>\n</tr>\n<tr>\n<td>图标</td>\n<td>icon</td>\n</tr>\n<tr>\n<td>法律声明</td>\n<td>siteinfolegal</td>\n</tr>\n<tr>\n<td>网站地图</td>\n<td>sitemap</td>\n</tr>\n<tr>\n<td>工具条</td>\n<td>tool、toolbar</td>\n</tr>\n<tr>\n<td>首页</td>\n<td>homepage</td>\n</tr>\n<tr>\n<td>子页</td>\n<td>subpage</td>\n</tr>\n<tr>\n<td>合作伙伴</td>\n<td>partner</td>\n</tr>\n<tr>\n<td>帮助</td>\n<td>help</td>\n</tr>\n<tr>\n<td>指南</td>\n<td>guide</td>\n</tr>\n<tr>\n<td>滚动</td>\n<td>scroll</td>\n</tr>\n<tr>\n<td>提示信息</td>\n<td>msg</td>\n</tr>\n<tr>\n<td>投票</td>\n<td>vote</td>\n</tr>\n<tr>\n<td>相关文章</td>\n<td>related</td>\n</tr>\n<tr>\n<td>文章列表</td>\n<td>list</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"书写规范\"><a href=\"#书写规范\" class=\"headerlink\" title=\"书写规范\"></a>书写规范</h2><p>对于功能代码，应该集中放在一起，</p>\n<p>对于其他代码，应按照如下顺序：</p>\n<ol>\n<li>影响文档流属性（布局属性）——display，position，float，clear等</li>\n<li>自身盒模型属性——width，height，padding，margin，border，overflow等</li>\n<li>文本性属性——font，line-height，text-align，text-indent，vertical-align等</li>\n<li>装饰性属性——color，background-color，opacity等</li>\n<li>其他属性——cursor，content，list-style，quotes等</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 影响文档流属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 盒子模型属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid gray;</span><br><span class=\"line\">  <span class=\"comment\">/* 文本性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 装饰性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"comment\">/* 其他属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"注释规范\"><a href=\"#注释规范\" class=\"headerlink\" title=\"注释规范\"></a>注释规范</h2><p>由于压缩工具会删除所有的注释，因此有时为了保留版权声明等注释信息，需要在注释内容前加一个叹号，如<code>/*! 注释内容 */</code>，这样压缩工具就不会删除这条注释信息。</p>\n<h3 id=\"顶部注释\"><a href=\"#顶部注释\" class=\"headerlink\" title=\"顶部注释\"></a>顶部注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *@description:说明</span></span><br><span class=\"line\"><span class=\"comment\"> *@author:作者</span></span><br><span class=\"line\"><span class=\"comment\"> *@update:更新时间，如2018-09-10 17:42</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模块注释\"><a href=\"#模块注释\" class=\"headerlink\" title=\"模块注释\"></a>模块注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 导航部分，开始 */</span></span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"comment\">/* 导航部分，结束 */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"简单注释\"><a href=\"#简单注释\" class=\"headerlink\" title=\"简单注释\"></a>简单注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 单行注释 */</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> *多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> *多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-reset\"><a href=\"#CSS-reset\" class=\"headerlink\" title=\"CSS reset\"></a>CSS reset</h2><p>重置样式，去除元素在浏览器中的默认样式。</p>\n<p>是否使用CSS reset根据实际开发需求而定。</p>\n<h1 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h1><p><img src=\"https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=5ad0ba6a0c7b02080c9c37e752e9deeb/0824ab18972bd407012c41327d899e510eb30911.jpg\" alt=\"标准盒子模型\"></p>\n<p><img src=\"https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=6cdf3ae9fbfaaf5184b689b9bc64b8d6/1b4c510fd9f9d72ac29d82d2d22a2834359bbb00.jpg\" alt=\"IE盒子模型\"></p>\n<h2 id=\"外边距叠加\"><a href=\"#外边距叠加\" class=\"headerlink\" title=\"外边距叠加\"></a>外边距叠加</h2><p>又称为“margin叠加”，指当两个外边距相遇时会“合二为一”。叠加后的外边距为两个外边距的最大值。</p>\n<p><u>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</u></p>\n<p>以下图片均来自<a href=\"http://www.w3school.com.cn/css/css_margin_collapsing.asp\" target=\"_blank\" rel=\"noopener\">w3school</a></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_1.gif\" alt=\"同级元素\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_2.gif\" alt=\"父子元素\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_3.gif\" alt=\"空元素1\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_4.gif\" alt=\"空元素2\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing.gif\" alt=\"外边距合并的意义\"></p>\n<h2 id=\"负margin\"><a href=\"#负margin\" class=\"headerlink\" title=\"负margin\"></a>负margin</h2><ul>\n<li>当margin-top或者margin-left为负数时，<strong>当前元素</strong>会被拉向指定方向。</li>\n<li>当margin-bottom或者margin-right为负数时，<strong>后续元素</strong>会被拉向指定方向。</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/549aaa5fabaa\" target=\"_blank\" rel=\"noopener\">这里有一篇文章</a>讲得不错，可以参考一下。</p>\n<p><a href=\"https://www.cnblogs.com/star91/p/5773436.html\" target=\"_blank\" rel=\"noopener\">圣杯布局、双飞翼布局</a>就是利用这个实现的。</p>\n<h2 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow\"></a>overflow</h2><p>当浮动引起父元素高度塌陷时，可以为父元素加上<code>overflow: hidden</code>来清除浮动。</p>\n<h1 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h1><table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline</td>\n<td>行内元素</td>\n</tr>\n<tr>\n<td>block</td>\n<td>块元素</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>行内块元素</td>\n</tr>\n<tr>\n<td>table</td>\n<td>以表格形式显示，类似于table元素</td>\n</tr>\n<tr>\n<td>table-row</td>\n<td>以表格行形式显示，类似于tr元素</td>\n</tr>\n<tr>\n<td>table-cell</td>\n<td>以表格单元格形式显示，类似于td元素</td>\n</tr>\n<tr>\n<td>none</td>\n<td>隐藏元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"块元素\"><a href=\"#块元素\" class=\"headerlink\" title=\"块元素\"></a>块元素</h2><ul>\n<li>独占一行</li>\n<li>内部可以容纳其他块元素或行元素</li>\n<li>可以定义width和height</li>\n<li>可以定义四个方向的margin</li>\n</ul>\n<h2 id=\"inline元素\"><a href=\"#inline元素\" class=\"headerlink\" title=\"inline元素\"></a>inline元素</h2><ul>\n<li>可以与其他行内元素位于同一行</li>\n<li>可以容纳行内元素，但不能容纳块元素</li>\n<li>无法定义width和height</li>\n<li>可以定义margin-left和margin-right，不能定义margin-top和margin-bottom</li>\n</ul>\n<h2 id=\"inline-block元素\"><a href=\"#inline-block元素\" class=\"headerlink\" title=\"inline-block元素\"></a>inline-block元素</h2><ul>\n<li>可以定义width和height</li>\n<li>可以与其他行内元素位于同一行</li>\n</ul>\n<p>常见的inline-block元素：img元素和input元素</p>\n<h2 id=\"display-table-cell\"><a href=\"#display-table-cell\" class=\"headerlink\" title=\"display: table-cell\"></a>display: table-cell</h2><p>可以用于实现：</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/a7ee7dd60166\" target=\"_blank\" rel=\"noopener\">图片垂直居中</a>于元素</li>\n<li>等高布局</li>\n<li>自动平均划分元素，并在同一行显示</li>\n</ul>\n<h2 id=\"去除inline-block元素间距\"><a href=\"#去除inline-block元素间距\" class=\"headerlink\" title=\"去除inline-block元素间距\"></a>去除inline-block元素间距</h2><p>在父元素中添加<code>font-size: 0</code></p>\n<h1 id=\"文本效果\"><a href=\"#文本效果\" class=\"headerlink\" title=\"文本效果\"></a>文本效果</h1><table>\n<thead>\n<tr>\n<th>文本属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text-decoration</td>\n<td>下划线、删除线、顶划线</td>\n</tr>\n<tr>\n<td>text-transform</td>\n<td>文本大小写</td>\n</tr>\n<tr>\n<td>font-variant</td>\n<td>将英文文本转换为小型大写字母</td>\n</tr>\n<tr>\n<td>text-indent</td>\n<td>段落首行缩进</td>\n</tr>\n<tr>\n<td>text-align</td>\n<td>文本水平对齐</td>\n</tr>\n<tr>\n<td>vertical-align</td>\n<td>文本垂直对齐</td>\n</tr>\n<tr>\n<td>line-height</td>\n<td>行高</td>\n</tr>\n<tr>\n<td>letter-spacing</td>\n<td>字距</td>\n</tr>\n<tr>\n<td>word-spacing</td>\n<td>词距</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"text-indent\"><a href=\"#text-indent\" class=\"headerlink\" title=\"text-indent\"></a>text-indent</h2><p>可以使用    <code>text-indent: -9999px;</code>来隐藏文本。</p>\n<h2 id=\"text-align\"><a href=\"#text-align\" class=\"headerlink\" title=\"text-align\"></a>text-align</h2><p>主要使用的值为left、right、center，对文字、inline元素、inline-block元素都起作用，对块元素不起作用。</p>\n<p>利用<code>margin: 0 auto</code>实现块元素的水平居中。</p>\n<p><code>text-align: center</code>在父元素中定义，<code>margin: 0 auto</code>在当前元素中定义。</p>\n<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><p>关于顶线、中线、基线、底线可以自行查阅。</p>\n<p>行高（line-height）指的是两行基线之间的距离。</p>\n<ul>\n<li>将height和line-height设为相同值可以实现文字垂直居中。</li>\n<li>当取值为%或者em时，是相对与父元素的font-size计算的。</li>\n<li>当取值为无单位数字时，是相对于当前元素的font-size计算的。</li>\n</ul>\n<h2 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h2><p>vertical-align对inline、inline-block、table-cell元素有效，对块元素无效。</p>\n<p>用于定义<u>周围的文字、inline元素、inline-block元素</u>相对于该元素<strong>基线</strong>的垂直对齐方式。</p>\n<p>可以取负长度值和百分比值。</p>\n<h3 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h3><ol>\n<li><p>负值 ： <code>vertical-align: -2px</code>指的是该元素相对于基线向下偏移2px；</p>\n</li>\n<li><p>百分比 ： 相对于当前元素继承的line-height值计算的，也是该元素相对于基线偏移的值；</p>\n</li>\n<li><p><a href=\"http://www.runoob.com/cssref/pr-pos-vertical-align.html\" target=\"_blank\" rel=\"noopener\">关键字</a> （前四个比较常用）：</p>\n<p>| 值           | 描述                                           |<br>| ———— | ———————————————- |<br>| <strong>top</strong>      | 把元素的顶端与行中最高元素的顶端对齐           |<br>| <strong>middle</strong>   | 把此元素放置在父元素的中部。                   |<br>| <strong>baseline</strong> | 默认。元素放置在父元素的基线上。               |<br>| <strong>bottom</strong>   | 把元素的底端与行中最低的元素的顶端对齐。       |<br>| text-top     | 把元素的顶端与父元素字体的顶端对齐             |<br>| text-bottom  | 把元素的底端与父元素字体的底端对齐。           |<br>| sub          | 垂直对齐文本的下标。                           |<br>| super        | 垂直对齐文本的上标                             |<br>| inherit      | 规定应该从父元素继承 vertical-align 属性的值。 |</p>\n</li>\n</ol>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>为img添加<code>vertical-align: middle</code>可以实现图片与周围的文字居中对齐</li>\n<li>要使块元素（如div）也可以使用此属性，可以为其先定义<code>display: table-cell</code></li>\n</ul>\n<h1 id=\"表单效果\"><a href=\"#表单效果\" class=\"headerlink\" title=\"表单效果\"></a>表单效果</h1><h2 id=\"radio与checkbox\"><a href=\"#radio与checkbox\" class=\"headerlink\" title=\"radio与checkbox\"></a>radio与checkbox</h2><p>默认情况下由于是基线对齐因此视觉上会感觉单选框或复选框旁边的文字比它们低，这个时候可以使用vertical-align来让他们垂直居中对齐。</p>\n<p>可以使用关键字，也可以使用数值。</p>\n<h2 id=\"textarea\"><a href=\"#textarea\" class=\"headerlink\" title=\"textarea\"></a>textarea</h2><ul>\n<li>可以使用max-width和max-height来限制拖拽大小</li>\n<li>可以使用<code>resize: none</code>来禁止拖拽</li>\n</ul>\n<p>要使textarea在不同浏览器中具有相同的外观，可以：</p>\n<ul>\n<li>使用CSS的width和height定义大小</li>\n<li>使用<code>overflow: auto</code>来定义textarea滚动条自适应</li>\n</ul>\n<h2 id=\"表单对齐\"><a href=\"#表单对齐\" class=\"headerlink\" title=\"表单对齐\"></a>表单对齐</h2><p>书上给了<strong>注册</strong>的例子：</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536639853274&amp;di=16c88d63b9118620ba546c2f6237b78c&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.orsoon.com%2Fuploads%2Fallimg%2F24631428484696.png\" alt=\"图片来源于网络\"></p>\n<p>实现方法：</p>\n<ol>\n<li>每一行表单分为左栏加若干右栏<ol>\n<li>所有行的左栏长度相等</li>\n<li>所有行的右栏所有盒子长度之和相等</li>\n<li>左栏一般为一个label，右栏为若干文本框</li>\n</ol>\n</li>\n<li>所有左栏和右栏盒子都设为左浮动</li>\n<li>左栏添加属性<code>text-align: right</code>使得文字右对齐</li>\n<li>每一行左栏盒子长度加上所有右栏盒子长度之和等于行宽</li>\n<li>每一行由一个p包裹住，并为p添加<code>overflow: hidden</code>来清除浮动</li>\n</ol>\n<p>然后我又去看了一下各网站的<strong>登录</strong>界面，基本上是一个icon+一个input的模式：</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536641005969&amp;di=02e6a2469281303e926eb8878cf64db9&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fexp%2Fw%3D480%2Fsign%3D00237679845494ee87220e111df7e0e1%2Fa686c9177f3e67093ac0b23933c79f3df9dc5530.jpg\" alt=\"图片来源于网络\"></p>\n<p>实现方法：</p>\n<ul>\n<li>icon使用<code>position: absolute</code>脱离文档流并盖在input上</li>\n<li>input将padding-left调到合适大小使得输入框不被icon盖住</li>\n</ul>\n<p>#　浮动布局</p>\n<h2 id=\"文档流\"><a href=\"#文档流\" class=\"headerlink\" title=\"文档流\"></a>文档流</h2><p>简单来说就是元素在页面中出现的先后顺序。</p>\n<ul>\n<li>正常文档流 ： “normal flow”，指默认情况下页面元素的布局情况。</li>\n<li>脱离文档流：脱离正常文档流。要改变正常文档流，使用浮动和定位方法。</li>\n</ul>\n<h2 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h2><p>可以使元素移到左边或者右边，并且允许后边的文字和元素环绕着它。</p>\n<p>浮动后使用margin来定义和其他元素之间的间距。</p>\n<p>绝对定位的元素忽略float属性。</p>\n<p>float的取值表如下，默认为<strong>none</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>left</td>\n<td>元素向左浮动。</td>\n</tr>\n<tr>\n<td>right</td>\n<td>元素向右浮动。</td>\n</tr>\n<tr>\n<td>none</td>\n<td>默认值。元素不浮动，并会显示在其在文本中出现的位置。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 float 属性的值。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>当一个元素添加float属性为left或者right时，它将变为block类型。</li>\n<li>浮动元素脱离正常文档流，若其height大于父元素的height或者父元素的height未定义，会造成父元素高度塌陷。可以为父元素添加<code>overflow: hidden</code>来解决。</li>\n<li><p>若父元素和子元素都是浮动元素，则父元素会自适应地包含子元素。</p>\n</li>\n<li><p>若兄弟元素不是浮动元素，由于浮动元素脱离文档流，可能会出现覆盖等情况。</p>\n</li>\n</ul>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><ul>\n<li><code>clear: both</code>，用于浮动元素后边的元素，表示两边不允许出现浮动元素。</li>\n<li><code>overflow: hidden</code>，用于浮动元素的父元素，但会隐藏超出父元素的内容部分。</li>\n<li>实际开发中，更经常使用<code>:after</code>伪元素结合<code>clear: both</code>来实现。</li>\n<li>为了兼容ie，为父元素添加<code>zoom: 1</code>来消除浮动。</li>\n</ul>\n<h1 id=\"定位布局\"><a href=\"#定位布局\" class=\"headerlink\" title=\"定位布局\"></a>定位布局</h1><h2 id=\"属性值\"><a href=\"#属性值\" class=\"headerlink\" title=\"属性值\"></a><a href=\"http://www.runoob.com/cssref/pr-class-position.html\" target=\"_blank\" rel=\"noopener\">属性值</a></h2><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-static\" target=\"_blank\" rel=\"noopener\">static</a></td>\n<td><u>默认值</u>。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-absolute\" target=\"_blank\" rel=\"noopener\">absolute</a></td>\n<td>生成绝对定位的元素，相对于 <u>static 定位以外的第一个父元素</u>进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-fixed\" target=\"_blank\" rel=\"noopener\">fixed</a></td>\n<td>生成固定定位的元素，相对于<u>浏览器窗口</u>进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-relative\" target=\"_blank\" rel=\"noopener\">relative</a></td>\n<td>生成相对定位的元素，相对于<u>其正常位置</u>进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-sticky\" target=\"_blank\" rel=\"noopener\">sticky</a></td>\n<td>粘性定位，该定位基于用户滚动的位置。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。<strong>注意:</strong> Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 position 属性的值。</td>\n</tr>\n<tr>\n<td>initial</td>\n<td>设置该属性为默认值，详情查看 <a href=\"http://www.runoob.com/cssref/css-inherit.html\" target=\"_blank\" rel=\"noopener\">CSS initial 关键字</a>。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>absolute会将元素转换为块元素。</li>\n<li>若想要子元素相对于父元素定位，一般给父元素添加<code>position: relative</code>，给子元素定义<code>position: absolute</code>来实现。祖先元素同理。</li>\n</ul>\n<h2 id=\"z-index属性\"><a href=\"#z-index属性\" class=\"headerlink\" title=\"z-index属性\"></a>z-index属性</h2><p>默认情况下设置z-index无效，只有当元素定义position为relative、absolute、fixed时才会激活，z-index值越大，其堆叠顺序越高，越靠上（z方向上的靠上）。</p>\n<h1 id=\"CSS图形\"><a href=\"#CSS图形\" class=\"headerlink\" title=\"CSS图形\"></a>CSS图形</h1><p>由于图片大小比较大，数据传输量大且一张图片会引发一次HTTP请求，因此对徐图形效果，一般更倾向于用CSS实现。</p>\n<p>这里有一篇<a href=\"https://www.w3cplus.com/css/css-simple-shapes-cheat-sheet\" target=\"_blank\" rel=\"noopener\">CSS制作图形速查表</a>总结得比较全面，可以参考。</p>\n<p>另外对于带有边框的图形，一般是用大小不同的两个相同图形实现，小的覆盖在大的上边。</p>\n<h1 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h1><h2 id=\"属性缩写\"><a href=\"#属性缩写\" class=\"headerlink\" title=\"属性缩写\"></a>属性缩写</h2><ul>\n<li><p>border：<code>border: 1px solid red</code></p>\n<ul>\n<li>若不想要底边框，可以加上<code>border-bottom: 0</code></li>\n<li>若只想要底边框，可以<code>border-bottom: 1px solid red</code></li>\n</ul>\n</li>\n<li><p>padding： </p>\n<ul>\n<li><code>padding: 10px</code>指上右下左均为10px</li>\n<li><code>padding: 10px 20px</code>指上下为10px，左右为20px</li>\n<li><code>padding: 10px 20px 30px 40px</code>的顺序为上右下左，从上开始按照顺时针顺序</li>\n</ul>\n</li>\n<li><p>margin： 类似于padding</p>\n</li>\n<li>background： <code>background: url(&#39;xxx.jpg&#39;) no-repeat 80px 40px</code>,最后为background-position</li>\n<li><p>font： <code>font: &quot;微软雅黑&quot; 12px/1.5em bold</code></p>\n<ul>\n<li>顺序为<code>font-family</code>、<code>font-size</code>、<code>line-height</code>、<code>font-weight</code></li>\n<li>简写形式必须指定<code>font-family</code>和<code>font-size</code>的值，其他属性没有指定则为默认值</li>\n<li>简写形式中<code>font-size</code>和<code>line-height</code>之间需要加入一个斜杠<code>/</code></li>\n</ul>\n</li>\n<li><p>color： 十六进制的颜色值若每两位值相同，可以缩写一半，比如<code>color: #112233</code>可以缩写为<code>color: #123</code></p>\n</li>\n</ul>\n<p>##　语法压缩</p>\n<ul>\n<li>当一个CSS规则只有一两个属性的时候，使用横向书写</li>\n<li>可以省略最后一个属性的分号</li>\n<li>background-image、cursor等属性url()中的路径不用加引号</li>\n<li>如果某一个属性值为0，则不需要加单位</li>\n<li>如果某一个属性值是以0为开头的小数，可以吧0省略</li>\n<li>使用群组选择器合并相同样式</li>\n<li>若同一个父元素的多个子元素都定义了相同的可继承属性，把这些属性定义在父元素中来精简代码</li>\n</ul>\n<h2 id=\"CSS压缩\"><a href=\"#CSS压缩\" class=\"headerlink\" title=\"CSS压缩\"></a>CSS压缩</h2><p>书中推荐了两个在线的压缩工具：<a href=\"https://csscompressor.com\" target=\"_blank\" rel=\"noopener\">CSS Compressor</a> 和 <a href=\"http://tool.oschina.net/jscompress\" target=\"_blank\" rel=\"noopener\">YUI Compressor</a></p>\n<p>以YUI Compressor为例，它会对CSS文件执行如下操作：</p>\n<ul>\n<li>删除所有注释</li>\n<li>删除无用空白符</li>\n<li>删除结尾分号</li>\n<li>删除属性值为0的单位</li>\n<li>删除以0开头的小数前的0</li>\n<li>合并相似属性（属性缩写）</li>\n<li>将RGB颜色转换为十六进制颜色</li>\n</ul>\n<h2 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h2><p>书中推荐的图片压缩工具：</p>\n<p>在线的<a href=\"https://www.jpegmini.com\" target=\"_blank\" rel=\"noopener\">JPEGmini</a>和<a href=\"https://tinypng.com\" target=\"_blank\" rel=\"noopener\">TinyPNG</a>以及本地的<a href=\"https://imageoptim.com/versions.html\" target=\"_blank\" rel=\"noopener\">ImageOptim</a></p>\n<h2 id=\"高性能的选择器\"><a href=\"#高性能的选择器\" class=\"headerlink\" title=\"高性能的选择器\"></a>高性能的选择器</h2><p>浏览器对选择器规则是从右到左进行解析的。</p>\n<p>CSS选择的匹配效率：</p>\n<ol>\n<li>id选择器</li>\n<li>class选择器</li>\n<li>元素选择器</li>\n<li>相邻选择器</li>\n<li>子选择器</li>\n<li>后代选择器</li>\n<li>通配符选择器</li>\n<li>属性选择器</li>\n<li>伪类选择器</li>\n</ol>\n<p>因此在使用选择器时应注意：</p>\n<ul>\n<li>尽量不要使用通配符</li>\n<li>不要在id选择器和class选择器前添加元素名</li>\n<li>选择器最好不要超过三层，靠右的选择条件应尽可能精确</li>\n<li>避免使用后代选择器，尽量少使用子选择器</li>\n</ul>\n<h1 id=\"CSS技巧\"><a href=\"#CSS技巧\" class=\"headerlink\" title=\"CSS技巧\"></a>CSS技巧</h1><h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><ul>\n<li>文字、inline元素和inline-*元素： <code>text-align: center</code></li>\n<li>块元素： <code>margin: 0 auto</code></li>\n</ul>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2><ul>\n<li>行内块元素使用<code>vertical-align: middle</code></li>\n<li>块元素将display改为table-cell然后使用vertical-align</li>\n<li>多行文字使用一个标签将文字包起来并设为table-cell，然后再设置vertical-align</li>\n<li>单行文字设置line-height和height属性值相同来实现</li>\n</ul>\n<h2 id=\"CSS-Sprite\"><a href=\"#CSS-Sprite\" class=\"headerlink\" title=\"CSS Sprite\"></a>CSS Sprite</h2><p>又称为CSS精灵或CSS<strong>雪碧图</strong>，它将零散的小背景图合并成一张大背景图，然后再利用background-position属性进行定位从而现实小背景图。</p>\n<p>使用CSS Sprite技术时，需要注意：</p>\n<ul>\n<li>在开发后期而不是开发前期使用此技术</li>\n<li>有条理地组织图片顺序，应将小背景图按照类别、风格、大小等分门别类地放好</li>\n<li>控制雪碧图的大小，当图片大小小于200KB时传输时间是差不多的，因此雪碧图应控制在200KB以内</li>\n</ul>\n<p>书中推荐了两个CSS Sprite工具：<a href=\"http://css.spritegen.com/\" target=\"_blank\" rel=\"noopener\">CSS Sprite Generator</a> 和 <a href=\"http://www.spritecow.com/\" target=\"_blank\" rel=\"noopener\">Sprite Cow</a></p>\n<h2 id=\"Icon-Font图标\"><a href=\"#Icon-Font图标\" class=\"headerlink\" title=\"Icon Font图标\"></a>Icon Font图标</h2><p>使用字体文件实现小图标效果，从而减少图片的使用。</p>\n<p>推荐的Icon Font网站：<a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">http://www.iconfont.cn/</a></p>\n<p>网站上就有<a href=\"http://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d0091c141&amp;helptype=code\" target=\"_blank\" rel=\"noopener\">使用教程</a></p>\n<h1 id=\"重要概念\"><a href=\"#重要概念\" class=\"headerlink\" title=\"重要概念\"></a>重要概念</h1><h2 id=\"包含块\"><a href=\"#包含块\" class=\"headerlink\" title=\"包含块\"></a>包含块</h2><p>containing block，决定一个元素大小和定位的元素。</p>\n<p>时视觉格式化模型中的一个重要概念，与CSS盒子模型类似。其作用主要是为其内部的后代元素提供一个参考。</p>\n<ul>\n<li>根元素（HTML元素）没有父元素，它存在的包含块被称为初始包含块</li>\n<li>定位为fixed的元素的包含块为浏览器窗口</li>\n<li>定位为是static和relative的元素的包含块是它最近的块级（block、inline-block或table-cell）祖先元素创建的</li>\n<li>定位为absolute的元素的包含块是它最近的定位不是static的祖先元素，可以是块元素也可以是行内元素</li>\n</ul>\n<h2 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h2><p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1537245373&amp;di=c7455fbd6881b1a07ae8ac81a79f474e&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fwww.w3cplus.com%2Fsites%2Fdefault%2Ffiles%2Fblogs%2F2018%2F1808%2Fz-index-15.png\" alt=\"层叠级别图\"></p>\n<p>一个元素在z轴上的堆叠顺序：</p>\n<ul>\n<li>层叠级别越大越靠上</li>\n<li>同等层叠级别，后边的堆叠在前边的上边（后来者居上）</li>\n<li>不同的层叠上下文比较的是父级层叠上下文，与自身无关</li>\n</ul>\n<h2 id=\"BFC和IFC\"><a href=\"#BFC和IFC\" class=\"headerlink\" title=\"BFC和IFC\"></a>BFC和IFC</h2><p>BFC： block formatting context， 块级格式上下文</p>\n<p>IFC： inline formatting context， 行级格式上下文</p>\n<p>若一个元素具备以下任何一个条件，则会创造创造一个新的BFC：</p>\n<ul>\n<li>根元素</li>\n<li>float属性不是none</li>\n<li>position属性是absolute或fixed</li>\n<li>overflow属性值不是visible</li>\n<li>display属性为inline-block、table-caption、table-cell</li>\n</ul>\n<p>W3C描述BFC的特点为：</p>\n<ul>\n<li>在一个BFC中，盒子从顶端开始垂直一个接着一个地排列。两个相邻盒子之间的垂直间距有margin决定。<strong>同一个BFC中</strong>，两个相邻块盒子之间<strong>垂直方向上的外边距</strong>会叠加。</li>\n<li>在一个BFC中，每一个盒子的左外边界（margin-left）会紧贴着容器的border-left，右边同理，即使存在浮动元素也是如此。</li>\n</ul>\n<p>可以得到结论：</p>\n<ol>\n<li>在一个BFC内部，盒子会在垂直方向上一个接着一个地排列</li>\n<li>在一个BFC内部，相邻的margin-top、margin-bottom会叠加</li>\n<li>在一个BFC内部，每一个盒子的左外边界（margin-left）会紧贴着容器（包含盒子）的border-left，即使存在浮动元素也是如此</li>\n<li>在一个BFC内部，如果存在内部元素是一个新的BFC，并且存在内部元素是浮动元素，则这个新的BFC的区域不会与浮动元素的区域重叠</li>\n<li>BFC就是页面上一个隔离的盒子，该盒子内部的子元素不会影响到外边的元素</li>\n<li>计算一个BFC的高度时，其内部浮动元素的高度也会计算其中</li>\n</ol>\n<p>BFC的用途：</p>\n<ul>\n<li>创建BFC来避免垂直外边距叠加（例如使用div将一个盒子包起来并给这个div添加overflow属性）</li>\n<li>创建BFC来清除浮动（为父元素添加<code>overflow: hidden</code>，利用结论第六条）</li>\n<li>创建BFC来实现<a href=\"https://blog.csdn.net/michael8512/article/details/76473835\" target=\"_blank\" rel=\"noopener\">自适应布局</a></li>\n</ul>\n<hr>\n<p>好了到这里，这本书就看完了，一些细节的东西了解到了很多，下面开始看html5+css3。</p>\n<p>- 2018 - 09 - 11 -</p>\n","site":{"data":{}},"excerpt":"","more":"<p>《HTML与CSS进阶教程读书笔记》</p>\n<hr>\n<h1 id=\"HTML基础知识\"><a href=\"#HTML基础知识\" class=\"headerlink\" title=\"HTML基础知识\"></a>HTML基础知识</h1><h2 id=\"HTML与XHTML\"><a href=\"#HTML与XHTML\" class=\"headerlink\" title=\"HTML与XHTML\"></a>HTML与XHTML</h2><p>HTML指超文本标记语言，是构成网页文档的主要语言。我们常说的HTML指HTML4.01。</p>\n<p>XHTML指扩展的超文本标记语言，是XML风格的、更严格、更纯净的HTML。</p>\n<p>两者的主要区别：</p>\n<ul>\n<li>XHTML标签必须闭合。</li>\n<li>XHTML标签和属性必须小写。</li>\n<li>XHTML标签属性必须加引号。</li>\n<li>XHTML标签用id属性代替name属性。</li>\n</ul>\n<h2 id=\"id和class\"><a href=\"#id和class\" class=\"headerlink\" title=\"id和class\"></a>id和class</h2><p>由于id属性具有唯一性，因此W3C建议，对于页面关键的结构或大结构，才能使用id属性，其他地方使用class属性。</p>\n<p><u>因为搜索引擎是根据标签的语义和id属性来识别的，因此id属性的使用和命名都需要谨慎。</u></p>\n<p>一般来说，定义多个class的目的在于：一个class抽取公共样式，一个class定义单独样式。</p>\n<h2 id=\"标题栏小图标\"><a href=\"#标题栏小图标\" class=\"headerlink\" title=\"标题栏小图标\"></a>标题栏小图标</h2><p>在<code>head</code>标签内加入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"图标路径.ico\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中<code>rel</code>和<code>type</code>是固定属性不用更改，只需要修改图片路径即可。</p>\n<h1 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h1><p>HTML的精髓在于标签的语义。搜索引擎根据HTML代码识别页面结构。</p>\n<p>编写语意结构良好的页面的好处：</p>\n<ul>\n<li>利于开发调试和后期维护。</li>\n<li>利于搜索引擎优化。</li>\n</ul>\n<p>应优先使用正确的语义化标签，如果没有语义化标签可用，再考虑div或者span等无语义标签。</p>\n<h2 id=\"标题语义化\"><a href=\"#标题语义化\" class=\"headerlink\" title=\"标题语义化\"></a>标题语义化</h2><p>h1-h6是标题标签，相比于其他标签，它们在搜索引擎优化（SEO）中占有相当重要的地位。</p>\n<p>一般用到h4，h5和h6权重和普通标签差不多，很少使用。</p>\n<p>对于标题语义化，我们需要注意的是：</p>\n<ul>\n<li>一个页面只能有一个h1标签。</li>\n<li>h1-h6之间不要出现断层。</li>\n<li>不要用标题标签来定义样式（如为了加粗字体而为文本加上标题标签）。</li>\n<li>不要用div来代替标题标签。</li>\n</ul>\n<p>div是无语义的标签，如果使用div代替标题标签会使网页在SEO中丢失大量权重。</p>\n<h2 id=\"图片语义化\"><a href=\"#图片语义化\" class=\"headerlink\" title=\"图片语义化\"></a>图片语义化</h2><h3 id=\"alt属性和title属性\"><a href=\"#alt属性和title属性\" class=\"headerlink\" title=\"alt属性和title属性\"></a>alt属性和title属性</h3><p>alt是给搜索引擎看的，title是给用户看的。</p>\n<p>搜索引擎根据alt属性或上下文判断图片内容。</p>\n<p>因此<strong>img标签必须添加alt属性。</strong></p>\n<h3 id=\"figure元素和figcaption元素\"><a href=\"#figure元素和figcaption元素\" class=\"headerlink\" title=\"figure元素和figcaption元素\"></a>figure元素和figcaption元素</h3><p>对于图片+图注的效果，使用figure和figcaption来增强图片语义化。</p>\n<p>例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"xxx\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">figcaption</span>&gt;</span>这是一个图注<span class=\"tag\">&lt;/<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更详细的介绍可以看<a href=\"https://www.w3cplus.com/html5/quick-tip-the-right-way-to-use-figure-and-figcaption-elements.html\" target=\"_blank\" rel=\"noopener\">这一篇博客</a>。</p>\n<h2 id=\"表格语义化\"><a href=\"#表格语义化\" class=\"headerlink\" title=\"表格语义化\"></a>表格语义化</h2><table>\n<thead>\n<tr>\n<th>标签</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>table</td>\n<td>表格</td>\n</tr>\n<tr>\n<td>caption</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>thead</td>\n<td>表头（语义划分）</td>\n</tr>\n<tr>\n<td>tbody</td>\n<td>表身（语义划分）</td>\n</tr>\n<tr>\n<td>tfoot</td>\n<td>表尾（语义划分）</td>\n</tr>\n<tr>\n<td>tr</td>\n<td>行</td>\n</tr>\n<tr>\n<td>th</td>\n<td>表头单元格</td>\n</tr>\n<tr>\n<td>td</td>\n<td>表格单元格</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"表单语义化\"><a href=\"#表单语义化\" class=\"headerlink\" title=\"表单语义化\"></a>表单语义化</h2><h3 id=\"label标签\"><a href=\"#label标签\" class=\"headerlink\" title=\"label标签\"></a>label标签</h3><p>label标签的for属性有两个作用：</p>\n<ul>\n<li>语义上绑定了label元素和表单元素。（\\<label for=\"*element_id*\">）</label></li>\n<li>当我们点击label中的文本时，其关联的表单元素也会获得焦点。</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"rdo\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rdo\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"rdo\"</span>&gt;</span>单选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"fieldset标签和legend标签\"><a href=\"#fieldset标签和legend标签\" class=\"headerlink\" title=\"fieldset标签和legend标签\"></a>fieldset标签和legend标签</h3><p>fieldset标签用于给表单元素进行分组并绘制一个边框，legend标签用于定义某一组表单的标题。</p>\n<p>例如这个<a href=\"http://www.runoob.com/tags/tag-fieldset.html\" target=\"_blank\" rel=\"noopener\">例子</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Personalia:<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">    Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Email: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Date of birth: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<ul>\n<li>增强表单语义。</li>\n<li>可以使用fieldset标签的disabled属性来禁用整个组中的表单元素。</li>\n</ul>\n<h2 id=\"其他语义化\"><a href=\"#其他语义化\" class=\"headerlink\" title=\"其他语义化\"></a>其他语义化</h2><h3 id=\"换行符\"><a href=\"#换行符\" class=\"headerlink\" title=\"换行符\\\"></a>换行符\\<br></h3><p>W3C标准规定，\\<br>标签只能用于段落中的换行。即只能用于p标签内部。</p>\n<h3 id=\"无序列表ul\"><a href=\"#无序列表ul\" class=\"headerlink\" title=\"无序列表ul\"></a>无序列表ul</h3><p>对于列表型数据，不建议使用div实现，而应用无序列表或有序列表实现。</p>\n<p>为了实现外观效果，一般使用无序列表而不是有序列表。</p>\n<h3 id=\"strong-标签和em标签\"><a href=\"#strong-标签和em标签\" class=\"headerlink\" title=\"strong 标签和em标签\"></a>strong 标签和em标签</h3><p>W3C对这两个标签赋予了“强调”的语义。</p>\n<p>可以在CSS中重新定义它们的样式而不会改变它们的语义。</p>\n<h3 id=\"del标签和ins标签\"><a href=\"#del标签和ins标签\" class=\"headerlink\" title=\"del标签和ins标签\"></a>del标签和ins标签</h3><p>这两个标签一般是配合使用表示更新文本：“delete”和“insert”，被删除的文本和被更新的文本。</p>\n<p>一般会用CSS重新定义它们的样式。</p>\n<p><a href=\"http://www.runoob.com/tags/tag-del.html\" target=\"_blank\" rel=\"noopener\">实例链接</a></p>\n<h3 id=\"img标签\"><a href=\"#img标签\" class=\"headerlink\" title=\"img标签\"></a>img标签</h3><p>对于什么时候使用img标签，什么时候使用背景图片，应该根据HTML的语义来判断。</p>\n<ul>\n<li><p>img标签：作为HTML的一部分，希望被搜索引擎识别。</p>\n</li>\n<li><p>背景图片： 只起到修饰作用，不希望被搜索引擎识别。</p>\n</li>\n</ul>\n<h2 id=\"语义化验证\"><a href=\"#语义化验证\" class=\"headerlink\" title=\"语义化验证\"></a>语义化验证</h2><p>通过去掉CSS样式，观察页面是否还有很好的可读性来判断一个页面是否语义良好。</p>\n<h2 id=\"HTML5舍弃的标签\"><a href=\"#HTML5舍弃的标签\" class=\"headerlink\" title=\"HTML5舍弃的标签\"></a>HTML5舍弃的标签</h2><p>下边这些已经被舍弃的标签(仅为了定义样式的标签和很少使用或已经被新标签代替的标签)应停止使用：</p>\n<ul>\n<li>\\<acronym>  定义首字母缩写，应用abbr代替。</acronym></li>\n<li>\\<applet> 定义嵌入的applet，应用object代替。</applet></li>\n<li>\\<basefont></li>\n<li>\\<big></big></li>\n<li>\\<center></center></li>\n<li>\\<dir> 定义目录列表，应用ul代替。</dir></li>\n<li>\\<font></font></li>\n<li>\\<frame></li>\n<li>\\<frameset></frameset></li>\n<li>\\<noframes></noframes></li>\n<li>\\<strike></strike></li>\n<li>\\<tt></tt></li>\n</ul>\n<h1 id=\"CSS基础知识\"><a href=\"#CSS基础知识\" class=\"headerlink\" title=\"CSS基础知识\"></a>CSS基础知识</h1><h2 id=\"CSS单位\"><a href=\"#CSS单位\" class=\"headerlink\" title=\"CSS单位\"></a>CSS单位</h2><h3 id=\"px\"><a href=\"#px\" class=\"headerlink\" title=\"px\"></a>px</h3><p>pixel，像素，一个图片或计算机屏幕中最小的点。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"%\"></a>%</h3><p>CSS中支持百分比的属性：</p>\n<ul>\n<li><strong>width、height、font-size</strong>，它们的百分比是相对于父元素的“相同元素”的值来计算的。</li>\n<li><strong>line-height</strong>，它的百分比是相对于<strong>父元素</strong>的<strong>font-size</strong>值来计算的。</li>\n<li><strong>vertical-align</strong>，它的百分比是相对于<strong>当前元素</strong>继承的<strong>line-height</strong>值来计算的。</li>\n</ul>\n<h3 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h3><p>1em等于当前元素的以px为单位的font-size值，</p>\n<p>若当前元素的font-size值没有定义，则从父元素继承，</p>\n<p>若当前元素的所有祖先元素都没有定义font-size，则继承浏览器默认的font-size值：16px。</p>\n<p><u>使用em的小技巧：</u>首行缩进使用 <code>text-indent: 2em</code>实现。</p>\n<h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>CSS3新引入的单位，指相对根元素（即html元素）的字体大小。</p>\n<h2 id=\"CSS特性\"><a href=\"#CSS特性\" class=\"headerlink\" title=\"CSS特性\"></a>CSS特性</h2><h3 id=\"继承性\"><a href=\"#继承性\" class=\"headerlink\" title=\"继承性\"></a>继承性</h3><p>指子元素继承了父元素的某些样式属性。</p>\n<p>在CSS中，具有继承性的样式有三大类：</p>\n<ul>\n<li><strong>文本</strong>相关属性： font–family，font-size，font-style，font-weight，font，line-height，text-align，text-indent，word-spacing。</li>\n<li><strong>列表</strong>相关属性： list-style-image，list-style-position，list-style-type，list-style。</li>\n<li><strong>颜色</strong>相关属性： color。</li>\n</ul>\n<h3 id=\"层叠性\"><a href=\"#层叠性\" class=\"headerlink\" title=\"层叠性\"></a>层叠性</h3><p>“后者居上”原则。</p>\n<p>CSS的层叠性指样式的覆盖。对于具有<strong>相同权重</strong>的<strong>相同属性</strong>，以最后定义的值为准。</p>\n<h2 id=\"CSS优先级\"><a href=\"#CSS优先级\" class=\"headerlink\" title=\"CSS优先级\"></a>CSS优先级</h2><h3 id=\"引用方式\"><a href=\"#引用方式\" class=\"headerlink\" title=\"引用方式\"></a>引用方式</h3><p>行内样式&gt;(内部样式=外部样式)</p>\n<p>若同时存在权重相同内部样式和外部样式，则以最后引入的样式为准。</p>\n<h3 id=\"继承方式\"><a href=\"#继承方式\" class=\"headerlink\" title=\"继承方式\"></a>继承方式</h3><p>以最近的祖先元素为准。</p>\n<h3 id=\"指定样式\"><a href=\"#指定样式\" class=\"headerlink\" title=\"指定样式\"></a>指定样式</h3><p>常见的伪元素——:before、:after、:first-letter、:first-line。</p>\n<p>常见的伪类——:hover、:first-child等。</p>\n<p>常用的选择器优先级：行内样式&gt;id选择器&gt;class选择器&gt;元素选择器。</p>\n<p>选择器权值表：</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>权值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>通配符</td>\n<td>0</td>\n</tr>\n<tr>\n<td>伪元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>元素选择器</td>\n<td>1</td>\n</tr>\n<tr>\n<td>class选择器</td>\n<td>10</td>\n</tr>\n<tr>\n<td>伪类</td>\n<td>10</td>\n</tr>\n<tr>\n<td>属性选择器</td>\n<td>10</td>\n</tr>\n<tr>\n<td>id选择器</td>\n<td>100</td>\n</tr>\n<tr>\n<td>行内样式</td>\n<td>1000</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"继承样式和和指定样式\"><a href=\"#继承样式和和指定样式\" class=\"headerlink\" title=\"继承样式和和指定样式\"></a>继承样式和和指定样式</h3><p>指定样式权重更高。</p>\n<h3 id=\"important\"><a href=\"#important\" class=\"headerlink\" title=\"!important\"></a>!important</h3><p>权值最高，不推荐使用。</p>\n<h2 id=\"CSS引入方式\"><a href=\"#CSS引入方式\" class=\"headerlink\" title=\"CSS引入方式\"></a>CSS引入方式</h2><ul>\n<li>导入样式表（加载html后加载css，不推荐）</li>\n<li>外部样式表（link标签）</li>\n<li>内部样式表（style标签）</li>\n<li>行内样式表</li>\n</ul>\n<h2 id=\"CSS选择器\"><a href=\"#CSS选择器\" class=\"headerlink\" title=\"CSS选择器\"></a>CSS选择器</h2><p>CSS出去基本的选择器（元素选择器、id选择器、class选择器、群组或分组选择器），</p>\n<p>还有<u>层次选择器</u>：</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M N</td>\n<td>后代选择器，选择M元素所有内部后代N元素</td>\n</tr>\n<tr>\n<td>M&gt;N</td>\n<td>子代选择器，选择M元素所有内部子代N元素</td>\n</tr>\n<tr>\n<td>M~N</td>\n<td>兄弟选择器，选择M元素所有同级N元素</td>\n</tr>\n<tr>\n<td>M+N</td>\n<td>相邻选择器，选择M元素相邻的下一个同级元素</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"CSS规范\"><a href=\"#CSS规范\" class=\"headerlink\" title=\"CSS规范\"></a>CSS规范</h1><h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><h3 id=\"CSS文件命名\"><a href=\"#CSS文件命名\" class=\"headerlink\" title=\"CSS文件命名\"></a>CSS文件命名</h3><p>开发阶段按照功能模块划分CSS文件。</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reset.css</td>\n<td>重置样式，重置元素默认样式</td>\n</tr>\n<tr>\n<td>global.css</td>\n<td>全局样式，全站公用，定义页面基础样式</td>\n</tr>\n<tr>\n<td>themes.css</td>\n<td>主题样式，用于实现换肤功能</td>\n</tr>\n<tr>\n<td>module.css</td>\n<td>模块样式，用于模块的样式</td>\n</tr>\n<tr>\n<td>master.css</td>\n<td>母版样式，用于母版页的样式</td>\n</tr>\n<tr>\n<td>columes.css</td>\n<td>专栏样式，用于专栏的样式</td>\n</tr>\n<tr>\n<td>forms.css</td>\n<td>表单样式，用于表单的样式</td>\n</tr>\n<tr>\n<td>mend.css</td>\n<td>补丁样式，用于维护、修改的样式</td>\n</tr>\n<tr>\n<td>print.css</td>\n<td>打印样式，用于打印的样式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"id和class命名\"><a href=\"#id和class命名\" class=\"headerlink\" title=\"id和class命名\"></a>id和class命名</h3><p>建议使用中划线命名，例如<code>column-title</code>。</p>\n<p>为了避免class命名的重复，一般取父元素的class名作为前缀，例如<code>column-title</code>。</p>\n<table>\n<thead>\n<tr>\n<th>网页主体部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最外层</td>\n<td>wrapper(一般用于包裹整个页面)</td>\n</tr>\n<tr>\n<td>头部</td>\n<td>header</td>\n</tr>\n<tr>\n<td>内容</td>\n<td>content</td>\n</tr>\n<tr>\n<td>侧栏</td>\n<td>sidebar</td>\n</tr>\n<tr>\n<td>栏目</td>\n<td>column</td>\n</tr>\n<tr>\n<td>热点</td>\n<td>hot</td>\n</tr>\n<tr>\n<td>新闻</td>\n<td>news</td>\n</tr>\n<tr>\n<td>下载</td>\n<td>download</td>\n</tr>\n<tr>\n<td>标志</td>\n<td>logo</td>\n</tr>\n<tr>\n<td>导航条</td>\n<td>nav</td>\n</tr>\n<tr>\n<td>主体</td>\n<td>main</td>\n</tr>\n<tr>\n<td>左侧</td>\n<td>main-left</td>\n</tr>\n<tr>\n<td>右侧</td>\n<td>main-right</td>\n</tr>\n<tr>\n<td>底部</td>\n<td>footer</td>\n</tr>\n<tr>\n<td>友情链接</td>\n<td>friendlink</td>\n</tr>\n<tr>\n<td>加入我们</td>\n<td>joinus</td>\n</tr>\n<tr>\n<td>版权</td>\n<td>copyright</td>\n</tr>\n<tr>\n<td>服务</td>\n<td>service</td>\n</tr>\n<tr>\n<td>登录</td>\n<td>login</td>\n</tr>\n<tr>\n<td>注册</td>\n<td>register</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>导航部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主导航</td>\n<td>main-nav</td>\n</tr>\n<tr>\n<td>子导航</td>\n<td>sub-nav</td>\n</tr>\n<tr>\n<td>边导航</td>\n<td>side-nav</td>\n</tr>\n<tr>\n<td>左导航</td>\n<td>leftside-nav</td>\n</tr>\n<tr>\n<td>右导航</td>\n<td>rightside-nav</td>\n</tr>\n<tr>\n<td>顶导航</td>\n<td>top-nav</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>菜单部分</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>菜单</td>\n<td>menu</td>\n</tr>\n<tr>\n<td>子菜单</td>\n<td>submenu</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>其他</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>标题</td>\n<td>title</td>\n</tr>\n<tr>\n<td>摘要</td>\n<td>summary</td>\n</tr>\n<tr>\n<td>登录条</td>\n<td>loginbar</td>\n</tr>\n<tr>\n<td>搜索</td>\n<td>search</td>\n</tr>\n<tr>\n<td>标签页</td>\n<td>tab</td>\n</tr>\n<tr>\n<td>广告</td>\n<td>banner</td>\n</tr>\n<tr>\n<td>小技巧</td>\n<td>tips</td>\n</tr>\n<tr>\n<td>图标</td>\n<td>icon</td>\n</tr>\n<tr>\n<td>法律声明</td>\n<td>siteinfolegal</td>\n</tr>\n<tr>\n<td>网站地图</td>\n<td>sitemap</td>\n</tr>\n<tr>\n<td>工具条</td>\n<td>tool、toolbar</td>\n</tr>\n<tr>\n<td>首页</td>\n<td>homepage</td>\n</tr>\n<tr>\n<td>子页</td>\n<td>subpage</td>\n</tr>\n<tr>\n<td>合作伙伴</td>\n<td>partner</td>\n</tr>\n<tr>\n<td>帮助</td>\n<td>help</td>\n</tr>\n<tr>\n<td>指南</td>\n<td>guide</td>\n</tr>\n<tr>\n<td>滚动</td>\n<td>scroll</td>\n</tr>\n<tr>\n<td>提示信息</td>\n<td>msg</td>\n</tr>\n<tr>\n<td>投票</td>\n<td>vote</td>\n</tr>\n<tr>\n<td>相关文章</td>\n<td>related</td>\n</tr>\n<tr>\n<td>文章列表</td>\n<td>list</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"书写规范\"><a href=\"#书写规范\" class=\"headerlink\" title=\"书写规范\"></a>书写规范</h2><p>对于功能代码，应该集中放在一起，</p>\n<p>对于其他代码，应按照如下顺序：</p>\n<ol>\n<li>影响文档流属性（布局属性）——display，position，float，clear等</li>\n<li>自身盒模型属性——width，height，padding，margin，border，overflow等</li>\n<li>文本性属性——font，line-height，text-align，text-indent，vertical-align等</li>\n<li>装饰性属性——color，background-color，opacity等</li>\n<li>其他属性——cursor，content，list-style，quotes等</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 影响文档流属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 盒子模型属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid gray;</span><br><span class=\"line\">  <span class=\"comment\">/* 文本性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 装饰性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"comment\">/* 其他属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"注释规范\"><a href=\"#注释规范\" class=\"headerlink\" title=\"注释规范\"></a>注释规范</h2><p>由于压缩工具会删除所有的注释，因此有时为了保留版权声明等注释信息，需要在注释内容前加一个叹号，如<code>/*! 注释内容 */</code>，这样压缩工具就不会删除这条注释信息。</p>\n<h3 id=\"顶部注释\"><a href=\"#顶部注释\" class=\"headerlink\" title=\"顶部注释\"></a>顶部注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *@description:说明</span></span><br><span class=\"line\"><span class=\"comment\"> *@author:作者</span></span><br><span class=\"line\"><span class=\"comment\"> *@update:更新时间，如2018-09-10 17:42</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模块注释\"><a href=\"#模块注释\" class=\"headerlink\" title=\"模块注释\"></a>模块注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 导航部分，开始 */</span></span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"comment\">/* 导航部分，结束 */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"简单注释\"><a href=\"#简单注释\" class=\"headerlink\" title=\"简单注释\"></a>简单注释</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 单行注释 */</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> *多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> *多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-reset\"><a href=\"#CSS-reset\" class=\"headerlink\" title=\"CSS reset\"></a>CSS reset</h2><p>重置样式，去除元素在浏览器中的默认样式。</p>\n<p>是否使用CSS reset根据实际开发需求而定。</p>\n<h1 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h1><p><img src=\"https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=5ad0ba6a0c7b02080c9c37e752e9deeb/0824ab18972bd407012c41327d899e510eb30911.jpg\" alt=\"标准盒子模型\"></p>\n<p><img src=\"https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=6cdf3ae9fbfaaf5184b689b9bc64b8d6/1b4c510fd9f9d72ac29d82d2d22a2834359bbb00.jpg\" alt=\"IE盒子模型\"></p>\n<h2 id=\"外边距叠加\"><a href=\"#外边距叠加\" class=\"headerlink\" title=\"外边距叠加\"></a>外边距叠加</h2><p>又称为“margin叠加”，指当两个外边距相遇时会“合二为一”。叠加后的外边距为两个外边距的最大值。</p>\n<p><u>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</u></p>\n<p>以下图片均来自<a href=\"http://www.w3school.com.cn/css/css_margin_collapsing.asp\" target=\"_blank\" rel=\"noopener\">w3school</a></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_1.gif\" alt=\"同级元素\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_2.gif\" alt=\"父子元素\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_3.gif\" alt=\"空元素1\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing_example_4.gif\" alt=\"空元素2\"></p>\n<p><img src=\"http://www.w3school.com.cn/i/ct_css_margin_collapsing.gif\" alt=\"外边距合并的意义\"></p>\n<h2 id=\"负margin\"><a href=\"#负margin\" class=\"headerlink\" title=\"负margin\"></a>负margin</h2><ul>\n<li>当margin-top或者margin-left为负数时，<strong>当前元素</strong>会被拉向指定方向。</li>\n<li>当margin-bottom或者margin-right为负数时，<strong>后续元素</strong>会被拉向指定方向。</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/549aaa5fabaa\" target=\"_blank\" rel=\"noopener\">这里有一篇文章</a>讲得不错，可以参考一下。</p>\n<p><a href=\"https://www.cnblogs.com/star91/p/5773436.html\" target=\"_blank\" rel=\"noopener\">圣杯布局、双飞翼布局</a>就是利用这个实现的。</p>\n<h2 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow\"></a>overflow</h2><p>当浮动引起父元素高度塌陷时，可以为父元素加上<code>overflow: hidden</code>来清除浮动。</p>\n<h1 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h1><table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline</td>\n<td>行内元素</td>\n</tr>\n<tr>\n<td>block</td>\n<td>块元素</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>行内块元素</td>\n</tr>\n<tr>\n<td>table</td>\n<td>以表格形式显示，类似于table元素</td>\n</tr>\n<tr>\n<td>table-row</td>\n<td>以表格行形式显示，类似于tr元素</td>\n</tr>\n<tr>\n<td>table-cell</td>\n<td>以表格单元格形式显示，类似于td元素</td>\n</tr>\n<tr>\n<td>none</td>\n<td>隐藏元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"块元素\"><a href=\"#块元素\" class=\"headerlink\" title=\"块元素\"></a>块元素</h2><ul>\n<li>独占一行</li>\n<li>内部可以容纳其他块元素或行元素</li>\n<li>可以定义width和height</li>\n<li>可以定义四个方向的margin</li>\n</ul>\n<h2 id=\"inline元素\"><a href=\"#inline元素\" class=\"headerlink\" title=\"inline元素\"></a>inline元素</h2><ul>\n<li>可以与其他行内元素位于同一行</li>\n<li>可以容纳行内元素，但不能容纳块元素</li>\n<li>无法定义width和height</li>\n<li>可以定义margin-left和margin-right，不能定义margin-top和margin-bottom</li>\n</ul>\n<h2 id=\"inline-block元素\"><a href=\"#inline-block元素\" class=\"headerlink\" title=\"inline-block元素\"></a>inline-block元素</h2><ul>\n<li>可以定义width和height</li>\n<li>可以与其他行内元素位于同一行</li>\n</ul>\n<p>常见的inline-block元素：img元素和input元素</p>\n<h2 id=\"display-table-cell\"><a href=\"#display-table-cell\" class=\"headerlink\" title=\"display: table-cell\"></a>display: table-cell</h2><p>可以用于实现：</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/a7ee7dd60166\" target=\"_blank\" rel=\"noopener\">图片垂直居中</a>于元素</li>\n<li>等高布局</li>\n<li>自动平均划分元素，并在同一行显示</li>\n</ul>\n<h2 id=\"去除inline-block元素间距\"><a href=\"#去除inline-block元素间距\" class=\"headerlink\" title=\"去除inline-block元素间距\"></a>去除inline-block元素间距</h2><p>在父元素中添加<code>font-size: 0</code></p>\n<h1 id=\"文本效果\"><a href=\"#文本效果\" class=\"headerlink\" title=\"文本效果\"></a>文本效果</h1><table>\n<thead>\n<tr>\n<th>文本属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text-decoration</td>\n<td>下划线、删除线、顶划线</td>\n</tr>\n<tr>\n<td>text-transform</td>\n<td>文本大小写</td>\n</tr>\n<tr>\n<td>font-variant</td>\n<td>将英文文本转换为小型大写字母</td>\n</tr>\n<tr>\n<td>text-indent</td>\n<td>段落首行缩进</td>\n</tr>\n<tr>\n<td>text-align</td>\n<td>文本水平对齐</td>\n</tr>\n<tr>\n<td>vertical-align</td>\n<td>文本垂直对齐</td>\n</tr>\n<tr>\n<td>line-height</td>\n<td>行高</td>\n</tr>\n<tr>\n<td>letter-spacing</td>\n<td>字距</td>\n</tr>\n<tr>\n<td>word-spacing</td>\n<td>词距</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"text-indent\"><a href=\"#text-indent\" class=\"headerlink\" title=\"text-indent\"></a>text-indent</h2><p>可以使用    <code>text-indent: -9999px;</code>来隐藏文本。</p>\n<h2 id=\"text-align\"><a href=\"#text-align\" class=\"headerlink\" title=\"text-align\"></a>text-align</h2><p>主要使用的值为left、right、center，对文字、inline元素、inline-block元素都起作用，对块元素不起作用。</p>\n<p>利用<code>margin: 0 auto</code>实现块元素的水平居中。</p>\n<p><code>text-align: center</code>在父元素中定义，<code>margin: 0 auto</code>在当前元素中定义。</p>\n<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><p>关于顶线、中线、基线、底线可以自行查阅。</p>\n<p>行高（line-height）指的是两行基线之间的距离。</p>\n<ul>\n<li>将height和line-height设为相同值可以实现文字垂直居中。</li>\n<li>当取值为%或者em时，是相对与父元素的font-size计算的。</li>\n<li>当取值为无单位数字时，是相对于当前元素的font-size计算的。</li>\n</ul>\n<h2 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h2><p>vertical-align对inline、inline-block、table-cell元素有效，对块元素无效。</p>\n<p>用于定义<u>周围的文字、inline元素、inline-block元素</u>相对于该元素<strong>基线</strong>的垂直对齐方式。</p>\n<p>可以取负长度值和百分比值。</p>\n<h3 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h3><ol>\n<li><p>负值 ： <code>vertical-align: -2px</code>指的是该元素相对于基线向下偏移2px；</p>\n</li>\n<li><p>百分比 ： 相对于当前元素继承的line-height值计算的，也是该元素相对于基线偏移的值；</p>\n</li>\n<li><p><a href=\"http://www.runoob.com/cssref/pr-pos-vertical-align.html\" target=\"_blank\" rel=\"noopener\">关键字</a> （前四个比较常用）：</p>\n<p>| 值           | 描述                                           |<br>| ———— | ———————————————- |<br>| <strong>top</strong>      | 把元素的顶端与行中最高元素的顶端对齐           |<br>| <strong>middle</strong>   | 把此元素放置在父元素的中部。                   |<br>| <strong>baseline</strong> | 默认。元素放置在父元素的基线上。               |<br>| <strong>bottom</strong>   | 把元素的底端与行中最低的元素的顶端对齐。       |<br>| text-top     | 把元素的顶端与父元素字体的顶端对齐             |<br>| text-bottom  | 把元素的底端与父元素字体的底端对齐。           |<br>| sub          | 垂直对齐文本的下标。                           |<br>| super        | 垂直对齐文本的上标                             |<br>| inherit      | 规定应该从父元素继承 vertical-align 属性的值。 |</p>\n</li>\n</ol>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>为img添加<code>vertical-align: middle</code>可以实现图片与周围的文字居中对齐</li>\n<li>要使块元素（如div）也可以使用此属性，可以为其先定义<code>display: table-cell</code></li>\n</ul>\n<h1 id=\"表单效果\"><a href=\"#表单效果\" class=\"headerlink\" title=\"表单效果\"></a>表单效果</h1><h2 id=\"radio与checkbox\"><a href=\"#radio与checkbox\" class=\"headerlink\" title=\"radio与checkbox\"></a>radio与checkbox</h2><p>默认情况下由于是基线对齐因此视觉上会感觉单选框或复选框旁边的文字比它们低，这个时候可以使用vertical-align来让他们垂直居中对齐。</p>\n<p>可以使用关键字，也可以使用数值。</p>\n<h2 id=\"textarea\"><a href=\"#textarea\" class=\"headerlink\" title=\"textarea\"></a>textarea</h2><ul>\n<li>可以使用max-width和max-height来限制拖拽大小</li>\n<li>可以使用<code>resize: none</code>来禁止拖拽</li>\n</ul>\n<p>要使textarea在不同浏览器中具有相同的外观，可以：</p>\n<ul>\n<li>使用CSS的width和height定义大小</li>\n<li>使用<code>overflow: auto</code>来定义textarea滚动条自适应</li>\n</ul>\n<h2 id=\"表单对齐\"><a href=\"#表单对齐\" class=\"headerlink\" title=\"表单对齐\"></a>表单对齐</h2><p>书上给了<strong>注册</strong>的例子：</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536639853274&amp;di=16c88d63b9118620ba546c2f6237b78c&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.orsoon.com%2Fuploads%2Fallimg%2F24631428484696.png\" alt=\"图片来源于网络\"></p>\n<p>实现方法：</p>\n<ol>\n<li>每一行表单分为左栏加若干右栏<ol>\n<li>所有行的左栏长度相等</li>\n<li>所有行的右栏所有盒子长度之和相等</li>\n<li>左栏一般为一个label，右栏为若干文本框</li>\n</ol>\n</li>\n<li>所有左栏和右栏盒子都设为左浮动</li>\n<li>左栏添加属性<code>text-align: right</code>使得文字右对齐</li>\n<li>每一行左栏盒子长度加上所有右栏盒子长度之和等于行宽</li>\n<li>每一行由一个p包裹住，并为p添加<code>overflow: hidden</code>来清除浮动</li>\n</ol>\n<p>然后我又去看了一下各网站的<strong>登录</strong>界面，基本上是一个icon+一个input的模式：</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536641005969&amp;di=02e6a2469281303e926eb8878cf64db9&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fexp%2Fw%3D480%2Fsign%3D00237679845494ee87220e111df7e0e1%2Fa686c9177f3e67093ac0b23933c79f3df9dc5530.jpg\" alt=\"图片来源于网络\"></p>\n<p>实现方法：</p>\n<ul>\n<li>icon使用<code>position: absolute</code>脱离文档流并盖在input上</li>\n<li>input将padding-left调到合适大小使得输入框不被icon盖住</li>\n</ul>\n<p>#　浮动布局</p>\n<h2 id=\"文档流\"><a href=\"#文档流\" class=\"headerlink\" title=\"文档流\"></a>文档流</h2><p>简单来说就是元素在页面中出现的先后顺序。</p>\n<ul>\n<li>正常文档流 ： “normal flow”，指默认情况下页面元素的布局情况。</li>\n<li>脱离文档流：脱离正常文档流。要改变正常文档流，使用浮动和定位方法。</li>\n</ul>\n<h2 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h2><p>可以使元素移到左边或者右边，并且允许后边的文字和元素环绕着它。</p>\n<p>浮动后使用margin来定义和其他元素之间的间距。</p>\n<p>绝对定位的元素忽略float属性。</p>\n<p>float的取值表如下，默认为<strong>none</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>left</td>\n<td>元素向左浮动。</td>\n</tr>\n<tr>\n<td>right</td>\n<td>元素向右浮动。</td>\n</tr>\n<tr>\n<td>none</td>\n<td>默认值。元素不浮动，并会显示在其在文本中出现的位置。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 float 属性的值。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>当一个元素添加float属性为left或者right时，它将变为block类型。</li>\n<li>浮动元素脱离正常文档流，若其height大于父元素的height或者父元素的height未定义，会造成父元素高度塌陷。可以为父元素添加<code>overflow: hidden</code>来解决。</li>\n<li><p>若父元素和子元素都是浮动元素，则父元素会自适应地包含子元素。</p>\n</li>\n<li><p>若兄弟元素不是浮动元素，由于浮动元素脱离文档流，可能会出现覆盖等情况。</p>\n</li>\n</ul>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><ul>\n<li><code>clear: both</code>，用于浮动元素后边的元素，表示两边不允许出现浮动元素。</li>\n<li><code>overflow: hidden</code>，用于浮动元素的父元素，但会隐藏超出父元素的内容部分。</li>\n<li>实际开发中，更经常使用<code>:after</code>伪元素结合<code>clear: both</code>来实现。</li>\n<li>为了兼容ie，为父元素添加<code>zoom: 1</code>来消除浮动。</li>\n</ul>\n<h1 id=\"定位布局\"><a href=\"#定位布局\" class=\"headerlink\" title=\"定位布局\"></a>定位布局</h1><h2 id=\"属性值\"><a href=\"#属性值\" class=\"headerlink\" title=\"属性值\"></a><a href=\"http://www.runoob.com/cssref/pr-class-position.html\" target=\"_blank\" rel=\"noopener\">属性值</a></h2><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-static\" target=\"_blank\" rel=\"noopener\">static</a></td>\n<td><u>默认值</u>。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-absolute\" target=\"_blank\" rel=\"noopener\">absolute</a></td>\n<td>生成绝对定位的元素，相对于 <u>static 定位以外的第一个父元素</u>进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-fixed\" target=\"_blank\" rel=\"noopener\">fixed</a></td>\n<td>生成固定定位的元素，相对于<u>浏览器窗口</u>进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-relative\" target=\"_blank\" rel=\"noopener\">relative</a></td>\n<td>生成相对定位的元素，相对于<u>其正常位置</u>进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/css/css-positioning.html#position-sticky\" target=\"_blank\" rel=\"noopener\">sticky</a></td>\n<td>粘性定位，该定位基于用户滚动的位置。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。<strong>注意:</strong> Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 position 属性的值。</td>\n</tr>\n<tr>\n<td>initial</td>\n<td>设置该属性为默认值，详情查看 <a href=\"http://www.runoob.com/cssref/css-inherit.html\" target=\"_blank\" rel=\"noopener\">CSS initial 关键字</a>。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>absolute会将元素转换为块元素。</li>\n<li>若想要子元素相对于父元素定位，一般给父元素添加<code>position: relative</code>，给子元素定义<code>position: absolute</code>来实现。祖先元素同理。</li>\n</ul>\n<h2 id=\"z-index属性\"><a href=\"#z-index属性\" class=\"headerlink\" title=\"z-index属性\"></a>z-index属性</h2><p>默认情况下设置z-index无效，只有当元素定义position为relative、absolute、fixed时才会激活，z-index值越大，其堆叠顺序越高，越靠上（z方向上的靠上）。</p>\n<h1 id=\"CSS图形\"><a href=\"#CSS图形\" class=\"headerlink\" title=\"CSS图形\"></a>CSS图形</h1><p>由于图片大小比较大，数据传输量大且一张图片会引发一次HTTP请求，因此对徐图形效果，一般更倾向于用CSS实现。</p>\n<p>这里有一篇<a href=\"https://www.w3cplus.com/css/css-simple-shapes-cheat-sheet\" target=\"_blank\" rel=\"noopener\">CSS制作图形速查表</a>总结得比较全面，可以参考。</p>\n<p>另外对于带有边框的图形，一般是用大小不同的两个相同图形实现，小的覆盖在大的上边。</p>\n<h1 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h1><h2 id=\"属性缩写\"><a href=\"#属性缩写\" class=\"headerlink\" title=\"属性缩写\"></a>属性缩写</h2><ul>\n<li><p>border：<code>border: 1px solid red</code></p>\n<ul>\n<li>若不想要底边框，可以加上<code>border-bottom: 0</code></li>\n<li>若只想要底边框，可以<code>border-bottom: 1px solid red</code></li>\n</ul>\n</li>\n<li><p>padding： </p>\n<ul>\n<li><code>padding: 10px</code>指上右下左均为10px</li>\n<li><code>padding: 10px 20px</code>指上下为10px，左右为20px</li>\n<li><code>padding: 10px 20px 30px 40px</code>的顺序为上右下左，从上开始按照顺时针顺序</li>\n</ul>\n</li>\n<li><p>margin： 类似于padding</p>\n</li>\n<li>background： <code>background: url(&#39;xxx.jpg&#39;) no-repeat 80px 40px</code>,最后为background-position</li>\n<li><p>font： <code>font: &quot;微软雅黑&quot; 12px/1.5em bold</code></p>\n<ul>\n<li>顺序为<code>font-family</code>、<code>font-size</code>、<code>line-height</code>、<code>font-weight</code></li>\n<li>简写形式必须指定<code>font-family</code>和<code>font-size</code>的值，其他属性没有指定则为默认值</li>\n<li>简写形式中<code>font-size</code>和<code>line-height</code>之间需要加入一个斜杠<code>/</code></li>\n</ul>\n</li>\n<li><p>color： 十六进制的颜色值若每两位值相同，可以缩写一半，比如<code>color: #112233</code>可以缩写为<code>color: #123</code></p>\n</li>\n</ul>\n<p>##　语法压缩</p>\n<ul>\n<li>当一个CSS规则只有一两个属性的时候，使用横向书写</li>\n<li>可以省略最后一个属性的分号</li>\n<li>background-image、cursor等属性url()中的路径不用加引号</li>\n<li>如果某一个属性值为0，则不需要加单位</li>\n<li>如果某一个属性值是以0为开头的小数，可以吧0省略</li>\n<li>使用群组选择器合并相同样式</li>\n<li>若同一个父元素的多个子元素都定义了相同的可继承属性，把这些属性定义在父元素中来精简代码</li>\n</ul>\n<h2 id=\"CSS压缩\"><a href=\"#CSS压缩\" class=\"headerlink\" title=\"CSS压缩\"></a>CSS压缩</h2><p>书中推荐了两个在线的压缩工具：<a href=\"https://csscompressor.com\" target=\"_blank\" rel=\"noopener\">CSS Compressor</a> 和 <a href=\"http://tool.oschina.net/jscompress\" target=\"_blank\" rel=\"noopener\">YUI Compressor</a></p>\n<p>以YUI Compressor为例，它会对CSS文件执行如下操作：</p>\n<ul>\n<li>删除所有注释</li>\n<li>删除无用空白符</li>\n<li>删除结尾分号</li>\n<li>删除属性值为0的单位</li>\n<li>删除以0开头的小数前的0</li>\n<li>合并相似属性（属性缩写）</li>\n<li>将RGB颜色转换为十六进制颜色</li>\n</ul>\n<h2 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h2><p>书中推荐的图片压缩工具：</p>\n<p>在线的<a href=\"https://www.jpegmini.com\" target=\"_blank\" rel=\"noopener\">JPEGmini</a>和<a href=\"https://tinypng.com\" target=\"_blank\" rel=\"noopener\">TinyPNG</a>以及本地的<a href=\"https://imageoptim.com/versions.html\" target=\"_blank\" rel=\"noopener\">ImageOptim</a></p>\n<h2 id=\"高性能的选择器\"><a href=\"#高性能的选择器\" class=\"headerlink\" title=\"高性能的选择器\"></a>高性能的选择器</h2><p>浏览器对选择器规则是从右到左进行解析的。</p>\n<p>CSS选择的匹配效率：</p>\n<ol>\n<li>id选择器</li>\n<li>class选择器</li>\n<li>元素选择器</li>\n<li>相邻选择器</li>\n<li>子选择器</li>\n<li>后代选择器</li>\n<li>通配符选择器</li>\n<li>属性选择器</li>\n<li>伪类选择器</li>\n</ol>\n<p>因此在使用选择器时应注意：</p>\n<ul>\n<li>尽量不要使用通配符</li>\n<li>不要在id选择器和class选择器前添加元素名</li>\n<li>选择器最好不要超过三层，靠右的选择条件应尽可能精确</li>\n<li>避免使用后代选择器，尽量少使用子选择器</li>\n</ul>\n<h1 id=\"CSS技巧\"><a href=\"#CSS技巧\" class=\"headerlink\" title=\"CSS技巧\"></a>CSS技巧</h1><h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><ul>\n<li>文字、inline元素和inline-*元素： <code>text-align: center</code></li>\n<li>块元素： <code>margin: 0 auto</code></li>\n</ul>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2><ul>\n<li>行内块元素使用<code>vertical-align: middle</code></li>\n<li>块元素将display改为table-cell然后使用vertical-align</li>\n<li>多行文字使用一个标签将文字包起来并设为table-cell，然后再设置vertical-align</li>\n<li>单行文字设置line-height和height属性值相同来实现</li>\n</ul>\n<h2 id=\"CSS-Sprite\"><a href=\"#CSS-Sprite\" class=\"headerlink\" title=\"CSS Sprite\"></a>CSS Sprite</h2><p>又称为CSS精灵或CSS<strong>雪碧图</strong>，它将零散的小背景图合并成一张大背景图，然后再利用background-position属性进行定位从而现实小背景图。</p>\n<p>使用CSS Sprite技术时，需要注意：</p>\n<ul>\n<li>在开发后期而不是开发前期使用此技术</li>\n<li>有条理地组织图片顺序，应将小背景图按照类别、风格、大小等分门别类地放好</li>\n<li>控制雪碧图的大小，当图片大小小于200KB时传输时间是差不多的，因此雪碧图应控制在200KB以内</li>\n</ul>\n<p>书中推荐了两个CSS Sprite工具：<a href=\"http://css.spritegen.com/\" target=\"_blank\" rel=\"noopener\">CSS Sprite Generator</a> 和 <a href=\"http://www.spritecow.com/\" target=\"_blank\" rel=\"noopener\">Sprite Cow</a></p>\n<h2 id=\"Icon-Font图标\"><a href=\"#Icon-Font图标\" class=\"headerlink\" title=\"Icon Font图标\"></a>Icon Font图标</h2><p>使用字体文件实现小图标效果，从而减少图片的使用。</p>\n<p>推荐的Icon Font网站：<a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">http://www.iconfont.cn/</a></p>\n<p>网站上就有<a href=\"http://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d0091c141&amp;helptype=code\" target=\"_blank\" rel=\"noopener\">使用教程</a></p>\n<h1 id=\"重要概念\"><a href=\"#重要概念\" class=\"headerlink\" title=\"重要概念\"></a>重要概念</h1><h2 id=\"包含块\"><a href=\"#包含块\" class=\"headerlink\" title=\"包含块\"></a>包含块</h2><p>containing block，决定一个元素大小和定位的元素。</p>\n<p>时视觉格式化模型中的一个重要概念，与CSS盒子模型类似。其作用主要是为其内部的后代元素提供一个参考。</p>\n<ul>\n<li>根元素（HTML元素）没有父元素，它存在的包含块被称为初始包含块</li>\n<li>定位为fixed的元素的包含块为浏览器窗口</li>\n<li>定位为是static和relative的元素的包含块是它最近的块级（block、inline-block或table-cell）祖先元素创建的</li>\n<li>定位为absolute的元素的包含块是它最近的定位不是static的祖先元素，可以是块元素也可以是行内元素</li>\n</ul>\n<h2 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h2><p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1537245373&amp;di=c7455fbd6881b1a07ae8ac81a79f474e&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fwww.w3cplus.com%2Fsites%2Fdefault%2Ffiles%2Fblogs%2F2018%2F1808%2Fz-index-15.png\" alt=\"层叠级别图\"></p>\n<p>一个元素在z轴上的堆叠顺序：</p>\n<ul>\n<li>层叠级别越大越靠上</li>\n<li>同等层叠级别，后边的堆叠在前边的上边（后来者居上）</li>\n<li>不同的层叠上下文比较的是父级层叠上下文，与自身无关</li>\n</ul>\n<h2 id=\"BFC和IFC\"><a href=\"#BFC和IFC\" class=\"headerlink\" title=\"BFC和IFC\"></a>BFC和IFC</h2><p>BFC： block formatting context， 块级格式上下文</p>\n<p>IFC： inline formatting context， 行级格式上下文</p>\n<p>若一个元素具备以下任何一个条件，则会创造创造一个新的BFC：</p>\n<ul>\n<li>根元素</li>\n<li>float属性不是none</li>\n<li>position属性是absolute或fixed</li>\n<li>overflow属性值不是visible</li>\n<li>display属性为inline-block、table-caption、table-cell</li>\n</ul>\n<p>W3C描述BFC的特点为：</p>\n<ul>\n<li>在一个BFC中，盒子从顶端开始垂直一个接着一个地排列。两个相邻盒子之间的垂直间距有margin决定。<strong>同一个BFC中</strong>，两个相邻块盒子之间<strong>垂直方向上的外边距</strong>会叠加。</li>\n<li>在一个BFC中，每一个盒子的左外边界（margin-left）会紧贴着容器的border-left，右边同理，即使存在浮动元素也是如此。</li>\n</ul>\n<p>可以得到结论：</p>\n<ol>\n<li>在一个BFC内部，盒子会在垂直方向上一个接着一个地排列</li>\n<li>在一个BFC内部，相邻的margin-top、margin-bottom会叠加</li>\n<li>在一个BFC内部，每一个盒子的左外边界（margin-left）会紧贴着容器（包含盒子）的border-left，即使存在浮动元素也是如此</li>\n<li>在一个BFC内部，如果存在内部元素是一个新的BFC，并且存在内部元素是浮动元素，则这个新的BFC的区域不会与浮动元素的区域重叠</li>\n<li>BFC就是页面上一个隔离的盒子，该盒子内部的子元素不会影响到外边的元素</li>\n<li>计算一个BFC的高度时，其内部浮动元素的高度也会计算其中</li>\n</ol>\n<p>BFC的用途：</p>\n<ul>\n<li>创建BFC来避免垂直外边距叠加（例如使用div将一个盒子包起来并给这个div添加overflow属性）</li>\n<li>创建BFC来清除浮动（为父元素添加<code>overflow: hidden</code>，利用结论第六条）</li>\n<li>创建BFC来实现<a href=\"https://blog.csdn.net/michael8512/article/details/76473835\" target=\"_blank\" rel=\"noopener\">自适应布局</a></li>\n</ul>\n<hr>\n<p>好了到这里，这本书就看完了，一些细节的东西了解到了很多，下面开始看html5+css3。</p>\n<p>- 2018 - 09 - 11 -</p>\n"},{"title":"JavaScript学习记录三","toc":true,"date":"2018-09-14T15:51:22.000Z","_content":"\n——《JavaScript高级程序设计（第2版）》学习笔记\n\n要多查阅[MDN Web 文档](https://developer.mozilla.org/zh-CN/docs/Web)\n\n---\n\n# 面向对象的程序设计\n\n## 创建对象\n\n### 工厂模式\n\n工厂模式是软件工程领域广为人知的一种设计模式，这种模式抽象了创建具体对象的过程。\n\n用函数来封装以特定接口创建对象的细节：\n\n```js\nfunction createPerson(name, age, job) {\n  var o = new Object;\n  o.name = name;\n  o.age = age;\n  o.jpb = job;\n  o.sayName = function() {\n    alert(this.name);\n  };\n  return o;\n}\n\nvar person1 = createPerson(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = createPerson(\"Greg\", 27, \"Doctor\");\n\nperson1.sayName(); // \"Nicholas\"\nperson2.sayName(); // \"Greg\"\n```\n\n工厂模式虽然解决了创建多个相似对的问题，却没有解决对象识别的问题。\n\n### 构造函数模式\n\n我们可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.jpb = job;\n  this.sayName = function() {\n    alert(this.name);\n  };\n}\n\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\n\nperson1.sayName(); // \"Nicholas\"\nperson2.sayName(); // \"Greg\"\n```\n\n构造函数模式与工厂模式的区别：\n\n- 没有显示地创建对象(new Object())\n\n- 直接将属性和方法赋给了this对象\n- 没有return语句\n- 函数名首字母大写\n\n要创建Person的新实例，必须使用new操作符。以这种方式调用构造函数实际上会经历4个步骤：\n\n1. 创建一个新对象\n2. 将构造函数的作用域赋给新对象（因此this指向了这个新对象）\n3. 执行构造函数中的代码（为这个新对象添加属性）\n4. 返回新对象\n\n这样通过构造函数模式创建的两个对象都有一个constructor（构造函数）属性，该属性指向Person：\n\n```js\nperson1.constructor == Person; // true\nperson1 instanceof Person; // true\nperson1 instanceof Object; // true， 因为所有对象均继承自Object\n```\n\n创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型，这正是构造函数模式优于工厂模式的地方。\n\n#### 将构造函数当做函数\n\n前边例子中的Person()函数可以通过下边任何一种方式来调用：\n\n```js\n// 当做构造函数使用\nvar person = new Person(\"Nicholas\", 29, \"Software Engineer\");\nperson.sayName();\n\n// 作为普通函数调用\nPerson(\"Greg\", 27, \"Doctor\"); // 添加到window\nwindow.sayName(); // \"Greg\"\n\n//在另一个对象的作用域中调用\nvar o = new Obeject();\nPerson.call(o, \"Kristen\", 25, \"Nurse\");\no.sayName(); // \"Kristen\"\n```\n\n#### 构造函数的问题\n\n使用构造函数的主要问题，是每个方法都要在每个实例上重新创建一遍，这是没有必要的，因此Person()可以像下边这样定义：\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.jpb = job;\n  this.sayName = sayName;\n}\n\nfunction sayName() {\n  alert(this.name);\n}\n```\n\n但是这样的话，在全局作用域中定义的函数(sayName())只能被 某个对象调用，这让全局作用域有点名不副实，而且如果对象需要定义很多方法，那么就要定义很多个全局函数，这样我们自定义的引用类型就毫无封装性可言。\n\n但是这些问题可以通过使用原型模式解决。\n\n### 原型模式\n\n关于prototype可以先看[这一篇](https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/)。\n\n然后看下边这个例子：\n\n```js\nfunction Person() {}\nPerson.prototype.name = \"Nicolas\";\nPerson.prototype.age = 29;\nPerson.prototype.job = \"Software Engineer\";\nPerson.prototype.sayName = function(){\n  alert(this.name);\n};\n\nvar person1 = new Person();\nperson1.sayName(); // \"Nicolas\"\nvar person2 = new Person();\nperson2.sayName(); // \"Nicolas\"\n\nperson1.sayName == person2.sayName; // true\n```\n\n在原型模式下，对象调用这些属性和方法时，实际上是调用prototype的属性和方法。\n\n#### 理解原型\n\n默认情况下，所有prototype属性都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype所在函数的指针。\n\n如果person1的`__proto`指向Person的`prototype`，则\n\n```js\nPerson.prototype.isPrototypeOf(person); // true\n```\n\n当为对象实例添加一个属性时，这个属性就会屏蔽源性对象中保存的同名属性，但不会修改那个属性。\n\n如果将为对象实例添加的这个属性设为null，也只会在实例中设置这个属性，而不会恢复其指向原型的连接。\n\n要想重新访问原型中的属性，可以使用delete操作符完全删除实例属性，\n\n使用hasOwnProperty()可以检测一个属性是否存在于实例中（这个方法是从Object继承来的），如果是原型属性则返回false：\n\n```js\nfunction Person() {}\nPerson.prototype.name = \"Nicolas\";\nPerson.prototype.age = 29;\nPerson.prototype.job = \"Software Engineer\";\nPerson.prototype.sayName = function(){\n  alert(this.name);\n};\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.hasOwnProperty(\"name\"); // false\n\nperson1.name = \"Greg\";\nperson1.name; // \"Greg\"————来自实例\nperson2.name; // \"Nicolas\"————来自原型\nperson1.hasOwnProperty(\"name\"); // true\nperson2.hasOwnProperty(\"name\"); // false\n\n\ndelete person1.name;\nperson1.name; // \"Nicolas\"————来自原型\nperson1.hasOwnProperty(\"name\"); // false\n\n```\n\n#### 原型与in操作符\n\nin操作符会在通过对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。因此对于上面的例子，在person1和person2声明后，无论何时调用`\"name\" in person1`或`\"name\" in person2`都会得到true。\n\n因此，在hasOwnPrototype()返回false而使用in操作符返回true时，就说明这个属性是原型属性。\n\nin操作符还可以通过for-in循环使用，返回的是所有能通过对象访问的、可枚举的（enumerated）属性和方法。\n\n原型中不可枚举的属性和方法（即设置了[[DontEnum]]标记的属性和方法）有hasOwnProperty()、propertyIsEnumerable()、toLocalString()、toString()和valueOf()，有的浏览器也为constructor和prototype打上标记，\n\n但是当我们在实例中添加这些属性和方法从而屏蔽了原型中的这些属性和方法时，那么这些属性和方法就会被认为是可枚举的（IE中除外）：\n\n```js\nvar o = {\n  toString: function() {\n    return \"My Object\";\n  }\n};\n\nfor (var prop in o) {\n  if (prop == \"toString\") {\n    alert(\"Found toString\"); // 在IE中不会显示，其他浏览器显示\n  }\n}\n```\n\n#### 更简单的原型方法\n\n每添加一个属性和方法就要敲一遍Person.prototype是不必要的，同事也为了从视觉上更好地封装原型的功能，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：\n\n```js\nfunction Person() {}\nPerson.prototype = {\n  /* 重写prototype会导致其constructor等于Object，\n   * 若constructor的值很重要，可以给constructor设置回适当的值\n   */\n  constructor: Person,\n  name: \"Nicholas\",\n  age: 29,\n  job: \"Software Engineer\",\n  sayName: function(){\n    alert(this.name);\n  }\n};\nvar person = new Person();\nperson.constructor == Person;\n// 若是添加了上边constructor那一句则为true\n```\n\n#### 原型的动态性\n\n由于在原型中查找值的过程是一次搜索，因此对原型对象的修改都能够立即从实例中反映出来，\n\n但是如果像上边的例子一样重写了原型，在重写原型之前声明的实例的`__proto__`指向的仍是最初的原型：\n\n```js\nfunction Person() {}\n\nvar person = new Person();\n\nPerson.prototype.sayHi = function() {\n  alert(\"hi\");\n};\n\nperson.sayHi(); // \"hi\"，没有问题\n\nPerson.prototype = {\n  constructor: Person,\n  name: \"Nicholas\",\n  age: 29,\n  job: \"Software Engineer\",\n  sayName: function(){\n    alert(this.name);\n  }\n};\n\nperson.sayHi(); // \"hi\"，没有问题\nperson.sayName(); //error\n```\n\n#### 原生对象的原型\n\n所有原生的引用类型，都是采用原型模式创建的。因此我们亦可以对原生引用类型的prototype添加属性或方法。\n\n以String为例：\n\n```js\nString.prototype.startsWith = function(text) {\n  return this.indexOf(text) == 0;\n};\n\nvar msg = \"Hello World!\";\nmsg.startsWith(\"Hello\"); // true\n```\n\n但是不建议在产品化的程序中修改原生对象的原型。\n\n#### 原型对象的问题\n\n如果一个原型的属性包含引用类型值时，实例对该属性进行操作时，实际上修改的就是原型中的属性（引用类型对象名可以看做指针），因此当其他实例访问该属性时，得到的就是这个实例修改后的值：\n\n```js\nfunction Person() {}\n\nPerson.prototype = {\n  constructor: Person,\n  name: \"Nicholas\",\n  age: 29,\n  job: \"Software Engineer\",\n  friends: [\"Shelby\", \"Court\"], // 属性值为引用类型\n  sayName: function(){\n    alert(this.name);\n  }\n};\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.friends.push(\"Van\");\n\nperson1.friends; // [\"Shelby\", \"Court\", \"Van\"]\nperson2.friends; // [\"Shelby\", \"Court\", \"Van\"]\nperson1.friends == person2.friends; // true\n```\n\n### 组合使用构造函数模式和原型模式\n\n使用构造函数模式定义实例属性，原型模式定义方法和共享的属性，\n\n这样每个实例都会有自已的一份实例属性的副本，又共享着对方法的引用，最大限度地节省了内存，还可以向构造函数传递参数：\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.friends = [\"Shelby\", \"Court\"];\n}\n\nPerson.prototype = {\n  constructor: Person,\n  sayName: function(){\n    alert(this.name);\n  }\n};\n\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\n\nperson1.friends.push(\"Van\");\n\nperson1.friends; // [\"Shelby\", \"Court\", \"Van\"]\nperson2.friends; // [\"Shelby\", \"Court\"]\nperson1.friends == person2.friends; // false\nperson1.sayName == person2.sayName; // true\n```\n\n这种混合使用的模式是ECMAScript中使用最广泛、认同度最高的自定义类型的方法。可以说是一种默认模式。\n\n### 动态原型模式\n\n这种模式把所有信息都封装在了构造函数中，并在构造函数中通过检查某个应该存在的方法是否有效，来决定是否需要初始化模型：\n\n```js\nfunction Person(name, age, job) {\n  // 属性\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  \n  // 方法\n  // 只有在sayName()方法不存在时才将其添加到原型中\n  // 即只有在初次调用构造函数时才会执行下面的代码\n  // if语句只需要判断一个方法（例如sayName）是否存在\n  if (typeof this.sayName != \"function\") {\n    Person.prototype = {\n      constructor: Person,\n      sayName: function() {\n      alert(this.name);\n      },\n      sayHi: function() {\n      alert(\"hi\");\n      }\n    };\n  }\n}\n```\n\n### 其他构造函数模式\n\n寄生构造函数模式和[稳妥构造函数模式](https://blog.csdn.net/zqs111/article/details/50650324)，寄生构造模式没有什么意义这里就不再赘述，稳妥构造函数模式相当于为引用类型添加了private属性，有兴趣可以自行搜索。\n\n## 继承\n\n在ECMAScript中无法实现接口继承（与函数无法重载的理由相同，ECMAScript中的函数没有签名），\n\n但是可以利用原型链实现实现继承。\n\n### 原型链\n\n除了[这一篇](https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/)讲到的，还应注意：\n\n- 别忘记默认的原型：Object.prototype\n- 确认原型和实例的关系：利用`instanceof`和`isPrototypeOf()`\n- 谨慎地定义方法\n  - 给原型添加方法的代码一定要放在替换原型的语句之后\n  - 在通过原型链实现继承时，不同通过对象字面量创建原型方法（重写原型会切断原型链）\n- 原型链的问题\n  - 与原型的问题相同，如果原型包含引用类型值，那么所有同一个继承类型的实例都会共享一个引用类型值\n  - 在创建子类型的实例时，不能像超类型的构造函数传递参数\n\n### 借用构造函数\n\n又叫伪造继承或经典继承。\n\n在子类型构造函数得到内部利用调用超类型的构造函数，还可以传递参数。\n\n```js\nfunction SuperType(name) {\n  this.name = name;\n}\nfunction SubType() {\n  // 继承了SuperType，同时还传递了参数\n  SuperType.call(this, \"Nicholas\");\n  // 实例属性\n  this.age = 29;\n}\n\nvar instance = new SubType();\ninstance.name; // \"Nicholas\"\ninstance.age; // 29\n```\n\n但是如果方法都在构造函数中定义，函数复用就无从谈起了。\n\n### 组合继承\n\ncombination inheritance，伪经典继承，组合使用原型链和借用构造函数。\n\n使用原型链实现原型属性和方法的继承，通过借用构造函数实现实例属性的继承，\n\n这样既可以实现函数复用，又能保证每个实例都有它自己的属性。\n\n同时，`instanceof`和`isPrototypeOf`也能识别基于组合继承创建的对象。\n\n```js\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"green\", \"blue\"];\n}\n\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\n\nfunction SubType(name, age) {\n  // 继承属性\n  SuperType.call(this, name);\n  this.age = age;\n}\n\n// 继承方法\nSubType.prototype = new SuperType();\n\nSubType.prototype.sayAge = function(){\n  alert(this.age);\n};\n\nvar instance1 = new SubType(\"Nicholas\", 29);\ninstance1.colors.push(\"black\");\ninstance1.colors; // [\"red\", \"green\", \"blue\", \"black\"]\ninstance1.sayName(); // \"Nicholas\"\ninstance1.sayAge(); // 29\n\nvar instance2 = new SubType(\"Greg\", 27);\ninstance1.colors; // [\"red\", \"green\", \"blue]\ninstance1.sayName(); // \"Greg\"\ninstance1.sayAge(); // 27\n```\n\n组合继承融合了前两者的优点，因此成为JavaScript中最常用的继承模式。\n\n### 原型式继承\n\n主要用于只是想让一个对象与另一个对象保持类似，没有必要兴师动众地创建构造函数。\n\n```js\nfunction object(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}\n```\n\n这样子实际上是object()函数对传入的对象执行了一次浅复制：\n\n```js\nvar person = {\n  name: \"Nicholas\",\n  friends: [\"Shelby\", \"Court\", \"Van\"];\n};\n\nvar anotherPerson = object(person);\nanotherPerson.name = \"Greg\";\nanotherPerson.friends.push(\"Rob\");\n\nperson.friends; // [\"Shelby\", \"Court\", \"Van\", \"Rob\"]\nperson.name; // \"Nicholas\"\nanotherPerson.name; // \"Greg\"\n```\n\n### 寄生式继承\n\n寄生式，parasitic。\n\n思路与寄生构造函数和工厂模式类似，创建一个仅用于封装继承过程的函数，在函数内部以某种方式来增强对象。\n\n但是也会因为做不到函数复用而降低效率。\n\n适用于主要考虑对象而不是自定义类型和构造函数的情况：\n\n```js\nfunction createAnother(original) {\n  // 通过调用函数创建一个新对象，不一定使用object()函数\n  var clone = object(original);\n  // 以某种方式增强这个对象\n  clone.sayHi = function() {\n    alert(\"hi\");\n  };\n  // 返回这个对象\n  return clone;\n}\n\nvar person = {\n  name: \"Nicholas\",\n  friends: [\"Shelby\", \"Court\", \"Van\"];\n};\n\nvar anotherPerson = createAnother(person);\nanotherPerson.sayHi(); // \"hi\"\n```\n\n### 寄生组合式继承\n\n对于为什么要寄生组合式继承，看了[这篇](https://www.cnblogs.com/ghostwu/p/7440691.html)文章还有知乎上的一些回答，主要的优势是组合继承两次调用了构造函数，而寄生只使用了一次。\n\n刚开始不理解的是，为什么在创建超类型原型副本时对超类型原型的实例化就不算调用构造函数呢？\n\n后来仔细想了一下，的确可以不算调用了构造函数——\n\nobject()函数内的临时类型F的构造函数为空（`function F() {}`），因此可以忽略不计。\n\n以下是代码：\n\n```js\nfunction object(o) {\n  // 主要区别就是这里，构造函数的不同\n  function F() {} \n  F.prototype = o;\n  return new F();\n}\n\nfunction inheritPrototype(subType, superType) {\n  var prototype = object(superType.prototype); // 拷贝原型\n  prototype.constructor = subType; // 弥补因重写prototype而失去的默认的constructor属性\n  subType.prototype = prototype; // 替换子类型原型\n}\n\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"green\", \"blue\"];\n}\n\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\n\nfunction SubType(name, age) {\n  // 继承属性\n  SuperType.call(this, name);\n  this.age = age;\n}\n\n// 寄生组合式继承\ninheritPrototype(SubType, SuperType);\n\nSubType.prototype.sayAge = function(){\n  alert(this.age);\n};\n```\n\n# 匿名函数\n\n没有名字的函数，也成为拉姆达(lamda)函数。\n\n像\n\n```js\nvar functionName = function(arg0, arg1, arg2) {\n  // 函数体\n}\n```\n\n这样的函数表达式相当于创建了一个匿名函数，然后将这个匿名函数赋给一个变量。\n\n将函数作为参数传入另一个函数，或者从一个函数中返回另一个函数时，通常都是用匿名函数。\n\n## 递归\n\n（虽然不知道为什么这本书要在这里再讲一遍这个，也许可能意思是callee指向的实际上是匿名函数，不管怎么样复习一下callee吧）\n\n前边在讲到函数内部对象arguments的属性callee(指向拥有这个arguments的函数)时有提到过递归阶乘函数这个例子：\n\n```js\nfunction factorial(num) {\n  if (num <= 1) {\n    return 1;\n  } else {\n    return num * arguments.callee(num-1); // 建议\n    // return num * factorial(num-1);   // 不建议\n  }\n}\n\nvar anotherFactorial = factorial;\nfactorial = null;\nanotherFactorial(4);\n// 使用callee这里结果为24， 函数内使用factorial这里会出错\n```\n\n## 闭包\n\n有些人会分不清**闭包**和**匿名函数**。\n\n**闭包**指的是有权访问另一个函数作用域的函数。\n\n创建闭包的常见方式是在一个函数内部创建另一个函数。\n\n### 作用域链\n\n首先先回顾一下作用域链（scope chain）。\n\n当一个函数第一次被调用时，会创建一个执行环境（execute context）及相应的作用域链，并将作用域链赋值给一个特殊的内部属性[[Scope]]。\n\n然后，使用this、arguments和其他命名参数的值来初始化函数的活动对象（activation object）。\n\n这个活动对象处于作用域链的顶端，外部函数的活动对象处于第二位，外部函数的外部函数的活动对象处于第三位，... ... 直到全局执行环境的变量对象处于作用域链终点。\n\n一般来说，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。\n\n**但是，闭包的情况又有所不同。**\n\n在另一个函数内部定义的函数会将外部函数的活动对象添加到它的作用域链中，当外部函数执行完毕后，如果内部的这个函数还未执行，即其作用域链还在引用外部函数的活动对象时，这个活动对象就不会被销毁。\n\n知道内部的这个函数执行完毕，外部函数的活动对象才会随之一起销毁。\n\n由于闭包会携带包含它的函数的作用域，因此回比其它函数占用更多内存，因此建议只有在必要时再考虑使用闭包。\n\n### 闭包与变量\n\n作用域链的这种配置机制有一个副作用：闭包只能取得包含函数的任何变量的最后一个值。\n\n```js\nfunction createFunctions() {\n  var result = new Array();\n  \n  for (var i = 0; i < 10; i++) {\n    result[i] = function() {\n      return i;\n    };\n  }\n  \n  return result;\n}\n\nvar funcs = createFunctions();\n\n// 每个函数都输出10\nfor (var i = 0; i < funcs.length; i++) {\n  document.write(funcs[i]() + \"<br />\");\n}\n```\n\n因为每个函数的作用域链都保存着createFunctions()的活动对象，因此它们引用的都是同一个变量i，\n\n当createFunctions()函数返回后，变量i的值为10，\n\n所以每个函数内部的i都是10。\n\n可以通过创建另一个匿名函数强制让闭包行为符合预期：\n\n```js\nfor (var i = 0; i < 10; i++) {\n    result[i] = (function(num) {\n      return function(){\n        return num;\n      };\n    })(i);\n  }\n```\n\n在这里，定义了一个立即执行的匿名函数，并将它的结果赋给数组。\n\n在立即执行时，传入了变量i，又因为函数参数是按值传递的，因此就会将i的当前值赋给num。\n\n而这个函数内部，又创建并返回了一个访问num的闭包。\n\n这样，result数组中每个函数都有一个自己的num变量的副本，就可以返回不同的值了。\n\n### 关于this对象\n\n在闭包中使用this对象也可能导致一些问题。\n\nthis对象是在运行时基于函数的运行环境绑定的：\n\n- 在全局函数中，this等于window\n- 当函数被作为某个对象的方法调用时，this等于那个对象\n\n匿名函数的执行环境具有全局性，如果通过call()或者apply()改变环境执行环境，this会指向其他环境，但通常this指向window。\n\narguments也有同样的问题，\n\n因此如果想访问作用域中的this和arguments对象，必须将对它们的引用保存到另一个闭包能够访问的变量中，然后就可以让闭包访问该对象了，以this为例：\n\n```js\nvar name = \"The Window\";\n\nvar object = {\n  name: \"My Object\",\n  \n  getNameFunc1: function() {\n    return function() {\n      return this.name;\n    }\n  },\n  getNameFunc2: function() {\n    var that = this;\n    return function() {\n      return that.name;\n    }\n  }\n};\n\nobject.getNameFunc1(); // \"The Window\"\nobject.getNameFunc2(); // \"My Object\"\n```\n\n### 内存泄露\n\n由于IE对JScript对象和COM（组件对象模型）对象**使用不同的垃圾收集例程**，因此闭包在IE中可能会导致问题。\n\n如果闭包的作用域链中保存着一个HTML元素，那么就意味着该元素无法被销毁：\n\n```js\nfunction assignHansdler() {\n  var element = document.getElementById(\"someElement\");\n  element.onclick = function() {\n    alert(element.id);\n  };\n}\n```\n\n以上代码创建了一个作为element元素事件处理程序的闭包，而这个闭包又创建了一个循环引用。\n\n由于匿名函数保存了一个对assignHandler()的活动对象的引用，因此就会导致无法减少element的引用数。\n\n只要匿名函数存在，element的引用数至少也是1，因此它占用的内存永远都不会被回收。\n\n可以用如下方式解决：\n\n```js\nfunction assignHansdler() {\n  var element = document.getElementById(\"someElement\");\n  var id = element.id;\n  \n  element.onclick = function() {\n    alert(id);\n  };\n  \n  element = null;\n}\n```\n\n这样就消除了循环引用。\n\n需要注意的是，即使闭包不直接引用element，包含函数的活动对象中也仍然会保存一个引用。\n\n因此 ，有必要把element设为null。\n\n## 模仿块级作用域\n\nJavaScript在遇到多次声明一个变量的情况时，会自动忽略后边的声明，但是会执行后边声明中的初始化。\n\nJavaScript没有块级作用域的概念，\n\n因此块语句中定义的变量，实际上是在包含函数中而不是语句中创建的。\n\n可以用匿名函数来模仿块级作用域（私有作用域）来避免这个问题：\n\n```js\n(function() {\n  // 块级作用域\n})();\n```\n\n需要注意的是，JavaScript将function当做一个函数声明的开始，而函数声明后边是不能跟括号的。\n\n因此上边代码中函数外面包括的括号不能省略。这样可以把函数声明转换成函数表达式。\n\n无论在什么地方，只要临时需要一些变量，就可以使用私有作用域。\n\n在匿名函数中的任何变量，都会在执行结束时销毁。\n\n我们应该通过创造私有作用域来尽量少地向全局作用域添加变量和函数，以免导致命名冲突。\n\n## 私有变量\n\n除了前边提到的稳妥构造函数模式，还可以：\n\n在构造函数中定义特权方法：\n\n```js\nfunction MyObject() {\n  // 函数的私有变量\n  var privateVariable = 10;\n  // 函数的私有函数\n  function privateFunction() {\n    return false;\n  }\n  // 特权方法\n  this.publicMethod = function() {\n    privateVariable++;\n    return privateFunction();\n  };\n}\n```\n\n在创建MyObject实例后，除了publicMethod没有任何方法可以直接访问privateVariable和privateFunction()。\n\n或者利用私有和特权成员，隐藏那些不应该被直接修改的数据：\n\n```js\nfunction Person(name) {\n  this.getName = function() {\n    return name;\n  };\n  this.setName = function(value) {\n    name = value;\n  }\n}\n\nvar person = new Person(\"Nicholas\");\nperson.getName(); // \"Nicholas\"\nperson.setName(\"Greg\");\nperson.getName(); // \"Greg\"\n```\n\n私有变量name在每一个实例的作用域中都不相同，因为每次调用构造函数都会重新创建这两个方法。\n\n但是这样使用构造函数会有构造函数模式的缺陷：无法方法复用。每次创建实例都会创建同样一组方法，用静态私有变量来实现特权方法就可以解决这个问题。\n\n### 静态私有变量\n\n```js\n(function() {\n  var name = \"\";\n  // 没有使用var声明，因此为全局变量\n  Person = function(value) {\n    name = value;\n  }\n  Person.prototype.getName = function() {\n    return name;\n  }\n  Person.prototype.setName = function(value) {\n    name = value;\n  }\n})();\n\nvar person1 = new Person(\"Nicholas\");\nperson1.getName(); // \"NIcholas\"\nperson1.setName(\"Greg\");\nperson1.getName(); // \"Greg\"\n\nvar person2 = new Person(\"MIchael\");\nperson1.getName(); // \"MIchael\"\nperson2.getName(); // \"MIchael\"\n```\n\n在这种模式下，name就变成了静态的、由所有实例共享的属性。\n\n因此每次改变name改变的是所有实例的name。\n\n这样创造静态私有变量会因为使用原型而增进代码复用，但每个实例都没有自己的私有变量。\n\n因此使用哪个方法还要视具体情况而定。\n\n> 多查找作用域链的一个层次会一定程度上影响查找速度，这正是闭包和私有变量的一个明显的不足之处。\n\n对于私有变量，我认为可以使用两者组合的模式，不知道对不对，这里贴出想法，欢迎指正（zmj原创，转载需注明出处）：\n\n```js\nfunction Person(name) {\n  this.getName = function() {\n    return name;\n  };\n  this.setName = function(value) {\n    name = value;\n  }\n}\n\n(function() {\n  var teacher = \"Nicholas\"; // 初始化\n  Person.prototype.getTeacher = function() {\n    return teacher;\n  }\n  Person.prototype.setTeacher = function(value) {\n    teacher = value;\n  }\n})();\n```\n\n这样，就既有实例自己的私有变量，也有静态私有变量了。\n\n### 模块模式\n\n模块模式（module pattern）是为单例（singleton）创建私有变量和私有方法。\n\n所谓单例就是只有一个实例的对象，一般以对象字面量的方式来创建：\n\n```js\nvar singleton = {\n  name: value,\n  method: function() {\n    // 这里是方法的代码\n  }\n};\n```\n\n模块模式通过为单例添加私有变量和特权方法来使其增强：\n\n```js\nvar singleton = function() {\n  // 私有变量和私有函数\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  \n  // 特权/公有方法和属性\n  return {\n    publicProperty: true,\n    publicMethod: function() {\n      privateVariable++;\n      return privateFunction();\n    }\n  };\n}();\n```\n\n这种模式在需要对单例进行某些初始化，同时又需要维护其私有变量时是十分有用的：\n\n```js\nfunction BaseComponent() {}\nfunction OtherComponent() {}\n\nvar application = function() {\n  // 私有变量和函数\n  var components = new Array();\n  // 初始化\n  components.push(new BaseComponent());\n  // 公共\n  return {\n    getComponentCount: function() {\n      return components.length;\n    },\n    registerComponent: function(component) {\n      if (typeof component == \"object\") {\n        components.push(component);\n      }\n    }\n  };\n}();\n\napplication.registerComponent(new OtherComponent());\napplication.getComponentCount(); // 2\n```\n\n在Web应用程序中，经常使用一个单例来管理应用程序级的信息。\n\n以这种模式创建的单例都是Object的实例。\n\n### 增强的模块模式\n\n如果单例必须是某种类型的实例，还必须添加某些属性和/或方法加以增强，可以使用增强的模块模式：\n\n```js\nfunction BaseComponent() {}\n\nvar application = function() {\n  // 私有变量和函数\n  var components = new Array();\n  // 初始化\n  components.push(new BaseComponent());\n  // 创造application的一个局部副本\n  var app = new BaseComponent();\n  // 公共接口\n  app.getComponentCount: function() {\n    return components.length;\n  }；\n  app.registerComponent: function(component) {\n    if (typeof component == \"object\") {\n      components.push(component);\n    }\n  }；\n  // 返回这个副本\n  return app;\n}();\n```\n\n","source":"_posts/JavaScript学习记录三.md","raw":"---\ntitle: JavaScript学习记录三\ntoc: true\ndate: 2018-09-14 23:51:22\ncategories:\n- Web\ntags:\n- JavaScript\n---\n\n——《JavaScript高级程序设计（第2版）》学习笔记\n\n要多查阅[MDN Web 文档](https://developer.mozilla.org/zh-CN/docs/Web)\n\n---\n\n# 面向对象的程序设计\n\n## 创建对象\n\n### 工厂模式\n\n工厂模式是软件工程领域广为人知的一种设计模式，这种模式抽象了创建具体对象的过程。\n\n用函数来封装以特定接口创建对象的细节：\n\n```js\nfunction createPerson(name, age, job) {\n  var o = new Object;\n  o.name = name;\n  o.age = age;\n  o.jpb = job;\n  o.sayName = function() {\n    alert(this.name);\n  };\n  return o;\n}\n\nvar person1 = createPerson(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = createPerson(\"Greg\", 27, \"Doctor\");\n\nperson1.sayName(); // \"Nicholas\"\nperson2.sayName(); // \"Greg\"\n```\n\n工厂模式虽然解决了创建多个相似对的问题，却没有解决对象识别的问题。\n\n### 构造函数模式\n\n我们可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.jpb = job;\n  this.sayName = function() {\n    alert(this.name);\n  };\n}\n\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\n\nperson1.sayName(); // \"Nicholas\"\nperson2.sayName(); // \"Greg\"\n```\n\n构造函数模式与工厂模式的区别：\n\n- 没有显示地创建对象(new Object())\n\n- 直接将属性和方法赋给了this对象\n- 没有return语句\n- 函数名首字母大写\n\n要创建Person的新实例，必须使用new操作符。以这种方式调用构造函数实际上会经历4个步骤：\n\n1. 创建一个新对象\n2. 将构造函数的作用域赋给新对象（因此this指向了这个新对象）\n3. 执行构造函数中的代码（为这个新对象添加属性）\n4. 返回新对象\n\n这样通过构造函数模式创建的两个对象都有一个constructor（构造函数）属性，该属性指向Person：\n\n```js\nperson1.constructor == Person; // true\nperson1 instanceof Person; // true\nperson1 instanceof Object; // true， 因为所有对象均继承自Object\n```\n\n创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型，这正是构造函数模式优于工厂模式的地方。\n\n#### 将构造函数当做函数\n\n前边例子中的Person()函数可以通过下边任何一种方式来调用：\n\n```js\n// 当做构造函数使用\nvar person = new Person(\"Nicholas\", 29, \"Software Engineer\");\nperson.sayName();\n\n// 作为普通函数调用\nPerson(\"Greg\", 27, \"Doctor\"); // 添加到window\nwindow.sayName(); // \"Greg\"\n\n//在另一个对象的作用域中调用\nvar o = new Obeject();\nPerson.call(o, \"Kristen\", 25, \"Nurse\");\no.sayName(); // \"Kristen\"\n```\n\n#### 构造函数的问题\n\n使用构造函数的主要问题，是每个方法都要在每个实例上重新创建一遍，这是没有必要的，因此Person()可以像下边这样定义：\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.jpb = job;\n  this.sayName = sayName;\n}\n\nfunction sayName() {\n  alert(this.name);\n}\n```\n\n但是这样的话，在全局作用域中定义的函数(sayName())只能被 某个对象调用，这让全局作用域有点名不副实，而且如果对象需要定义很多方法，那么就要定义很多个全局函数，这样我们自定义的引用类型就毫无封装性可言。\n\n但是这些问题可以通过使用原型模式解决。\n\n### 原型模式\n\n关于prototype可以先看[这一篇](https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/)。\n\n然后看下边这个例子：\n\n```js\nfunction Person() {}\nPerson.prototype.name = \"Nicolas\";\nPerson.prototype.age = 29;\nPerson.prototype.job = \"Software Engineer\";\nPerson.prototype.sayName = function(){\n  alert(this.name);\n};\n\nvar person1 = new Person();\nperson1.sayName(); // \"Nicolas\"\nvar person2 = new Person();\nperson2.sayName(); // \"Nicolas\"\n\nperson1.sayName == person2.sayName; // true\n```\n\n在原型模式下，对象调用这些属性和方法时，实际上是调用prototype的属性和方法。\n\n#### 理解原型\n\n默认情况下，所有prototype属性都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype所在函数的指针。\n\n如果person1的`__proto`指向Person的`prototype`，则\n\n```js\nPerson.prototype.isPrototypeOf(person); // true\n```\n\n当为对象实例添加一个属性时，这个属性就会屏蔽源性对象中保存的同名属性，但不会修改那个属性。\n\n如果将为对象实例添加的这个属性设为null，也只会在实例中设置这个属性，而不会恢复其指向原型的连接。\n\n要想重新访问原型中的属性，可以使用delete操作符完全删除实例属性，\n\n使用hasOwnProperty()可以检测一个属性是否存在于实例中（这个方法是从Object继承来的），如果是原型属性则返回false：\n\n```js\nfunction Person() {}\nPerson.prototype.name = \"Nicolas\";\nPerson.prototype.age = 29;\nPerson.prototype.job = \"Software Engineer\";\nPerson.prototype.sayName = function(){\n  alert(this.name);\n};\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.hasOwnProperty(\"name\"); // false\n\nperson1.name = \"Greg\";\nperson1.name; // \"Greg\"————来自实例\nperson2.name; // \"Nicolas\"————来自原型\nperson1.hasOwnProperty(\"name\"); // true\nperson2.hasOwnProperty(\"name\"); // false\n\n\ndelete person1.name;\nperson1.name; // \"Nicolas\"————来自原型\nperson1.hasOwnProperty(\"name\"); // false\n\n```\n\n#### 原型与in操作符\n\nin操作符会在通过对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。因此对于上面的例子，在person1和person2声明后，无论何时调用`\"name\" in person1`或`\"name\" in person2`都会得到true。\n\n因此，在hasOwnPrototype()返回false而使用in操作符返回true时，就说明这个属性是原型属性。\n\nin操作符还可以通过for-in循环使用，返回的是所有能通过对象访问的、可枚举的（enumerated）属性和方法。\n\n原型中不可枚举的属性和方法（即设置了[[DontEnum]]标记的属性和方法）有hasOwnProperty()、propertyIsEnumerable()、toLocalString()、toString()和valueOf()，有的浏览器也为constructor和prototype打上标记，\n\n但是当我们在实例中添加这些属性和方法从而屏蔽了原型中的这些属性和方法时，那么这些属性和方法就会被认为是可枚举的（IE中除外）：\n\n```js\nvar o = {\n  toString: function() {\n    return \"My Object\";\n  }\n};\n\nfor (var prop in o) {\n  if (prop == \"toString\") {\n    alert(\"Found toString\"); // 在IE中不会显示，其他浏览器显示\n  }\n}\n```\n\n#### 更简单的原型方法\n\n每添加一个属性和方法就要敲一遍Person.prototype是不必要的，同事也为了从视觉上更好地封装原型的功能，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：\n\n```js\nfunction Person() {}\nPerson.prototype = {\n  /* 重写prototype会导致其constructor等于Object，\n   * 若constructor的值很重要，可以给constructor设置回适当的值\n   */\n  constructor: Person,\n  name: \"Nicholas\",\n  age: 29,\n  job: \"Software Engineer\",\n  sayName: function(){\n    alert(this.name);\n  }\n};\nvar person = new Person();\nperson.constructor == Person;\n// 若是添加了上边constructor那一句则为true\n```\n\n#### 原型的动态性\n\n由于在原型中查找值的过程是一次搜索，因此对原型对象的修改都能够立即从实例中反映出来，\n\n但是如果像上边的例子一样重写了原型，在重写原型之前声明的实例的`__proto__`指向的仍是最初的原型：\n\n```js\nfunction Person() {}\n\nvar person = new Person();\n\nPerson.prototype.sayHi = function() {\n  alert(\"hi\");\n};\n\nperson.sayHi(); // \"hi\"，没有问题\n\nPerson.prototype = {\n  constructor: Person,\n  name: \"Nicholas\",\n  age: 29,\n  job: \"Software Engineer\",\n  sayName: function(){\n    alert(this.name);\n  }\n};\n\nperson.sayHi(); // \"hi\"，没有问题\nperson.sayName(); //error\n```\n\n#### 原生对象的原型\n\n所有原生的引用类型，都是采用原型模式创建的。因此我们亦可以对原生引用类型的prototype添加属性或方法。\n\n以String为例：\n\n```js\nString.prototype.startsWith = function(text) {\n  return this.indexOf(text) == 0;\n};\n\nvar msg = \"Hello World!\";\nmsg.startsWith(\"Hello\"); // true\n```\n\n但是不建议在产品化的程序中修改原生对象的原型。\n\n#### 原型对象的问题\n\n如果一个原型的属性包含引用类型值时，实例对该属性进行操作时，实际上修改的就是原型中的属性（引用类型对象名可以看做指针），因此当其他实例访问该属性时，得到的就是这个实例修改后的值：\n\n```js\nfunction Person() {}\n\nPerson.prototype = {\n  constructor: Person,\n  name: \"Nicholas\",\n  age: 29,\n  job: \"Software Engineer\",\n  friends: [\"Shelby\", \"Court\"], // 属性值为引用类型\n  sayName: function(){\n    alert(this.name);\n  }\n};\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.friends.push(\"Van\");\n\nperson1.friends; // [\"Shelby\", \"Court\", \"Van\"]\nperson2.friends; // [\"Shelby\", \"Court\", \"Van\"]\nperson1.friends == person2.friends; // true\n```\n\n### 组合使用构造函数模式和原型模式\n\n使用构造函数模式定义实例属性，原型模式定义方法和共享的属性，\n\n这样每个实例都会有自已的一份实例属性的副本，又共享着对方法的引用，最大限度地节省了内存，还可以向构造函数传递参数：\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.friends = [\"Shelby\", \"Court\"];\n}\n\nPerson.prototype = {\n  constructor: Person,\n  sayName: function(){\n    alert(this.name);\n  }\n};\n\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\n\nperson1.friends.push(\"Van\");\n\nperson1.friends; // [\"Shelby\", \"Court\", \"Van\"]\nperson2.friends; // [\"Shelby\", \"Court\"]\nperson1.friends == person2.friends; // false\nperson1.sayName == person2.sayName; // true\n```\n\n这种混合使用的模式是ECMAScript中使用最广泛、认同度最高的自定义类型的方法。可以说是一种默认模式。\n\n### 动态原型模式\n\n这种模式把所有信息都封装在了构造函数中，并在构造函数中通过检查某个应该存在的方法是否有效，来决定是否需要初始化模型：\n\n```js\nfunction Person(name, age, job) {\n  // 属性\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  \n  // 方法\n  // 只有在sayName()方法不存在时才将其添加到原型中\n  // 即只有在初次调用构造函数时才会执行下面的代码\n  // if语句只需要判断一个方法（例如sayName）是否存在\n  if (typeof this.sayName != \"function\") {\n    Person.prototype = {\n      constructor: Person,\n      sayName: function() {\n      alert(this.name);\n      },\n      sayHi: function() {\n      alert(\"hi\");\n      }\n    };\n  }\n}\n```\n\n### 其他构造函数模式\n\n寄生构造函数模式和[稳妥构造函数模式](https://blog.csdn.net/zqs111/article/details/50650324)，寄生构造模式没有什么意义这里就不再赘述，稳妥构造函数模式相当于为引用类型添加了private属性，有兴趣可以自行搜索。\n\n## 继承\n\n在ECMAScript中无法实现接口继承（与函数无法重载的理由相同，ECMAScript中的函数没有签名），\n\n但是可以利用原型链实现实现继承。\n\n### 原型链\n\n除了[这一篇](https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/)讲到的，还应注意：\n\n- 别忘记默认的原型：Object.prototype\n- 确认原型和实例的关系：利用`instanceof`和`isPrototypeOf()`\n- 谨慎地定义方法\n  - 给原型添加方法的代码一定要放在替换原型的语句之后\n  - 在通过原型链实现继承时，不同通过对象字面量创建原型方法（重写原型会切断原型链）\n- 原型链的问题\n  - 与原型的问题相同，如果原型包含引用类型值，那么所有同一个继承类型的实例都会共享一个引用类型值\n  - 在创建子类型的实例时，不能像超类型的构造函数传递参数\n\n### 借用构造函数\n\n又叫伪造继承或经典继承。\n\n在子类型构造函数得到内部利用调用超类型的构造函数，还可以传递参数。\n\n```js\nfunction SuperType(name) {\n  this.name = name;\n}\nfunction SubType() {\n  // 继承了SuperType，同时还传递了参数\n  SuperType.call(this, \"Nicholas\");\n  // 实例属性\n  this.age = 29;\n}\n\nvar instance = new SubType();\ninstance.name; // \"Nicholas\"\ninstance.age; // 29\n```\n\n但是如果方法都在构造函数中定义，函数复用就无从谈起了。\n\n### 组合继承\n\ncombination inheritance，伪经典继承，组合使用原型链和借用构造函数。\n\n使用原型链实现原型属性和方法的继承，通过借用构造函数实现实例属性的继承，\n\n这样既可以实现函数复用，又能保证每个实例都有它自己的属性。\n\n同时，`instanceof`和`isPrototypeOf`也能识别基于组合继承创建的对象。\n\n```js\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"green\", \"blue\"];\n}\n\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\n\nfunction SubType(name, age) {\n  // 继承属性\n  SuperType.call(this, name);\n  this.age = age;\n}\n\n// 继承方法\nSubType.prototype = new SuperType();\n\nSubType.prototype.sayAge = function(){\n  alert(this.age);\n};\n\nvar instance1 = new SubType(\"Nicholas\", 29);\ninstance1.colors.push(\"black\");\ninstance1.colors; // [\"red\", \"green\", \"blue\", \"black\"]\ninstance1.sayName(); // \"Nicholas\"\ninstance1.sayAge(); // 29\n\nvar instance2 = new SubType(\"Greg\", 27);\ninstance1.colors; // [\"red\", \"green\", \"blue]\ninstance1.sayName(); // \"Greg\"\ninstance1.sayAge(); // 27\n```\n\n组合继承融合了前两者的优点，因此成为JavaScript中最常用的继承模式。\n\n### 原型式继承\n\n主要用于只是想让一个对象与另一个对象保持类似，没有必要兴师动众地创建构造函数。\n\n```js\nfunction object(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}\n```\n\n这样子实际上是object()函数对传入的对象执行了一次浅复制：\n\n```js\nvar person = {\n  name: \"Nicholas\",\n  friends: [\"Shelby\", \"Court\", \"Van\"];\n};\n\nvar anotherPerson = object(person);\nanotherPerson.name = \"Greg\";\nanotherPerson.friends.push(\"Rob\");\n\nperson.friends; // [\"Shelby\", \"Court\", \"Van\", \"Rob\"]\nperson.name; // \"Nicholas\"\nanotherPerson.name; // \"Greg\"\n```\n\n### 寄生式继承\n\n寄生式，parasitic。\n\n思路与寄生构造函数和工厂模式类似，创建一个仅用于封装继承过程的函数，在函数内部以某种方式来增强对象。\n\n但是也会因为做不到函数复用而降低效率。\n\n适用于主要考虑对象而不是自定义类型和构造函数的情况：\n\n```js\nfunction createAnother(original) {\n  // 通过调用函数创建一个新对象，不一定使用object()函数\n  var clone = object(original);\n  // 以某种方式增强这个对象\n  clone.sayHi = function() {\n    alert(\"hi\");\n  };\n  // 返回这个对象\n  return clone;\n}\n\nvar person = {\n  name: \"Nicholas\",\n  friends: [\"Shelby\", \"Court\", \"Van\"];\n};\n\nvar anotherPerson = createAnother(person);\nanotherPerson.sayHi(); // \"hi\"\n```\n\n### 寄生组合式继承\n\n对于为什么要寄生组合式继承，看了[这篇](https://www.cnblogs.com/ghostwu/p/7440691.html)文章还有知乎上的一些回答，主要的优势是组合继承两次调用了构造函数，而寄生只使用了一次。\n\n刚开始不理解的是，为什么在创建超类型原型副本时对超类型原型的实例化就不算调用构造函数呢？\n\n后来仔细想了一下，的确可以不算调用了构造函数——\n\nobject()函数内的临时类型F的构造函数为空（`function F() {}`），因此可以忽略不计。\n\n以下是代码：\n\n```js\nfunction object(o) {\n  // 主要区别就是这里，构造函数的不同\n  function F() {} \n  F.prototype = o;\n  return new F();\n}\n\nfunction inheritPrototype(subType, superType) {\n  var prototype = object(superType.prototype); // 拷贝原型\n  prototype.constructor = subType; // 弥补因重写prototype而失去的默认的constructor属性\n  subType.prototype = prototype; // 替换子类型原型\n}\n\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"green\", \"blue\"];\n}\n\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\n\nfunction SubType(name, age) {\n  // 继承属性\n  SuperType.call(this, name);\n  this.age = age;\n}\n\n// 寄生组合式继承\ninheritPrototype(SubType, SuperType);\n\nSubType.prototype.sayAge = function(){\n  alert(this.age);\n};\n```\n\n# 匿名函数\n\n没有名字的函数，也成为拉姆达(lamda)函数。\n\n像\n\n```js\nvar functionName = function(arg0, arg1, arg2) {\n  // 函数体\n}\n```\n\n这样的函数表达式相当于创建了一个匿名函数，然后将这个匿名函数赋给一个变量。\n\n将函数作为参数传入另一个函数，或者从一个函数中返回另一个函数时，通常都是用匿名函数。\n\n## 递归\n\n（虽然不知道为什么这本书要在这里再讲一遍这个，也许可能意思是callee指向的实际上是匿名函数，不管怎么样复习一下callee吧）\n\n前边在讲到函数内部对象arguments的属性callee(指向拥有这个arguments的函数)时有提到过递归阶乘函数这个例子：\n\n```js\nfunction factorial(num) {\n  if (num <= 1) {\n    return 1;\n  } else {\n    return num * arguments.callee(num-1); // 建议\n    // return num * factorial(num-1);   // 不建议\n  }\n}\n\nvar anotherFactorial = factorial;\nfactorial = null;\nanotherFactorial(4);\n// 使用callee这里结果为24， 函数内使用factorial这里会出错\n```\n\n## 闭包\n\n有些人会分不清**闭包**和**匿名函数**。\n\n**闭包**指的是有权访问另一个函数作用域的函数。\n\n创建闭包的常见方式是在一个函数内部创建另一个函数。\n\n### 作用域链\n\n首先先回顾一下作用域链（scope chain）。\n\n当一个函数第一次被调用时，会创建一个执行环境（execute context）及相应的作用域链，并将作用域链赋值给一个特殊的内部属性[[Scope]]。\n\n然后，使用this、arguments和其他命名参数的值来初始化函数的活动对象（activation object）。\n\n这个活动对象处于作用域链的顶端，外部函数的活动对象处于第二位，外部函数的外部函数的活动对象处于第三位，... ... 直到全局执行环境的变量对象处于作用域链终点。\n\n一般来说，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。\n\n**但是，闭包的情况又有所不同。**\n\n在另一个函数内部定义的函数会将外部函数的活动对象添加到它的作用域链中，当外部函数执行完毕后，如果内部的这个函数还未执行，即其作用域链还在引用外部函数的活动对象时，这个活动对象就不会被销毁。\n\n知道内部的这个函数执行完毕，外部函数的活动对象才会随之一起销毁。\n\n由于闭包会携带包含它的函数的作用域，因此回比其它函数占用更多内存，因此建议只有在必要时再考虑使用闭包。\n\n### 闭包与变量\n\n作用域链的这种配置机制有一个副作用：闭包只能取得包含函数的任何变量的最后一个值。\n\n```js\nfunction createFunctions() {\n  var result = new Array();\n  \n  for (var i = 0; i < 10; i++) {\n    result[i] = function() {\n      return i;\n    };\n  }\n  \n  return result;\n}\n\nvar funcs = createFunctions();\n\n// 每个函数都输出10\nfor (var i = 0; i < funcs.length; i++) {\n  document.write(funcs[i]() + \"<br />\");\n}\n```\n\n因为每个函数的作用域链都保存着createFunctions()的活动对象，因此它们引用的都是同一个变量i，\n\n当createFunctions()函数返回后，变量i的值为10，\n\n所以每个函数内部的i都是10。\n\n可以通过创建另一个匿名函数强制让闭包行为符合预期：\n\n```js\nfor (var i = 0; i < 10; i++) {\n    result[i] = (function(num) {\n      return function(){\n        return num;\n      };\n    })(i);\n  }\n```\n\n在这里，定义了一个立即执行的匿名函数，并将它的结果赋给数组。\n\n在立即执行时，传入了变量i，又因为函数参数是按值传递的，因此就会将i的当前值赋给num。\n\n而这个函数内部，又创建并返回了一个访问num的闭包。\n\n这样，result数组中每个函数都有一个自己的num变量的副本，就可以返回不同的值了。\n\n### 关于this对象\n\n在闭包中使用this对象也可能导致一些问题。\n\nthis对象是在运行时基于函数的运行环境绑定的：\n\n- 在全局函数中，this等于window\n- 当函数被作为某个对象的方法调用时，this等于那个对象\n\n匿名函数的执行环境具有全局性，如果通过call()或者apply()改变环境执行环境，this会指向其他环境，但通常this指向window。\n\narguments也有同样的问题，\n\n因此如果想访问作用域中的this和arguments对象，必须将对它们的引用保存到另一个闭包能够访问的变量中，然后就可以让闭包访问该对象了，以this为例：\n\n```js\nvar name = \"The Window\";\n\nvar object = {\n  name: \"My Object\",\n  \n  getNameFunc1: function() {\n    return function() {\n      return this.name;\n    }\n  },\n  getNameFunc2: function() {\n    var that = this;\n    return function() {\n      return that.name;\n    }\n  }\n};\n\nobject.getNameFunc1(); // \"The Window\"\nobject.getNameFunc2(); // \"My Object\"\n```\n\n### 内存泄露\n\n由于IE对JScript对象和COM（组件对象模型）对象**使用不同的垃圾收集例程**，因此闭包在IE中可能会导致问题。\n\n如果闭包的作用域链中保存着一个HTML元素，那么就意味着该元素无法被销毁：\n\n```js\nfunction assignHansdler() {\n  var element = document.getElementById(\"someElement\");\n  element.onclick = function() {\n    alert(element.id);\n  };\n}\n```\n\n以上代码创建了一个作为element元素事件处理程序的闭包，而这个闭包又创建了一个循环引用。\n\n由于匿名函数保存了一个对assignHandler()的活动对象的引用，因此就会导致无法减少element的引用数。\n\n只要匿名函数存在，element的引用数至少也是1，因此它占用的内存永远都不会被回收。\n\n可以用如下方式解决：\n\n```js\nfunction assignHansdler() {\n  var element = document.getElementById(\"someElement\");\n  var id = element.id;\n  \n  element.onclick = function() {\n    alert(id);\n  };\n  \n  element = null;\n}\n```\n\n这样就消除了循环引用。\n\n需要注意的是，即使闭包不直接引用element，包含函数的活动对象中也仍然会保存一个引用。\n\n因此 ，有必要把element设为null。\n\n## 模仿块级作用域\n\nJavaScript在遇到多次声明一个变量的情况时，会自动忽略后边的声明，但是会执行后边声明中的初始化。\n\nJavaScript没有块级作用域的概念，\n\n因此块语句中定义的变量，实际上是在包含函数中而不是语句中创建的。\n\n可以用匿名函数来模仿块级作用域（私有作用域）来避免这个问题：\n\n```js\n(function() {\n  // 块级作用域\n})();\n```\n\n需要注意的是，JavaScript将function当做一个函数声明的开始，而函数声明后边是不能跟括号的。\n\n因此上边代码中函数外面包括的括号不能省略。这样可以把函数声明转换成函数表达式。\n\n无论在什么地方，只要临时需要一些变量，就可以使用私有作用域。\n\n在匿名函数中的任何变量，都会在执行结束时销毁。\n\n我们应该通过创造私有作用域来尽量少地向全局作用域添加变量和函数，以免导致命名冲突。\n\n## 私有变量\n\n除了前边提到的稳妥构造函数模式，还可以：\n\n在构造函数中定义特权方法：\n\n```js\nfunction MyObject() {\n  // 函数的私有变量\n  var privateVariable = 10;\n  // 函数的私有函数\n  function privateFunction() {\n    return false;\n  }\n  // 特权方法\n  this.publicMethod = function() {\n    privateVariable++;\n    return privateFunction();\n  };\n}\n```\n\n在创建MyObject实例后，除了publicMethod没有任何方法可以直接访问privateVariable和privateFunction()。\n\n或者利用私有和特权成员，隐藏那些不应该被直接修改的数据：\n\n```js\nfunction Person(name) {\n  this.getName = function() {\n    return name;\n  };\n  this.setName = function(value) {\n    name = value;\n  }\n}\n\nvar person = new Person(\"Nicholas\");\nperson.getName(); // \"Nicholas\"\nperson.setName(\"Greg\");\nperson.getName(); // \"Greg\"\n```\n\n私有变量name在每一个实例的作用域中都不相同，因为每次调用构造函数都会重新创建这两个方法。\n\n但是这样使用构造函数会有构造函数模式的缺陷：无法方法复用。每次创建实例都会创建同样一组方法，用静态私有变量来实现特权方法就可以解决这个问题。\n\n### 静态私有变量\n\n```js\n(function() {\n  var name = \"\";\n  // 没有使用var声明，因此为全局变量\n  Person = function(value) {\n    name = value;\n  }\n  Person.prototype.getName = function() {\n    return name;\n  }\n  Person.prototype.setName = function(value) {\n    name = value;\n  }\n})();\n\nvar person1 = new Person(\"Nicholas\");\nperson1.getName(); // \"NIcholas\"\nperson1.setName(\"Greg\");\nperson1.getName(); // \"Greg\"\n\nvar person2 = new Person(\"MIchael\");\nperson1.getName(); // \"MIchael\"\nperson2.getName(); // \"MIchael\"\n```\n\n在这种模式下，name就变成了静态的、由所有实例共享的属性。\n\n因此每次改变name改变的是所有实例的name。\n\n这样创造静态私有变量会因为使用原型而增进代码复用，但每个实例都没有自己的私有变量。\n\n因此使用哪个方法还要视具体情况而定。\n\n> 多查找作用域链的一个层次会一定程度上影响查找速度，这正是闭包和私有变量的一个明显的不足之处。\n\n对于私有变量，我认为可以使用两者组合的模式，不知道对不对，这里贴出想法，欢迎指正（zmj原创，转载需注明出处）：\n\n```js\nfunction Person(name) {\n  this.getName = function() {\n    return name;\n  };\n  this.setName = function(value) {\n    name = value;\n  }\n}\n\n(function() {\n  var teacher = \"Nicholas\"; // 初始化\n  Person.prototype.getTeacher = function() {\n    return teacher;\n  }\n  Person.prototype.setTeacher = function(value) {\n    teacher = value;\n  }\n})();\n```\n\n这样，就既有实例自己的私有变量，也有静态私有变量了。\n\n### 模块模式\n\n模块模式（module pattern）是为单例（singleton）创建私有变量和私有方法。\n\n所谓单例就是只有一个实例的对象，一般以对象字面量的方式来创建：\n\n```js\nvar singleton = {\n  name: value,\n  method: function() {\n    // 这里是方法的代码\n  }\n};\n```\n\n模块模式通过为单例添加私有变量和特权方法来使其增强：\n\n```js\nvar singleton = function() {\n  // 私有变量和私有函数\n  var privateVariable = 10;\n  function privateFunction() {\n    return false;\n  }\n  \n  // 特权/公有方法和属性\n  return {\n    publicProperty: true,\n    publicMethod: function() {\n      privateVariable++;\n      return privateFunction();\n    }\n  };\n}();\n```\n\n这种模式在需要对单例进行某些初始化，同时又需要维护其私有变量时是十分有用的：\n\n```js\nfunction BaseComponent() {}\nfunction OtherComponent() {}\n\nvar application = function() {\n  // 私有变量和函数\n  var components = new Array();\n  // 初始化\n  components.push(new BaseComponent());\n  // 公共\n  return {\n    getComponentCount: function() {\n      return components.length;\n    },\n    registerComponent: function(component) {\n      if (typeof component == \"object\") {\n        components.push(component);\n      }\n    }\n  };\n}();\n\napplication.registerComponent(new OtherComponent());\napplication.getComponentCount(); // 2\n```\n\n在Web应用程序中，经常使用一个单例来管理应用程序级的信息。\n\n以这种模式创建的单例都是Object的实例。\n\n### 增强的模块模式\n\n如果单例必须是某种类型的实例，还必须添加某些属性和/或方法加以增强，可以使用增强的模块模式：\n\n```js\nfunction BaseComponent() {}\n\nvar application = function() {\n  // 私有变量和函数\n  var components = new Array();\n  // 初始化\n  components.push(new BaseComponent());\n  // 创造application的一个局部副本\n  var app = new BaseComponent();\n  // 公共接口\n  app.getComponentCount: function() {\n    return components.length;\n  }；\n  app.registerComponent: function(component) {\n    if (typeof component == \"object\") {\n      components.push(component);\n    }\n  }；\n  // 返回这个副本\n  return app;\n}();\n```\n\n","slug":"JavaScript学习记录三","published":1,"updated":"2018-09-16T12:29:35.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b02000hcragw6ho28kh","content":"<p>——《JavaScript高级程序设计（第2版）》学习笔记</p>\n<p>要多查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web\" target=\"_blank\" rel=\"noopener\">MDN Web 文档</a></p>\n<hr>\n<h1 id=\"面向对象的程序设计\"><a href=\"#面向对象的程序设计\" class=\"headerlink\" title=\"面向对象的程序设计\"></a>面向对象的程序设计</h1><h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式是软件工程领域广为人知的一种设计模式，这种模式抽象了创建具体对象的过程。</p>\n<p>用函数来封装以特定接口创建对象的细节：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>;</span><br><span class=\"line\">  o.name = name;</span><br><span class=\"line\">  o.age = age;</span><br><span class=\"line\">  o.jpb = job;</span><br><span class=\"line\">  o.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = createPerson(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.sayName(); <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">person2.sayName(); <span class=\"comment\">// \"Greg\"</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式虽然解决了创建多个相似对的问题，却没有解决对象识别的问题。</p>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>我们可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.jpb = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.sayName(); <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">person2.sayName(); <span class=\"comment\">// \"Greg\"</span></span><br></pre></td></tr></table></figure>\n<p>构造函数模式与工厂模式的区别：</p>\n<ul>\n<li><p>没有显示地创建对象(new Object())</p>\n</li>\n<li><p>直接将属性和方法赋给了this对象</p>\n</li>\n<li>没有return语句</li>\n<li>函数名首字母大写</li>\n</ul>\n<p>要创建Person的新实例，必须使用new操作符。以这种方式调用构造函数实际上会经历4个步骤：</p>\n<ol>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（因此this指向了这个新对象）</li>\n<li>执行构造函数中的代码（为这个新对象添加属性）</li>\n<li>返回新对象</li>\n</ol>\n<p>这样通过构造函数模式创建的两个对象都有一个constructor（构造函数）属性，该属性指向Person：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person1.constructor == Person; <span class=\"comment\">// true</span></span><br><span class=\"line\">person1 <span class=\"keyword\">instanceof</span> Person; <span class=\"comment\">// true</span></span><br><span class=\"line\">person1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// true， 因为所有对象均继承自Object</span></span><br></pre></td></tr></table></figure>\n<p>创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型，这正是构造函数模式优于工厂模式的地方。</p>\n<h4 id=\"将构造函数当做函数\"><a href=\"#将构造函数当做函数\" class=\"headerlink\" title=\"将构造函数当做函数\"></a>将构造函数当做函数</h4><p>前边例子中的Person()函数可以通过下边任何一种方式来调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当做构造函数使用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\">person.sayName();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作为普通函数调用</span></span><br><span class=\"line\">Person(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>); <span class=\"comment\">// 添加到window</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.sayName(); <span class=\"comment\">// \"Greg\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在另一个对象的作用域中调用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> Obeject();</span><br><span class=\"line\">Person.call(o, <span class=\"string\">\"Kristen\"</span>, <span class=\"number\">25</span>, <span class=\"string\">\"Nurse\"</span>);</span><br><span class=\"line\">o.sayName(); <span class=\"comment\">// \"Kristen\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构造函数的问题\"><a href=\"#构造函数的问题\" class=\"headerlink\" title=\"构造函数的问题\"></a>构造函数的问题</h4><p>使用构造函数的主要问题，是每个方法都要在每个实例上重新创建一遍，这是没有必要的，因此Person()可以像下边这样定义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.jpb = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = sayName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这样的话，在全局作用域中定义的函数(sayName())只能被 某个对象调用，这让全局作用域有点名不副实，而且如果对象需要定义很多方法，那么就要定义很多个全局函数，这样我们自定义的引用类型就毫无封装性可言。</p>\n<p>但是这些问题可以通过使用原型模式解决。</p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>关于prototype可以先看<a href=\"https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/\" target=\"_blank\" rel=\"noopener\">这一篇</a>。</p>\n<p>然后看下边这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">\"Nicolas\"</span>;</span><br><span class=\"line\">Person.prototype.age = <span class=\"number\">29</span>;</span><br><span class=\"line\">Person.prototype.job = <span class=\"string\">\"Software Engineer\"</span>;</span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person1.sayName(); <span class=\"comment\">// \"Nicolas\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person2.sayName(); <span class=\"comment\">// \"Nicolas\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.sayName == person2.sayName; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在原型模式下，对象调用这些属性和方法时，实际上是调用prototype的属性和方法。</p>\n<h4 id=\"理解原型\"><a href=\"#理解原型\" class=\"headerlink\" title=\"理解原型\"></a>理解原型</h4><p>默认情况下，所有prototype属性都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype所在函数的指针。</p>\n<p>如果person1的<code>__proto</code>指向Person的<code>prototype</code>，则</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.isPrototypeOf(person); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>当为对象实例添加一个属性时，这个属性就会屏蔽源性对象中保存的同名属性，但不会修改那个属性。</p>\n<p>如果将为对象实例添加的这个属性设为null，也只会在实例中设置这个属性，而不会恢复其指向原型的连接。</p>\n<p>要想重新访问原型中的属性，可以使用delete操作符完全删除实例属性，</p>\n<p>使用hasOwnProperty()可以检测一个属性是否存在于实例中（这个方法是从Object继承来的），如果是原型属性则返回false：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">\"Nicolas\"</span>;</span><br><span class=\"line\">Person.prototype.age = <span class=\"number\">29</span>;</span><br><span class=\"line\">Person.prototype.job = <span class=\"string\">\"Software Engineer\"</span>;</span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">person1.hasOwnProperty(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.name = <span class=\"string\">\"Greg\"</span>;</span><br><span class=\"line\">person1.name; <span class=\"comment\">// \"Greg\"————来自实例</span></span><br><span class=\"line\">person2.name; <span class=\"comment\">// \"Nicolas\"————来自原型</span></span><br><span class=\"line\">person1.hasOwnProperty(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">person2.hasOwnProperty(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> person1.name;</span><br><span class=\"line\">person1.name; <span class=\"comment\">// \"Nicolas\"————来自原型</span></span><br><span class=\"line\">person1.hasOwnProperty(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h4><p>in操作符会在通过对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。因此对于上面的例子，在person1和person2声明后，无论何时调用<code>&quot;name&quot; in person1</code>或<code>&quot;name&quot; in person2</code>都会得到true。</p>\n<p>因此，在hasOwnPrototype()返回false而使用in操作符返回true时，就说明这个属性是原型属性。</p>\n<p>in操作符还可以通过for-in循环使用，返回的是所有能通过对象访问的、可枚举的（enumerated）属性和方法。</p>\n<p>原型中不可枚举的属性和方法（即设置了[[DontEnum]]标记的属性和方法）有hasOwnProperty()、propertyIsEnumerable()、toLocalString()、toString()和valueOf()，有的浏览器也为constructor和prototype打上标记，</p>\n<p>但是当我们在实例中添加这些属性和方法从而屏蔽了原型中的这些属性和方法时，那么这些属性和方法就会被认为是可枚举的（IE中除外）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"My Object\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (prop == <span class=\"string\">\"toString\"</span>) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Found toString\"</span>); <span class=\"comment\">// 在IE中不会显示，其他浏览器显示</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"更简单的原型方法\"><a href=\"#更简单的原型方法\" class=\"headerlink\" title=\"更简单的原型方法\"></a>更简单的原型方法</h4><p>每添加一个属性和方法就要敲一遍Person.prototype是不必要的，同事也为了从视觉上更好地封装原型的功能，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 重写prototype会导致其constructor等于Object，</span></span><br><span class=\"line\"><span class=\"comment\">   * 若constructor的值很重要，可以给constructor设置回适当的值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">  name: \"Nicholas\",</span><br><span class=\"line\">  age: 29,</span><br><span class=\"line\">  job: \"Software Engineer\",</span><br><span class=\"line\">  sayName: function()&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person.constructor == Person;</span><br><span class=\"line\"><span class=\"comment\">// 若是添加了上边constructor那一句则为true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"原型的动态性\"><a href=\"#原型的动态性\" class=\"headerlink\" title=\"原型的动态性\"></a>原型的动态性</h4><p>由于在原型中查找值的过程是一次搜索，因此对原型对象的修改都能够立即从实例中反映出来，</p>\n<p>但是如果像上边的例子一样重写了原型，在重写原型之前声明的实例的<code>__proto__</code>指向的仍是最初的原型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">person.sayHi(); <span class=\"comment\">// \"hi\"，没有问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">  name: \"Nicholas\",</span><br><span class=\"line\">  age: 29,</span><br><span class=\"line\">  job: \"Software Engineer\",</span><br><span class=\"line\">  sayName: function()&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">person.sayHi(); <span class=\"comment\">// \"hi\"，没有问题</span></span><br><span class=\"line\">person.sayName(); <span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"原生对象的原型\"><a href=\"#原生对象的原型\" class=\"headerlink\" title=\"原生对象的原型\"></a>原生对象的原型</h4><p>所有原生的引用类型，都是采用原型模式创建的。因此我们亦可以对原生引用类型的prototype添加属性或方法。</p>\n<p>以String为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.startsWith = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.indexOf(text) == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> msg = <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\">msg.startsWith(<span class=\"string\">\"Hello\"</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>但是不建议在产品化的程序中修改原生对象的原型。</p>\n<h4 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h4><p>如果一个原型的属性包含引用类型值时，实例对该属性进行操作时，实际上修改的就是原型中的属性（引用类型对象名可以看做指针），因此当其他实例访问该属性时，得到的就是这个实例修改后的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">  name: \"Nicholas\",</span><br><span class=\"line\">  age: 29,</span><br><span class=\"line\">  job: \"Software Engineer\",</span><br><span class=\"line\">  friends: [\"Shelby\", \"Court\"], // 属性值为引用类型</span><br><span class=\"line\">  sayName: function()&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">person1.friends.push(<span class=\"string\">\"Van\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.friends; <span class=\"comment\">// [\"Shelby\", \"Court\", \"Van\"]</span></span><br><span class=\"line\">person2.friends; <span class=\"comment\">// [\"Shelby\", \"Court\", \"Van\"]</span></span><br><span class=\"line\">person1.friends == person2.friends; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组合使用构造函数模式和原型模式\"><a href=\"#组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"组合使用构造函数模式和原型模式\"></a>组合使用构造函数模式和原型模式</h3><p>使用构造函数模式定义实例属性，原型模式定义方法和共享的属性，</p>\n<p>这样每个实例都会有自已的一份实例属性的副本，又共享着对方法的引用，最大限度地节省了内存，还可以向构造函数传递参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.friends = [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">  sayName: function()&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.friends.push(<span class=\"string\">\"Van\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.friends; <span class=\"comment\">// [\"Shelby\", \"Court\", \"Van\"]</span></span><br><span class=\"line\">person2.friends; <span class=\"comment\">// [\"Shelby\", \"Court\"]</span></span><br><span class=\"line\">person1.friends == person2.friends; <span class=\"comment\">// false</span></span><br><span class=\"line\">person1.sayName == person2.sayName; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>这种混合使用的模式是ECMAScript中使用最广泛、认同度最高的自定义类型的方法。可以说是一种默认模式。</p>\n<h3 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h3><p>这种模式把所有信息都封装在了构造函数中，并在构造函数中通过检查某个应该存在的方法是否有效，来决定是否需要初始化模型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 属性</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 只有在sayName()方法不存在时才将其添加到原型中</span></span><br><span class=\"line\">  <span class=\"comment\">// 即只有在初次调用构造函数时才会执行下面的代码</span></span><br><span class=\"line\">  <span class=\"comment\">// if语句只需要判断一个方法（例如sayName）是否存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.sayName != <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">    Person.prototype = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">      sayName: function() &#123;</span><br><span class=\"line\">      alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      sayHi: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他构造函数模式\"><a href=\"#其他构造函数模式\" class=\"headerlink\" title=\"其他构造函数模式\"></a>其他构造函数模式</h3><p>寄生构造函数模式和<a href=\"https://blog.csdn.net/zqs111/article/details/50650324\" target=\"_blank\" rel=\"noopener\">稳妥构造函数模式</a>，寄生构造模式没有什么意义这里就不再赘述，稳妥构造函数模式相当于为引用类型添加了private属性，有兴趣可以自行搜索。</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>在ECMAScript中无法实现接口继承（与函数无法重载的理由相同，ECMAScript中的函数没有签名），</p>\n<p>但是可以利用原型链实现实现继承。</p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>除了<a href=\"https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/\" target=\"_blank\" rel=\"noopener\">这一篇</a>讲到的，还应注意：</p>\n<ul>\n<li>别忘记默认的原型：Object.prototype</li>\n<li>确认原型和实例的关系：利用<code>instanceof</code>和<code>isPrototypeOf()</code></li>\n<li>谨慎地定义方法<ul>\n<li>给原型添加方法的代码一定要放在替换原型的语句之后</li>\n<li>在通过原型链实现继承时，不同通过对象字面量创建原型方法（重写原型会切断原型链）</li>\n</ul>\n</li>\n<li>原型链的问题<ul>\n<li>与原型的问题相同，如果原型包含引用类型值，那么所有同一个继承类型的实例都会共享一个引用类型值</li>\n<li>在创建子类型的实例时，不能像超类型的构造函数传递参数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h3><p>又叫伪造继承或经典继承。</p>\n<p>在子类型构造函数得到内部利用调用超类型的构造函数，还可以传递参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 继承了SuperType，同时还传递了参数</span></span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, <span class=\"string\">\"Nicholas\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 实例属性</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">29</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> SubType();</span><br><span class=\"line\">instance.name; <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">instance.age; <span class=\"comment\">// 29</span></span><br></pre></td></tr></table></figure>\n<p>但是如果方法都在构造函数中定义，函数复用就无从谈起了。</p>\n<h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><p>combination inheritance，伪经典继承，组合使用原型链和借用构造函数。</p>\n<p>使用原型链实现原型属性和方法的继承，通过借用构造函数实现实例属性的继承，</p>\n<p>这样既可以实现函数复用，又能保证每个实例都有它自己的属性。</p>\n<p>同时，<code>instanceof</code>和<code>isPrototypeOf</code>也能识别基于组合继承创建的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"green\"</span>, <span class=\"string\">\"blue\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 继承属性</span></span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承方法</span></span><br><span class=\"line\">SubType.prototype = <span class=\"keyword\">new</span> SuperType();</span><br><span class=\"line\"></span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance1 = <span class=\"keyword\">new</span> SubType(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">instance1.colors.push(<span class=\"string\">\"black\"</span>);</span><br><span class=\"line\">instance1.colors; <span class=\"comment\">// [\"red\", \"green\", \"blue\", \"black\"]</span></span><br><span class=\"line\">instance1.sayName(); <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">instance1.sayAge(); <span class=\"comment\">// 29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance2 = <span class=\"keyword\">new</span> SubType(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>);</span><br><span class=\"line\">instance1.colors; <span class=\"comment\">// [\"red\", \"green\", \"blue]</span></span><br><span class=\"line\">instance1.sayName(); <span class=\"comment\">// \"Greg\"</span></span><br><span class=\"line\">instance1.sayAge(); <span class=\"comment\">// 27</span></span><br></pre></td></tr></table></figure>\n<p>组合继承融合了前两者的优点，因此成为JavaScript中最常用的继承模式。</p>\n<h3 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h3><p>主要用于只是想让一个对象与另一个对象保持类似，没有必要兴师动众地创建构造函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样子实际上是object()函数对传入的对象执行了一次浅复制：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"Nicholas\"</span>,</span><br><span class=\"line\">  friends: [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>, <span class=\"string\">\"Van\"</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherPerson = object(person);</span><br><span class=\"line\">anotherPerson.name = <span class=\"string\">\"Greg\"</span>;</span><br><span class=\"line\">anotherPerson.friends.push(<span class=\"string\">\"Rob\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person.friends; <span class=\"comment\">// [\"Shelby\", \"Court\", \"Van\", \"Rob\"]</span></span><br><span class=\"line\">person.name; <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">anotherPerson.name; <span class=\"comment\">// \"Greg\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h3><p>寄生式，parasitic。</p>\n<p>思路与寄生构造函数和工厂模式类似，创建一个仅用于封装继承过程的函数，在函数内部以某种方式来增强对象。</p>\n<p>但是也会因为做不到函数复用而降低效率。</p>\n<p>适用于主要考虑对象而不是自定义类型和构造函数的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createAnother</span>(<span class=\"params\">original</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过调用函数创建一个新对象，不一定使用object()函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> clone = object(original);</span><br><span class=\"line\">  <span class=\"comment\">// 以某种方式增强这个对象</span></span><br><span class=\"line\">  clone.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 返回这个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> clone;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"Nicholas\"</span>,</span><br><span class=\"line\">  friends: [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>, <span class=\"string\">\"Van\"</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherPerson = createAnother(person);</span><br><span class=\"line\">anotherPerson.sayHi(); <span class=\"comment\">// \"hi\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><p>对于为什么要寄生组合式继承，看了<a href=\"https://www.cnblogs.com/ghostwu/p/7440691.html\" target=\"_blank\" rel=\"noopener\">这篇</a>文章还有知乎上的一些回答，主要的优势是组合继承两次调用了构造函数，而寄生只使用了一次。</p>\n<p>刚开始不理解的是，为什么在创建超类型原型副本时对超类型原型的实例化就不算调用构造函数呢？</p>\n<p>后来仔细想了一下，的确可以不算调用了构造函数——</p>\n<p>object()函数内的临时类型F的构造函数为空（<code>function F() {}</code>），因此可以忽略不计。</p>\n<p>以下是代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 主要区别就是这里，构造函数的不同</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125; </span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prototype = object(superType.prototype); <span class=\"comment\">// 拷贝原型</span></span><br><span class=\"line\">  prototype.constructor = subType; <span class=\"comment\">// 弥补因重写prototype而失去的默认的constructor属性</span></span><br><span class=\"line\">  subType.prototype = prototype; <span class=\"comment\">// 替换子类型原型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"green\"</span>, <span class=\"string\">\"blue\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 继承属性</span></span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 寄生组合式继承</span></span><br><span class=\"line\">inheritPrototype(SubType, SuperType);</span><br><span class=\"line\"></span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h1><p>没有名字的函数，也成为拉姆达(lamda)函数。</p>\n<p>像</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> functionName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg0, arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的函数表达式相当于创建了一个匿名函数，然后将这个匿名函数赋给一个变量。</p>\n<p>将函数作为参数传入另一个函数，或者从一个函数中返回另一个函数时，通常都是用匿名函数。</p>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>（虽然不知道为什么这本书要在这里再讲一遍这个，也许可能意思是callee指向的实际上是匿名函数，不管怎么样复习一下callee吧）</p>\n<p>前边在讲到函数内部对象arguments的属性callee(指向拥有这个arguments的函数)时有提到过递归阶乘函数这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num<span class=\"number\">-1</span>); <span class=\"comment\">// 建议</span></span><br><span class=\"line\">    <span class=\"comment\">// return num * factorial(num-1);   // 不建议</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherFactorial = factorial;</span><br><span class=\"line\">factorial = <span class=\"literal\">null</span>;</span><br><span class=\"line\">anotherFactorial(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// 使用callee这里结果为24， 函数内使用factorial这里会出错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>有些人会分不清<strong>闭包</strong>和<strong>匿名函数</strong>。</p>\n<p><strong>闭包</strong>指的是有权访问另一个函数作用域的函数。</p>\n<p>创建闭包的常见方式是在一个函数内部创建另一个函数。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>首先先回顾一下作用域链（scope chain）。</p>\n<p>当一个函数第一次被调用时，会创建一个执行环境（execute context）及相应的作用域链，并将作用域链赋值给一个特殊的内部属性[[Scope]]。</p>\n<p>然后，使用this、arguments和其他命名参数的值来初始化函数的活动对象（activation object）。</p>\n<p>这个活动对象处于作用域链的顶端，外部函数的活动对象处于第二位，外部函数的外部函数的活动对象处于第三位，… … 直到全局执行环境的变量对象处于作用域链终点。</p>\n<p>一般来说，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。</p>\n<p><strong>但是，闭包的情况又有所不同。</strong></p>\n<p>在另一个函数内部定义的函数会将外部函数的活动对象添加到它的作用域链中，当外部函数执行完毕后，如果内部的这个函数还未执行，即其作用域链还在引用外部函数的活动对象时，这个活动对象就不会被销毁。</p>\n<p>知道内部的这个函数执行完毕，外部函数的活动对象才会随之一起销毁。</p>\n<p>由于闭包会携带包含它的函数的作用域，因此回比其它函数占用更多内存，因此建议只有在必要时再考虑使用闭包。</p>\n<h3 id=\"闭包与变量\"><a href=\"#闭包与变量\" class=\"headerlink\" title=\"闭包与变量\"></a>闭包与变量</h3><p>作用域链的这种配置机制有一个副作用：闭包只能取得包含函数的任何变量的最后一个值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> funcs = createFunctions();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个函数都输出10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; funcs.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(funcs[i]() + <span class=\"string\">\"&lt;br /&gt;\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为每个函数的作用域链都保存着createFunctions()的活动对象，因此它们引用的都是同一个变量i，</p>\n<p>当createFunctions()函数返回后，变量i的值为10，</p>\n<p>所以每个函数内部的i都是10。</p>\n<p>可以通过创建另一个匿名函数强制让闭包行为符合预期：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    result[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>在这里，定义了一个立即执行的匿名函数，并将它的结果赋给数组。</p>\n<p>在立即执行时，传入了变量i，又因为函数参数是按值传递的，因此就会将i的当前值赋给num。</p>\n<p>而这个函数内部，又创建并返回了一个访问num的闭包。</p>\n<p>这样，result数组中每个函数都有一个自己的num变量的副本，就可以返回不同的值了。</p>\n<h3 id=\"关于this对象\"><a href=\"#关于this对象\" class=\"headerlink\" title=\"关于this对象\"></a>关于this对象</h3><p>在闭包中使用this对象也可能导致一些问题。</p>\n<p>this对象是在运行时基于函数的运行环境绑定的：</p>\n<ul>\n<li>在全局函数中，this等于window</li>\n<li>当函数被作为某个对象的方法调用时，this等于那个对象</li>\n</ul>\n<p>匿名函数的执行环境具有全局性，如果通过call()或者apply()改变环境执行环境，this会指向其他环境，但通常this指向window。</p>\n<p>arguments也有同样的问题，</p>\n<p>因此如果想访问作用域中的this和arguments对象，必须将对它们的引用保存到另一个闭包能够访问的变量中，然后就可以让闭包访问该对象了，以this为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  getNameFunc1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getNameFunc2: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> that.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">object.getNameFunc1(); <span class=\"comment\">// \"The Window\"</span></span><br><span class=\"line\">object.getNameFunc2(); <span class=\"comment\">// \"My Object\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"内存泄露\"><a href=\"#内存泄露\" class=\"headerlink\" title=\"内存泄露\"></a>内存泄露</h3><p>由于IE对JScript对象和COM（组件对象模型）对象<strong>使用不同的垃圾收集例程</strong>，因此闭包在IE中可能会导致问题。</p>\n<p>如果闭包的作用域链中保存着一个HTML元素，那么就意味着该元素无法被销毁：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assignHansdler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"someElement\"</span>);</span><br><span class=\"line\">  element.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(element.id);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码创建了一个作为element元素事件处理程序的闭包，而这个闭包又创建了一个循环引用。</p>\n<p>由于匿名函数保存了一个对assignHandler()的活动对象的引用，因此就会导致无法减少element的引用数。</p>\n<p>只要匿名函数存在，element的引用数至少也是1，因此它占用的内存永远都不会被回收。</p>\n<p>可以用如下方式解决：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assignHansdler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"someElement\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> id = element.id;</span><br><span class=\"line\">  </span><br><span class=\"line\">  element.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(id);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  element = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就消除了循环引用。</p>\n<p>需要注意的是，即使闭包不直接引用element，包含函数的活动对象中也仍然会保存一个引用。</p>\n<p>因此 ，有必要把element设为null。</p>\n<h2 id=\"模仿块级作用域\"><a href=\"#模仿块级作用域\" class=\"headerlink\" title=\"模仿块级作用域\"></a>模仿块级作用域</h2><p>JavaScript在遇到多次声明一个变量的情况时，会自动忽略后边的声明，但是会执行后边声明中的初始化。</p>\n<p>JavaScript没有块级作用域的概念，</p>\n<p>因此块语句中定义的变量，实际上是在包含函数中而不是语句中创建的。</p>\n<p>可以用匿名函数来模仿块级作用域（私有作用域）来避免这个问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，JavaScript将function当做一个函数声明的开始，而函数声明后边是不能跟括号的。</p>\n<p>因此上边代码中函数外面包括的括号不能省略。这样可以把函数声明转换成函数表达式。</p>\n<p>无论在什么地方，只要临时需要一些变量，就可以使用私有作用域。</p>\n<p>在匿名函数中的任何变量，都会在执行结束时销毁。</p>\n<p>我们应该通过创造私有作用域来尽量少地向全局作用域添加变量和函数，以免导致命名冲突。</p>\n<h2 id=\"私有变量\"><a href=\"#私有变量\" class=\"headerlink\" title=\"私有变量\"></a>私有变量</h2><p>除了前边提到的稳妥构造函数模式，还可以：</p>\n<p>在构造函数中定义特权方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数的私有变量</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 函数的私有函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 特权方法</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.publicMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    privateVariable++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在创建MyObject实例后，除了publicMethod没有任何方法可以直接访问privateVariable和privateFunction()。</p>\n<p>或者利用私有和特权成员，隐藏那些不应该被直接修改的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>);</span><br><span class=\"line\">person.getName(); <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">person.setName(<span class=\"string\">\"Greg\"</span>);</span><br><span class=\"line\">person.getName(); <span class=\"comment\">// \"Greg\"</span></span><br></pre></td></tr></table></figure>\n<p>私有变量name在每一个实例的作用域中都不相同，因为每次调用构造函数都会重新创建这两个方法。</p>\n<p>但是这样使用构造函数会有构造函数模式的缺陷：无法方法复用。每次创建实例都会创建同样一组方法，用静态私有变量来实现特权方法就可以解决这个问题。</p>\n<h3 id=\"静态私有变量\"><a href=\"#静态私有变量\" class=\"headerlink\" title=\"静态私有变量\"></a>静态私有变量</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 没有使用var声明，因此为全局变量</span></span><br><span class=\"line\">  Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Person.prototype.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>);</span><br><span class=\"line\">person1.getName(); <span class=\"comment\">// \"NIcholas\"</span></span><br><span class=\"line\">person1.setName(<span class=\"string\">\"Greg\"</span>);</span><br><span class=\"line\">person1.getName(); <span class=\"comment\">// \"Greg\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"MIchael\"</span>);</span><br><span class=\"line\">person1.getName(); <span class=\"comment\">// \"MIchael\"</span></span><br><span class=\"line\">person2.getName(); <span class=\"comment\">// \"MIchael\"</span></span><br></pre></td></tr></table></figure>\n<p>在这种模式下，name就变成了静态的、由所有实例共享的属性。</p>\n<p>因此每次改变name改变的是所有实例的name。</p>\n<p>这样创造静态私有变量会因为使用原型而增进代码复用，但每个实例都没有自己的私有变量。</p>\n<p>因此使用哪个方法还要视具体情况而定。</p>\n<blockquote>\n<p>多查找作用域链的一个层次会一定程度上影响查找速度，这正是闭包和私有变量的一个明显的不足之处。</p>\n</blockquote>\n<p>对于私有变量，我认为可以使用两者组合的模式，不知道对不对，这里贴出想法，欢迎指正（zmj原创，转载需注明出处）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> teacher = <span class=\"string\">\"Nicholas\"</span>; <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">  Person.prototype.getTeacher = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> teacher;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Person.prototype.setTeacher = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    teacher = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这样，就既有实例自己的私有变量，也有静态私有变量了。</p>\n<h3 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h3><p>模块模式（module pattern）是为单例（singleton）创建私有变量和私有方法。</p>\n<p>所谓单例就是只有一个实例的对象，一般以对象字面量的方式来创建：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> singleton = &#123;</span><br><span class=\"line\">  name: value,</span><br><span class=\"line\">  method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里是方法的代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>模块模式通过为单例添加私有变量和特权方法来使其增强：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> singleton = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 私有变量和私有函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 特权/公有方法和属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    publicProperty: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    publicMethod: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      privateVariable++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>这种模式在需要对单例进行某些初始化，同时又需要维护其私有变量时是十分有用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BaseComponent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">OtherComponent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> application = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 私有变量和函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> components = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">  components.push(<span class=\"keyword\">new</span> BaseComponent());</span><br><span class=\"line\">  <span class=\"comment\">// 公共</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    getComponentCount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> components.length;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    registerComponent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> component == <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        components.push(component);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">application.registerComponent(<span class=\"keyword\">new</span> OtherComponent());</span><br><span class=\"line\">application.getComponentCount(); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>在Web应用程序中，经常使用一个单例来管理应用程序级的信息。</p>\n<p>以这种模式创建的单例都是Object的实例。</p>\n<h3 id=\"增强的模块模式\"><a href=\"#增强的模块模式\" class=\"headerlink\" title=\"增强的模块模式\"></a>增强的模块模式</h3><p>如果单例必须是某种类型的实例，还必须添加某些属性和/或方法加以增强，可以使用增强的模块模式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BaseComponent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> application = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 私有变量和函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> components = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">  components.push(<span class=\"keyword\">new</span> BaseComponent());</span><br><span class=\"line\">  <span class=\"comment\">// 创造application的一个局部副本</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> BaseComponent();</span><br><span class=\"line\">  <span class=\"comment\">// 公共接口</span></span><br><span class=\"line\">  app.getComponentCount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> components.length;</span><br><span class=\"line\">  &#125;；</span><br><span class=\"line\">  app.registerComponent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> component == <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">      components.push(component);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;；</span><br><span class=\"line\">  <span class=\"comment\">// 返回这个副本</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> app;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>——《JavaScript高级程序设计（第2版）》学习笔记</p>\n<p>要多查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web\" target=\"_blank\" rel=\"noopener\">MDN Web 文档</a></p>\n<hr>\n<h1 id=\"面向对象的程序设计\"><a href=\"#面向对象的程序设计\" class=\"headerlink\" title=\"面向对象的程序设计\"></a>面向对象的程序设计</h1><h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式是软件工程领域广为人知的一种设计模式，这种模式抽象了创建具体对象的过程。</p>\n<p>用函数来封装以特定接口创建对象的细节：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>;</span><br><span class=\"line\">  o.name = name;</span><br><span class=\"line\">  o.age = age;</span><br><span class=\"line\">  o.jpb = job;</span><br><span class=\"line\">  o.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = createPerson(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.sayName(); <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">person2.sayName(); <span class=\"comment\">// \"Greg\"</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式虽然解决了创建多个相似对的问题，却没有解决对象识别的问题。</p>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>我们可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.jpb = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.sayName(); <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">person2.sayName(); <span class=\"comment\">// \"Greg\"</span></span><br></pre></td></tr></table></figure>\n<p>构造函数模式与工厂模式的区别：</p>\n<ul>\n<li><p>没有显示地创建对象(new Object())</p>\n</li>\n<li><p>直接将属性和方法赋给了this对象</p>\n</li>\n<li>没有return语句</li>\n<li>函数名首字母大写</li>\n</ul>\n<p>要创建Person的新实例，必须使用new操作符。以这种方式调用构造函数实际上会经历4个步骤：</p>\n<ol>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（因此this指向了这个新对象）</li>\n<li>执行构造函数中的代码（为这个新对象添加属性）</li>\n<li>返回新对象</li>\n</ol>\n<p>这样通过构造函数模式创建的两个对象都有一个constructor（构造函数）属性，该属性指向Person：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person1.constructor == Person; <span class=\"comment\">// true</span></span><br><span class=\"line\">person1 <span class=\"keyword\">instanceof</span> Person; <span class=\"comment\">// true</span></span><br><span class=\"line\">person1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// true， 因为所有对象均继承自Object</span></span><br></pre></td></tr></table></figure>\n<p>创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型，这正是构造函数模式优于工厂模式的地方。</p>\n<h4 id=\"将构造函数当做函数\"><a href=\"#将构造函数当做函数\" class=\"headerlink\" title=\"将构造函数当做函数\"></a>将构造函数当做函数</h4><p>前边例子中的Person()函数可以通过下边任何一种方式来调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当做构造函数使用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\">person.sayName();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作为普通函数调用</span></span><br><span class=\"line\">Person(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>); <span class=\"comment\">// 添加到window</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.sayName(); <span class=\"comment\">// \"Greg\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在另一个对象的作用域中调用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> Obeject();</span><br><span class=\"line\">Person.call(o, <span class=\"string\">\"Kristen\"</span>, <span class=\"number\">25</span>, <span class=\"string\">\"Nurse\"</span>);</span><br><span class=\"line\">o.sayName(); <span class=\"comment\">// \"Kristen\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构造函数的问题\"><a href=\"#构造函数的问题\" class=\"headerlink\" title=\"构造函数的问题\"></a>构造函数的问题</h4><p>使用构造函数的主要问题，是每个方法都要在每个实例上重新创建一遍，这是没有必要的，因此Person()可以像下边这样定义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.jpb = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = sayName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这样的话，在全局作用域中定义的函数(sayName())只能被 某个对象调用，这让全局作用域有点名不副实，而且如果对象需要定义很多方法，那么就要定义很多个全局函数，这样我们自定义的引用类型就毫无封装性可言。</p>\n<p>但是这些问题可以通过使用原型模式解决。</p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>关于prototype可以先看<a href=\"https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/\" target=\"_blank\" rel=\"noopener\">这一篇</a>。</p>\n<p>然后看下边这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">\"Nicolas\"</span>;</span><br><span class=\"line\">Person.prototype.age = <span class=\"number\">29</span>;</span><br><span class=\"line\">Person.prototype.job = <span class=\"string\">\"Software Engineer\"</span>;</span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person1.sayName(); <span class=\"comment\">// \"Nicolas\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person2.sayName(); <span class=\"comment\">// \"Nicolas\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.sayName == person2.sayName; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在原型模式下，对象调用这些属性和方法时，实际上是调用prototype的属性和方法。</p>\n<h4 id=\"理解原型\"><a href=\"#理解原型\" class=\"headerlink\" title=\"理解原型\"></a>理解原型</h4><p>默认情况下，所有prototype属性都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype所在函数的指针。</p>\n<p>如果person1的<code>__proto</code>指向Person的<code>prototype</code>，则</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.isPrototypeOf(person); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>当为对象实例添加一个属性时，这个属性就会屏蔽源性对象中保存的同名属性，但不会修改那个属性。</p>\n<p>如果将为对象实例添加的这个属性设为null，也只会在实例中设置这个属性，而不会恢复其指向原型的连接。</p>\n<p>要想重新访问原型中的属性，可以使用delete操作符完全删除实例属性，</p>\n<p>使用hasOwnProperty()可以检测一个属性是否存在于实例中（这个方法是从Object继承来的），如果是原型属性则返回false：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">\"Nicolas\"</span>;</span><br><span class=\"line\">Person.prototype.age = <span class=\"number\">29</span>;</span><br><span class=\"line\">Person.prototype.job = <span class=\"string\">\"Software Engineer\"</span>;</span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">person1.hasOwnProperty(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.name = <span class=\"string\">\"Greg\"</span>;</span><br><span class=\"line\">person1.name; <span class=\"comment\">// \"Greg\"————来自实例</span></span><br><span class=\"line\">person2.name; <span class=\"comment\">// \"Nicolas\"————来自原型</span></span><br><span class=\"line\">person1.hasOwnProperty(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">person2.hasOwnProperty(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> person1.name;</span><br><span class=\"line\">person1.name; <span class=\"comment\">// \"Nicolas\"————来自原型</span></span><br><span class=\"line\">person1.hasOwnProperty(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h4><p>in操作符会在通过对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。因此对于上面的例子，在person1和person2声明后，无论何时调用<code>&quot;name&quot; in person1</code>或<code>&quot;name&quot; in person2</code>都会得到true。</p>\n<p>因此，在hasOwnPrototype()返回false而使用in操作符返回true时，就说明这个属性是原型属性。</p>\n<p>in操作符还可以通过for-in循环使用，返回的是所有能通过对象访问的、可枚举的（enumerated）属性和方法。</p>\n<p>原型中不可枚举的属性和方法（即设置了[[DontEnum]]标记的属性和方法）有hasOwnProperty()、propertyIsEnumerable()、toLocalString()、toString()和valueOf()，有的浏览器也为constructor和prototype打上标记，</p>\n<p>但是当我们在实例中添加这些属性和方法从而屏蔽了原型中的这些属性和方法时，那么这些属性和方法就会被认为是可枚举的（IE中除外）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"My Object\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (prop == <span class=\"string\">\"toString\"</span>) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Found toString\"</span>); <span class=\"comment\">// 在IE中不会显示，其他浏览器显示</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"更简单的原型方法\"><a href=\"#更简单的原型方法\" class=\"headerlink\" title=\"更简单的原型方法\"></a>更简单的原型方法</h4><p>每添加一个属性和方法就要敲一遍Person.prototype是不必要的，同事也为了从视觉上更好地封装原型的功能，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 重写prototype会导致其constructor等于Object，</span></span><br><span class=\"line\"><span class=\"comment\">   * 若constructor的值很重要，可以给constructor设置回适当的值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">  name: \"Nicholas\",</span><br><span class=\"line\">  age: 29,</span><br><span class=\"line\">  job: \"Software Engineer\",</span><br><span class=\"line\">  sayName: function()&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person.constructor == Person;</span><br><span class=\"line\"><span class=\"comment\">// 若是添加了上边constructor那一句则为true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"原型的动态性\"><a href=\"#原型的动态性\" class=\"headerlink\" title=\"原型的动态性\"></a>原型的动态性</h4><p>由于在原型中查找值的过程是一次搜索，因此对原型对象的修改都能够立即从实例中反映出来，</p>\n<p>但是如果像上边的例子一样重写了原型，在重写原型之前声明的实例的<code>__proto__</code>指向的仍是最初的原型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">person.sayHi(); <span class=\"comment\">// \"hi\"，没有问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">  name: \"Nicholas\",</span><br><span class=\"line\">  age: 29,</span><br><span class=\"line\">  job: \"Software Engineer\",</span><br><span class=\"line\">  sayName: function()&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">person.sayHi(); <span class=\"comment\">// \"hi\"，没有问题</span></span><br><span class=\"line\">person.sayName(); <span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"原生对象的原型\"><a href=\"#原生对象的原型\" class=\"headerlink\" title=\"原生对象的原型\"></a>原生对象的原型</h4><p>所有原生的引用类型，都是采用原型模式创建的。因此我们亦可以对原生引用类型的prototype添加属性或方法。</p>\n<p>以String为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.startsWith = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.indexOf(text) == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> msg = <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\">msg.startsWith(<span class=\"string\">\"Hello\"</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>但是不建议在产品化的程序中修改原生对象的原型。</p>\n<h4 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h4><p>如果一个原型的属性包含引用类型值时，实例对该属性进行操作时，实际上修改的就是原型中的属性（引用类型对象名可以看做指针），因此当其他实例访问该属性时，得到的就是这个实例修改后的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">  name: \"Nicholas\",</span><br><span class=\"line\">  age: 29,</span><br><span class=\"line\">  job: \"Software Engineer\",</span><br><span class=\"line\">  friends: [\"Shelby\", \"Court\"], // 属性值为引用类型</span><br><span class=\"line\">  sayName: function()&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">person1.friends.push(<span class=\"string\">\"Van\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.friends; <span class=\"comment\">// [\"Shelby\", \"Court\", \"Van\"]</span></span><br><span class=\"line\">person2.friends; <span class=\"comment\">// [\"Shelby\", \"Court\", \"Van\"]</span></span><br><span class=\"line\">person1.friends == person2.friends; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组合使用构造函数模式和原型模式\"><a href=\"#组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"组合使用构造函数模式和原型模式\"></a>组合使用构造函数模式和原型模式</h3><p>使用构造函数模式定义实例属性，原型模式定义方法和共享的属性，</p>\n<p>这样每个实例都会有自已的一份实例属性的副本，又共享着对方法的引用，最大限度地节省了内存，还可以向构造函数传递参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.friends = [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">  sayName: function()&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>, <span class=\"string\">\"Doctor\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.friends.push(<span class=\"string\">\"Van\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.friends; <span class=\"comment\">// [\"Shelby\", \"Court\", \"Van\"]</span></span><br><span class=\"line\">person2.friends; <span class=\"comment\">// [\"Shelby\", \"Court\"]</span></span><br><span class=\"line\">person1.friends == person2.friends; <span class=\"comment\">// false</span></span><br><span class=\"line\">person1.sayName == person2.sayName; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>这种混合使用的模式是ECMAScript中使用最广泛、认同度最高的自定义类型的方法。可以说是一种默认模式。</p>\n<h3 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h3><p>这种模式把所有信息都封装在了构造函数中，并在构造函数中通过检查某个应该存在的方法是否有效，来决定是否需要初始化模型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 属性</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 只有在sayName()方法不存在时才将其添加到原型中</span></span><br><span class=\"line\">  <span class=\"comment\">// 即只有在初次调用构造函数时才会执行下面的代码</span></span><br><span class=\"line\">  <span class=\"comment\">// if语句只需要判断一个方法（例如sayName）是否存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.sayName != <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">    Person.prototype = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">      sayName: function() &#123;</span><br><span class=\"line\">      alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      sayHi: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他构造函数模式\"><a href=\"#其他构造函数模式\" class=\"headerlink\" title=\"其他构造函数模式\"></a>其他构造函数模式</h3><p>寄生构造函数模式和<a href=\"https://blog.csdn.net/zqs111/article/details/50650324\" target=\"_blank\" rel=\"noopener\">稳妥构造函数模式</a>，寄生构造模式没有什么意义这里就不再赘述，稳妥构造函数模式相当于为引用类型添加了private属性，有兴趣可以自行搜索。</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>在ECMAScript中无法实现接口继承（与函数无法重载的理由相同，ECMAScript中的函数没有签名），</p>\n<p>但是可以利用原型链实现实现继承。</p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>除了<a href=\"https://blog.zmj97.top/2018/09/04/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype%E4%B8%8E-proto/\" target=\"_blank\" rel=\"noopener\">这一篇</a>讲到的，还应注意：</p>\n<ul>\n<li>别忘记默认的原型：Object.prototype</li>\n<li>确认原型和实例的关系：利用<code>instanceof</code>和<code>isPrototypeOf()</code></li>\n<li>谨慎地定义方法<ul>\n<li>给原型添加方法的代码一定要放在替换原型的语句之后</li>\n<li>在通过原型链实现继承时，不同通过对象字面量创建原型方法（重写原型会切断原型链）</li>\n</ul>\n</li>\n<li>原型链的问题<ul>\n<li>与原型的问题相同，如果原型包含引用类型值，那么所有同一个继承类型的实例都会共享一个引用类型值</li>\n<li>在创建子类型的实例时，不能像超类型的构造函数传递参数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h3><p>又叫伪造继承或经典继承。</p>\n<p>在子类型构造函数得到内部利用调用超类型的构造函数，还可以传递参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 继承了SuperType，同时还传递了参数</span></span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, <span class=\"string\">\"Nicholas\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 实例属性</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">29</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> SubType();</span><br><span class=\"line\">instance.name; <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">instance.age; <span class=\"comment\">// 29</span></span><br></pre></td></tr></table></figure>\n<p>但是如果方法都在构造函数中定义，函数复用就无从谈起了。</p>\n<h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><p>combination inheritance，伪经典继承，组合使用原型链和借用构造函数。</p>\n<p>使用原型链实现原型属性和方法的继承，通过借用构造函数实现实例属性的继承，</p>\n<p>这样既可以实现函数复用，又能保证每个实例都有它自己的属性。</p>\n<p>同时，<code>instanceof</code>和<code>isPrototypeOf</code>也能识别基于组合继承创建的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"green\"</span>, <span class=\"string\">\"blue\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 继承属性</span></span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承方法</span></span><br><span class=\"line\">SubType.prototype = <span class=\"keyword\">new</span> SuperType();</span><br><span class=\"line\"></span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance1 = <span class=\"keyword\">new</span> SubType(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">instance1.colors.push(<span class=\"string\">\"black\"</span>);</span><br><span class=\"line\">instance1.colors; <span class=\"comment\">// [\"red\", \"green\", \"blue\", \"black\"]</span></span><br><span class=\"line\">instance1.sayName(); <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">instance1.sayAge(); <span class=\"comment\">// 29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance2 = <span class=\"keyword\">new</span> SubType(<span class=\"string\">\"Greg\"</span>, <span class=\"number\">27</span>);</span><br><span class=\"line\">instance1.colors; <span class=\"comment\">// [\"red\", \"green\", \"blue]</span></span><br><span class=\"line\">instance1.sayName(); <span class=\"comment\">// \"Greg\"</span></span><br><span class=\"line\">instance1.sayAge(); <span class=\"comment\">// 27</span></span><br></pre></td></tr></table></figure>\n<p>组合继承融合了前两者的优点，因此成为JavaScript中最常用的继承模式。</p>\n<h3 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h3><p>主要用于只是想让一个对象与另一个对象保持类似，没有必要兴师动众地创建构造函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样子实际上是object()函数对传入的对象执行了一次浅复制：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"Nicholas\"</span>,</span><br><span class=\"line\">  friends: [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>, <span class=\"string\">\"Van\"</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherPerson = object(person);</span><br><span class=\"line\">anotherPerson.name = <span class=\"string\">\"Greg\"</span>;</span><br><span class=\"line\">anotherPerson.friends.push(<span class=\"string\">\"Rob\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person.friends; <span class=\"comment\">// [\"Shelby\", \"Court\", \"Van\", \"Rob\"]</span></span><br><span class=\"line\">person.name; <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">anotherPerson.name; <span class=\"comment\">// \"Greg\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h3><p>寄生式，parasitic。</p>\n<p>思路与寄生构造函数和工厂模式类似，创建一个仅用于封装继承过程的函数，在函数内部以某种方式来增强对象。</p>\n<p>但是也会因为做不到函数复用而降低效率。</p>\n<p>适用于主要考虑对象而不是自定义类型和构造函数的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createAnother</span>(<span class=\"params\">original</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过调用函数创建一个新对象，不一定使用object()函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> clone = object(original);</span><br><span class=\"line\">  <span class=\"comment\">// 以某种方式增强这个对象</span></span><br><span class=\"line\">  clone.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 返回这个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> clone;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"Nicholas\"</span>,</span><br><span class=\"line\">  friends: [<span class=\"string\">\"Shelby\"</span>, <span class=\"string\">\"Court\"</span>, <span class=\"string\">\"Van\"</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherPerson = createAnother(person);</span><br><span class=\"line\">anotherPerson.sayHi(); <span class=\"comment\">// \"hi\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><p>对于为什么要寄生组合式继承，看了<a href=\"https://www.cnblogs.com/ghostwu/p/7440691.html\" target=\"_blank\" rel=\"noopener\">这篇</a>文章还有知乎上的一些回答，主要的优势是组合继承两次调用了构造函数，而寄生只使用了一次。</p>\n<p>刚开始不理解的是，为什么在创建超类型原型副本时对超类型原型的实例化就不算调用构造函数呢？</p>\n<p>后来仔细想了一下，的确可以不算调用了构造函数——</p>\n<p>object()函数内的临时类型F的构造函数为空（<code>function F() {}</code>），因此可以忽略不计。</p>\n<p>以下是代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 主要区别就是这里，构造函数的不同</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125; </span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prototype = object(superType.prototype); <span class=\"comment\">// 拷贝原型</span></span><br><span class=\"line\">  prototype.constructor = subType; <span class=\"comment\">// 弥补因重写prototype而失去的默认的constructor属性</span></span><br><span class=\"line\">  subType.prototype = prototype; <span class=\"comment\">// 替换子类型原型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"green\"</span>, <span class=\"string\">\"blue\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 继承属性</span></span><br><span class=\"line\">  SuperType.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 寄生组合式继承</span></span><br><span class=\"line\">inheritPrototype(SubType, SuperType);</span><br><span class=\"line\"></span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h1><p>没有名字的函数，也成为拉姆达(lamda)函数。</p>\n<p>像</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> functionName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg0, arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的函数表达式相当于创建了一个匿名函数，然后将这个匿名函数赋给一个变量。</p>\n<p>将函数作为参数传入另一个函数，或者从一个函数中返回另一个函数时，通常都是用匿名函数。</p>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>（虽然不知道为什么这本书要在这里再讲一遍这个，也许可能意思是callee指向的实际上是匿名函数，不管怎么样复习一下callee吧）</p>\n<p>前边在讲到函数内部对象arguments的属性callee(指向拥有这个arguments的函数)时有提到过递归阶乘函数这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num<span class=\"number\">-1</span>); <span class=\"comment\">// 建议</span></span><br><span class=\"line\">    <span class=\"comment\">// return num * factorial(num-1);   // 不建议</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherFactorial = factorial;</span><br><span class=\"line\">factorial = <span class=\"literal\">null</span>;</span><br><span class=\"line\">anotherFactorial(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// 使用callee这里结果为24， 函数内使用factorial这里会出错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>有些人会分不清<strong>闭包</strong>和<strong>匿名函数</strong>。</p>\n<p><strong>闭包</strong>指的是有权访问另一个函数作用域的函数。</p>\n<p>创建闭包的常见方式是在一个函数内部创建另一个函数。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>首先先回顾一下作用域链（scope chain）。</p>\n<p>当一个函数第一次被调用时，会创建一个执行环境（execute context）及相应的作用域链，并将作用域链赋值给一个特殊的内部属性[[Scope]]。</p>\n<p>然后，使用this、arguments和其他命名参数的值来初始化函数的活动对象（activation object）。</p>\n<p>这个活动对象处于作用域链的顶端，外部函数的活动对象处于第二位，外部函数的外部函数的活动对象处于第三位，… … 直到全局执行环境的变量对象处于作用域链终点。</p>\n<p>一般来说，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。</p>\n<p><strong>但是，闭包的情况又有所不同。</strong></p>\n<p>在另一个函数内部定义的函数会将外部函数的活动对象添加到它的作用域链中，当外部函数执行完毕后，如果内部的这个函数还未执行，即其作用域链还在引用外部函数的活动对象时，这个活动对象就不会被销毁。</p>\n<p>知道内部的这个函数执行完毕，外部函数的活动对象才会随之一起销毁。</p>\n<p>由于闭包会携带包含它的函数的作用域，因此回比其它函数占用更多内存，因此建议只有在必要时再考虑使用闭包。</p>\n<h3 id=\"闭包与变量\"><a href=\"#闭包与变量\" class=\"headerlink\" title=\"闭包与变量\"></a>闭包与变量</h3><p>作用域链的这种配置机制有一个副作用：闭包只能取得包含函数的任何变量的最后一个值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> funcs = createFunctions();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个函数都输出10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; funcs.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(funcs[i]() + <span class=\"string\">\"&lt;br /&gt;\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为每个函数的作用域链都保存着createFunctions()的活动对象，因此它们引用的都是同一个变量i，</p>\n<p>当createFunctions()函数返回后，变量i的值为10，</p>\n<p>所以每个函数内部的i都是10。</p>\n<p>可以通过创建另一个匿名函数强制让闭包行为符合预期：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    result[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>在这里，定义了一个立即执行的匿名函数，并将它的结果赋给数组。</p>\n<p>在立即执行时，传入了变量i，又因为函数参数是按值传递的，因此就会将i的当前值赋给num。</p>\n<p>而这个函数内部，又创建并返回了一个访问num的闭包。</p>\n<p>这样，result数组中每个函数都有一个自己的num变量的副本，就可以返回不同的值了。</p>\n<h3 id=\"关于this对象\"><a href=\"#关于this对象\" class=\"headerlink\" title=\"关于this对象\"></a>关于this对象</h3><p>在闭包中使用this对象也可能导致一些问题。</p>\n<p>this对象是在运行时基于函数的运行环境绑定的：</p>\n<ul>\n<li>在全局函数中，this等于window</li>\n<li>当函数被作为某个对象的方法调用时，this等于那个对象</li>\n</ul>\n<p>匿名函数的执行环境具有全局性，如果通过call()或者apply()改变环境执行环境，this会指向其他环境，但通常this指向window。</p>\n<p>arguments也有同样的问题，</p>\n<p>因此如果想访问作用域中的this和arguments对象，必须将对它们的引用保存到另一个闭包能够访问的变量中，然后就可以让闭包访问该对象了，以this为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  getNameFunc1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getNameFunc2: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> that.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">object.getNameFunc1(); <span class=\"comment\">// \"The Window\"</span></span><br><span class=\"line\">object.getNameFunc2(); <span class=\"comment\">// \"My Object\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"内存泄露\"><a href=\"#内存泄露\" class=\"headerlink\" title=\"内存泄露\"></a>内存泄露</h3><p>由于IE对JScript对象和COM（组件对象模型）对象<strong>使用不同的垃圾收集例程</strong>，因此闭包在IE中可能会导致问题。</p>\n<p>如果闭包的作用域链中保存着一个HTML元素，那么就意味着该元素无法被销毁：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assignHansdler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"someElement\"</span>);</span><br><span class=\"line\">  element.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(element.id);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码创建了一个作为element元素事件处理程序的闭包，而这个闭包又创建了一个循环引用。</p>\n<p>由于匿名函数保存了一个对assignHandler()的活动对象的引用，因此就会导致无法减少element的引用数。</p>\n<p>只要匿名函数存在，element的引用数至少也是1，因此它占用的内存永远都不会被回收。</p>\n<p>可以用如下方式解决：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assignHansdler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"someElement\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> id = element.id;</span><br><span class=\"line\">  </span><br><span class=\"line\">  element.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(id);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  element = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就消除了循环引用。</p>\n<p>需要注意的是，即使闭包不直接引用element，包含函数的活动对象中也仍然会保存一个引用。</p>\n<p>因此 ，有必要把element设为null。</p>\n<h2 id=\"模仿块级作用域\"><a href=\"#模仿块级作用域\" class=\"headerlink\" title=\"模仿块级作用域\"></a>模仿块级作用域</h2><p>JavaScript在遇到多次声明一个变量的情况时，会自动忽略后边的声明，但是会执行后边声明中的初始化。</p>\n<p>JavaScript没有块级作用域的概念，</p>\n<p>因此块语句中定义的变量，实际上是在包含函数中而不是语句中创建的。</p>\n<p>可以用匿名函数来模仿块级作用域（私有作用域）来避免这个问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，JavaScript将function当做一个函数声明的开始，而函数声明后边是不能跟括号的。</p>\n<p>因此上边代码中函数外面包括的括号不能省略。这样可以把函数声明转换成函数表达式。</p>\n<p>无论在什么地方，只要临时需要一些变量，就可以使用私有作用域。</p>\n<p>在匿名函数中的任何变量，都会在执行结束时销毁。</p>\n<p>我们应该通过创造私有作用域来尽量少地向全局作用域添加变量和函数，以免导致命名冲突。</p>\n<h2 id=\"私有变量\"><a href=\"#私有变量\" class=\"headerlink\" title=\"私有变量\"></a>私有变量</h2><p>除了前边提到的稳妥构造函数模式，还可以：</p>\n<p>在构造函数中定义特权方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数的私有变量</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 函数的私有函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 特权方法</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.publicMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    privateVariable++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在创建MyObject实例后，除了publicMethod没有任何方法可以直接访问privateVariable和privateFunction()。</p>\n<p>或者利用私有和特权成员，隐藏那些不应该被直接修改的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>);</span><br><span class=\"line\">person.getName(); <span class=\"comment\">// \"Nicholas\"</span></span><br><span class=\"line\">person.setName(<span class=\"string\">\"Greg\"</span>);</span><br><span class=\"line\">person.getName(); <span class=\"comment\">// \"Greg\"</span></span><br></pre></td></tr></table></figure>\n<p>私有变量name在每一个实例的作用域中都不相同，因为每次调用构造函数都会重新创建这两个方法。</p>\n<p>但是这样使用构造函数会有构造函数模式的缺陷：无法方法复用。每次创建实例都会创建同样一组方法，用静态私有变量来实现特权方法就可以解决这个问题。</p>\n<h3 id=\"静态私有变量\"><a href=\"#静态私有变量\" class=\"headerlink\" title=\"静态私有变量\"></a>静态私有变量</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 没有使用var声明，因此为全局变量</span></span><br><span class=\"line\">  Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Person.prototype.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>);</span><br><span class=\"line\">person1.getName(); <span class=\"comment\">// \"NIcholas\"</span></span><br><span class=\"line\">person1.setName(<span class=\"string\">\"Greg\"</span>);</span><br><span class=\"line\">person1.getName(); <span class=\"comment\">// \"Greg\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"MIchael\"</span>);</span><br><span class=\"line\">person1.getName(); <span class=\"comment\">// \"MIchael\"</span></span><br><span class=\"line\">person2.getName(); <span class=\"comment\">// \"MIchael\"</span></span><br></pre></td></tr></table></figure>\n<p>在这种模式下，name就变成了静态的、由所有实例共享的属性。</p>\n<p>因此每次改变name改变的是所有实例的name。</p>\n<p>这样创造静态私有变量会因为使用原型而增进代码复用，但每个实例都没有自己的私有变量。</p>\n<p>因此使用哪个方法还要视具体情况而定。</p>\n<blockquote>\n<p>多查找作用域链的一个层次会一定程度上影响查找速度，这正是闭包和私有变量的一个明显的不足之处。</p>\n</blockquote>\n<p>对于私有变量，我认为可以使用两者组合的模式，不知道对不对，这里贴出想法，欢迎指正（zmj原创，转载需注明出处）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> teacher = <span class=\"string\">\"Nicholas\"</span>; <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">  Person.prototype.getTeacher = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> teacher;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Person.prototype.setTeacher = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    teacher = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这样，就既有实例自己的私有变量，也有静态私有变量了。</p>\n<h3 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h3><p>模块模式（module pattern）是为单例（singleton）创建私有变量和私有方法。</p>\n<p>所谓单例就是只有一个实例的对象，一般以对象字面量的方式来创建：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> singleton = &#123;</span><br><span class=\"line\">  name: value,</span><br><span class=\"line\">  method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里是方法的代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>模块模式通过为单例添加私有变量和特权方法来使其增强：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> singleton = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 私有变量和私有函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateVariable = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 特权/公有方法和属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    publicProperty: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    publicMethod: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      privateVariable++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> privateFunction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>这种模式在需要对单例进行某些初始化，同时又需要维护其私有变量时是十分有用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BaseComponent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">OtherComponent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> application = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 私有变量和函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> components = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">  components.push(<span class=\"keyword\">new</span> BaseComponent());</span><br><span class=\"line\">  <span class=\"comment\">// 公共</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    getComponentCount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> components.length;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    registerComponent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> component == <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        components.push(component);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">application.registerComponent(<span class=\"keyword\">new</span> OtherComponent());</span><br><span class=\"line\">application.getComponentCount(); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>在Web应用程序中，经常使用一个单例来管理应用程序级的信息。</p>\n<p>以这种模式创建的单例都是Object的实例。</p>\n<h3 id=\"增强的模块模式\"><a href=\"#增强的模块模式\" class=\"headerlink\" title=\"增强的模块模式\"></a>增强的模块模式</h3><p>如果单例必须是某种类型的实例，还必须添加某些属性和/或方法加以增强，可以使用增强的模块模式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BaseComponent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> application = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 私有变量和函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> components = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">  components.push(<span class=\"keyword\">new</span> BaseComponent());</span><br><span class=\"line\">  <span class=\"comment\">// 创造application的一个局部副本</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> BaseComponent();</span><br><span class=\"line\">  <span class=\"comment\">// 公共接口</span></span><br><span class=\"line\">  app.getComponentCount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> components.length;</span><br><span class=\"line\">  &#125;；</span><br><span class=\"line\">  app.registerComponent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> component == <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">      components.push(component);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;；</span><br><span class=\"line\">  <span class=\"comment\">// 返回这个副本</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> app;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n"},{"title":"TensorFlow基础知识","date":"2018-03-31T06:13:12.000Z","_content":"\n\n\n**TensorFlow**是一个采用**数据流图（data flow graphs）**，用于数值计算的开源软件库。\n\n下图就是一个**数据流图**。数据流图是一个用来描述数学计算的由**“结点”（nodes）和“线”(edges)**组成的**有向图**。\n\n**“节点”** 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点或者是输出（push out）的终点，以及读取/写入持久变量（persistent variable）的终点。\n\n**“线”**表示“节点”之间的输入/输出关系。这些数据“线”可以输运**“张量”（tensor）**，即大小可动态调整的多维数据数组。\n\n一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。\n\n![Tensors Flowing](http://www.tensorfly.cn/images/tensors_flowing.gif)\n\n# 开始学习\n\n[官方基础知识链接](http://www.tensorfly.cn/tfdoc/get_started/basic_usage.html)\n\n- 使用图 (graph) 来表示计算任务.\n- 在被称之为 `会话 (Session)` 的上下文 (context) 中执行图.\n- 使用 tensor 表示数据.\n- 通过 `变量 (Variable)` 维护状态.\n- 使用 feed 和 fetch 可以为任意的操作(arbitrary operation) 赋值或者从其中获取数据.\n- 图中的节点被称之为 *op* (operation 的缩写). 一个 op 获得 0 个或多个 `Tensor`, 执行计算,\n  产生 0 个或多个 `Tensor`. 每个 Tensor 是一个类型化的多维数组.\n\n## 构建图（创造节点）\n\n```python\nimport tensorflow as tf\n\n# 创建一个常量 op, 产生一个 1x2 矩阵. 这个 op 被作为一个节点\n# 加到默认图中.\n#\n# 构造器的返回值代表该常量 op 的返回值.\nmatrix1 = tf.constant([[3., 3.]])\n\n# 创建另外一个常量 op, 产生一个 2x1 矩阵.\nmatrix2 = tf.constant([[2.],[2.]])\n\n# 创建一个矩阵乘法 matmul op , 把 'matrix1' 和 'matrix2' 作为输入.\n# 返回值 'product' 代表矩阵乘法的结果.\nproduct = tf.matmul(matrix1, matrix2)\n```\n\n## 启动图\n\n```python\n# 启动默认图.\nsess = tf.Session()\n\n# 调用 sess 的 'run()' 方法来执行矩阵乘法 op, 传入 'product' 作为该方法的参数. \n# 上面提到, 'product' 代表了矩阵乘法 op 的输出, 传入它是向方法表明, 我们希望取回\n# 矩阵乘法 op 的输出.\n#\n# 整个执行过程是自动化的, 会话负责传递 op 所需的全部输入. op 通常是并发执行的.\n# \n# 函数调用 'run(product)' 触发了图中三个 op (两个常量 op 和一个矩阵乘法 op) 的执行.\n#\n# 返回值 'result' 是一个 numpy `ndarray` 对象.\nresult = sess.run(product)\nprint result\n# ==> [[ 12.]]\n\n# 任务完成, 关闭会话.\nsess.close()\n```\n\n也可以：\n\n```python\nwith tf.Session() as sess:\n  result = sess.run([product])\n  print result\n```\n\n## Tensor\n\nTensorFlow 程序使用 tensor 数据结构来代表所有的数据, 计算图中, 操作间传递的数据都是 tensor.\n可以把 TensorFlow tensor 看作是一个 n 维的数组或列表. 一个 tensor 包含一个静态类型 rank, 和\n一个 shape. \n\n## 变量\n\n变量维护图执行过程中的状态信息。\n\n启动图后, 变量必须先经过`初始化` (init) op 初始化,\n\n必须增加一个`初始化` op 到图中：`init_op = tf.initialize_all_variables()`\n\n启动图后首先运行 'init' op：`sess.run(init_op)`\n\n## Fetch\n\n为了取回操作的输出内容, 可以在使用 `Session` 对象的 `run()` 调用 执行图时, 传入一些 tensor来取回结果。\n\n## Feed\n\nTensorFlow 还提供了 feed 机制, 该机制可以临时替代图中的任意操作中的 tensor,可以对图中任何操作提交补丁, 直接插入一个 tensor。\n\n最常见的用例是将某些特殊的操作指定为 \"feed\" 操作,标记的方法是使用 tf.placeholder() 为这些操作创建占位符. \n\n```python\ninput1 = tf.placeholder(tf.types.float32)\ninput2 = tf.placeholder(tf.types.float32)\noutput = tf.mul(input1, input2)\n\nwith tf.Session() as sess:\n  print sess.run([output], feed_dict={input1:[7.], input2:[2.]})\n```\n\n","source":"_posts/TensorFlow基础知识.md","raw":"---\ntitle: TensorFlow基础知识\ndate: 2018-03-31 14:13:12\ncategories: \n- deep learning\ntags:\n- TensorFlow\n---\n\n\n\n**TensorFlow**是一个采用**数据流图（data flow graphs）**，用于数值计算的开源软件库。\n\n下图就是一个**数据流图**。数据流图是一个用来描述数学计算的由**“结点”（nodes）和“线”(edges)**组成的**有向图**。\n\n**“节点”** 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点或者是输出（push out）的终点，以及读取/写入持久变量（persistent variable）的终点。\n\n**“线”**表示“节点”之间的输入/输出关系。这些数据“线”可以输运**“张量”（tensor）**，即大小可动态调整的多维数据数组。\n\n一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。\n\n![Tensors Flowing](http://www.tensorfly.cn/images/tensors_flowing.gif)\n\n# 开始学习\n\n[官方基础知识链接](http://www.tensorfly.cn/tfdoc/get_started/basic_usage.html)\n\n- 使用图 (graph) 来表示计算任务.\n- 在被称之为 `会话 (Session)` 的上下文 (context) 中执行图.\n- 使用 tensor 表示数据.\n- 通过 `变量 (Variable)` 维护状态.\n- 使用 feed 和 fetch 可以为任意的操作(arbitrary operation) 赋值或者从其中获取数据.\n- 图中的节点被称之为 *op* (operation 的缩写). 一个 op 获得 0 个或多个 `Tensor`, 执行计算,\n  产生 0 个或多个 `Tensor`. 每个 Tensor 是一个类型化的多维数组.\n\n## 构建图（创造节点）\n\n```python\nimport tensorflow as tf\n\n# 创建一个常量 op, 产生一个 1x2 矩阵. 这个 op 被作为一个节点\n# 加到默认图中.\n#\n# 构造器的返回值代表该常量 op 的返回值.\nmatrix1 = tf.constant([[3., 3.]])\n\n# 创建另外一个常量 op, 产生一个 2x1 矩阵.\nmatrix2 = tf.constant([[2.],[2.]])\n\n# 创建一个矩阵乘法 matmul op , 把 'matrix1' 和 'matrix2' 作为输入.\n# 返回值 'product' 代表矩阵乘法的结果.\nproduct = tf.matmul(matrix1, matrix2)\n```\n\n## 启动图\n\n```python\n# 启动默认图.\nsess = tf.Session()\n\n# 调用 sess 的 'run()' 方法来执行矩阵乘法 op, 传入 'product' 作为该方法的参数. \n# 上面提到, 'product' 代表了矩阵乘法 op 的输出, 传入它是向方法表明, 我们希望取回\n# 矩阵乘法 op 的输出.\n#\n# 整个执行过程是自动化的, 会话负责传递 op 所需的全部输入. op 通常是并发执行的.\n# \n# 函数调用 'run(product)' 触发了图中三个 op (两个常量 op 和一个矩阵乘法 op) 的执行.\n#\n# 返回值 'result' 是一个 numpy `ndarray` 对象.\nresult = sess.run(product)\nprint result\n# ==> [[ 12.]]\n\n# 任务完成, 关闭会话.\nsess.close()\n```\n\n也可以：\n\n```python\nwith tf.Session() as sess:\n  result = sess.run([product])\n  print result\n```\n\n## Tensor\n\nTensorFlow 程序使用 tensor 数据结构来代表所有的数据, 计算图中, 操作间传递的数据都是 tensor.\n可以把 TensorFlow tensor 看作是一个 n 维的数组或列表. 一个 tensor 包含一个静态类型 rank, 和\n一个 shape. \n\n## 变量\n\n变量维护图执行过程中的状态信息。\n\n启动图后, 变量必须先经过`初始化` (init) op 初始化,\n\n必须增加一个`初始化` op 到图中：`init_op = tf.initialize_all_variables()`\n\n启动图后首先运行 'init' op：`sess.run(init_op)`\n\n## Fetch\n\n为了取回操作的输出内容, 可以在使用 `Session` 对象的 `run()` 调用 执行图时, 传入一些 tensor来取回结果。\n\n## Feed\n\nTensorFlow 还提供了 feed 机制, 该机制可以临时替代图中的任意操作中的 tensor,可以对图中任何操作提交补丁, 直接插入一个 tensor。\n\n最常见的用例是将某些特殊的操作指定为 \"feed\" 操作,标记的方法是使用 tf.placeholder() 为这些操作创建占位符. \n\n```python\ninput1 = tf.placeholder(tf.types.float32)\ninput2 = tf.placeholder(tf.types.float32)\noutput = tf.mul(input1, input2)\n\nwith tf.Session() as sess:\n  print sess.run([output], feed_dict={input1:[7.], input2:[2.]})\n```\n\n","slug":"TensorFlow基础知识","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b04000jcragk3s0licl","content":"<p><strong>TensorFlow</strong>是一个采用<strong>数据流图（data flow graphs）</strong>，用于数值计算的开源软件库。</p>\n<p>下图就是一个<strong>数据流图</strong>。数据流图是一个用来描述数学计算的由<strong>“结点”（nodes）和“线”(edges)</strong>组成的<strong>有向图</strong>。</p>\n<p><strong>“节点”</strong> 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点或者是输出（push out）的终点，以及读取/写入持久变量（persistent variable）的终点。</p>\n<p><strong>“线”</strong>表示“节点”之间的输入/输出关系。这些数据“线”可以输运<strong>“张量”（tensor）</strong>，即大小可动态调整的多维数据数组。</p>\n<p>一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。</p>\n<p><img src=\"http://www.tensorfly.cn/images/tensors_flowing.gif\" alt=\"Tensors Flowing\"></p>\n<h1 id=\"开始学习\"><a href=\"#开始学习\" class=\"headerlink\" title=\"开始学习\"></a>开始学习</h1><p><a href=\"http://www.tensorfly.cn/tfdoc/get_started/basic_usage.html\" target=\"_blank\" rel=\"noopener\">官方基础知识链接</a></p>\n<ul>\n<li>使用图 (graph) 来表示计算任务.</li>\n<li>在被称之为 <code>会话 (Session)</code> 的上下文 (context) 中执行图.</li>\n<li>使用 tensor 表示数据.</li>\n<li>通过 <code>变量 (Variable)</code> 维护状态.</li>\n<li>使用 feed 和 fetch 可以为任意的操作(arbitrary operation) 赋值或者从其中获取数据.</li>\n<li>图中的节点被称之为 <em>op</em> (operation 的缩写). 一个 op 获得 0 个或多个 <code>Tensor</code>, 执行计算,<br>产生 0 个或多个 <code>Tensor</code>. 每个 Tensor 是一个类型化的多维数组.</li>\n</ul>\n<h2 id=\"构建图（创造节点）\"><a href=\"#构建图（创造节点）\" class=\"headerlink\" title=\"构建图（创造节点）\"></a>构建图（创造节点）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个常量 op, 产生一个 1x2 矩阵. 这个 op 被作为一个节点</span></span><br><span class=\"line\"><span class=\"comment\"># 加到默认图中.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 构造器的返回值代表该常量 op 的返回值.</span></span><br><span class=\"line\">matrix1 = tf.constant([[<span class=\"number\">3.</span>, <span class=\"number\">3.</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建另外一个常量 op, 产生一个 2x1 矩阵.</span></span><br><span class=\"line\">matrix2 = tf.constant([[<span class=\"number\">2.</span>],[<span class=\"number\">2.</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个矩阵乘法 matmul op , 把 'matrix1' 和 'matrix2' 作为输入.</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值 'product' 代表矩阵乘法的结果.</span></span><br><span class=\"line\">product = tf.matmul(matrix1, matrix2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动图\"><a href=\"#启动图\" class=\"headerlink\" title=\"启动图\"></a>启动图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动默认图.</span></span><br><span class=\"line\">sess = tf.Session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用 sess 的 'run()' 方法来执行矩阵乘法 op, 传入 'product' 作为该方法的参数. </span></span><br><span class=\"line\"><span class=\"comment\"># 上面提到, 'product' 代表了矩阵乘法 op 的输出, 传入它是向方法表明, 我们希望取回</span></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘法 op 的输出.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 整个执行过程是自动化的, 会话负责传递 op 所需的全部输入. op 通常是并发执行的.</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># 函数调用 'run(product)' 触发了图中三个 op (两个常量 op 和一个矩阵乘法 op) 的执行.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值 'result' 是一个 numpy `ndarray` 对象.</span></span><br><span class=\"line\">result = sess.run(product)</span><br><span class=\"line\"><span class=\"keyword\">print</span> result</span><br><span class=\"line\"><span class=\"comment\"># ==&gt; [[ 12.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 任务完成, 关闭会话.</span></span><br><span class=\"line\">sess.close()</span><br></pre></td></tr></table></figure>\n<p>也可以：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">  result = sess.run([product])</span><br><span class=\"line\">  <span class=\"keyword\">print</span> result</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tensor\"><a href=\"#Tensor\" class=\"headerlink\" title=\"Tensor\"></a>Tensor</h2><p>TensorFlow 程序使用 tensor 数据结构来代表所有的数据, 计算图中, 操作间传递的数据都是 tensor.<br>可以把 TensorFlow tensor 看作是一个 n 维的数组或列表. 一个 tensor 包含一个静态类型 rank, 和<br>一个 shape. </p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量维护图执行过程中的状态信息。</p>\n<p>启动图后, 变量必须先经过<code>初始化</code> (init) op 初始化,</p>\n<p>必须增加一个<code>初始化</code> op 到图中：<code>init_op = tf.initialize_all_variables()</code></p>\n<p>启动图后首先运行 ‘init’ op：<code>sess.run(init_op)</code></p>\n<h2 id=\"Fetch\"><a href=\"#Fetch\" class=\"headerlink\" title=\"Fetch\"></a>Fetch</h2><p>为了取回操作的输出内容, 可以在使用 <code>Session</code> 对象的 <code>run()</code> 调用 执行图时, 传入一些 tensor来取回结果。</p>\n<h2 id=\"Feed\"><a href=\"#Feed\" class=\"headerlink\" title=\"Feed\"></a>Feed</h2><p>TensorFlow 还提供了 feed 机制, 该机制可以临时替代图中的任意操作中的 tensor,可以对图中任何操作提交补丁, 直接插入一个 tensor。</p>\n<p>最常见的用例是将某些特殊的操作指定为 “feed” 操作,标记的方法是使用 tf.placeholder() 为这些操作创建占位符. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input1 = tf.placeholder(tf.types.float32)</span><br><span class=\"line\">input2 = tf.placeholder(tf.types.float32)</span><br><span class=\"line\">output = tf.mul(input1, input2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">  <span class=\"keyword\">print</span> sess.run([output], feed_dict=&#123;input1:[<span class=\"number\">7.</span>], input2:[<span class=\"number\">2.</span>]&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>TensorFlow</strong>是一个采用<strong>数据流图（data flow graphs）</strong>，用于数值计算的开源软件库。</p>\n<p>下图就是一个<strong>数据流图</strong>。数据流图是一个用来描述数学计算的由<strong>“结点”（nodes）和“线”(edges)</strong>组成的<strong>有向图</strong>。</p>\n<p><strong>“节点”</strong> 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点或者是输出（push out）的终点，以及读取/写入持久变量（persistent variable）的终点。</p>\n<p><strong>“线”</strong>表示“节点”之间的输入/输出关系。这些数据“线”可以输运<strong>“张量”（tensor）</strong>，即大小可动态调整的多维数据数组。</p>\n<p>一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。</p>\n<p><img src=\"http://www.tensorfly.cn/images/tensors_flowing.gif\" alt=\"Tensors Flowing\"></p>\n<h1 id=\"开始学习\"><a href=\"#开始学习\" class=\"headerlink\" title=\"开始学习\"></a>开始学习</h1><p><a href=\"http://www.tensorfly.cn/tfdoc/get_started/basic_usage.html\" target=\"_blank\" rel=\"noopener\">官方基础知识链接</a></p>\n<ul>\n<li>使用图 (graph) 来表示计算任务.</li>\n<li>在被称之为 <code>会话 (Session)</code> 的上下文 (context) 中执行图.</li>\n<li>使用 tensor 表示数据.</li>\n<li>通过 <code>变量 (Variable)</code> 维护状态.</li>\n<li>使用 feed 和 fetch 可以为任意的操作(arbitrary operation) 赋值或者从其中获取数据.</li>\n<li>图中的节点被称之为 <em>op</em> (operation 的缩写). 一个 op 获得 0 个或多个 <code>Tensor</code>, 执行计算,<br>产生 0 个或多个 <code>Tensor</code>. 每个 Tensor 是一个类型化的多维数组.</li>\n</ul>\n<h2 id=\"构建图（创造节点）\"><a href=\"#构建图（创造节点）\" class=\"headerlink\" title=\"构建图（创造节点）\"></a>构建图（创造节点）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个常量 op, 产生一个 1x2 矩阵. 这个 op 被作为一个节点</span></span><br><span class=\"line\"><span class=\"comment\"># 加到默认图中.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 构造器的返回值代表该常量 op 的返回值.</span></span><br><span class=\"line\">matrix1 = tf.constant([[<span class=\"number\">3.</span>, <span class=\"number\">3.</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建另外一个常量 op, 产生一个 2x1 矩阵.</span></span><br><span class=\"line\">matrix2 = tf.constant([[<span class=\"number\">2.</span>],[<span class=\"number\">2.</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个矩阵乘法 matmul op , 把 'matrix1' 和 'matrix2' 作为输入.</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值 'product' 代表矩阵乘法的结果.</span></span><br><span class=\"line\">product = tf.matmul(matrix1, matrix2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动图\"><a href=\"#启动图\" class=\"headerlink\" title=\"启动图\"></a>启动图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动默认图.</span></span><br><span class=\"line\">sess = tf.Session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用 sess 的 'run()' 方法来执行矩阵乘法 op, 传入 'product' 作为该方法的参数. </span></span><br><span class=\"line\"><span class=\"comment\"># 上面提到, 'product' 代表了矩阵乘法 op 的输出, 传入它是向方法表明, 我们希望取回</span></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘法 op 的输出.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 整个执行过程是自动化的, 会话负责传递 op 所需的全部输入. op 通常是并发执行的.</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># 函数调用 'run(product)' 触发了图中三个 op (两个常量 op 和一个矩阵乘法 op) 的执行.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值 'result' 是一个 numpy `ndarray` 对象.</span></span><br><span class=\"line\">result = sess.run(product)</span><br><span class=\"line\"><span class=\"keyword\">print</span> result</span><br><span class=\"line\"><span class=\"comment\"># ==&gt; [[ 12.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 任务完成, 关闭会话.</span></span><br><span class=\"line\">sess.close()</span><br></pre></td></tr></table></figure>\n<p>也可以：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">  result = sess.run([product])</span><br><span class=\"line\">  <span class=\"keyword\">print</span> result</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tensor\"><a href=\"#Tensor\" class=\"headerlink\" title=\"Tensor\"></a>Tensor</h2><p>TensorFlow 程序使用 tensor 数据结构来代表所有的数据, 计算图中, 操作间传递的数据都是 tensor.<br>可以把 TensorFlow tensor 看作是一个 n 维的数组或列表. 一个 tensor 包含一个静态类型 rank, 和<br>一个 shape. </p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量维护图执行过程中的状态信息。</p>\n<p>启动图后, 变量必须先经过<code>初始化</code> (init) op 初始化,</p>\n<p>必须增加一个<code>初始化</code> op 到图中：<code>init_op = tf.initialize_all_variables()</code></p>\n<p>启动图后首先运行 ‘init’ op：<code>sess.run(init_op)</code></p>\n<h2 id=\"Fetch\"><a href=\"#Fetch\" class=\"headerlink\" title=\"Fetch\"></a>Fetch</h2><p>为了取回操作的输出内容, 可以在使用 <code>Session</code> 对象的 <code>run()</code> 调用 执行图时, 传入一些 tensor来取回结果。</p>\n<h2 id=\"Feed\"><a href=\"#Feed\" class=\"headerlink\" title=\"Feed\"></a>Feed</h2><p>TensorFlow 还提供了 feed 机制, 该机制可以临时替代图中的任意操作中的 tensor,可以对图中任何操作提交补丁, 直接插入一个 tensor。</p>\n<p>最常见的用例是将某些特殊的操作指定为 “feed” 操作,标记的方法是使用 tf.placeholder() 为这些操作创建占位符. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input1 = tf.placeholder(tf.types.float32)</span><br><span class=\"line\">input2 = tf.placeholder(tf.types.float32)</span><br><span class=\"line\">output = tf.mul(input1, input2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">  <span class=\"keyword\">print</span> sess.run([output], feed_dict=&#123;input1:[<span class=\"number\">7.</span>], input2:[<span class=\"number\">2.</span>]&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"TensorFlow训练MNIST报错ResourceExhaustedError","date":"2018-04-01T04:35:44.000Z","_content":"\n\n\n在最后测试的一步报错：\n\n```shell\nResourceExhaustedError (see above for traceback): OOM when allocating tensor\n```\n\n搜索了一下才知道是GPU显存不足（emmmm....）造成的，可以把最后测试的那行代码改为将测试集分成几个小部分分别测试最后再求精度的平均值：\n\n```python\naccuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))\ngood = 0\ntotal = 0\nfor i in range(10):\n    testSet = mnist.test.next_batch(50)\n    good += accuracy_sum.eval(feed_dict={ x: testSet[0], y_: testSet[1], keep_prob: 1.0})\n    total += testSet[0].shape[0]\nprint (\"test accuracy %g\"%(good/total))\n```\n\n","source":"_posts/TensorFlow训练MNIST报错ResourceExhaustedError.md","raw":"---\ntitle: TensorFlow训练MNIST报错ResourceExhaustedError\ndate: 2018-04-01 12:35:44\ncategories: \n- deep learning\ntags:\n- MNIST\n- TensorFlow\n---\n\n\n\n在最后测试的一步报错：\n\n```shell\nResourceExhaustedError (see above for traceback): OOM when allocating tensor\n```\n\n搜索了一下才知道是GPU显存不足（emmmm....）造成的，可以把最后测试的那行代码改为将测试集分成几个小部分分别测试最后再求精度的平均值：\n\n```python\naccuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))\ngood = 0\ntotal = 0\nfor i in range(10):\n    testSet = mnist.test.next_batch(50)\n    good += accuracy_sum.eval(feed_dict={ x: testSet[0], y_: testSet[1], keep_prob: 1.0})\n    total += testSet[0].shape[0]\nprint (\"test accuracy %g\"%(good/total))\n```\n\n","slug":"TensorFlow训练MNIST报错ResourceExhaustedError","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b07000ocragfp7ck2dy","content":"<p>在最后测试的一步报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResourceExhaustedError (see above for traceback): OOM when allocating tensor</span><br></pre></td></tr></table></figure>\n<p>搜索了一下才知道是GPU显存不足（emmmm….）造成的，可以把最后测试的那行代码改为将测试集分成几个小部分分别测试最后再求精度的平均值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))</span><br><span class=\"line\">good = <span class=\"number\">0</span></span><br><span class=\"line\">total = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    testSet = mnist.test.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">    good += accuracy_sum.eval(feed_dict=&#123; x: testSet[<span class=\"number\">0</span>], y_: testSet[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">    total += testSet[<span class=\"number\">0</span>].shape[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"test accuracy %g\"</span>%(good/total))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在最后测试的一步报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResourceExhaustedError (see above for traceback): OOM when allocating tensor</span><br></pre></td></tr></table></figure>\n<p>搜索了一下才知道是GPU显存不足（emmmm….）造成的，可以把最后测试的那行代码改为将测试集分成几个小部分分别测试最后再求精度的平均值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))</span><br><span class=\"line\">good = <span class=\"number\">0</span></span><br><span class=\"line\">total = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    testSet = mnist.test.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">    good += accuracy_sum.eval(feed_dict=&#123; x: testSet[<span class=\"number\">0</span>], y_: testSet[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">    total += testSet[<span class=\"number\">0</span>].shape[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"test accuracy %g\"</span>%(good/total))</span><br></pre></td></tr></table></figure>\n"},{"title":"PAT刷题记录","toc":true,"date":"2018-07-19T14:54:17.000Z","_content":"\n\n\nOJ：[牛客网](https://www.nowcoder.com/pat)\n\n---\n\n\n\n## 1001 A+B Format (20)\n\n**题目描述**\n\n> Calculate a + b and output the sum in standard format -- that is, the digits must be separated into groups of three by commas (unless there are less than four digits).\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a pair of integers a and b where -1000000 <= a, b <= 1000000.  The numbers are separated by a space.\n\n**输出描述**\n\n> For each test case, you should output the sum of a and b in one line.  The sum must be written in the standard format.\n\n**输入例子**\n\n> -1000000 9\n\n**输出例子**\n\n> -999,991\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int digit[10];\n    for (int i = 0; i < 10; i++) digit[i] = -1;\n    int a,b,re;\n    cin >> a >> b;\n    re = a + b;\n    if (re < 0) {\n        cout<<'-';\n        re = -re;\n    }\n    int i = 0;\n    while(re) {\n        digit[i] = (re%10);\n        re/=10;\n        i++;\n    }\n    for (int k = i-1; k >=0; k--) {\n        cout<<digit[k];\n        if (k%3 == 0 && k>0) cout<<',';\n    }\n    return 0;\n}\n```\n\n\n\n## 1002 A+B for Polynomials (25)\n\n**题目描述**\n\n> This time, you are supposed to find A+B where A and B are two polynomials.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:\n> K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively.  It is given that 1 <= K <= 10，0 <= NK < ... < N2 < N1 <=1000.\n\n**输出描述**\n\n> For each test case you should output the sum of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  **Please be accurate to 1 decimal place.**\n\n**输入例子**\n\n> 2 1 2.4 0 3.2\n> 2 2 1.5 1 0.5\n\n**输出例子**\n\n> 3 2 1.5 1 2.9 0 3.2\n\n**实现代码**\n\n注意保留小数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\nstruct item\n{\n\tint n;\n\tfloat value;\n\titem(int a, float b) {n=a,value=b;}\n};\n\nint main() {\n\tvector<item> polynomials;\n\tint k;\n\n\tcin>>k;\n\tint tmp_n;\n\tfloat tmp_value;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tpolynomials.push_back(item(tmp_n,tmp_value));\n\t}\n\n\tcin>>k;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tbool hasItem = false;\n\t\tfor (int i = 0; i < polynomials.size(); i++) {\n\t\t\tif (polynomials[i].n == tmp_n) {\n\t\t\t\thasItem = true;\n\t\t\t\tpolynomials[i].value+=tmp_value;\n\t\t\t\tif (polynomials[i].value == 0)\n\t\t\t\t\tpolynomials.erase(polynomials.begin()+i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\t\n\t\tif (!hasItem) polynomials.push_back(item(tmp_n,tmp_value));\t\n\t}\n\n\tfor (int k = 0; k < polynomials.size(); k++) {\n\t\tfor (int i = 0; i < polynomials.size()-1; i++) {\n\t\t\tif (polynomials[i].n < polynomials[i+1].n) {\n\t\t\t\titem tmp_item = polynomials[i];\n\t\t\t\tpolynomials[i] = polynomials[i+1];\n\t\t\t\tpolynomials[i+1] = tmp_item;\n\t\t\t}\n\t\t}\n\t}\n\n\tcout<<polynomials.size();\n\tfor (int i = 0; i < polynomials.size(); i++)\n\t\tprintf(\" %d %.1f\", polynomials[i].n, polynomials[i].value);\n\n\treturn 0;\n}\n```\n\n\n\n## 1003 Emergency (25)\n\n**题目描述**\n\n> As an emergency rescue team leader of a city, you are given a special map of your country.  The map shows several scattered cities connected by some roads.  Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map.  When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.\n\n**输入描述**\n\n> Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (<= 500) - the number of cities (and the cities are numbered from 0 to N-1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively.  The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city.  Then M lines follow, each describes a road with three integers c1, c2 and L, which are the pair of cities connected by a road and the length of that road, respectively.  \n> It is guaranteed that there exists at least one path from C1 to C2.\n\n**输出描述**\n\n> For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2, and the maximum amount of rescue teams you can possibly gather.\n>\n> All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.\n\n**输入例子**\n\n> 5 6 0 2\n> 1 2 1 5 3\n> 0 1 1\n> 0 2 2\n> 0 3 1\n> 1 2 1\n> 2 4 1\n> 3 4 1\n\n**输出例子**\n\n> 2 4\n\n**实现代码**\n\ndijkstra最短路\n\n```c++\n#include <iostream>\n#include <vector>\n#include <climits>\nusing namespace std;\n\nstruct road\n{\n\tint endCity;\n\tint length;\n\troad(int e, int l) {endCity = e, length = l;}\n};\n\n\nint main() {\n\tint n,m,c1,c2;\n\tcin>>n>>m>>c1>>c2;\n\tvector<int> teamsCount;\n\n\tint tmp1,tmp2,tmp3;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>tmp1;\n\t\tteamsCount.push_back(tmp1);\n\t}\n\n\tvector<vector<road> > roads(n);\n\tfor (int i = 0; i < m; i++) {\n\t\tcin>>tmp1>>tmp2>>tmp3;\n\t\troads[tmp1].push_back(road(tmp2,tmp3));\n\t\troads[tmp2].push_back(road(tmp1,tmp3));\n\t}\n\n\tvector<int> maxTeams(n);\n\tfor (int i = 0; i < n; i++) maxTeams[i] = 0;\n\tmaxTeams[c1] = teamsCount[c1];\n\n\tvector<int> minLen(n);\n\tfor (int i = 0; i < n; i++) minLen[i] = INT_MAX;\n\tminLen[c1] = 0;\n\n\tint currentCity = c1;\n\tvector<int> minLenRoadCount(n);\n\tfor (int i = 0; i < n; i++) minLenRoadCount[i] = 1;\n\n\tvector<bool> visited(n);\n\tfor (int i = 0; i < n; i++) visited[i] = false;\n\tvisited[c1] = true;\n\twhile (currentCity != c2) {\n\t\tint len = roads[currentCity].size();\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tif (visited[roads[currentCity][i].endCity]) continue;\n\t\t\tint endCity = roads[currentCity][i].endCity;\n\t\t\tint length = roads[currentCity][i].length;\n\t\t\tif (minLen[endCity] > minLen[currentCity] + length) {\n\t\t\t\tminLen[endCity] = minLen[currentCity] + length;\n\t\t\t\tminLenRoadCount[endCity] = 1;\n\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];\n\t\t\t} else if (minLen[endCity] == minLen[currentCity] + length) {\n\t\t\t\tminLenRoadCount[endCity]++;\n\t\t\t\tif (maxTeams[endCity] < maxTeams[currentCity] + teamsCount[endCity])\n\t\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];\n\t\t\t}\n\t\t}\n\n\t\tint min = INT_MAX;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (visited[i]) continue;\n\t\t\tif (minLen[i] < min) {\n\t\t\t\tmin = minLen[i];\n\t\t\t\tcurrentCity = i;\n\t\t\t}\n\t\t}\n\t\tvisited[currentCity] = true;\n\t}\n\n\tcout<<minLenRoadCount[c2]<<' '<<maxTeams[c2];\n\n\treturn 0;\n}\n```\n\n\n\n## 1004 Counting Leaves (30)\n\n**题目描述**\n\n> A family hierarchy is usually presented by a pedigree tree.  Your job is to count those family members who have no child.\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a line containing 0 < N < 100, the number of nodes in a tree, and M (< N), the number of non-leaf nodes.  Then M lines follow, each in the format:\n>\n> ID K ID[1] ID[2] ... ID[K]\n>\n> where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID's of its children.  For the sake of simplicity, let us fix the root ID to be 01.\n\n**输出描述**\n\n> For each test case, you are supposed to count those family members who have no child **for every seniority level** starting from the root.  The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.\n> The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child.  Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node.  Then we should output \"0 1\" in a line.\n\n**输入例子**\n\n> 2 1\n> 01 1 02\n\n**输出例子**\n\n> 0 1\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\n#define MAX_NODES 100\n\nstruct node\n{\n\tint id = -1;\n\tint childs_count = 0;\n\tvector<int> childs;\n};\n\nint main() {\n\tint n,m;\n\tcin>>n>>m;\n\tnode nodes[MAX_NODES];\n\n\tint id,k,tmp;\n\twhile (m--) {\n\t\tcin>>id>>k;\n\t\tnodes[id].id = id;\n\t\tnodes[id].childs_count = k;\n\t\twhile (k--) {\n\t\t\tcin>>tmp;\n\t\t\t(nodes[id].childs).push_back(tmp);\n\t\t}\n\t}\n\n\tvector<int> this_level, next_level;\n\tthis_level.push_back(1);\n\twhile (1) {\n\t\tint count_output = 0;\n\t\tfor (int i = 0; i < this_level.size(); i++) {\n\t\t\tif (nodes[this_level[i]].childs_count == 0) count_output++;\n\t\t\telse next_level.insert(next_level.begin(),nodes[this_level[i]].childs.begin(),nodes[this_level[i]].childs.end());\n\t\t}\n\t\tcout<<count_output;\n\t\tif (next_level.empty()) break;\n\t\tcout<<' ';\n\t\tthis_level = next_level;\n\t\tnext_level.clear();\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1005 Spell It Right (20)\n\n**题目描述**\n\n> Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies one line which contains an N (<= 10^100).\n\n**输出描述**\n\n> For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.\n\n**输入例子**\n\n> 12345\n\n**输出例子**\n\n> one five\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string n;\n    cin>>n;\n    int len = n.size();\n    int re = 0;\n    for (int i = 0; i < len; i++) re+=(n[i]-'0');\n    string english[10] = {\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\"};\n    int digit[100], re_len = 0;\n    while (re) {\n        digit[re_len] = (re%10);\n        re/=10;\n        re_len++;\n    }\n    for (int i = re_len-1; i >= 0; i--) {\n        cout<<english[digit[i]];\n        if (i != 0) cout<<' ';\n    }\n    return 0;\n}\n```\n\n\n\n## 1006 Sign In and Sign Out (25)\n\n**题目描述**\n\n> At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door.  Given the records of signing in's and out's, you are supposed to find the ones who have unlocked and locked the door on that day.\n\n**输入描述**\n\n> Each input file contains one test case. Each case contains the records for one day.  The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:\n>\n> ID_number Sign_in_time Sign_out_time\n>\n> where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.\n\n**输出描述**\n\n> For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day.  The two ID numbers must be separated by one space.\n> Note:  It is guaranteed that the records are consistent.  That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.\n\n**输入例子**\n\n> 3\n> CS301111 15:30:28 17:00:10\n> SC3021234 08:00:00 11:25:25\n> CS301133 21:45:00 21:58:40\n\n**输出例子**\n\n> SC3021234 CS301133\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <string>\nusing namespace std;\n\nbool a_larger_than_b(string a, string b) {\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] < b[i]) return false;\n        if (a[i] > b[i]) return true;\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    cin>>n;\n    string id,in,out;\n    string result_in_id, result_in_time, result_out_id, result_out_time;\n    cin>>id>>in>>out;\n    result_in_id = result_out_id = id;\n    result_in_time = in;\n    result_out_time = out;\n    n--;\n    while (n--) {\n        cin>>id>>in>>out;\n        if (a_larger_than_b(result_in_time,in)) {\n            result_in_id = id;\n            result_in_time = in;\n        }\n        if (a_larger_than_b(out,result_out_time)) {\n            result_out_id = id;\n            result_out_time = out;\n        }\n    }\n    cout<<result_in_id<<' '<<result_out_id;\n    return 0;\n}\n```\n\n\n\n## 1007 Maximum Subsequence Sum (25)\n\n**题目描述**\n\n> Given a sequence of K integers { N1\n> , N2\n> , ..., NK\n>  }.  A continuous subsequence is defined to be { Ni\n> , Ni+1\n> , ..., Nj\n>  } where 1 <= i <= j <= K.  The *Maximum Subsequence*\n>  is the continuous subsequence which has the largest sum of its\n> elements.  For example, given sequence { -2, 11, -4, 13, -5, -2 }, its\n> maximum subsequence is { 11, -4, 13 } with the largest sum being 20.\n>\n> Now you are supposed to find the largest sum, together with the first\n> and the last numbers of the maximum subsequence.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies two lines.  The first line contains a positive integer K (<= 10000).  The second line contains K numbers, separated by a space.\n\n**输出描述**\n\n> For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line.  In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case).  If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.\n\n**输入例子**\n\n> 10\n> -10 1 2 3 4 -5 -23 3 7 -21\n\n**输出例子**\n\n> 10 1 4\n\n**实现代码**\n\n<u>和为负的子序列一定不会是最大和子序列的开头。</u>\n\n当当前和小于0时，使用临时\"first number\"记录下一个数，\n\n更新最大和时，当前数为“last number”， 临时“first number”中存储的值为“first number”的值。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nint main() {\n\tint n;\n\tcin>>n;\n\tint* nums = new int[n];\n\tbool allNegative = true;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>nums[i];\n\t\tif (nums[i] >= 0) allNegative = false;\n\t}\n\n\tif (allNegative) {\n\t\tcout<<0<<' '<<nums[0]<<' '<<nums[n-1];\n\t} else {\n\t\tint maxSum = 0, currentSum = 0;\n\t\tint firstNum = nums[0], lastNum = nums[0];\n\t\tint firstNumCurrent = firstNum;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcurrentSum+=nums[i];\n\t\t\tif (currentSum < 0) {\n\t\t\t\tcurrentSum = 0;\n\t\t\t\tfirstNumCurrent = nums[i+1];\n\t\t\t} else if (currentSum > maxSum) {\n\t\t\t\tmaxSum = currentSum;\n\t\t\t\tfirstNum = firstNumCurrent;\n\t\t\t\tlastNum = nums[i];\n\t\t\t}\n\t\t}\n\t\tcout<<maxSum<<' '<<firstNum<<' '<<lastNum;\n\t}\n\n\tdelete nums;\n\n\treturn 0;\n}\n```\n\n\n\n## 1008 Elevator (20)\n\n**题目描述**\n\n> The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.\n> For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.\n\n**输入描述**\n\n> Each input file contains one test case. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100.\n\n**输出描述**\n\n> For each test case, print the total time on a single line.\n\n**输入例子**\n\n> 3 2 3 1\n\n**输出例子**\n\n> 41\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 0, b, n, re = 0;\n    cin >> n;\n    while (n--) {\n        cin >> b;\n        if (b > a) {\n            re+=((b-a)*6);\n        } else {\n            re+=((a-b)*4);\n        }\n        re+=5;\n        a = b;\n    }\n    cout<<re;\n    return 0;\n}\n```\n\n\n\n## 1009 Product of Polynomials (25)\n\n**题目描述**\n\n> This time, you are supposed to find A*B where A and B are two polynomials.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:\n> K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively.  It is given that 1 <= K <= 10, 0 <= NK < ... < N2 < N1 <=1000.\n\n**输出描述**\n\n> For each test case you should output the product of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  Please be accurate up to 1 decimal place.\n\n**输入例子**\n\n> 2 1 2.4 0 3.2\n> 2 2 1.5 1 0.5\n\n**输出例子**\n\n> 3 3 3.6 2 6.0 1 1.6\n\n**实现代码**\n\n把[1002 A+B for Polynomials (25)](#1002-A-B-for-Polynomials-25)稍微改一下就好。\n\n使用`float`虽然算出来明明是对的但是过不了牛客的测试，全部换成`double`就好了，不知道是什么问题。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\nstruct item\n{\n\tint n;\n\tdouble value;\n\titem(int a, double b) {n=a,value=b;}\n};\n\nint main() {\n\tvector<item> polynomials, result;\n\tint k;\n\n\tcin>>k;\n\tint tmp_n;\n\tdouble tmp_value;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tpolynomials.push_back(item(tmp_n,tmp_value));\n\t}\n\n\tcin>>k;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tfor (int k = 0; k < polynomials.size(); k++) {\n\t\t\tbool hasItem = false;\n\t\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\t\tif (result[i].n == tmp_n+polynomials[k].n) {\n\t\t\t\t\thasItem = true;\n\t\t\t\t\tresult[i].value+=(tmp_value*polynomials[k].value);\n\t\t\t\t\tif (result[i].value == 0)\n\t\t\t\t\t\tresult.erase(result.begin()+i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\tif (!hasItem) result.push_back(item(tmp_n+polynomials[k].n,tmp_value*polynomials[k].value));\n\t\t}\n\t}\n\n\tfor (int k = 0; k < result.size(); k++) {\n\t\tfor (int i = 0; i < result.size()-1; i++) {\n\t\t\tif (result[i].n < result[i+1].n) {\n\t\t\t\titem tmp_item = result[i];\n\t\t\t\tresult[i] = result[i+1];\n\t\t\t\tresult[i+1] = tmp_item;\n\t\t\t}\n\t\t}\n\t}\n\n\tcout<<result.size();\n\tfor (int i = 0; i < result.size(); i++)\n\t\tprintf(\" %d %.1f\", result[i].n, result[i].value);\n\n\treturn 0;\n}\n```\n\n\n\n## 1015 Reversible Primes (20)\n\n**题目描述**\n\n> A *reversible prime*\n>  in any number system is a prime whose \"reverse\" in that\n> number system is also a prime. For example in the decimal system 73 is a\n> reversible prime because its reverse 37 is also a prime.\n>\n> \n>\n> Now given any two positive integers N (< 105\n> ) and D (1 < D <= 10), you are supposed to tell if N is a\n> reversible prime with radix D.\n\n**输入描述**\n\n> The input file consists of several test cases.  Each case occupies a line which contains two integers N and D.  The input is finished by a negative N.\n\n**输出描述**\n\n> For each test case, print in one line \"Yes\" if N is a reversible prime with radix D, or \"No\" if not.\n\n**输入例子**\n\n> 73 10\n> 23 2\n> 23 10\n> -2\n\n**输出例子**\n\n> Yes\n> Yes\n> No\n\n**实现代码**\n\n求N以及N在D进制下反转后是否均为质数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint reverseWithRadix(int n, int d) {\n\tvector<int> remainers;\n\twhile (n > 0) {\n\t\tremainers.push_back(n%d);\n\t\tn/=d;\n\t}\n\tint re = 0;\n\tint bit_count = remainers.size();\n\tfor (int i = 0; i < bit_count; i++)\n\t\tre+=(pow(d,bit_count-i-1)*remainers[i]);\n\treturn re;\n}\n\nbool isPrime(int n) {\n\tif (n == 1) return false;\n\tif (n < 4) return true;\n\tif (n % 2 == 0) return false;\n\tint sqrt_n = sqrt(n) + 1;\n\tfor (int i = 3; i <= sqrt_n; i+=2) {\n\t\tif (n % i == 0) return false;\n\t}\n\treturn true;\n}\n\nint main() {\n\tint n,d;\n\twhile (1) {\n\t\tcin>>n;\n\t\tif (n < 0) break;\n\t\tcin>>d;\n\t\tif (isPrime(n) && isPrime(reverseWithRadix(n,d))) cout<<\"Yes\"<<endl;\n\t\telse cout<<\"No\"<<endl;\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n## 1020 Tree Traversals (25)\n\n**题目描述**\n\n> Suppose that all the keys in a binary tree are distinct positive integers.  Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line gives a positive integer N (<=30), the total number of nodes in the binary tree.  The second line gives the **postorder** sequence and the third line gives the **inorder** sequence.  All the numbers in a line are separated by a space.\n\n**输出描述**\n\n> For each test case, print in one line the level order traversal sequence of the corresponding binary tree.  All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> 7\n> 2 3 1 5 7 6 4\n> 1 2 3 4 5 6 7\n\n**输出例子**\n\n> 4 1 6 3 5 7 2\n\npostorder: 后序遍历\n\ninorder: 中序遍历\n\nlevel order: 层序遍历（从根开始,依次向下,对于每一层从左向右遍历）\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nstruct node\n{\n\tnode* left;\n\tnode* right;\n\tint value;\n};\n\n\nnode* binaryTreeRoot(int* postorder, int* inorder, int len) {\n\tif (len <= 0) return NULL;\n\n\tnode* root = new node;\n\troot->value = *(postorder+len-1);\n\n\tint pos = 0;\n\tfor (; pos < len; pos++)\n\t\tif (*(inorder+pos) == root->value) break;\n\n\troot->left = binaryTreeRoot(postorder, inorder, pos);\n\tint rightLen = len - pos - 1;\n\troot->right = binaryTreeRoot(postorder+pos, inorder+pos+1, rightLen);\n\n\treturn root;\n}\n\nvoid deleteNodes(node* root) {\n\tif (root == NULL) return;\n\tdeleteNodes(root->left);\n\tdeleteNodes(root->right);\n\tdelete root;\n}\n\nint main() {\n\tint n;\n\tcin>>n;\n\tint* postorderNodes = new int[n];\n\tint* inorderNodes = new int[n];\n\tfor (int i = 0; i < n; i++) cin>>postorderNodes[i];\n\tfor (int i = 0; i < n; i++) cin>>inorderNodes[i];\n\n\tnode* root = binaryTreeRoot(postorderNodes, inorderNodes, n);\n\tif (!root) return 0;\n\n\tqueue<node*> levelNodes;\n\tlevelNodes.push(root);\n\twhile (1) {\n\t\tnode* tmp = levelNodes.front();\n\t\tif (tmp->left) levelNodes.push(tmp->left);\n\t\tif (tmp->right) levelNodes.push(tmp->right);\n\t\tcout<<tmp->value;\n\t\tlevelNodes.pop();\n\t\tif (!levelNodes.empty()) cout<<' ';\n\t\telse break;\n\t}\n\n\tdeleteNodes(root);\n\tdelete postorderNodes;\n\tdelete inorderNodes;\n\n\treturn 0;\n}\n```\n\n\n\n## 1023 Have Fun with Numbers (20)\n\n**题目描述**\n\n> Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication.  Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation.  Check to see the result if we double it again!\n>\n> Now you are suppose to check if there are more numbers with this property.  That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains one positive integer with no more than 20 digits.\n\n**输出描述**\n\n> For each test case, first print in a line \"Yes\" if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or \"No\" if not.  Then in the next line, print the doubled number.\n\n**输入例子**\n\n> 1234567899\n\n**输出例子**\n\n> Yes\n> 2469135798\n\n**实现代码**\n\n若双倍后多一位则为No;\n\n使用`digit_count[i]`保存数字`i`（0-9）的个数，\n\n再减去双倍后各个数字的个数，若每一个`digit_count[i]`均为0则为Yes,否则为No。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\n#include <stack>\n#include <climits>\nusing namespace std;\n\n\n\nint main() {\n\tint digit_count[10];\n\tfor (int i = 0; i < 10; i++) digit_count[i] = 0;\n\tstring s;\n\tcin>>s;\n\tint k = s.size();\n\tvector<int> digits;\n\tfor (int i = 0; i < k; i++) {\n\t\tint digit = s[i]-'0';\n\t\tdigits.push_back(digit);\n\t\tdigit_count[digit]++;\n\t}\n\tint carry = 0;\n\tfor (int i = k-1; i >= 0; i--) {\n\t\tdigits[i] = 2*digits[i] + carry;\n\t\tcarry = digits[i] / 10;\n\t\tdigits[i] %= 10;\n\t\tdigit_count[digits[i]]--;\n\t}\n\tif (carry) {\n\t\tcout<<\"No\\n\"<<carry;\n\t\tfor (int i = 0; i < k; i++) cout<<digits[i];\n\t\treturn 0;\n\t}\n\tbool result = true;\n\tfor (int i = 0; i < 10; i++)\n\t\tif (digit_count[i] != 0) {\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\tif (result) cout<<\"Yes\\n\";\n\telse cout<<\"No\\n\";\n\tfor (int i = 0; i < k; i++) cout<<digits[i];\n\n\treturn 0;\n}\n\n```\n\n\n\n\n\n## 1027 Colors in Mars (20)\n\n**题目描述**\n\n> People in Mars represent the colors in their computers in a similar way as the Earth people.  That is, a color is represented by a 6-digit number, where the first 2 digits are for Red, the middle 2 digits for Green, and the last 2 digits  for Blue.  The only difference is that they use radix 13 (0-9 and A-C) instead of 16.  Now given a color in three decimal numbers (each between 0 and 168), you are supposed to output their Mars RGB values.\n\n**输入描述**\n\n> Each input file contains one test case which occupies a line containing the three decimal color values.\n\n**输出描述**\n\n> For each test case you should output the Mars RGB value in the following format: first output \"#\", then followed by a 6-digit number where all the English characters must be upper-cased.  If a single color is only 1-digit long, you must print a \"0\" to the left.\n\n**输入例子**\n\n> 15 43 71\n\n**输出例子**\n\n> \\#123456\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout<<'#';\n    int n;\n    for (int i = 0; i < 3; i++) {\n        cin>>n;\n        int tmp = n/13;\n        if (tmp > 9) cout<<char((tmp-10)+'A');\n        else cout<<tmp;\n        tmp = n%13;\n        if (tmp > 9) cout<<char((tmp-10)+'A');\n        else cout<<tmp;\n    }\n    return 0;\n}\n```\n\n\n\n## 1028 List Sorting (25)\n\n**题目描述**\n\n> Excel can sort records according to any column.  Now you are supposed to imitate this function.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains two integers N (<=100000) and C, where N is the number of records and C is the column that you are supposed to sort the records with.  Then N lines follow, each contains a record of a student.  A student's record consists of his or her distinct ID (a 6-digit number), name (a string with no more than 8 characters without space), and grade (an integer between 0 and 100, inclusive).\n\n**输出描述**\n\n> For each test case, output the sorting result in N lines.  That is, if C = 1 then the records must be sorted in increasing order according to ID's; if C = 2 then the records must be sorted in non-decreasing order according to names; and if C = 3 then the records must be sorted in non-decreasing order according to grades.  **If there are several students who have the same name or grade, they must be sorted according to their ID's in increasing order.**\n\n**输入例子**\n\n> 3 1\n> 000007 James 85\n> 000010 Amy 90\n> 000001 Zoe 60\n\n**输出例子**\n\n> 000001 Zoe 60\n> 000007 James 85\n> 000010 Amy 90\n\n**实现代码**\n\n利用结构体，使用sort函数排序。\n\n```c++\n#include <iostream>\n#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\nusing namespace std;\n\nstruct student\n{\n\tstring id;\n\tstring name;\n\tint grade;\n\tstudent(string i, string n, int g) {id = i, name = n, grade = g;}\n};\n\nbool cmp1(student a, student b) {\n\treturn a.id < b.id;\n}\n\nbool cmp2(student a, student b) {\n\treturn (a.name == b.name)?(a.id < b.id):(a.name < b.name);\n}\n\nbool cmp3(student a, student b) {\n\treturn (a.grade == b.grade)?(a.id < b.id):(a.grade < b.grade);\n}\n\nint main() {\n\tint n,c;\n\tcin>>n>>c;\n\tvector<student> students;\n\n\tstring id,name;\n\tint grade;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>id>>name>>grade;\n\t\tstudents.push_back(student(id,name,grade));\n\t}\n\n\tif (c == 1) sort(students.begin(),students.end(),cmp1);\n\telse if (c == 2) sort(students.begin(),students.end(),cmp2);\n\telse sort(students.begin(),students.end(),cmp3);\n\n\tif (n > 0) cout<<students[0].id<<' '<<students[0].name<<' '<<students[0].grade;\n\tfor (int i = 1; i < n; i++) {\n\t\tcout<<\"\\n\"<<students[i].id<<' '<<students[i].name<<' '<<students[i].grade;\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1029 Median (25)\n\n**题目描述**\n\n> Given an increasing sequence S of N integers, the *median* is the number at the middle position.  For example, the median of S1={11, 12, 13, 14} is 12, and the median of S2={9, 10, 15, 16, 17} is 15.  The median of two sequences is defined to be the median of the nondecreasing sequence which contains all the elements of both sequences.  For example, the median of S1 and S2 is 13.\n> Given two increasing sequences of integers, you are asked to find their median.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case occupies 2 lines, each gives the information of a sequence.  For each sequence, the first positive integer N (<=1000000) is the size of that sequence.  Then N integers follow, separated by a space.  It is guaranteed that all the integers are in the range of **long int**.\n\n**输出描述**\n\n> For each test case you should output the median of the two given sequences in a line.\n\n**输入例子**\n\n> 4 11 12 13 14\n> 5 9 10 15 16 17\n\n**输出例子**\n\n> 13\n\n**实现代码**\n\n用两个数组存储两组数据，每组数据一个pos，比较两个pos出的数值大小，较小值的pos向后移，直到找到中位数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nint main() {\n\tint m,n;\n\tcin>>m;\n\tint* firstSequence = new int[m];\n\tfor (int i = 0; i < m; i++) cin>>firstSequence[i];\n\tcin>>n;\n\tint* secondSequence = new int[n];\n\tfor (int i = 0; i < n; i++) cin>>secondSequence[i];\n\n\tint firstPos = 0, secondPos = 0;\n\tfor (int i = int((m+n+1)/2); i > 0; i--) {\n\t\tif (i == 1) {\n\t\t\tif (firstPos == m) cout<<secondSequence[secondPos];\n\t\t\telse if (secondPos == n) cout<<firstSequence[firstPos];\n\t\t\telse if (firstSequence[firstPos] < secondSequence[secondPos]) cout<<firstSequence[firstPos];\n\t\t\telse cout<<secondSequence[secondPos];\n\t\t} else {\n\t\t\tif (firstPos == m) secondPos++;\n\t\t\telse if (secondPos == n) firstPos++;\n\t\t\telse if (firstSequence[firstPos] < secondSequence[secondPos]) firstPos++;\n\t\t\telse secondPos++;\n\t\t}\n\t}\n\n\tdelete firstSequence;\n\tdelete secondSequence;\n\n\treturn 0;\n}\n```\n\n\n\n## 1030 Travel Plan (30)\n\n**题目描述**\n\n> A traveler's map gives the distances between cities along the highways, together with the cost of each highway. \n>  Now you are supposed to write a program to help a traveler to decide the shortest path between his/her starting city and the destination.\n>  If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.\n>\n>  DECLARE: The test data in PAT is wrong,we strengthened the test data.If the same code got passed in pat,it may not be able to get passed in NOWCODER,please check your code.(This means that our test data is no problem,I guarantee.)\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a line containing 4 positive integers N, M, S, and D, where N (<=500) is the number of cities (and hence the cities are numbered from 0 to N-1); M is the number of highways; S and D are the starting and the destination cities, respectively. Then M lines follow, each provides the information of a highway, in the format:\n>  City1 City2 Distance Cost\n>\n>  where the numbers are all integers no more than 500, and are separated by a space.\n\n**输出描述**\n\n> For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.\n\n**输入例子**\n\n> 4 5 0 3\n>\n> 0 1 1 20\n>\n> 1 3 2 30\n>\n> 0 3 4 10\n>\n> 0 2 2 20\n>\n> 2 3 1 20\n\n**输出例子**\n\n> 0 2 3 3 40\n\n**实现代码**\n\n最短路问题，用Dijkstra（迪杰斯特拉）算法解即可。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\n#include <stack>\n#include <climits>\nusing namespace std;\n\nstruct highway\n{\n\tint endCity;\n\tint distance;\n\tint cost;\n\thighway(int e, int d, int c) {endCity=e,distance=d,cost=c;}\n};\n\n\nint main() {\n\t// N为城市数，M为公路数，S为开始城市，D为结束城市\n\tint N,M,S,D;\n\tcin>>N>>M>>S>>D;\n\n\t// highways(i) 为与城市i相连的所有公路\n\tvector<vector<highway> > highways(N);\n\tbool* visited = new bool[N];\n\tint* distance = new int[N];\n\tint* cost = new int[N];\n\tint* lastCity = new int[N];\n\tfor (int i = 0; i < N; i++) \n\t\tvisited[i] = false, distance[i] = cost[i] = INT_MAX;\n\n\t// 读入数据，更新highways\n\tint tmp_city_1, tmp_city_2, tmp_distance, tmp_cost;\n\twhile (M--) {\n\t\tcin>>tmp_city_1>>tmp_city_2>>tmp_distance>>tmp_cost;\n\t\thighways[tmp_city_1].push_back(highway(tmp_city_2,tmp_distance,tmp_cost));\n\t\thighways[tmp_city_2].push_back(highway(tmp_city_1,tmp_distance,tmp_cost));\n\t}\n\n\t// dijkstra\n\tint currentCity = S;\n\tvisited[S] = true, distance[S] = cost[S] = 0, lastCity[S] = S;\n\twhile (currentCity != D) {\n\t\tfor (int i = 0; i < highways[currentCity].size(); i++) {\n\t\t\tint tmp_endCity = highways[currentCity][i].endCity, \n\t\t\t\ttmp_distance = highways[currentCity][i].distance,\n\t\t\t\ttmp_cost = highways[currentCity][i].cost;\t\t\t\t\n\t\t\tif (visited[tmp_endCity]) continue;\n\t\t\tif (distance[currentCity] + tmp_distance < distance[tmp_endCity] ||\n\t\t\t\t(distance[currentCity] + tmp_distance == distance[tmp_endCity] && \n\t\t\t\t cost[currentCity] + tmp_cost < cost[tmp_endCity])) {\n\t\t\t\tdistance[tmp_endCity] = distance[currentCity] + tmp_distance;\n\t\t\t\tcost[tmp_endCity] = cost[currentCity] + tmp_cost;\n\t\t\t\tlastCity[tmp_endCity] = currentCity;\n\t\t\t}\n\t\t}\n\t\tint minDistance = INT_MAX;\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tif (visited[i]) continue;\n\t\t\tif (distance[i] < minDistance) minDistance=distance[i],currentCity = i;\n\t\t}\n\t\t// 添加离起始点最短的点到已访问集\n\t\tvisited[currentCity] = true;\n\t}\n\n\t// 逆序列逆向输出即为最短路径\n\tstack<int> pathStack;\n\tpathStack.push(D);\n\tcurrentCity = D;\n\twhile (currentCity != S) {\n\t\tcurrentCity = lastCity[currentCity];\n\t\tpathStack.push(currentCity);\n\t}\n\n\twhile (!pathStack.empty()) {\n\t\tcout<<pathStack.top()<<' ';\n\t\tpathStack.pop();\n\t}\n\tcout<<distance[D]<<' '<<cost[D];\n\n\tdelete visited,distance,cost,lastCity;\n\treturn 0;\n}\n\n```\n\n\n\n## 1035 Password (20)\n\n**题目描述**\n\n> To prepare for PAT, the judge sometimes has to generate random passwords for the users.  The problem is that there are always some confusing passwords since it is hard to distinguish 1 (one) from l (L in lowercase), or 0 (zero) from O (o in uppercase).  One solution is to replace 1 (one) by @, 0 (zero) by %, l by L, and O by o.  Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a positive integer N (<= 1000), followed by N lines of accounts.  Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.\n\n**输出描述**\n\n> For each test case, first print the number M of accounts that have been modified, then print in the following M lines the modified accounts info, that is, the user names and the corresponding modified passwords.  The accounts must be printed in the same order as they are read in.  If no account is modified, print in one line \"There are N accounts and no account is modified\" where N is the total number of accounts.  However, if N is one, you must print \"There is 1 account and no account is modified\" instead.\n\n**输入例子**\n\n> 3\n> Team000002 Rlsp0dfa\n> Team000003 perfectpwd\n> Team000001 R1spOdfa\n\n**输出例子**\n\n> 2\n> Team000002 RLsp%dfa\n> Team000001 R@spodfa\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\nusing namespace std;\n\nstruct account\n{\n\tstring id;\n\tstring password;\n\taccount(string i, string p) {id = i, password = p;}\n};\n\nint main() {\n\tint n;\n\tcin>>n;\n\tvector<account> result;\n\n\tstring id,password;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>id>>password;\n\t\tif (password.find_first_of('0') == string::npos &&\n\t\t\tpassword.find_first_of('O') == string::npos &&\n\t\t\tpassword.find_first_of('1') == string::npos &&\n\t\t\tpassword.find_first_of('l') == string::npos)\n\t\t\tcontinue;\n\t\tfor (int s = 0; s < password.size(); s++) {\n\t\t\tif (password[s] == '0') password[s] = '%';\n\t\t\tif (password[s] == 'O') password[s] = 'o';\n\t\t\tif (password[s] == '1') password[s] = '@';\n\t\t\tif (password[s] == 'l') password[s] = 'L';\n\t\t}\n\t\tresult.push_back(account(id,password));\n\t}\n\n\tint result_len = result.size();\n\tif (n == 1 && result_len == 0) {\n\t\tcout<<\"There is 1 account and no account is modified\";\n\t} else if (result_len == 0) {\n\t\tcout<<\"There are \"<<n<<\" accounts and no account is modified\";\n\t} else {\n\t\tcout<<result_len;\n\t\tfor (int i = 0; i < result_len; i++) {\n\t\t\tcout<<\"\\n\"<<result[i].id<<' '<<result[i].password;\n\t\t}\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n\n\n## 1036 Boys vs Girls (25)\n\n**题目描述**\n\n> This time you are asked to tell the difference between the lowest grade of all the male students and the highest grade of all the female students.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a positive integer N, followed by N lines of student information.  Each line contains a student's name, gender, ID and grade, separated by a space, where name and ID are strings of no more than 10 characters with no space, gender is either F (female) or M (male), and grade is an integer between 0 and 100.  It is guaranteed that all the grades are distinct.\n\n**输出描述**\n\n> For each test case, output in 3 lines.  The first line gives the name and ID of the female student with the highest grade, and the second line gives that of the male student with the lowest grade.  The third line gives the difference gradeF-gradeM.  If one such kind of student is missing, output \"Absent\" in the corresponding line, and output \"NA\" in the third line instead.\n\n**输入例子**\n\n> 3\n> Joe M Math990112 89\n> Mike M CS991301 100\n> Mary F EE990830 95\n\n**输出例子**\n\n> Mary EE990830\n> Joe Math990112\n> 6\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\nusing namespace std;\n\nint main() {\n\tint n;\n\tcin>>n;\n\tstring re_male_name, re_male_id;\n\tstring re_female_name, re_female_id;\n\tint re_male_grade = 101, re_female_grade = -1;\n\n\tstring name, gender, id;\n\tint grade;\n\twhile(n--) {\n\t\tcin>>name>>gender>>id>>grade;\n\t\tif (gender==\"M\") {\n\t\t\tif (grade < re_male_grade) {\n\t\t\t\tre_male_name = name;\n\t\t\t\tre_male_id = id;\n\t\t\t\tre_male_grade = grade;\n\t\t\t}\n\t\t} else {\n\t\t\tif (grade > re_female_grade) {\n\t\t\t\tre_female_name = name;\n\t\t\t\tre_female_id = id;\n\t\t\t\tre_female_grade = grade;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (re_female_name==\"\") cout<<\"Absent\"<<endl;\n\telse cout<<re_female_name<<' '<<re_female_id<<endl;\n\tif (re_male_name==\"\") cout<<\"Absent\"<<endl;\n\telse cout<<re_male_name<<' '<<re_male_id<<endl;\n\tif (re_female_name==\"\" || re_male_name==\"\") cout<<\"NA\";\n\telse cout<<re_female_grade - re_male_grade;\n\t\n\treturn 0;\n\n}\n```\n\n\n\n## 1037 Magic Coupon (25)\n\n**题目描述**\n\n> The magic shop in Mars is offering some magic coupons.  Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may get N times the value of that product back!  What is more, the shop also offers some bonus product for free.  However, if you apply a coupon with a positive N to this bonus product, you will have to pay the shop N times the value of the bonus product... but hey, magically, they have some coupons with negative N's! \n> For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M\\$) where a negative value corresponds to a bonus product.  You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; coupon 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back.  On the other hand, if you apply coupon 3 to product 4, you will have to pay M\\$12 to the shop.\n> Each coupon and each product may be selected at most once.  Your task is to get as much money back as possible.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains the number of coupons NC, followed by a line with NC coupon integers.  Then the next line contains the number of products NP, followed by a line with NP product values.  Here 1<= NC, NP <= 105, and it is guaranteed that all the numbers will not exceed 230.\n\n**输出描述**\n\n> For each test case, simply print in a line the maximum amount of money you can get back.\n\n**输入例子**\n\n> 4\n> 1 2 4 -1\n> 4\n> 7 6 -2 -3\n\n**输出例子**\n\n> 43\n\n**实现代码**\n\n\n\n\n\n## 1054 The Dominant Color (20)\n\n**题目描述**\n\n> Behind the scenes in the computer's memory, color is always talked about as a series of 24 bits of information for each pixel.  In an image, the color with the largest proportional area is called the dominant color.  **A *strictly* dominant color takes more than half of the total area.**  Now given an image of resolution M by N (for example, 800x600), you are supposed to point out the strictly dominant color.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains 2 positive numbers: M (<=800) and N (<=600) which are the resolutions of the image.  Then N lines follow, each contains M digital colors in the range [0, 224).  It is guaranteed that the strictly dominant color exists for each input image.  All the numbers in a line are separated by a space.\n\n**输出描述**\n\n> For each test case, simply print the dominant color in a line.\n\n**输入例子**\n\n> 5 3\n> 0 0 255 16777215 24\n> 24 24 0 0 24\n> 24 0 24 24 24\n\n**输出例子**\n\n>  24\n\n首先要注意到dominant color是超过半数的，刚开始只想到了排序后最中间的数一定为结果，但是要存储的数据太多，后来看了[参考链接](https://blog.csdn.net/zhu_liangwei/article/details/9734671)，学会了下边这个方法。\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int m, n, all_count, tmp, re = -1, count = 0;\n    cin>>m>>n;\n    all_count = m*n;\n    while (all_count--) {\n        cin>>tmp;\n        if (count == 0) re = tmp;\n        if (re == tmp) count++;\n        else count--;\n    }\n    cout<<re;\n    return 0;\n}\n```\n\n## 1081 Rational Sum (20)\n\n**题目描述**\n\n> Given N rational numbers in the form \"numerator/denominator\", you are supposed to calculate their sum.\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a positive integer N (<=100), followed in the next line N rational numbers \"a1/b1 a2/b2 ...\" where all the numerators and denominators are in the range of \"long int\".  If there is a negative number, then the sign must appear in front of the numerator.\n\n**输出描述**\n\n> For each test case, output the sum in the simplest form \"integer numerator/denominator\" where \"integer\" is the integer part of the sum, \"numerator\" < \"denominator\", and the numerator and the denominator have no common factor.  You must output only the fractional part if the integer part is 0.\n\n**输入例子**\n\n> 5\n> 2/5 4/15 1/30 -2/60 8/3\n\n**输出例子**\n\n> 3 1/3\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\nusing namespace std;\n\nlong long gcd(long long a, long long b) {\n    return ((b==0)?abs(a):gcd(b,a%b));\n}\n\nint main() {\n    long long n, tmp_gcd;\n    cin>>n;\n    char c;\n    long long re_integer = 0, re_numerator, re_denominator;\n    cin>>re_numerator>>c>>re_denominator;\n    tmp_gcd = gcd(re_numerator,re_denominator);\n    re_numerator/=tmp_gcd,re_denominator/=tmp_gcd;\n    re_integer += int(re_numerator/re_denominator);\n    re_numerator%=re_denominator;\n    while(--n) {\n        long long tmp_nu, tmp_de, tmp_nu_re, tmp_de_re;\n        cin>>tmp_nu>>c>>tmp_de;\n        tmp_de_re = tmp_de * re_denominator;\n        tmp_nu_re = tmp_nu * re_denominator + tmp_de * re_numerator;\n        tmp_gcd = gcd(tmp_de_re,tmp_nu_re);\n        tmp_de_re/=tmp_gcd,tmp_nu_re/=tmp_gcd;\n        re_integer += int(tmp_nu_re/tmp_de_re);\n        re_numerator = tmp_nu_re % tmp_de_re;\n        re_denominator = tmp_de_re;\n    }\n    if (re_integer == 0 && re_numerator == 0) cout<<0;\n    else if (re_integer == 0) {\n    \tcout<<re_numerator<<'/'<<re_denominator;\n\t} else if (re_numerator == 0) {\n\t\tcout<<re_integer;\n\t} else {\n\t\tcout<<re_integer<<' '<<re_numerator<<'/'<<re_denominator;\n\t}\n    return 0;\n}\n```\n\n\n\n## 1082 Read Number in Chinese (25)\n\n**题目描述**\n\n> Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way.  Output \"Fu\" first if it is negative.  For example, -123456789 is read as \"Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu\".  Note: zero (\"ling\") must be handled correctly according to the Chinese tradition.  For example, 100800 is \"yi Shi Wan ling ba Bai\".\n\n**输入描述**\n\n> Each input file contains one test case, which gives an integer with no more than 9 digits.\n\n**输出描述**\n\n> For each test case, print in a line the Chinese way of reading the number.  The characters are separated by a space and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> -123456789\n\n**输出例子**\n\n> Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu\n\n**实现代码**\n\n首先按照数字单位的顺序添加到结果容器中，然后遍历结果容器，如果有连续重复的\"ling\"只留一个，如果\"Wan\"前有“ling”去掉0，如果\"Wan\"直接跟在“Yi”后边将“Wan”换成“ling”。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n\tstring units[] = {\"\",\"Shi\",\"Bai\",\"Qian\",\"Wan\",\"Shi\",\"Bai\",\"Qian\",\"Yi\"};\n\tstring digits[] = {\"ling\",\"yi\",\"er\",\"san\",\"si\",\"wu\",\"liu\",\"qi\",\"ba\",\"jiu\"};\n\tvector<string> re;\n\tint n;\n\tcin>>n;\n\tif (n < 0) {\n\t\tre.push_back(\"Fu\");\n\t\tn = -n;\n\t}\n\tif (n == 0) {\n\t\tcout<<\"ling\";\n\t\treturn 0;\n\t}\n\tvector<int> n_digits;\n\twhile (n > 0) {\n\t\tn_digits.push_back(n%10);\n\t\tn/=10;\n\t}\n\tint len = n_digits.size();\n\tfor (int i = len-1; i >= 0; i--) {\n\t\tre.push_back(digits[n_digits[i]]);\n\t\tif (i==4 || n_digits[i] != 0 && i>0) re.push_back(units[i]);\n\t}\n\tvector<string>::iterator iter = re.begin()+1;\n\twhile (iter < re.end()) {\n\t\tif (*(iter)==\"ling\" && *(iter-1)==\"ling\")\n\t\t\tre.erase(iter);\n\t\telse if (*(iter)==\"Wan\" && *(iter-1)==\"ling\")\n\t\t\tre.erase((iter--)-1);\n\t\telse if (*(iter)==\"Wan\" && *(iter-1)==\"Yi\")\n\t\t\t*(iter++) = \"ling\";\n\t\telse\n\t\t\titer++;\n\t}\n\tif (re.size()>1 && re[re.size()-1]==\"ling\") re.erase(re.end()-1);\n\tcout<<re[0];\n\tfor (int i = 1; i < re.size(); i++) cout<<' '<<re[i];\n\t\t\n\treturn 0;\n}\n\n```\n\n\n\n## 1083 List Grades (25)\n\n**题目描述**\n\n> Given a list of N student records with name, ID and grade.  You are supposed to sort the records with respect to the grade in non-increasing order, and output those student records of which the grades are in a given interval.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case is given in the following format:\n> N\n> name[1] ID[1] grade[1]\n> name[2] ID[2] grade[2]\n> ... ...\n> name[N] ID[N] grade[N]\n> grade1 grade2\n>\n> where name[i] and ID[i] are strings of no more than 10 characters with no space, grade[i] is an integer in [0, 100], grade1 and grade2 are the boundaries of the grade's interval.  It is guaranteed that all the grades are *distinct*.\n\n**输出描述**\n\n> For each test case you should output the student records of which the grades are in the given interval [grade1, grade2] and are in non-increasing order.  Each student record occupies a line with the student's name and ID, separated by one space.  If there is no student's grade in that interval, output \"NONE\" instead.\n\n**输入例子**\n\n> 4\n> Tom CS000001 59\n> Joe Math990112 89\n> Mike CS991301 100\n> Mary EE990830 95\n> 60 100\n\n**输出例子**\n\n> Mike CS991301\n> Mary EE990830\n> Joe Math990112\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\n\nstruct student\n{\n\tstring name;\n\tstring id;\n\tint grade;\n\tstudent(string n,string i, int g) {\n\t\tname = n;\n\t\tid = i;\n\t\tgrade = g;\n\t}\n};\n\nint main() {\n\tint n;\n\tcin>>n;\n\tvector<student> re;\n\n\tstring name,id;\n\tint grade;\n\twhile(n--) {\n\t\tcin>>name>>id>>grade;\n\t\tstudent tmp(name,id,grade);\n\t\tre.push_back(tmp);\n\t}\n\tint min_grade,max_grade;\n\tcin>>min_grade>>max_grade;\n\n\tvector<student>::iterator iter = re.begin();\n\twhile (iter != re.end()) {\n\t\tif ((*iter).grade < min_grade || (*iter).grade > max_grade)\n\t\t\tre.erase(iter);\n\t\telse\n\t\t\titer++;\n\t}\n\n\tfor (int k = 0 ; k < re.size(); k++) {\n\t\tfor (int i = 0 ; i < re.size()-1; i++) {\n\t\t\tif (re[i].grade < re[i+1].grade) {\n\t\t\t\tstudent tmp(re[i].name,re[i].id,re[i].grade);\n\t\t\t\tre[i] = re[i+1];\n\t\t\t\tre[i+1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (re.empty()) cout<<\"NONE\";\n\telse {\n\t\tcout<<re[0].name<<' '<<re[0].id;\n\t\tfor (int i = 1; i < re.size(); i++)\n\t\t\tcout<<\"\\n\"<<re[i].name<<' '<<re[i].id;\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1086 Tree Traversals Again (25)\n\n**题目描述**\n\n> An inorder binary tree traversal can be implemented in a non-recursive way with a stack.  For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop().  Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations.  Your task is to give the postorder traversal sequence of this tree.\n>\n> ![](/images/pat_1086.jpg)\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains a positive integer N (<=30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N).  Then 2N lines follow, each describes a stack operation in the format: \"Push X\" where X is the index of the node being pushed onto the stack; or \"Pop\" meaning to pop one node from the stack.\n\n**输出描述**\n\n> For each test case, print the postorder traversal sequence of the corresponding tree in one line.  A solution is guaranteed to exist.  All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> 6\n> Push 1\n> Push 2\n> Push 3\n> Pop\n> Pop\n> Push 4\n> Pop\n> Pop\n> Push 5\n> Push 6\n> Pop\n> Pop\n\n**输出例子**\n\n> 3 4 2 6 5 1\n\n**实现代码**\n\n以上述例子为例，按顺序排下来123456为前序，使用栈的pop顺序为中序，利用前序和中序可以得到后序。\n\n注意1-N为标号，每次push的为值，值有可能重复，但是push顺序为标号1-N。\n\n可以用下边这个测试用例测试：\n\n> //输入\n>\n> 19\n> Push 4\n> Push 11\n> Push 7\n> Push 12\n> Pop\n> Pop\n> Pop\n> Push 14\n> Push 17\n> Pop\n> Pop\n> Push 6\n> Push 18\n> Pop\n> Push 8\n> Pop\n> Pop\n> Push 4\n> Pop\n> Pop\n> Push 11\n> Push 16\n> Push 11\n> Push 12\n> Pop\n> Push 2\n> Pop\n> Pop\n> Pop\n> Push 7\n> Push 4\n> Pop\n> Pop\n> Push 12\n> Pop\n> Pop\n> Push 11\n> Pop\n>\n> // 输出\n>\n> 12 7 17 8 18 4 6 14 11 2 12 11 4 12 7 16 11 11 4 \n\n我的代码如下：\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <stack>\nusing namespace std;\n\nvector<int> post;\nvoid generatePostOrder(vector<int> pre, vector<int> in, int len) {\n\tif (len <= 0) return;\n\tif (len == 1) {\n\t\tpost.push_back(pre[0]);\n\t\treturn;\n\t}\n\tint root_num = pre[0], root_pos_of_in = 0;\n\tfor (; root_pos_of_in < len; root_pos_of_in++) {\n\t\tif (in[root_pos_of_in] == root_num) break;\n\t}\n\tint left_len = root_pos_of_in;\n\tint right_len = len - left_len - 1;\n\tvector<int> pre_left,pre_right,in_left,in_right;\n\tpre_left.assign(pre.begin()+1, pre.begin()+1+left_len);\n\tpre_right.assign(pre.begin()+1+left_len, pre.end());\n\tin_left.assign(in.begin(),in.begin()+left_len);\n\tin_right.assign(in.begin()+left_len+1, in.end());\n\tgeneratePostOrder(pre_left,in_left,left_len);\n\tgeneratePostOrder(pre_right,in_right,right_len);\n\tpost.push_back(root_num);\n}\n\nint main() {\n\tint n, tmp;\n\tcin>>n;\n\tstring op;\n\tvector<int> pre,in,value;\n\tstack<int> tmp_stack;\n\tint index = 0;\n\tfor (int i = 0; i < 2*n; i++) {\n\t\tcin>>op;\n\t\tif (op == \"Push\") {\n\t\t\tcin>>tmp;\n\t\t\tvalue.push_back(tmp);\n\t\t\ttmp_stack.push(index);\n\t\t\tpre.push_back(index++);\n\t\t} else {\n\t\t\tin.push_back(tmp_stack.top());\n\t\t\ttmp_stack.pop();\n\t\t}\n\t}\n\tgeneratePostOrder(pre,in,n);\n\tif (n > 0) cout<<value[post[0]];\n\tfor (int i = 1; i < n; i++) {\n\t\tcout<<\" \"<<value[post[i]];\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n\n\n\n\n## 10xx\n\n**题目描述**\n\n> \n\n**输入描述**\n\n> \n\n**输出描述**\n\n> \n\n**输入例子**\n\n> \n\n**输出例子**\n\n> \n\n**实现代码**\n\n","source":"_posts/PAT刷题记录.md","raw":"---\ntitle: PAT刷题记录\ntoc: true\ndate: 2018-07-19 22:54:17\ncategories: OJ\ntags:\n- PAT\n- 刷题\n---\n\n\n\nOJ：[牛客网](https://www.nowcoder.com/pat)\n\n---\n\n\n\n## 1001 A+B Format (20)\n\n**题目描述**\n\n> Calculate a + b and output the sum in standard format -- that is, the digits must be separated into groups of three by commas (unless there are less than four digits).\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a pair of integers a and b where -1000000 <= a, b <= 1000000.  The numbers are separated by a space.\n\n**输出描述**\n\n> For each test case, you should output the sum of a and b in one line.  The sum must be written in the standard format.\n\n**输入例子**\n\n> -1000000 9\n\n**输出例子**\n\n> -999,991\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int digit[10];\n    for (int i = 0; i < 10; i++) digit[i] = -1;\n    int a,b,re;\n    cin >> a >> b;\n    re = a + b;\n    if (re < 0) {\n        cout<<'-';\n        re = -re;\n    }\n    int i = 0;\n    while(re) {\n        digit[i] = (re%10);\n        re/=10;\n        i++;\n    }\n    for (int k = i-1; k >=0; k--) {\n        cout<<digit[k];\n        if (k%3 == 0 && k>0) cout<<',';\n    }\n    return 0;\n}\n```\n\n\n\n## 1002 A+B for Polynomials (25)\n\n**题目描述**\n\n> This time, you are supposed to find A+B where A and B are two polynomials.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:\n> K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively.  It is given that 1 <= K <= 10，0 <= NK < ... < N2 < N1 <=1000.\n\n**输出描述**\n\n> For each test case you should output the sum of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  **Please be accurate to 1 decimal place.**\n\n**输入例子**\n\n> 2 1 2.4 0 3.2\n> 2 2 1.5 1 0.5\n\n**输出例子**\n\n> 3 2 1.5 1 2.9 0 3.2\n\n**实现代码**\n\n注意保留小数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\nstruct item\n{\n\tint n;\n\tfloat value;\n\titem(int a, float b) {n=a,value=b;}\n};\n\nint main() {\n\tvector<item> polynomials;\n\tint k;\n\n\tcin>>k;\n\tint tmp_n;\n\tfloat tmp_value;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tpolynomials.push_back(item(tmp_n,tmp_value));\n\t}\n\n\tcin>>k;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tbool hasItem = false;\n\t\tfor (int i = 0; i < polynomials.size(); i++) {\n\t\t\tif (polynomials[i].n == tmp_n) {\n\t\t\t\thasItem = true;\n\t\t\t\tpolynomials[i].value+=tmp_value;\n\t\t\t\tif (polynomials[i].value == 0)\n\t\t\t\t\tpolynomials.erase(polynomials.begin()+i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\t\n\t\tif (!hasItem) polynomials.push_back(item(tmp_n,tmp_value));\t\n\t}\n\n\tfor (int k = 0; k < polynomials.size(); k++) {\n\t\tfor (int i = 0; i < polynomials.size()-1; i++) {\n\t\t\tif (polynomials[i].n < polynomials[i+1].n) {\n\t\t\t\titem tmp_item = polynomials[i];\n\t\t\t\tpolynomials[i] = polynomials[i+1];\n\t\t\t\tpolynomials[i+1] = tmp_item;\n\t\t\t}\n\t\t}\n\t}\n\n\tcout<<polynomials.size();\n\tfor (int i = 0; i < polynomials.size(); i++)\n\t\tprintf(\" %d %.1f\", polynomials[i].n, polynomials[i].value);\n\n\treturn 0;\n}\n```\n\n\n\n## 1003 Emergency (25)\n\n**题目描述**\n\n> As an emergency rescue team leader of a city, you are given a special map of your country.  The map shows several scattered cities connected by some roads.  Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map.  When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.\n\n**输入描述**\n\n> Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (<= 500) - the number of cities (and the cities are numbered from 0 to N-1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively.  The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city.  Then M lines follow, each describes a road with three integers c1, c2 and L, which are the pair of cities connected by a road and the length of that road, respectively.  \n> It is guaranteed that there exists at least one path from C1 to C2.\n\n**输出描述**\n\n> For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2, and the maximum amount of rescue teams you can possibly gather.\n>\n> All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.\n\n**输入例子**\n\n> 5 6 0 2\n> 1 2 1 5 3\n> 0 1 1\n> 0 2 2\n> 0 3 1\n> 1 2 1\n> 2 4 1\n> 3 4 1\n\n**输出例子**\n\n> 2 4\n\n**实现代码**\n\ndijkstra最短路\n\n```c++\n#include <iostream>\n#include <vector>\n#include <climits>\nusing namespace std;\n\nstruct road\n{\n\tint endCity;\n\tint length;\n\troad(int e, int l) {endCity = e, length = l;}\n};\n\n\nint main() {\n\tint n,m,c1,c2;\n\tcin>>n>>m>>c1>>c2;\n\tvector<int> teamsCount;\n\n\tint tmp1,tmp2,tmp3;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>tmp1;\n\t\tteamsCount.push_back(tmp1);\n\t}\n\n\tvector<vector<road> > roads(n);\n\tfor (int i = 0; i < m; i++) {\n\t\tcin>>tmp1>>tmp2>>tmp3;\n\t\troads[tmp1].push_back(road(tmp2,tmp3));\n\t\troads[tmp2].push_back(road(tmp1,tmp3));\n\t}\n\n\tvector<int> maxTeams(n);\n\tfor (int i = 0; i < n; i++) maxTeams[i] = 0;\n\tmaxTeams[c1] = teamsCount[c1];\n\n\tvector<int> minLen(n);\n\tfor (int i = 0; i < n; i++) minLen[i] = INT_MAX;\n\tminLen[c1] = 0;\n\n\tint currentCity = c1;\n\tvector<int> minLenRoadCount(n);\n\tfor (int i = 0; i < n; i++) minLenRoadCount[i] = 1;\n\n\tvector<bool> visited(n);\n\tfor (int i = 0; i < n; i++) visited[i] = false;\n\tvisited[c1] = true;\n\twhile (currentCity != c2) {\n\t\tint len = roads[currentCity].size();\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tif (visited[roads[currentCity][i].endCity]) continue;\n\t\t\tint endCity = roads[currentCity][i].endCity;\n\t\t\tint length = roads[currentCity][i].length;\n\t\t\tif (minLen[endCity] > minLen[currentCity] + length) {\n\t\t\t\tminLen[endCity] = minLen[currentCity] + length;\n\t\t\t\tminLenRoadCount[endCity] = 1;\n\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];\n\t\t\t} else if (minLen[endCity] == minLen[currentCity] + length) {\n\t\t\t\tminLenRoadCount[endCity]++;\n\t\t\t\tif (maxTeams[endCity] < maxTeams[currentCity] + teamsCount[endCity])\n\t\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];\n\t\t\t}\n\t\t}\n\n\t\tint min = INT_MAX;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (visited[i]) continue;\n\t\t\tif (minLen[i] < min) {\n\t\t\t\tmin = minLen[i];\n\t\t\t\tcurrentCity = i;\n\t\t\t}\n\t\t}\n\t\tvisited[currentCity] = true;\n\t}\n\n\tcout<<minLenRoadCount[c2]<<' '<<maxTeams[c2];\n\n\treturn 0;\n}\n```\n\n\n\n## 1004 Counting Leaves (30)\n\n**题目描述**\n\n> A family hierarchy is usually presented by a pedigree tree.  Your job is to count those family members who have no child.\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a line containing 0 < N < 100, the number of nodes in a tree, and M (< N), the number of non-leaf nodes.  Then M lines follow, each in the format:\n>\n> ID K ID[1] ID[2] ... ID[K]\n>\n> where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID's of its children.  For the sake of simplicity, let us fix the root ID to be 01.\n\n**输出描述**\n\n> For each test case, you are supposed to count those family members who have no child **for every seniority level** starting from the root.  The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.\n> The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child.  Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node.  Then we should output \"0 1\" in a line.\n\n**输入例子**\n\n> 2 1\n> 01 1 02\n\n**输出例子**\n\n> 0 1\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\n#define MAX_NODES 100\n\nstruct node\n{\n\tint id = -1;\n\tint childs_count = 0;\n\tvector<int> childs;\n};\n\nint main() {\n\tint n,m;\n\tcin>>n>>m;\n\tnode nodes[MAX_NODES];\n\n\tint id,k,tmp;\n\twhile (m--) {\n\t\tcin>>id>>k;\n\t\tnodes[id].id = id;\n\t\tnodes[id].childs_count = k;\n\t\twhile (k--) {\n\t\t\tcin>>tmp;\n\t\t\t(nodes[id].childs).push_back(tmp);\n\t\t}\n\t}\n\n\tvector<int> this_level, next_level;\n\tthis_level.push_back(1);\n\twhile (1) {\n\t\tint count_output = 0;\n\t\tfor (int i = 0; i < this_level.size(); i++) {\n\t\t\tif (nodes[this_level[i]].childs_count == 0) count_output++;\n\t\t\telse next_level.insert(next_level.begin(),nodes[this_level[i]].childs.begin(),nodes[this_level[i]].childs.end());\n\t\t}\n\t\tcout<<count_output;\n\t\tif (next_level.empty()) break;\n\t\tcout<<' ';\n\t\tthis_level = next_level;\n\t\tnext_level.clear();\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1005 Spell It Right (20)\n\n**题目描述**\n\n> Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies one line which contains an N (<= 10^100).\n\n**输出描述**\n\n> For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.\n\n**输入例子**\n\n> 12345\n\n**输出例子**\n\n> one five\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string n;\n    cin>>n;\n    int len = n.size();\n    int re = 0;\n    for (int i = 0; i < len; i++) re+=(n[i]-'0');\n    string english[10] = {\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\"};\n    int digit[100], re_len = 0;\n    while (re) {\n        digit[re_len] = (re%10);\n        re/=10;\n        re_len++;\n    }\n    for (int i = re_len-1; i >= 0; i--) {\n        cout<<english[digit[i]];\n        if (i != 0) cout<<' ';\n    }\n    return 0;\n}\n```\n\n\n\n## 1006 Sign In and Sign Out (25)\n\n**题目描述**\n\n> At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door.  Given the records of signing in's and out's, you are supposed to find the ones who have unlocked and locked the door on that day.\n\n**输入描述**\n\n> Each input file contains one test case. Each case contains the records for one day.  The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:\n>\n> ID_number Sign_in_time Sign_out_time\n>\n> where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.\n\n**输出描述**\n\n> For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day.  The two ID numbers must be separated by one space.\n> Note:  It is guaranteed that the records are consistent.  That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.\n\n**输入例子**\n\n> 3\n> CS301111 15:30:28 17:00:10\n> SC3021234 08:00:00 11:25:25\n> CS301133 21:45:00 21:58:40\n\n**输出例子**\n\n> SC3021234 CS301133\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <string>\nusing namespace std;\n\nbool a_larger_than_b(string a, string b) {\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] < b[i]) return false;\n        if (a[i] > b[i]) return true;\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    cin>>n;\n    string id,in,out;\n    string result_in_id, result_in_time, result_out_id, result_out_time;\n    cin>>id>>in>>out;\n    result_in_id = result_out_id = id;\n    result_in_time = in;\n    result_out_time = out;\n    n--;\n    while (n--) {\n        cin>>id>>in>>out;\n        if (a_larger_than_b(result_in_time,in)) {\n            result_in_id = id;\n            result_in_time = in;\n        }\n        if (a_larger_than_b(out,result_out_time)) {\n            result_out_id = id;\n            result_out_time = out;\n        }\n    }\n    cout<<result_in_id<<' '<<result_out_id;\n    return 0;\n}\n```\n\n\n\n## 1007 Maximum Subsequence Sum (25)\n\n**题目描述**\n\n> Given a sequence of K integers { N1\n> , N2\n> , ..., NK\n>  }.  A continuous subsequence is defined to be { Ni\n> , Ni+1\n> , ..., Nj\n>  } where 1 <= i <= j <= K.  The *Maximum Subsequence*\n>  is the continuous subsequence which has the largest sum of its\n> elements.  For example, given sequence { -2, 11, -4, 13, -5, -2 }, its\n> maximum subsequence is { 11, -4, 13 } with the largest sum being 20.\n>\n> Now you are supposed to find the largest sum, together with the first\n> and the last numbers of the maximum subsequence.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies two lines.  The first line contains a positive integer K (<= 10000).  The second line contains K numbers, separated by a space.\n\n**输出描述**\n\n> For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line.  In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case).  If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.\n\n**输入例子**\n\n> 10\n> -10 1 2 3 4 -5 -23 3 7 -21\n\n**输出例子**\n\n> 10 1 4\n\n**实现代码**\n\n<u>和为负的子序列一定不会是最大和子序列的开头。</u>\n\n当当前和小于0时，使用临时\"first number\"记录下一个数，\n\n更新最大和时，当前数为“last number”， 临时“first number”中存储的值为“first number”的值。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nint main() {\n\tint n;\n\tcin>>n;\n\tint* nums = new int[n];\n\tbool allNegative = true;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>nums[i];\n\t\tif (nums[i] >= 0) allNegative = false;\n\t}\n\n\tif (allNegative) {\n\t\tcout<<0<<' '<<nums[0]<<' '<<nums[n-1];\n\t} else {\n\t\tint maxSum = 0, currentSum = 0;\n\t\tint firstNum = nums[0], lastNum = nums[0];\n\t\tint firstNumCurrent = firstNum;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcurrentSum+=nums[i];\n\t\t\tif (currentSum < 0) {\n\t\t\t\tcurrentSum = 0;\n\t\t\t\tfirstNumCurrent = nums[i+1];\n\t\t\t} else if (currentSum > maxSum) {\n\t\t\t\tmaxSum = currentSum;\n\t\t\t\tfirstNum = firstNumCurrent;\n\t\t\t\tlastNum = nums[i];\n\t\t\t}\n\t\t}\n\t\tcout<<maxSum<<' '<<firstNum<<' '<<lastNum;\n\t}\n\n\tdelete nums;\n\n\treturn 0;\n}\n```\n\n\n\n## 1008 Elevator (20)\n\n**题目描述**\n\n> The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.\n> For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.\n\n**输入描述**\n\n> Each input file contains one test case. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100.\n\n**输出描述**\n\n> For each test case, print the total time on a single line.\n\n**输入例子**\n\n> 3 2 3 1\n\n**输出例子**\n\n> 41\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 0, b, n, re = 0;\n    cin >> n;\n    while (n--) {\n        cin >> b;\n        if (b > a) {\n            re+=((b-a)*6);\n        } else {\n            re+=((a-b)*4);\n        }\n        re+=5;\n        a = b;\n    }\n    cout<<re;\n    return 0;\n}\n```\n\n\n\n## 1009 Product of Polynomials (25)\n\n**题目描述**\n\n> This time, you are supposed to find A*B where A and B are two polynomials.\n\n**输入描述**\n\n> Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:\n> K N1 aN1 N2 aN2 ... NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, ..., K) are the exponents and coefficients, respectively.  It is given that 1 <= K <= 10, 0 <= NK < ... < N2 < N1 <=1000.\n\n**输出描述**\n\n> For each test case you should output the product of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  Please be accurate up to 1 decimal place.\n\n**输入例子**\n\n> 2 1 2.4 0 3.2\n> 2 2 1.5 1 0.5\n\n**输出例子**\n\n> 3 3 3.6 2 6.0 1 1.6\n\n**实现代码**\n\n把[1002 A+B for Polynomials (25)](#1002-A-B-for-Polynomials-25)稍微改一下就好。\n\n使用`float`虽然算出来明明是对的但是过不了牛客的测试，全部换成`double`就好了，不知道是什么问题。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\nstruct item\n{\n\tint n;\n\tdouble value;\n\titem(int a, double b) {n=a,value=b;}\n};\n\nint main() {\n\tvector<item> polynomials, result;\n\tint k;\n\n\tcin>>k;\n\tint tmp_n;\n\tdouble tmp_value;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tpolynomials.push_back(item(tmp_n,tmp_value));\n\t}\n\n\tcin>>k;\n\twhile (k--) {\n\t\tcin>>tmp_n>>tmp_value;\n\t\tfor (int k = 0; k < polynomials.size(); k++) {\n\t\t\tbool hasItem = false;\n\t\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\t\tif (result[i].n == tmp_n+polynomials[k].n) {\n\t\t\t\t\thasItem = true;\n\t\t\t\t\tresult[i].value+=(tmp_value*polynomials[k].value);\n\t\t\t\t\tif (result[i].value == 0)\n\t\t\t\t\t\tresult.erase(result.begin()+i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\tif (!hasItem) result.push_back(item(tmp_n+polynomials[k].n,tmp_value*polynomials[k].value));\n\t\t}\n\t}\n\n\tfor (int k = 0; k < result.size(); k++) {\n\t\tfor (int i = 0; i < result.size()-1; i++) {\n\t\t\tif (result[i].n < result[i+1].n) {\n\t\t\t\titem tmp_item = result[i];\n\t\t\t\tresult[i] = result[i+1];\n\t\t\t\tresult[i+1] = tmp_item;\n\t\t\t}\n\t\t}\n\t}\n\n\tcout<<result.size();\n\tfor (int i = 0; i < result.size(); i++)\n\t\tprintf(\" %d %.1f\", result[i].n, result[i].value);\n\n\treturn 0;\n}\n```\n\n\n\n## 1015 Reversible Primes (20)\n\n**题目描述**\n\n> A *reversible prime*\n>  in any number system is a prime whose \"reverse\" in that\n> number system is also a prime. For example in the decimal system 73 is a\n> reversible prime because its reverse 37 is also a prime.\n>\n> \n>\n> Now given any two positive integers N (< 105\n> ) and D (1 < D <= 10), you are supposed to tell if N is a\n> reversible prime with radix D.\n\n**输入描述**\n\n> The input file consists of several test cases.  Each case occupies a line which contains two integers N and D.  The input is finished by a negative N.\n\n**输出描述**\n\n> For each test case, print in one line \"Yes\" if N is a reversible prime with radix D, or \"No\" if not.\n\n**输入例子**\n\n> 73 10\n> 23 2\n> 23 10\n> -2\n\n**输出例子**\n\n> Yes\n> Yes\n> No\n\n**实现代码**\n\n求N以及N在D进制下反转后是否均为质数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint reverseWithRadix(int n, int d) {\n\tvector<int> remainers;\n\twhile (n > 0) {\n\t\tremainers.push_back(n%d);\n\t\tn/=d;\n\t}\n\tint re = 0;\n\tint bit_count = remainers.size();\n\tfor (int i = 0; i < bit_count; i++)\n\t\tre+=(pow(d,bit_count-i-1)*remainers[i]);\n\treturn re;\n}\n\nbool isPrime(int n) {\n\tif (n == 1) return false;\n\tif (n < 4) return true;\n\tif (n % 2 == 0) return false;\n\tint sqrt_n = sqrt(n) + 1;\n\tfor (int i = 3; i <= sqrt_n; i+=2) {\n\t\tif (n % i == 0) return false;\n\t}\n\treturn true;\n}\n\nint main() {\n\tint n,d;\n\twhile (1) {\n\t\tcin>>n;\n\t\tif (n < 0) break;\n\t\tcin>>d;\n\t\tif (isPrime(n) && isPrime(reverseWithRadix(n,d))) cout<<\"Yes\"<<endl;\n\t\telse cout<<\"No\"<<endl;\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n## 1020 Tree Traversals (25)\n\n**题目描述**\n\n> Suppose that all the keys in a binary tree are distinct positive integers.  Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line gives a positive integer N (<=30), the total number of nodes in the binary tree.  The second line gives the **postorder** sequence and the third line gives the **inorder** sequence.  All the numbers in a line are separated by a space.\n\n**输出描述**\n\n> For each test case, print in one line the level order traversal sequence of the corresponding binary tree.  All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> 7\n> 2 3 1 5 7 6 4\n> 1 2 3 4 5 6 7\n\n**输出例子**\n\n> 4 1 6 3 5 7 2\n\npostorder: 后序遍历\n\ninorder: 中序遍历\n\nlevel order: 层序遍历（从根开始,依次向下,对于每一层从左向右遍历）\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nstruct node\n{\n\tnode* left;\n\tnode* right;\n\tint value;\n};\n\n\nnode* binaryTreeRoot(int* postorder, int* inorder, int len) {\n\tif (len <= 0) return NULL;\n\n\tnode* root = new node;\n\troot->value = *(postorder+len-1);\n\n\tint pos = 0;\n\tfor (; pos < len; pos++)\n\t\tif (*(inorder+pos) == root->value) break;\n\n\troot->left = binaryTreeRoot(postorder, inorder, pos);\n\tint rightLen = len - pos - 1;\n\troot->right = binaryTreeRoot(postorder+pos, inorder+pos+1, rightLen);\n\n\treturn root;\n}\n\nvoid deleteNodes(node* root) {\n\tif (root == NULL) return;\n\tdeleteNodes(root->left);\n\tdeleteNodes(root->right);\n\tdelete root;\n}\n\nint main() {\n\tint n;\n\tcin>>n;\n\tint* postorderNodes = new int[n];\n\tint* inorderNodes = new int[n];\n\tfor (int i = 0; i < n; i++) cin>>postorderNodes[i];\n\tfor (int i = 0; i < n; i++) cin>>inorderNodes[i];\n\n\tnode* root = binaryTreeRoot(postorderNodes, inorderNodes, n);\n\tif (!root) return 0;\n\n\tqueue<node*> levelNodes;\n\tlevelNodes.push(root);\n\twhile (1) {\n\t\tnode* tmp = levelNodes.front();\n\t\tif (tmp->left) levelNodes.push(tmp->left);\n\t\tif (tmp->right) levelNodes.push(tmp->right);\n\t\tcout<<tmp->value;\n\t\tlevelNodes.pop();\n\t\tif (!levelNodes.empty()) cout<<' ';\n\t\telse break;\n\t}\n\n\tdeleteNodes(root);\n\tdelete postorderNodes;\n\tdelete inorderNodes;\n\n\treturn 0;\n}\n```\n\n\n\n## 1023 Have Fun with Numbers (20)\n\n**题目描述**\n\n> Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication.  Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation.  Check to see the result if we double it again!\n>\n> Now you are suppose to check if there are more numbers with this property.  That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains one positive integer with no more than 20 digits.\n\n**输出描述**\n\n> For each test case, first print in a line \"Yes\" if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or \"No\" if not.  Then in the next line, print the doubled number.\n\n**输入例子**\n\n> 1234567899\n\n**输出例子**\n\n> Yes\n> 2469135798\n\n**实现代码**\n\n若双倍后多一位则为No;\n\n使用`digit_count[i]`保存数字`i`（0-9）的个数，\n\n再减去双倍后各个数字的个数，若每一个`digit_count[i]`均为0则为Yes,否则为No。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\n#include <stack>\n#include <climits>\nusing namespace std;\n\n\n\nint main() {\n\tint digit_count[10];\n\tfor (int i = 0; i < 10; i++) digit_count[i] = 0;\n\tstring s;\n\tcin>>s;\n\tint k = s.size();\n\tvector<int> digits;\n\tfor (int i = 0; i < k; i++) {\n\t\tint digit = s[i]-'0';\n\t\tdigits.push_back(digit);\n\t\tdigit_count[digit]++;\n\t}\n\tint carry = 0;\n\tfor (int i = k-1; i >= 0; i--) {\n\t\tdigits[i] = 2*digits[i] + carry;\n\t\tcarry = digits[i] / 10;\n\t\tdigits[i] %= 10;\n\t\tdigit_count[digits[i]]--;\n\t}\n\tif (carry) {\n\t\tcout<<\"No\\n\"<<carry;\n\t\tfor (int i = 0; i < k; i++) cout<<digits[i];\n\t\treturn 0;\n\t}\n\tbool result = true;\n\tfor (int i = 0; i < 10; i++)\n\t\tif (digit_count[i] != 0) {\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\tif (result) cout<<\"Yes\\n\";\n\telse cout<<\"No\\n\";\n\tfor (int i = 0; i < k; i++) cout<<digits[i];\n\n\treturn 0;\n}\n\n```\n\n\n\n\n\n## 1027 Colors in Mars (20)\n\n**题目描述**\n\n> People in Mars represent the colors in their computers in a similar way as the Earth people.  That is, a color is represented by a 6-digit number, where the first 2 digits are for Red, the middle 2 digits for Green, and the last 2 digits  for Blue.  The only difference is that they use radix 13 (0-9 and A-C) instead of 16.  Now given a color in three decimal numbers (each between 0 and 168), you are supposed to output their Mars RGB values.\n\n**输入描述**\n\n> Each input file contains one test case which occupies a line containing the three decimal color values.\n\n**输出描述**\n\n> For each test case you should output the Mars RGB value in the following format: first output \"#\", then followed by a 6-digit number where all the English characters must be upper-cased.  If a single color is only 1-digit long, you must print a \"0\" to the left.\n\n**输入例子**\n\n> 15 43 71\n\n**输出例子**\n\n> \\#123456\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout<<'#';\n    int n;\n    for (int i = 0; i < 3; i++) {\n        cin>>n;\n        int tmp = n/13;\n        if (tmp > 9) cout<<char((tmp-10)+'A');\n        else cout<<tmp;\n        tmp = n%13;\n        if (tmp > 9) cout<<char((tmp-10)+'A');\n        else cout<<tmp;\n    }\n    return 0;\n}\n```\n\n\n\n## 1028 List Sorting (25)\n\n**题目描述**\n\n> Excel can sort records according to any column.  Now you are supposed to imitate this function.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains two integers N (<=100000) and C, where N is the number of records and C is the column that you are supposed to sort the records with.  Then N lines follow, each contains a record of a student.  A student's record consists of his or her distinct ID (a 6-digit number), name (a string with no more than 8 characters without space), and grade (an integer between 0 and 100, inclusive).\n\n**输出描述**\n\n> For each test case, output the sorting result in N lines.  That is, if C = 1 then the records must be sorted in increasing order according to ID's; if C = 2 then the records must be sorted in non-decreasing order according to names; and if C = 3 then the records must be sorted in non-decreasing order according to grades.  **If there are several students who have the same name or grade, they must be sorted according to their ID's in increasing order.**\n\n**输入例子**\n\n> 3 1\n> 000007 James 85\n> 000010 Amy 90\n> 000001 Zoe 60\n\n**输出例子**\n\n> 000001 Zoe 60\n> 000007 James 85\n> 000010 Amy 90\n\n**实现代码**\n\n利用结构体，使用sort函数排序。\n\n```c++\n#include <iostream>\n#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\nusing namespace std;\n\nstruct student\n{\n\tstring id;\n\tstring name;\n\tint grade;\n\tstudent(string i, string n, int g) {id = i, name = n, grade = g;}\n};\n\nbool cmp1(student a, student b) {\n\treturn a.id < b.id;\n}\n\nbool cmp2(student a, student b) {\n\treturn (a.name == b.name)?(a.id < b.id):(a.name < b.name);\n}\n\nbool cmp3(student a, student b) {\n\treturn (a.grade == b.grade)?(a.id < b.id):(a.grade < b.grade);\n}\n\nint main() {\n\tint n,c;\n\tcin>>n>>c;\n\tvector<student> students;\n\n\tstring id,name;\n\tint grade;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>id>>name>>grade;\n\t\tstudents.push_back(student(id,name,grade));\n\t}\n\n\tif (c == 1) sort(students.begin(),students.end(),cmp1);\n\telse if (c == 2) sort(students.begin(),students.end(),cmp2);\n\telse sort(students.begin(),students.end(),cmp3);\n\n\tif (n > 0) cout<<students[0].id<<' '<<students[0].name<<' '<<students[0].grade;\n\tfor (int i = 1; i < n; i++) {\n\t\tcout<<\"\\n\"<<students[i].id<<' '<<students[i].name<<' '<<students[i].grade;\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1029 Median (25)\n\n**题目描述**\n\n> Given an increasing sequence S of N integers, the *median* is the number at the middle position.  For example, the median of S1={11, 12, 13, 14} is 12, and the median of S2={9, 10, 15, 16, 17} is 15.  The median of two sequences is defined to be the median of the nondecreasing sequence which contains all the elements of both sequences.  For example, the median of S1 and S2 is 13.\n> Given two increasing sequences of integers, you are asked to find their median.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case occupies 2 lines, each gives the information of a sequence.  For each sequence, the first positive integer N (<=1000000) is the size of that sequence.  Then N integers follow, separated by a space.  It is guaranteed that all the integers are in the range of **long int**.\n\n**输出描述**\n\n> For each test case you should output the median of the two given sequences in a line.\n\n**输入例子**\n\n> 4 11 12 13 14\n> 5 9 10 15 16 17\n\n**输出例子**\n\n> 13\n\n**实现代码**\n\n用两个数组存储两组数据，每组数据一个pos，比较两个pos出的数值大小，较小值的pos向后移，直到找到中位数。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <queue>\nusing namespace std;\n\n\nint main() {\n\tint m,n;\n\tcin>>m;\n\tint* firstSequence = new int[m];\n\tfor (int i = 0; i < m; i++) cin>>firstSequence[i];\n\tcin>>n;\n\tint* secondSequence = new int[n];\n\tfor (int i = 0; i < n; i++) cin>>secondSequence[i];\n\n\tint firstPos = 0, secondPos = 0;\n\tfor (int i = int((m+n+1)/2); i > 0; i--) {\n\t\tif (i == 1) {\n\t\t\tif (firstPos == m) cout<<secondSequence[secondPos];\n\t\t\telse if (secondPos == n) cout<<firstSequence[firstPos];\n\t\t\telse if (firstSequence[firstPos] < secondSequence[secondPos]) cout<<firstSequence[firstPos];\n\t\t\telse cout<<secondSequence[secondPos];\n\t\t} else {\n\t\t\tif (firstPos == m) secondPos++;\n\t\t\telse if (secondPos == n) firstPos++;\n\t\t\telse if (firstSequence[firstPos] < secondSequence[secondPos]) firstPos++;\n\t\t\telse secondPos++;\n\t\t}\n\t}\n\n\tdelete firstSequence;\n\tdelete secondSequence;\n\n\treturn 0;\n}\n```\n\n\n\n## 1030 Travel Plan (30)\n\n**题目描述**\n\n> A traveler's map gives the distances between cities along the highways, together with the cost of each highway. \n>  Now you are supposed to write a program to help a traveler to decide the shortest path between his/her starting city and the destination.\n>  If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.\n>\n>  DECLARE: The test data in PAT is wrong,we strengthened the test data.If the same code got passed in pat,it may not be able to get passed in NOWCODER,please check your code.(This means that our test data is no problem,I guarantee.)\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a line containing 4 positive integers N, M, S, and D, where N (<=500) is the number of cities (and hence the cities are numbered from 0 to N-1); M is the number of highways; S and D are the starting and the destination cities, respectively. Then M lines follow, each provides the information of a highway, in the format:\n>  City1 City2 Distance Cost\n>\n>  where the numbers are all integers no more than 500, and are separated by a space.\n\n**输出描述**\n\n> For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.\n\n**输入例子**\n\n> 4 5 0 3\n>\n> 0 1 1 20\n>\n> 1 3 2 30\n>\n> 0 3 4 10\n>\n> 0 2 2 20\n>\n> 2 3 1 20\n\n**输出例子**\n\n> 0 2 3 3 40\n\n**实现代码**\n\n最短路问题，用Dijkstra（迪杰斯特拉）算法解即可。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\n#include <stack>\n#include <climits>\nusing namespace std;\n\nstruct highway\n{\n\tint endCity;\n\tint distance;\n\tint cost;\n\thighway(int e, int d, int c) {endCity=e,distance=d,cost=c;}\n};\n\n\nint main() {\n\t// N为城市数，M为公路数，S为开始城市，D为结束城市\n\tint N,M,S,D;\n\tcin>>N>>M>>S>>D;\n\n\t// highways(i) 为与城市i相连的所有公路\n\tvector<vector<highway> > highways(N);\n\tbool* visited = new bool[N];\n\tint* distance = new int[N];\n\tint* cost = new int[N];\n\tint* lastCity = new int[N];\n\tfor (int i = 0; i < N; i++) \n\t\tvisited[i] = false, distance[i] = cost[i] = INT_MAX;\n\n\t// 读入数据，更新highways\n\tint tmp_city_1, tmp_city_2, tmp_distance, tmp_cost;\n\twhile (M--) {\n\t\tcin>>tmp_city_1>>tmp_city_2>>tmp_distance>>tmp_cost;\n\t\thighways[tmp_city_1].push_back(highway(tmp_city_2,tmp_distance,tmp_cost));\n\t\thighways[tmp_city_2].push_back(highway(tmp_city_1,tmp_distance,tmp_cost));\n\t}\n\n\t// dijkstra\n\tint currentCity = S;\n\tvisited[S] = true, distance[S] = cost[S] = 0, lastCity[S] = S;\n\twhile (currentCity != D) {\n\t\tfor (int i = 0; i < highways[currentCity].size(); i++) {\n\t\t\tint tmp_endCity = highways[currentCity][i].endCity, \n\t\t\t\ttmp_distance = highways[currentCity][i].distance,\n\t\t\t\ttmp_cost = highways[currentCity][i].cost;\t\t\t\t\n\t\t\tif (visited[tmp_endCity]) continue;\n\t\t\tif (distance[currentCity] + tmp_distance < distance[tmp_endCity] ||\n\t\t\t\t(distance[currentCity] + tmp_distance == distance[tmp_endCity] && \n\t\t\t\t cost[currentCity] + tmp_cost < cost[tmp_endCity])) {\n\t\t\t\tdistance[tmp_endCity] = distance[currentCity] + tmp_distance;\n\t\t\t\tcost[tmp_endCity] = cost[currentCity] + tmp_cost;\n\t\t\t\tlastCity[tmp_endCity] = currentCity;\n\t\t\t}\n\t\t}\n\t\tint minDistance = INT_MAX;\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tif (visited[i]) continue;\n\t\t\tif (distance[i] < minDistance) minDistance=distance[i],currentCity = i;\n\t\t}\n\t\t// 添加离起始点最短的点到已访问集\n\t\tvisited[currentCity] = true;\n\t}\n\n\t// 逆序列逆向输出即为最短路径\n\tstack<int> pathStack;\n\tpathStack.push(D);\n\tcurrentCity = D;\n\twhile (currentCity != S) {\n\t\tcurrentCity = lastCity[currentCity];\n\t\tpathStack.push(currentCity);\n\t}\n\n\twhile (!pathStack.empty()) {\n\t\tcout<<pathStack.top()<<' ';\n\t\tpathStack.pop();\n\t}\n\tcout<<distance[D]<<' '<<cost[D];\n\n\tdelete visited,distance,cost,lastCity;\n\treturn 0;\n}\n\n```\n\n\n\n## 1035 Password (20)\n\n**题目描述**\n\n> To prepare for PAT, the judge sometimes has to generate random passwords for the users.  The problem is that there are always some confusing passwords since it is hard to distinguish 1 (one) from l (L in lowercase), or 0 (zero) from O (o in uppercase).  One solution is to replace 1 (one) by @, 0 (zero) by %, l by L, and O by o.  Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a positive integer N (<= 1000), followed by N lines of accounts.  Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.\n\n**输出描述**\n\n> For each test case, first print the number M of accounts that have been modified, then print in the following M lines the modified accounts info, that is, the user names and the corresponding modified passwords.  The accounts must be printed in the same order as they are read in.  If no account is modified, print in one line \"There are N accounts and no account is modified\" where N is the total number of accounts.  However, if N is one, you must print \"There is 1 account and no account is modified\" instead.\n\n**输入例子**\n\n> 3\n> Team000002 Rlsp0dfa\n> Team000003 perfectpwd\n> Team000001 R1spOdfa\n\n**输出例子**\n\n> 2\n> Team000002 RLsp%dfa\n> Team000001 R@spodfa\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\nusing namespace std;\n\nstruct account\n{\n\tstring id;\n\tstring password;\n\taccount(string i, string p) {id = i, password = p;}\n};\n\nint main() {\n\tint n;\n\tcin>>n;\n\tvector<account> result;\n\n\tstring id,password;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin>>id>>password;\n\t\tif (password.find_first_of('0') == string::npos &&\n\t\t\tpassword.find_first_of('O') == string::npos &&\n\t\t\tpassword.find_first_of('1') == string::npos &&\n\t\t\tpassword.find_first_of('l') == string::npos)\n\t\t\tcontinue;\n\t\tfor (int s = 0; s < password.size(); s++) {\n\t\t\tif (password[s] == '0') password[s] = '%';\n\t\t\tif (password[s] == 'O') password[s] = 'o';\n\t\t\tif (password[s] == '1') password[s] = '@';\n\t\t\tif (password[s] == 'l') password[s] = 'L';\n\t\t}\n\t\tresult.push_back(account(id,password));\n\t}\n\n\tint result_len = result.size();\n\tif (n == 1 && result_len == 0) {\n\t\tcout<<\"There is 1 account and no account is modified\";\n\t} else if (result_len == 0) {\n\t\tcout<<\"There are \"<<n<<\" accounts and no account is modified\";\n\t} else {\n\t\tcout<<result_len;\n\t\tfor (int i = 0; i < result_len; i++) {\n\t\t\tcout<<\"\\n\"<<result[i].id<<' '<<result[i].password;\n\t\t}\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n\n\n## 1036 Boys vs Girls (25)\n\n**题目描述**\n\n> This time you are asked to tell the difference between the lowest grade of all the male students and the highest grade of all the female students.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case contains a positive integer N, followed by N lines of student information.  Each line contains a student's name, gender, ID and grade, separated by a space, where name and ID are strings of no more than 10 characters with no space, gender is either F (female) or M (male), and grade is an integer between 0 and 100.  It is guaranteed that all the grades are distinct.\n\n**输出描述**\n\n> For each test case, output in 3 lines.  The first line gives the name and ID of the female student with the highest grade, and the second line gives that of the male student with the lowest grade.  The third line gives the difference gradeF-gradeM.  If one such kind of student is missing, output \"Absent\" in the corresponding line, and output \"NA\" in the third line instead.\n\n**输入例子**\n\n> 3\n> Joe M Math990112 89\n> Mike M CS991301 100\n> Mary F EE990830 95\n\n**输出例子**\n\n> Mary EE990830\n> Joe Math990112\n> 6\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\nusing namespace std;\n\nint main() {\n\tint n;\n\tcin>>n;\n\tstring re_male_name, re_male_id;\n\tstring re_female_name, re_female_id;\n\tint re_male_grade = 101, re_female_grade = -1;\n\n\tstring name, gender, id;\n\tint grade;\n\twhile(n--) {\n\t\tcin>>name>>gender>>id>>grade;\n\t\tif (gender==\"M\") {\n\t\t\tif (grade < re_male_grade) {\n\t\t\t\tre_male_name = name;\n\t\t\t\tre_male_id = id;\n\t\t\t\tre_male_grade = grade;\n\t\t\t}\n\t\t} else {\n\t\t\tif (grade > re_female_grade) {\n\t\t\t\tre_female_name = name;\n\t\t\t\tre_female_id = id;\n\t\t\t\tre_female_grade = grade;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (re_female_name==\"\") cout<<\"Absent\"<<endl;\n\telse cout<<re_female_name<<' '<<re_female_id<<endl;\n\tif (re_male_name==\"\") cout<<\"Absent\"<<endl;\n\telse cout<<re_male_name<<' '<<re_male_id<<endl;\n\tif (re_female_name==\"\" || re_male_name==\"\") cout<<\"NA\";\n\telse cout<<re_female_grade - re_male_grade;\n\t\n\treturn 0;\n\n}\n```\n\n\n\n## 1037 Magic Coupon (25)\n\n**题目描述**\n\n> The magic shop in Mars is offering some magic coupons.  Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may get N times the value of that product back!  What is more, the shop also offers some bonus product for free.  However, if you apply a coupon with a positive N to this bonus product, you will have to pay the shop N times the value of the bonus product... but hey, magically, they have some coupons with negative N's! \n> For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M\\$) where a negative value corresponds to a bonus product.  You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; coupon 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back.  On the other hand, if you apply coupon 3 to product 4, you will have to pay M\\$12 to the shop.\n> Each coupon and each product may be selected at most once.  Your task is to get as much money back as possible.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains the number of coupons NC, followed by a line with NC coupon integers.  Then the next line contains the number of products NP, followed by a line with NP product values.  Here 1<= NC, NP <= 105, and it is guaranteed that all the numbers will not exceed 230.\n\n**输出描述**\n\n> For each test case, simply print in a line the maximum amount of money you can get back.\n\n**输入例子**\n\n> 4\n> 1 2 4 -1\n> 4\n> 7 6 -2 -3\n\n**输出例子**\n\n> 43\n\n**实现代码**\n\n\n\n\n\n## 1054 The Dominant Color (20)\n\n**题目描述**\n\n> Behind the scenes in the computer's memory, color is always talked about as a series of 24 bits of information for each pixel.  In an image, the color with the largest proportional area is called the dominant color.  **A *strictly* dominant color takes more than half of the total area.**  Now given an image of resolution M by N (for example, 800x600), you are supposed to point out the strictly dominant color.\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains 2 positive numbers: M (<=800) and N (<=600) which are the resolutions of the image.  Then N lines follow, each contains M digital colors in the range [0, 224).  It is guaranteed that the strictly dominant color exists for each input image.  All the numbers in a line are separated by a space.\n\n**输出描述**\n\n> For each test case, simply print the dominant color in a line.\n\n**输入例子**\n\n> 5 3\n> 0 0 255 16777215 24\n> 24 24 0 0 24\n> 24 0 24 24 24\n\n**输出例子**\n\n>  24\n\n首先要注意到dominant color是超过半数的，刚开始只想到了排序后最中间的数一定为结果，但是要存储的数据太多，后来看了[参考链接](https://blog.csdn.net/zhu_liangwei/article/details/9734671)，学会了下边这个方法。\n\n**实现代码**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int m, n, all_count, tmp, re = -1, count = 0;\n    cin>>m>>n;\n    all_count = m*n;\n    while (all_count--) {\n        cin>>tmp;\n        if (count == 0) re = tmp;\n        if (re == tmp) count++;\n        else count--;\n    }\n    cout<<re;\n    return 0;\n}\n```\n\n## 1081 Rational Sum (20)\n\n**题目描述**\n\n> Given N rational numbers in the form \"numerator/denominator\", you are supposed to calculate their sum.\n\n**输入描述**\n\n> Each input file contains one test case. Each case starts with a positive integer N (<=100), followed in the next line N rational numbers \"a1/b1 a2/b2 ...\" where all the numerators and denominators are in the range of \"long int\".  If there is a negative number, then the sign must appear in front of the numerator.\n\n**输出描述**\n\n> For each test case, output the sum in the simplest form \"integer numerator/denominator\" where \"integer\" is the integer part of the sum, \"numerator\" < \"denominator\", and the numerator and the denominator have no common factor.  You must output only the fractional part if the integer part is 0.\n\n**输入例子**\n\n> 5\n> 2/5 4/15 1/30 -2/60 8/3\n\n**输出例子**\n\n> 3 1/3\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\nusing namespace std;\n\nlong long gcd(long long a, long long b) {\n    return ((b==0)?abs(a):gcd(b,a%b));\n}\n\nint main() {\n    long long n, tmp_gcd;\n    cin>>n;\n    char c;\n    long long re_integer = 0, re_numerator, re_denominator;\n    cin>>re_numerator>>c>>re_denominator;\n    tmp_gcd = gcd(re_numerator,re_denominator);\n    re_numerator/=tmp_gcd,re_denominator/=tmp_gcd;\n    re_integer += int(re_numerator/re_denominator);\n    re_numerator%=re_denominator;\n    while(--n) {\n        long long tmp_nu, tmp_de, tmp_nu_re, tmp_de_re;\n        cin>>tmp_nu>>c>>tmp_de;\n        tmp_de_re = tmp_de * re_denominator;\n        tmp_nu_re = tmp_nu * re_denominator + tmp_de * re_numerator;\n        tmp_gcd = gcd(tmp_de_re,tmp_nu_re);\n        tmp_de_re/=tmp_gcd,tmp_nu_re/=tmp_gcd;\n        re_integer += int(tmp_nu_re/tmp_de_re);\n        re_numerator = tmp_nu_re % tmp_de_re;\n        re_denominator = tmp_de_re;\n    }\n    if (re_integer == 0 && re_numerator == 0) cout<<0;\n    else if (re_integer == 0) {\n    \tcout<<re_numerator<<'/'<<re_denominator;\n\t} else if (re_numerator == 0) {\n\t\tcout<<re_integer;\n\t} else {\n\t\tcout<<re_integer<<' '<<re_numerator<<'/'<<re_denominator;\n\t}\n    return 0;\n}\n```\n\n\n\n## 1082 Read Number in Chinese (25)\n\n**题目描述**\n\n> Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way.  Output \"Fu\" first if it is negative.  For example, -123456789 is read as \"Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu\".  Note: zero (\"ling\") must be handled correctly according to the Chinese tradition.  For example, 100800 is \"yi Shi Wan ling ba Bai\".\n\n**输入描述**\n\n> Each input file contains one test case, which gives an integer with no more than 9 digits.\n\n**输出描述**\n\n> For each test case, print in a line the Chinese way of reading the number.  The characters are separated by a space and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> -123456789\n\n**输出例子**\n\n> Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu\n\n**实现代码**\n\n首先按照数字单位的顺序添加到结果容器中，然后遍历结果容器，如果有连续重复的\"ling\"只留一个，如果\"Wan\"前有“ling”去掉0，如果\"Wan\"直接跟在“Yi”后边将“Wan”换成“ling”。\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n\tstring units[] = {\"\",\"Shi\",\"Bai\",\"Qian\",\"Wan\",\"Shi\",\"Bai\",\"Qian\",\"Yi\"};\n\tstring digits[] = {\"ling\",\"yi\",\"er\",\"san\",\"si\",\"wu\",\"liu\",\"qi\",\"ba\",\"jiu\"};\n\tvector<string> re;\n\tint n;\n\tcin>>n;\n\tif (n < 0) {\n\t\tre.push_back(\"Fu\");\n\t\tn = -n;\n\t}\n\tif (n == 0) {\n\t\tcout<<\"ling\";\n\t\treturn 0;\n\t}\n\tvector<int> n_digits;\n\twhile (n > 0) {\n\t\tn_digits.push_back(n%10);\n\t\tn/=10;\n\t}\n\tint len = n_digits.size();\n\tfor (int i = len-1; i >= 0; i--) {\n\t\tre.push_back(digits[n_digits[i]]);\n\t\tif (i==4 || n_digits[i] != 0 && i>0) re.push_back(units[i]);\n\t}\n\tvector<string>::iterator iter = re.begin()+1;\n\twhile (iter < re.end()) {\n\t\tif (*(iter)==\"ling\" && *(iter-1)==\"ling\")\n\t\t\tre.erase(iter);\n\t\telse if (*(iter)==\"Wan\" && *(iter-1)==\"ling\")\n\t\t\tre.erase((iter--)-1);\n\t\telse if (*(iter)==\"Wan\" && *(iter-1)==\"Yi\")\n\t\t\t*(iter++) = \"ling\";\n\t\telse\n\t\t\titer++;\n\t}\n\tif (re.size()>1 && re[re.size()-1]==\"ling\") re.erase(re.end()-1);\n\tcout<<re[0];\n\tfor (int i = 1; i < re.size(); i++) cout<<' '<<re[i];\n\t\t\n\treturn 0;\n}\n\n```\n\n\n\n## 1083 List Grades (25)\n\n**题目描述**\n\n> Given a list of N student records with name, ID and grade.  You are supposed to sort the records with respect to the grade in non-increasing order, and output those student records of which the grades are in a given interval.\n\n**输入描述**\n\n> Each input file contains one test case.  Each case is given in the following format:\n> N\n> name[1] ID[1] grade[1]\n> name[2] ID[2] grade[2]\n> ... ...\n> name[N] ID[N] grade[N]\n> grade1 grade2\n>\n> where name[i] and ID[i] are strings of no more than 10 characters with no space, grade[i] is an integer in [0, 100], grade1 and grade2 are the boundaries of the grade's interval.  It is guaranteed that all the grades are *distinct*.\n\n**输出描述**\n\n> For each test case you should output the student records of which the grades are in the given interval [grade1, grade2] and are in non-increasing order.  Each student record occupies a line with the student's name and ID, separated by one space.  If there is no student's grade in that interval, output \"NONE\" instead.\n\n**输入例子**\n\n> 4\n> Tom CS000001 59\n> Joe Math990112 89\n> Mike CS991301 100\n> Mary EE990830 95\n> 60 100\n\n**输出例子**\n\n> Mike CS991301\n> Mary EE990830\n> Joe Math990112\n\n**实现代码**\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <vector>\nusing namespace std;\n\n\nstruct student\n{\n\tstring name;\n\tstring id;\n\tint grade;\n\tstudent(string n,string i, int g) {\n\t\tname = n;\n\t\tid = i;\n\t\tgrade = g;\n\t}\n};\n\nint main() {\n\tint n;\n\tcin>>n;\n\tvector<student> re;\n\n\tstring name,id;\n\tint grade;\n\twhile(n--) {\n\t\tcin>>name>>id>>grade;\n\t\tstudent tmp(name,id,grade);\n\t\tre.push_back(tmp);\n\t}\n\tint min_grade,max_grade;\n\tcin>>min_grade>>max_grade;\n\n\tvector<student>::iterator iter = re.begin();\n\twhile (iter != re.end()) {\n\t\tif ((*iter).grade < min_grade || (*iter).grade > max_grade)\n\t\t\tre.erase(iter);\n\t\telse\n\t\t\titer++;\n\t}\n\n\tfor (int k = 0 ; k < re.size(); k++) {\n\t\tfor (int i = 0 ; i < re.size()-1; i++) {\n\t\t\tif (re[i].grade < re[i+1].grade) {\n\t\t\t\tstudent tmp(re[i].name,re[i].id,re[i].grade);\n\t\t\t\tre[i] = re[i+1];\n\t\t\t\tre[i+1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (re.empty()) cout<<\"NONE\";\n\telse {\n\t\tcout<<re[0].name<<' '<<re[0].id;\n\t\tfor (int i = 1; i < re.size(); i++)\n\t\t\tcout<<\"\\n\"<<re[i].name<<' '<<re[i].id;\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n## 1086 Tree Traversals Again (25)\n\n**题目描述**\n\n> An inorder binary tree traversal can be implemented in a non-recursive way with a stack.  For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop().  Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations.  Your task is to give the postorder traversal sequence of this tree.\n>\n> ![](/images/pat_1086.jpg)\n\n**输入描述**\n\n> Each input file contains one test case.  For each case, the first line contains a positive integer N (<=30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N).  Then 2N lines follow, each describes a stack operation in the format: \"Push X\" where X is the index of the node being pushed onto the stack; or \"Pop\" meaning to pop one node from the stack.\n\n**输出描述**\n\n> For each test case, print the postorder traversal sequence of the corresponding tree in one line.  A solution is guaranteed to exist.  All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.\n\n**输入例子**\n\n> 6\n> Push 1\n> Push 2\n> Push 3\n> Pop\n> Pop\n> Push 4\n> Pop\n> Pop\n> Push 5\n> Push 6\n> Pop\n> Pop\n\n**输出例子**\n\n> 3 4 2 6 5 1\n\n**实现代码**\n\n以上述例子为例，按顺序排下来123456为前序，使用栈的pop顺序为中序，利用前序和中序可以得到后序。\n\n注意1-N为标号，每次push的为值，值有可能重复，但是push顺序为标号1-N。\n\n可以用下边这个测试用例测试：\n\n> //输入\n>\n> 19\n> Push 4\n> Push 11\n> Push 7\n> Push 12\n> Pop\n> Pop\n> Pop\n> Push 14\n> Push 17\n> Pop\n> Pop\n> Push 6\n> Push 18\n> Pop\n> Push 8\n> Pop\n> Pop\n> Push 4\n> Pop\n> Pop\n> Push 11\n> Push 16\n> Push 11\n> Push 12\n> Pop\n> Push 2\n> Pop\n> Pop\n> Pop\n> Push 7\n> Push 4\n> Pop\n> Pop\n> Push 12\n> Pop\n> Pop\n> Push 11\n> Pop\n>\n> // 输出\n>\n> 12 7 17 8 18 4 6 14 11 2 12 11 4 12 7 16 11 11 4 \n\n我的代码如下：\n\n```c++\n#include <iostream>\n#include <stdlib.h>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <stack>\nusing namespace std;\n\nvector<int> post;\nvoid generatePostOrder(vector<int> pre, vector<int> in, int len) {\n\tif (len <= 0) return;\n\tif (len == 1) {\n\t\tpost.push_back(pre[0]);\n\t\treturn;\n\t}\n\tint root_num = pre[0], root_pos_of_in = 0;\n\tfor (; root_pos_of_in < len; root_pos_of_in++) {\n\t\tif (in[root_pos_of_in] == root_num) break;\n\t}\n\tint left_len = root_pos_of_in;\n\tint right_len = len - left_len - 1;\n\tvector<int> pre_left,pre_right,in_left,in_right;\n\tpre_left.assign(pre.begin()+1, pre.begin()+1+left_len);\n\tpre_right.assign(pre.begin()+1+left_len, pre.end());\n\tin_left.assign(in.begin(),in.begin()+left_len);\n\tin_right.assign(in.begin()+left_len+1, in.end());\n\tgeneratePostOrder(pre_left,in_left,left_len);\n\tgeneratePostOrder(pre_right,in_right,right_len);\n\tpost.push_back(root_num);\n}\n\nint main() {\n\tint n, tmp;\n\tcin>>n;\n\tstring op;\n\tvector<int> pre,in,value;\n\tstack<int> tmp_stack;\n\tint index = 0;\n\tfor (int i = 0; i < 2*n; i++) {\n\t\tcin>>op;\n\t\tif (op == \"Push\") {\n\t\t\tcin>>tmp;\n\t\t\tvalue.push_back(tmp);\n\t\t\ttmp_stack.push(index);\n\t\t\tpre.push_back(index++);\n\t\t} else {\n\t\t\tin.push_back(tmp_stack.top());\n\t\t\ttmp_stack.pop();\n\t\t}\n\t}\n\tgeneratePostOrder(pre,in,n);\n\tif (n > 0) cout<<value[post[0]];\n\tfor (int i = 1; i < n; i++) {\n\t\tcout<<\" \"<<value[post[i]];\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n\n\n\n\n## 10xx\n\n**题目描述**\n\n> \n\n**输入描述**\n\n> \n\n**输出描述**\n\n> \n\n**输入例子**\n\n> \n\n**输出例子**\n\n> \n\n**实现代码**\n\n","slug":"PAT刷题记录","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b09000qcragwzpc0fpl","content":"<p>OJ：<a href=\"https://www.nowcoder.com/pat\" target=\"_blank\" rel=\"noopener\">牛客网</a></p>\n<hr>\n<h2 id=\"1001-A-B-Format-20\"><a href=\"#1001-A-B-Format-20\" class=\"headerlink\" title=\"1001 A+B Format (20)\"></a>1001 A+B Format (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Calculate a + b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a pair of integers a and b where -1000000 &lt;= a, b &lt;= 1000000.  The numbers are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, you should output the sum of a and b in one line.  The sum must be written in the standard format.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>-1000000 9</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>-999,991</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> digit[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) digit[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,re;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    re = a + b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">'-'</span>;</span><br><span class=\"line\">        re = -re;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(re) &#123;</span><br><span class=\"line\">        digit[i] = (re%<span class=\"number\">10</span>);</span><br><span class=\"line\">        re/=<span class=\"number\">10</span>;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i<span class=\"number\">-1</span>; k &gt;=<span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;digit[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k%<span class=\"number\">3</span> == <span class=\"number\">0</span> &amp;&amp; k&gt;<span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">','</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1002-A-B-for-Polynomials-25\"><a href=\"#1002-A-B-for-Polynomials-25\" class=\"headerlink\" title=\"1002 A+B for Polynomials (25)\"></a>1002 A+B for Polynomials (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time, you are supposed to find A+B where A and B are two polynomials.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:<br>K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively.  It is given that 1 &lt;= K &lt;= 10，0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the sum of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  <strong>Please be accurate to 1 decimal place.</strong></p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 2 1.5 1 2.9 0 3.2</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>注意保留小数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">item</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> value;</span><br><span class=\"line\">\titem(<span class=\"keyword\">int</span> a, <span class=\"keyword\">float</span> b) &#123;n=a,value=b;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;item&gt; polynomials;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_n;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> tmp_value;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\tpolynomials.push_back(item(tmp_n,tmp_value));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> hasItem = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (polynomials[i].n == tmp_n) &#123;</span><br><span class=\"line\">\t\t\t\thasItem = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\tpolynomials[i].value+=tmp_value;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (polynomials[i].value == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\tpolynomials.erase(polynomials.begin()+i);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasItem) polynomials.push_back(item(tmp_n,tmp_value));\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; polynomials.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (polynomials[i].n &lt; polynomials[i+<span class=\"number\">1</span>].n) &#123;</span><br><span class=\"line\">\t\t\t\titem tmp_item = polynomials[i];</span><br><span class=\"line\">\t\t\t\tpolynomials[i] = polynomials[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tpolynomials[i+<span class=\"number\">1</span>] = tmp_item;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;polynomials.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size(); i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %.1f\"</span>, polynomials[i].n, polynomials[i].value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1003-Emergency-25\"><a href=\"#1003-Emergency-25\" class=\"headerlink\" title=\"1003 Emergency (25)\"></a>1003 Emergency (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>As an emergency rescue team leader of a city, you are given a special map of your country.  The map shows several scattered cities connected by some roads.  Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map.  When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (&lt;= 500) - the number of cities (and the cities are numbered from 0 to N-1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively.  The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city.  Then M lines follow, each describes a road with three integers c1, c2 and L, which are the pair of cities connected by a road and the length of that road, respectively.<br>It is guaranteed that there exists at least one path from C1 to C2.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2, and the maximum amount of rescue teams you can possibly gather.</p>\n<p>All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5 6 0 2<br>1 2 1 5 3<br>0 1 1<br>0 2 2<br>0 3 1<br>1 2 1<br>2 4 1<br>3 4 1</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>2 4</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>dijkstra最短路</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">road</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> endCity;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length;</span><br><span class=\"line\">\troad(<span class=\"keyword\">int</span> e, <span class=\"keyword\">int</span> l) &#123;endCity = e, length = l;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m,c1,c2;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;c1&gt;&gt;c2;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; teamsCount;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp1,tmp2,tmp3;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp1;</span><br><span class=\"line\">\t\tteamsCount.push_back(tmp1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;road&gt; &gt; roads(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp1&gt;&gt;tmp2&gt;&gt;tmp3;</span><br><span class=\"line\">\t\troads[tmp1].push_back(road(tmp2,tmp3));</span><br><span class=\"line\">\t\troads[tmp2].push_back(road(tmp1,tmp3));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; maxTeams(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) maxTeams[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tmaxTeams[c1] = teamsCount[c1];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minLen(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) minLen[i] = INT_MAX;</span><br><span class=\"line\">\tminLen[c1] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> currentCity = c1;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minLenRoadCount(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) minLenRoadCount[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; visited(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tvisited[c1] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != c2) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = roads[currentCity].size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[roads[currentCity][i].endCity]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> endCity = roads[currentCity][i].endCity;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> length = roads[currentCity][i].length;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (minLen[endCity] &gt; minLen[currentCity] + length) &#123;</span><br><span class=\"line\">\t\t\t\tminLen[endCity] = minLen[currentCity] + length;</span><br><span class=\"line\">\t\t\t\tminLenRoadCount[endCity] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (minLen[endCity] == minLen[currentCity] + length) &#123;</span><br><span class=\"line\">\t\t\t\tminLenRoadCount[endCity]++;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (maxTeams[endCity] &lt; maxTeams[currentCity] + teamsCount[endCity])</span><br><span class=\"line\">\t\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> min = INT_MAX;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (minLen[i] &lt; min) &#123;</span><br><span class=\"line\">\t\t\t\tmin = minLen[i];</span><br><span class=\"line\">\t\t\t\tcurrentCity = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tvisited[currentCity] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;minLenRoadCount[c2]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;maxTeams[c2];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1004-Counting-Leaves-30\"><a href=\"#1004-Counting-Leaves-30\" class=\"headerlink\" title=\"1004 Counting Leaves (30)\"></a>1004 Counting Leaves (30)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A family hierarchy is usually presented by a pedigree tree.  Your job is to count those family members who have no child.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a line containing 0 &lt; N &lt; 100, the number of nodes in a tree, and M (&lt; N), the number of non-leaf nodes.  Then M lines follow, each in the format:</p>\n<p>ID K ID[1] ID[2] … ID[K]</p>\n<p>where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID’s of its children.  For the sake of simplicity, let us fix the root ID to be 01.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, you are supposed to count those family members who have no child <strong>for every seniority level</strong> starting from the root.  The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.<br>The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child.  Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node.  Then we should output “0 1” in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1<br>01 1 02</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>0 1</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_NODES 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> childs_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; childs;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">\tnode nodes[MAX_NODES];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id,k,tmp;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;k;</span><br><span class=\"line\">\t\tnodes[id].id = id;</span><br><span class=\"line\">\t\tnodes[id].childs_count = k;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">\t\t\t(nodes[id].childs).push_back(tmp);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; this_level, next_level;</span><br><span class=\"line\">\tthis_level.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count_output = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; this_level.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nodes[this_level[i]].childs_count == <span class=\"number\">0</span>) count_output++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> next_level.insert(next_level.begin(),nodes[this_level[i]].childs.begin(),nodes[this_level[i]].childs.end());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;count_output;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (next_level.empty()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\tthis_level = next_level;</span><br><span class=\"line\">\t\tnext_level.clear();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1005-Spell-It-Right-20\"><a href=\"#1005-Spell-It-Right-20\" class=\"headerlink\" title=\"1005 Spell It Right (20)\"></a>1005 Spell It Right (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies one line which contains an N (&lt;= 10^100).</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>12345</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>one five</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = n.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) re+=(n[i]-<span class=\"string\">'0'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">string</span> english[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"zero\"</span>,<span class=\"string\">\"one\"</span>,<span class=\"string\">\"two\"</span>,<span class=\"string\">\"three\"</span>,<span class=\"string\">\"four\"</span>,<span class=\"string\">\"five\"</span>,<span class=\"string\">\"six\"</span>,<span class=\"string\">\"seven\"</span>,<span class=\"string\">\"eight\"</span>,<span class=\"string\">\"nine\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> digit[<span class=\"number\">100</span>], re_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (re) &#123;</span><br><span class=\"line\">        digit[re_len] = (re%<span class=\"number\">10</span>);</span><br><span class=\"line\">        re/=<span class=\"number\">10</span>;</span><br><span class=\"line\">        re_len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = re_len<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;english[digit[i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1006-Sign-In-and-Sign-Out-25\"><a href=\"#1006-Sign-In-and-Sign-Out-25\" class=\"headerlink\" title=\"1006 Sign In and Sign Out (25)\"></a>1006 Sign In and Sign Out (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door.  Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case contains the records for one day.  The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:</p>\n<p>ID_number Sign_in_time Sign_out_time</p>\n<p>where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day.  The two ID numbers must be separated by one space.<br>Note:  It is guaranteed that the records are consistent.  That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>CS301111 15:30:28 17:00:10<br>SC3021234 08:00:00 11:25:25<br>CS301133 21:45:00 21:58:40</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>SC3021234 CS301133</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">a_larger_than_b</span><span class=\"params\">(<span class=\"built_in\">string</span> a, <span class=\"built_in\">string</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; b[i]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] &gt; b[i]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> id,in,out;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> result_in_id, result_in_time, result_out_id, result_out_time;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;in&gt;&gt;out;</span><br><span class=\"line\">    result_in_id = result_out_id = id;</span><br><span class=\"line\">    result_in_time = in;</span><br><span class=\"line\">    result_out_time = out;</span><br><span class=\"line\">    n--;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;in&gt;&gt;out;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a_larger_than_b(result_in_time,in)) &#123;</span><br><span class=\"line\">            result_in_id = id;</span><br><span class=\"line\">            result_in_time = in;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a_larger_than_b(out,result_out_time)) &#123;</span><br><span class=\"line\">            result_out_id = id;</span><br><span class=\"line\">            result_out_time = out;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;result_in_id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;result_out_id;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1007-Maximum-Subsequence-Sum-25\"><a href=\"#1007-Maximum-Subsequence-Sum-25\" class=\"headerlink\" title=\"1007 Maximum Subsequence Sum (25)\"></a>1007 Maximum Subsequence Sum (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a sequence of K integers { N1<br>, N2<br>, …, NK<br> }.  A continuous subsequence is defined to be { Ni<br>, Ni+1<br>, …, Nj<br> } where 1 &lt;= i &lt;= j &lt;= K.  The <em>Maximum Subsequence</em><br> is the continuous subsequence which has the largest sum of its<br>elements.  For example, given sequence { -2, 11, -4, 13, -5, -2 }, its<br>maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>\n<p>Now you are supposed to find the largest sum, together with the first<br>and the last numbers of the maximum subsequence.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies two lines.  The first line contains a positive integer K (&lt;= 10000).  The second line contains K numbers, separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line.  In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case).  If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>10<br>-10 1 2 3 4 -5 -23 3 7 -21</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>10 1 4</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p><u>和为负的子序列一定不会是最大和子序列的开头。</u></p>\n<p>当当前和小于0时，使用临时”first number”记录下一个数，</p>\n<p>更新最大和时，当前数为“last number”， 临时“first number”中存储的值为“first number”的值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* nums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> allNegative = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;nums[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nums[i] &gt;= <span class=\"number\">0</span>) allNegative = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (allNegative) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;nums[<span class=\"number\">0</span>]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;nums[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>, currentSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> firstNum = nums[<span class=\"number\">0</span>], lastNum = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> firstNumCurrent = firstNum;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tcurrentSum+=nums[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (currentSum &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tfirstNumCurrent = nums[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSum &gt; maxSum) &#123;</span><br><span class=\"line\">\t\t\t\tmaxSum = currentSum;</span><br><span class=\"line\">\t\t\t\tfirstNum = firstNumCurrent;</span><br><span class=\"line\">\t\t\t\tlastNum = nums[i];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;maxSum&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;firstNum&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;lastNum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> nums;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1008-Elevator-20\"><a href=\"#1008-Elevator-20\" class=\"headerlink\" title=\"1008 Elevator (20)\"></a>1008 Elevator (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.<br>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print the total time on a single line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3 2 3 1</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>41</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b, n, re = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; b;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &gt; a) &#123;</span><br><span class=\"line\">            re+=((b-a)*<span class=\"number\">6</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            re+=((a-b)*<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        re+=<span class=\"number\">5</span>;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;re;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1009-Product-of-Polynomials-25\"><a href=\"#1009-Product-of-Polynomials-25\" class=\"headerlink\" title=\"1009 Product of Polynomials (25)\"></a>1009 Product of Polynomials (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time, you are supposed to find A*B where A and B are two polynomials.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:<br>K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively.  It is given that 1 &lt;= K &lt;= 10, 0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the product of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  Please be accurate up to 1 decimal place.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 3 3.6 2 6.0 1 1.6</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>把<a href=\"#1002-A-B-for-Polynomials-25\">1002 A+B for Polynomials (25)</a>稍微改一下就好。</p>\n<p>使用<code>float</code>虽然算出来明明是对的但是过不了牛客的测试，全部换成<code>double</code>就好了，不知道是什么问题。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">item</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> value;</span><br><span class=\"line\">\titem(<span class=\"keyword\">int</span> a, <span class=\"keyword\">double</span> b) &#123;n=a,value=b;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;item&gt; polynomials, result;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_n;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> tmp_value;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\tpolynomials.push_back(item(tmp_n,tmp_value));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; polynomials.size(); k++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">bool</span> hasItem = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (result[i].n == tmp_n+polynomials[k].n) &#123;</span><br><span class=\"line\">\t\t\t\t\thasItem = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t\tresult[i].value+=(tmp_value*polynomials[k].value);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (result[i].value == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\t\tresult.erase(result.begin()+i);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!hasItem) result.push_back(item(tmp_n+polynomials[k].n,tmp_value*polynomials[k].value));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; result.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result[i].n &lt; result[i+<span class=\"number\">1</span>].n) &#123;</span><br><span class=\"line\">\t\t\t\titem tmp_item = result[i];</span><br><span class=\"line\">\t\t\t\tresult[i] = result[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tresult[i+<span class=\"number\">1</span>] = tmp_item;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;result.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size(); i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %.1f\"</span>, result[i].n, result[i].value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1015-Reversible-Primes-20\"><a href=\"#1015-Reversible-Primes-20\" class=\"headerlink\" title=\"1015 Reversible Primes (20)\"></a>1015 Reversible Primes (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A <em>reversible prime</em><br> in any number system is a prime whose “reverse” in that<br>number system is also a prime. For example in the decimal system 73 is a<br>reversible prime because its reverse 37 is also a prime.</p>\n<p>Now given any two positive integers N (&lt; 105<br>) and D (1 &lt; D &lt;= 10), you are supposed to tell if N is a<br>reversible prime with radix D.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>The input file consists of several test cases.  Each case occupies a line which contains two integers N and D.  The input is finished by a negative N.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line “Yes” if N is a reversible prime with radix D, or “No” if not.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>73 10<br>23 2<br>23 10<br>-2</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Yes<br>Yes<br>No</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>求N以及N在D进制下反转后是否均为质数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">reverseWithRadix</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; remainers;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tremainers.push_back(n%d);</span><br><span class=\"line\">\t\tn/=d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> re = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bit_count = remainers.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bit_count; i++)</span><br><span class=\"line\">\t\tre+=(<span class=\"built_in\">pow</span>(d,bit_count-i<span class=\"number\">-1</span>)*remainers[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">4</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sqrt_n = <span class=\"built_in\">sqrt</span>(n) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= sqrt_n; i+=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,d;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isPrime(n) &amp;&amp; isPrime(reverseWithRadix(n,d))) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Yes\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1020-Tree-Traversals-25\"><a href=\"#1020-Tree-Traversals-25\" class=\"headerlink\" title=\"1020 Tree Traversals (25)\"></a>1020 Tree Traversals (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Suppose that all the keys in a binary tree are distinct positive integers.  Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line gives a positive integer N (&lt;=30), the total number of nodes in the binary tree.  The second line gives the <strong>postorder</strong> sequence and the third line gives the <strong>inorder</strong> sequence.  All the numbers in a line are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line the level order traversal sequence of the corresponding binary tree.  All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>7<br>2 3 1 5 7 6 4<br>1 2 3 4 5 6 7</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>4 1 6 3 5 7 2</p>\n</blockquote>\n<p>postorder: 后序遍历</p>\n<p>inorder: 中序遍历</p>\n<p>level order: 层序遍历（从根开始,依次向下,对于每一层从左向右遍历）</p>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tnode* left;</span><br><span class=\"line\">\tnode* right;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">node* <span class=\"title\">binaryTreeRoot</span><span class=\"params\">(<span class=\"keyword\">int</span>* postorder, <span class=\"keyword\">int</span>* inorder, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnode* root = <span class=\"keyword\">new</span> node;</span><br><span class=\"line\">\troot-&gt;value = *(postorder+len<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; pos &lt; len; pos++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (*(inorder+pos) == root-&gt;value) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\troot-&gt;left = binaryTreeRoot(postorder, inorder, pos);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> rightLen = len - pos - <span class=\"number\">1</span>;</span><br><span class=\"line\">\troot-&gt;right = binaryTreeRoot(postorder+pos, inorder+pos+<span class=\"number\">1</span>, rightLen);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteNodes</span><span class=\"params\">(node* root)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tdeleteNodes(root-&gt;left);</span><br><span class=\"line\">\tdeleteNodes(root-&gt;right);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* postorderNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* inorderNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;postorderNodes[i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;inorderNodes[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\tnode* root = binaryTreeRoot(postorderNodes, inorderNodes, n);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>&lt;node*&gt; levelNodes;</span><br><span class=\"line\">\tlevelNodes.push(root);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tnode* tmp = levelNodes.front();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tmp-&gt;left) levelNodes.push(tmp-&gt;left);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tmp-&gt;right) levelNodes.push(tmp-&gt;right);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;tmp-&gt;value;</span><br><span class=\"line\">\t\tlevelNodes.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!levelNodes.empty()) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdeleteNodes(root);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> postorderNodes;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> inorderNodes;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1023-Have-Fun-with-Numbers-20\"><a href=\"#1023-Have-Fun-with-Numbers-20\" class=\"headerlink\" title=\"1023 Have Fun with Numbers (20)\"></a>1023 Have Fun with Numbers (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication.  Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation.  Check to see the result if we double it again!</p>\n<p>Now you are suppose to check if there are more numbers with this property.  That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains one positive integer with no more than 20 digits.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, first print in a line “Yes” if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or “No” if not.  Then in the next line, print the doubled number.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>1234567899</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Yes<br>2469135798</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>若双倍后多一位则为No;</p>\n<p>使用<code>digit_count[i]</code>保存数字<code>i</code>（0-9）的个数，</p>\n<p>再减去双倍后各个数字的个数，若每一个<code>digit_count[i]</code>均为0则为Yes,否则为No。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> digit_count[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) digit_count[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;s;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = s.size();</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; digits;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> digit = s[i]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\tdigits.push_back(digit);</span><br><span class=\"line\">\t\tdigit_count[digit]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = k<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\tdigits[i] = <span class=\"number\">2</span>*digits[i] + carry;</span><br><span class=\"line\">\t\tcarry = digits[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tdigits[i] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tdigit_count[digits[i]]--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (carry) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\\n\"</span>&lt;&lt;carry;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) <span class=\"built_in\">cout</span>&lt;&lt;digits[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (digit_count[i] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tresult = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (result) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Yes\\n\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\\n\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) <span class=\"built_in\">cout</span>&lt;&lt;digits[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1027-Colors-in-Mars-20\"><a href=\"#1027-Colors-in-Mars-20\" class=\"headerlink\" title=\"1027 Colors in Mars (20)\"></a>1027 Colors in Mars (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>People in Mars represent the colors in their computers in a similar way as the Earth people.  That is, a color is represented by a 6-digit number, where the first 2 digits are for Red, the middle 2 digits for Green, and the last 2 digits  for Blue.  The only difference is that they use radix 13 (0-9 and A-C) instead of 16.  Now given a color in three decimal numbers (each between 0 and 168), you are supposed to output their Mars RGB values.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case which occupies a line containing the three decimal color values.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the Mars RGB value in the following format: first output “#”, then followed by a 6-digit number where all the English characters must be upper-cased.  If a single color is only 1-digit long, you must print a “0” to the left.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>15 43 71</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>#123456</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">'#'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = n/<span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp &gt; <span class=\"number\">9</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"keyword\">char</span>((tmp<span class=\"number\">-10</span>)+<span class=\"string\">'A'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;tmp;</span><br><span class=\"line\">        tmp = n%<span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp &gt; <span class=\"number\">9</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"keyword\">char</span>((tmp<span class=\"number\">-10</span>)+<span class=\"string\">'A'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1028-List-Sorting-25\"><a href=\"#1028-List-Sorting-25\" class=\"headerlink\" title=\"1028 List Sorting (25)\"></a>1028 List Sorting (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Excel can sort records according to any column.  Now you are supposed to imitate this function.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains two integers N (&lt;=100000) and C, where N is the number of records and C is the column that you are supposed to sort the records with.  Then N lines follow, each contains a record of a student.  A student’s record consists of his or her distinct ID (a 6-digit number), name (a string with no more than 8 characters without space), and grade (an integer between 0 and 100, inclusive).</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output the sorting result in N lines.  That is, if C = 1 then the records must be sorted in increasing order according to ID’s; if C = 2 then the records must be sorted in non-decreasing order according to names; and if C = 3 then the records must be sorted in non-decreasing order according to grades.  <strong>If there are several students who have the same name or grade, they must be sorted according to their ID’s in increasing order.</strong></p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3 1<br>000007 James 85<br>000010 Amy 90<br>000001 Zoe 60</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>000001 Zoe 60<br>000007 James 85<br>000010 Amy 90</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>利用结构体，使用sort函数排序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\tstudent(<span class=\"built_in\">string</span> i, <span class=\"built_in\">string</span> n, <span class=\"keyword\">int</span> g) &#123;id = i, name = n, grade = g;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp1</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.id &lt; b.id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp2</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a.name == b.name)?(a.id &lt; b.id):(a.name &lt; b.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp3</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a.grade == b.grade)?(a.id &lt; b.id):(a.grade &lt; b.grade);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,c;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;c;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt; students;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id,name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;name&gt;&gt;grade;</span><br><span class=\"line\">\t\tstudents.push_back(student(id,name,grade));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c == <span class=\"number\">1</span>) sort(students.begin(),students.end(),cmp1);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"number\">2</span>) sort(students.begin(),students.end(),cmp2);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> sort(students.begin(),students.end(),cmp3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;students[<span class=\"number\">0</span>].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[<span class=\"number\">0</span>].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[<span class=\"number\">0</span>].grade;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;students[i].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[i].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[i].grade;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1029-Median-25\"><a href=\"#1029-Median-25\" class=\"headerlink\" title=\"1029 Median (25)\"></a>1029 Median (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given an increasing sequence S of N integers, the <em>median</em> is the number at the middle position.  For example, the median of S1={11, 12, 13, 14} is 12, and the median of S2={9, 10, 15, 16, 17} is 15.  The median of two sequences is defined to be the median of the nondecreasing sequence which contains all the elements of both sequences.  For example, the median of S1 and S2 is 13.<br>Given two increasing sequences of integers, you are asked to find their median.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case occupies 2 lines, each gives the information of a sequence.  For each sequence, the first positive integer N (&lt;=1000000) is the size of that sequence.  Then N integers follow, separated by a space.  It is guaranteed that all the integers are in the range of <strong>long int</strong>.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the median of the two given sequences in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4 11 12 13 14<br>5 9 10 15 16 17</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>13</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>用两个数组存储两组数据，每组数据一个pos，比较两个pos出的数值大小，较小值的pos向后移，直到找到中位数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* firstSequence = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) <span class=\"built_in\">cin</span>&gt;&gt;firstSequence[i];</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* secondSequence = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;secondSequence[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> firstPos = <span class=\"number\">0</span>, secondPos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"keyword\">int</span>((m+n+<span class=\"number\">1</span>)/<span class=\"number\">2</span>); i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (firstPos == m) <span class=\"built_in\">cout</span>&lt;&lt;secondSequence[secondPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondPos == n) <span class=\"built_in\">cout</span>&lt;&lt;firstSequence[firstPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstSequence[firstPos] &lt; secondSequence[secondPos]) <span class=\"built_in\">cout</span>&lt;&lt;firstSequence[firstPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;secondSequence[secondPos];</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (firstPos == m) secondPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondPos == n) firstPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstSequence[firstPos] &lt; secondSequence[secondPos]) firstPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> secondPos++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> firstSequence;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> secondSequence;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1030-Travel-Plan-30\"><a href=\"#1030-Travel-Plan-30\" class=\"headerlink\" title=\"1030 Travel Plan (30)\"></a>1030 Travel Plan (30)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A traveler’s map gives the distances between cities along the highways, together with the cost of each highway.<br> Now you are supposed to write a program to help a traveler to decide the shortest path between his/her starting city and the destination.<br> If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.</p>\n<p> DECLARE: The test data in PAT is wrong,we strengthened the test data.If the same code got passed in pat,it may not be able to get passed in NOWCODER,please check your code.(This means that our test data is no problem,I guarantee.)</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a line containing 4 positive integers N, M, S, and D, where N (&lt;=500) is the number of cities (and hence the cities are numbered from 0 to N-1); M is the number of highways; S and D are the starting and the destination cities, respectively. Then M lines follow, each provides the information of a highway, in the format:<br> City1 City2 Distance Cost</p>\n<p> where the numbers are all integers no more than 500, and are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4 5 0 3</p>\n<p>0 1 1 20</p>\n<p>1 3 2 30</p>\n<p>0 3 4 10</p>\n<p>0 2 2 20</p>\n<p>2 3 1 20</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>0 2 3 3 40</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>最短路问题，用Dijkstra（迪杰斯特拉）算法解即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">highway</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> endCity;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> distance;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">\thighway(<span class=\"keyword\">int</span> e, <span class=\"keyword\">int</span> d, <span class=\"keyword\">int</span> c) &#123;endCity=e,distance=d,cost=c;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// N为城市数，M为公路数，S为开始城市，D为结束城市</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> N,M,S,D;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;N&gt;&gt;M&gt;&gt;S&gt;&gt;D;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// highways(i) 为与城市i相连的所有公路</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;highway&gt; &gt; highways(N);</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span>* visited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* distance = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* cost = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* lastCity = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </span><br><span class=\"line\">\t\tvisited[i] = <span class=\"literal\">false</span>, distance[i] = cost[i] = INT_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读入数据，更新highways</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_city_1, tmp_city_2, tmp_distance, tmp_cost;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (M--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_city_1&gt;&gt;tmp_city_2&gt;&gt;tmp_distance&gt;&gt;tmp_cost;</span><br><span class=\"line\">\t\thighways[tmp_city_1].push_back(highway(tmp_city_2,tmp_distance,tmp_cost));</span><br><span class=\"line\">\t\thighways[tmp_city_2].push_back(highway(tmp_city_1,tmp_distance,tmp_cost));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// dijkstra</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> currentCity = S;</span><br><span class=\"line\">\tvisited[S] = <span class=\"literal\">true</span>, distance[S] = cost[S] = <span class=\"number\">0</span>, lastCity[S] = S;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != D) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; highways[currentCity].size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> tmp_endCity = highways[currentCity][i].endCity, </span><br><span class=\"line\">\t\t\t\ttmp_distance = highways[currentCity][i].distance,</span><br><span class=\"line\">\t\t\t\ttmp_cost = highways[currentCity][i].cost;\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[tmp_endCity]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distance[currentCity] + tmp_distance &lt; distance[tmp_endCity] ||</span><br><span class=\"line\">\t\t\t\t(distance[currentCity] + tmp_distance == distance[tmp_endCity] &amp;&amp; </span><br><span class=\"line\">\t\t\t\t cost[currentCity] + tmp_cost &lt; cost[tmp_endCity])) &#123;</span><br><span class=\"line\">\t\t\t\tdistance[tmp_endCity] = distance[currentCity] + tmp_distance;</span><br><span class=\"line\">\t\t\t\tcost[tmp_endCity] = cost[currentCity] + tmp_cost;</span><br><span class=\"line\">\t\t\t\tlastCity[tmp_endCity] = currentCity;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> minDistance = INT_MAX;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distance[i] &lt; minDistance) minDistance=distance[i],currentCity = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加离起始点最短的点到已访问集</span></span><br><span class=\"line\">\t\tvisited[currentCity] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 逆序列逆向输出即为最短路径</span></span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; pathStack;</span><br><span class=\"line\">\tpathStack.push(D);</span><br><span class=\"line\">\tcurrentCity = D;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != S) &#123;</span><br><span class=\"line\">\t\tcurrentCity = lastCity[currentCity];</span><br><span class=\"line\">\t\tpathStack.push(currentCity);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!pathStack.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;pathStack.top()&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\tpathStack.pop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;distance[D]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;cost[D];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> visited,distance,cost,lastCity;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1035-Password-20\"><a href=\"#1035-Password-20\" class=\"headerlink\" title=\"1035 Password (20)\"></a>1035 Password (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>To prepare for PAT, the judge sometimes has to generate random passwords for the users.  The problem is that there are always some confusing passwords since it is hard to distinguish 1 (one) from l (L in lowercase), or 0 (zero) from O (o in uppercase).  One solution is to replace 1 (one) by @, 0 (zero) by %, l by L, and O by o.  Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a positive integer N (&lt;= 1000), followed by N lines of accounts.  Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, first print the number M of accounts that have been modified, then print in the following M lines the modified accounts info, that is, the user names and the corresponding modified passwords.  The accounts must be printed in the same order as they are read in.  If no account is modified, print in one line “There are N accounts and no account is modified” where N is the total number of accounts.  However, if N is one, you must print “There is 1 account and no account is modified” instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>Team000002 Rlsp0dfa<br>Team000003 perfectpwd<br>Team000001 R1spOdfa</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>2<br>Team000002 RLsp%dfa<br>Team000001 R@spodfa</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">account</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> password;</span><br><span class=\"line\">\taccount(<span class=\"built_in\">string</span> i, <span class=\"built_in\">string</span> p) &#123;id = i, password = p;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;account&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id,password;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;password;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (password.find_first_of(<span class=\"string\">'0'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'O'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'1'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'l'</span>) == <span class=\"built_in\">string</span>::npos)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; password.size(); s++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'0'</span>) password[s] = <span class=\"string\">'%'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'O'</span>) password[s] = <span class=\"string\">'o'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'1'</span>) password[s] = <span class=\"string\">'@'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'l'</span>) password[s] = <span class=\"string\">'L'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tresult.push_back(account(id,password));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result_len = result.size();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> &amp;&amp; result_len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"There is 1 account and no account is modified\"</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result_len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"There are \"</span>&lt;&lt;n&lt;&lt;<span class=\"string\">\" accounts and no account is modified\"</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;result_len;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result_len; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;result[i].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;result[i].password;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1036-Boys-vs-Girls-25\"><a href=\"#1036-Boys-vs-Girls-25\" class=\"headerlink\" title=\"1036 Boys vs Girls (25)\"></a>1036 Boys vs Girls (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time you are asked to tell the difference between the lowest grade of all the male students and the highest grade of all the female students.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a positive integer N, followed by N lines of student information.  Each line contains a student’s name, gender, ID and grade, separated by a space, where name and ID are strings of no more than 10 characters with no space, gender is either F (female) or M (male), and grade is an integer between 0 and 100.  It is guaranteed that all the grades are distinct.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in 3 lines.  The first line gives the name and ID of the female student with the highest grade, and the second line gives that of the male student with the lowest grade.  The third line gives the difference gradeF-gradeM.  If one such kind of student is missing, output “Absent” in the corresponding line, and output “NA” in the third line instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>Joe M Math990112 89<br>Mike M CS991301 100<br>Mary F EE990830 95</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Mary EE990830<br>Joe Math990112<br>6</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> re_male_name, re_male_id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> re_female_name, re_female_id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> re_male_grade = <span class=\"number\">101</span>, re_female_grade = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name, gender, id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;name&gt;&gt;gender&gt;&gt;id&gt;&gt;grade;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (gender==<span class=\"string\">\"M\"</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grade &lt; re_male_grade) &#123;</span><br><span class=\"line\">\t\t\t\tre_male_name = name;</span><br><span class=\"line\">\t\t\t\tre_male_id = id;</span><br><span class=\"line\">\t\t\t\tre_male_grade = grade;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grade &gt; re_female_grade) &#123;</span><br><span class=\"line\">\t\t\t\tre_female_name = name;</span><br><span class=\"line\">\t\t\t\tre_female_id = id;</span><br><span class=\"line\">\t\t\t\tre_female_grade = grade;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_female_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Absent\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_female_name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_female_id&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_male_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Absent\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_male_name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_male_id&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_female_name==<span class=\"string\">\"\"</span> || re_male_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NA\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_female_grade - re_male_grade;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1037-Magic-Coupon-25\"><a href=\"#1037-Magic-Coupon-25\" class=\"headerlink\" title=\"1037 Magic Coupon (25)\"></a>1037 Magic Coupon (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>The magic shop in Mars is offering some magic coupons.  Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may get N times the value of that product back!  What is more, the shop also offers some bonus product for free.  However, if you apply a coupon with a positive N to this bonus product, you will have to pay the shop N times the value of the bonus product… but hey, magically, they have some coupons with negative N’s!<br>For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M\\$) where a negative value corresponds to a bonus product.  You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; coupon 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back.  On the other hand, if you apply coupon 3 to product 4, you will have to pay M\\$12 to the shop.<br>Each coupon and each product may be selected at most once.  Your task is to get as much money back as possible.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains the number of coupons NC, followed by a line with NC coupon integers.  Then the next line contains the number of products NP, followed by a line with NP product values.  Here 1&lt;= NC, NP &lt;= 105, and it is guaranteed that all the numbers will not exceed 230.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, simply print in a line the maximum amount of money you can get back.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4<br>1 2 4 -1<br>4<br>7 6 -2 -3</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>43</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<h2 id=\"1054-The-Dominant-Color-20\"><a href=\"#1054-The-Dominant-Color-20\" class=\"headerlink\" title=\"1054 The Dominant Color (20)\"></a>1054 The Dominant Color (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Behind the scenes in the computer’s memory, color is always talked about as a series of 24 bits of information for each pixel.  In an image, the color with the largest proportional area is called the dominant color.  <strong>A <em>strictly</em> dominant color takes more than half of the total area.</strong>  Now given an image of resolution M by N (for example, 800x600), you are supposed to point out the strictly dominant color.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains 2 positive numbers: M (&lt;=800) and N (&lt;=600) which are the resolutions of the image.  Then N lines follow, each contains M digital colors in the range [0, 224).  It is guaranteed that the strictly dominant color exists for each input image.  All the numbers in a line are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, simply print the dominant color in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5 3<br>0 0 255 16777215 24<br>24 24 0 0 24<br>24 0 24 24 24</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p> 24</p>\n</blockquote>\n<p>首先要注意到dominant color是超过半数的，刚开始只想到了排序后最中间的数一定为结果，但是要存储的数据太多，后来看了<a href=\"https://blog.csdn.net/zhu_liangwei/article/details/9734671\" target=\"_blank\" rel=\"noopener\">参考链接</a>，学会了下边这个方法。</p>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m, n, all_count, tmp, re = <span class=\"number\">-1</span>, count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class=\"line\">    all_count = m*n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (all_count--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) re = tmp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (re == tmp) count++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;re;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1081-Rational-Sum-20\"><a href=\"#1081-Rational-Sum-20\" class=\"headerlink\" title=\"1081 Rational Sum (20)\"></a>1081 Rational Sum (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given N rational numbers in the form “numerator/denominator”, you are supposed to calculate their sum.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a positive integer N (&lt;=100), followed in the next line N rational numbers “a1/b1 a2/b2 …” where all the numerators and denominators are in the range of “long int”.  If there is a negative number, then the sign must appear in front of the numerator.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output the sum in the simplest form “integer numerator/denominator” where “integer” is the integer part of the sum, “numerator” &lt; “denominator”, and the numerator and the denominator have no common factor.  You must output only the fractional part if the integer part is 0.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5<br>2/5 4/15 1/30 -2/60 8/3</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 1/3</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((b==<span class=\"number\">0</span>)?<span class=\"built_in\">abs</span>(a):gcd(b,a%b));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n, tmp_gcd;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> re_integer = <span class=\"number\">0</span>, re_numerator, re_denominator;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;re_numerator&gt;&gt;c&gt;&gt;re_denominator;</span><br><span class=\"line\">    tmp_gcd = gcd(re_numerator,re_denominator);</span><br><span class=\"line\">    re_numerator/=tmp_gcd,re_denominator/=tmp_gcd;</span><br><span class=\"line\">    re_integer += <span class=\"keyword\">int</span>(re_numerator/re_denominator);</span><br><span class=\"line\">    re_numerator%=re_denominator;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp_nu, tmp_de, tmp_nu_re, tmp_de_re;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;tmp_nu&gt;&gt;c&gt;&gt;tmp_de;</span><br><span class=\"line\">        tmp_de_re = tmp_de * re_denominator;</span><br><span class=\"line\">        tmp_nu_re = tmp_nu * re_denominator + tmp_de * re_numerator;</span><br><span class=\"line\">        tmp_gcd = gcd(tmp_de_re,tmp_nu_re);</span><br><span class=\"line\">        tmp_de_re/=tmp_gcd,tmp_nu_re/=tmp_gcd;</span><br><span class=\"line\">        re_integer += <span class=\"keyword\">int</span>(tmp_nu_re/tmp_de_re);</span><br><span class=\"line\">        re_numerator = tmp_nu_re % tmp_de_re;</span><br><span class=\"line\">        re_denominator = tmp_de_re;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re_integer == <span class=\"number\">0</span> &amp;&amp; re_numerator == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (re_integer == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;re_numerator&lt;&lt;<span class=\"string\">'/'</span>&lt;&lt;re_denominator;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (re_numerator == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re_integer;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re_integer&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_numerator&lt;&lt;<span class=\"string\">'/'</span>&lt;&lt;re_denominator;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1082-Read-Number-in-Chinese-25\"><a href=\"#1082-Read-Number-in-Chinese-25\" class=\"headerlink\" title=\"1082 Read Number in Chinese (25)\"></a>1082 Read Number in Chinese (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way.  Output “Fu” first if it is negative.  For example, -123456789 is read as “Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu”.  Note: zero (“ling”) must be handled correctly according to the Chinese tradition.  For example, 100800 is “yi Shi Wan ling ba Bai”.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case, which gives an integer with no more than 9 digits.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in a line the Chinese way of reading the number.  The characters are separated by a space and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>-123456789</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>首先按照数字单位的顺序添加到结果容器中，然后遍历结果容器，如果有连续重复的”ling”只留一个，如果”Wan”前有“ling”去掉0，如果”Wan”直接跟在“Yi”后边将“Wan”换成“ling”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> units[] = &#123;<span class=\"string\">\"\"</span>,<span class=\"string\">\"Shi\"</span>,<span class=\"string\">\"Bai\"</span>,<span class=\"string\">\"Qian\"</span>,<span class=\"string\">\"Wan\"</span>,<span class=\"string\">\"Shi\"</span>,<span class=\"string\">\"Bai\"</span>,<span class=\"string\">\"Qian\"</span>,<span class=\"string\">\"Yi\"</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> digits[] = &#123;<span class=\"string\">\"ling\"</span>,<span class=\"string\">\"yi\"</span>,<span class=\"string\">\"er\"</span>,<span class=\"string\">\"san\"</span>,<span class=\"string\">\"si\"</span>,<span class=\"string\">\"wu\"</span>,<span class=\"string\">\"liu\"</span>,<span class=\"string\">\"qi\"</span>,<span class=\"string\">\"ba\"</span>,<span class=\"string\">\"jiu\"</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; re;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tre.push_back(<span class=\"string\">\"Fu\"</span>);</span><br><span class=\"line\">\t\tn = -n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"ling\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; n_digits;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tn_digits.push_back(n%<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tn/=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = n_digits.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = len<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\tre.push_back(digits[n_digits[i]]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i==<span class=\"number\">4</span> || n_digits[i] != <span class=\"number\">0</span> &amp;&amp; i&gt;<span class=\"number\">0</span>) re.push_back(units[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;::iterator iter = re.begin()+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (iter &lt; re.end()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"ling\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"ling\"</span>)</span><br><span class=\"line\">\t\t\tre.erase(iter);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"Wan\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"ling\"</span>)</span><br><span class=\"line\">\t\t\tre.erase((iter--)<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"Wan\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"Yi\"</span>)</span><br><span class=\"line\">\t\t\t*(iter++) = <span class=\"string\">\"ling\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\titer++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re.size()&gt;<span class=\"number\">1</span> &amp;&amp; re[re.size()<span class=\"number\">-1</span>]==<span class=\"string\">\"ling\"</span>) re.erase(re.end()<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;re[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; re.size(); i++) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[i];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1083-List-Grades-25\"><a href=\"#1083-List-Grades-25\" class=\"headerlink\" title=\"1083 List Grades (25)\"></a>1083 List Grades (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a list of N student records with name, ID and grade.  You are supposed to sort the records with respect to the grade in non-increasing order, and output those student records of which the grades are in a given interval.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case is given in the following format:<br>N<br>name[1] ID[1] grade[1]<br>name[2] ID[2] grade[2]<br>… …<br>name[N] ID[N] grade[N]<br>grade1 grade2</p>\n<p>where name[i] and ID[i] are strings of no more than 10 characters with no space, grade[i] is an integer in [0, 100], grade1 and grade2 are the boundaries of the grade’s interval.  It is guaranteed that all the grades are <em>distinct</em>.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the student records of which the grades are in the given interval [grade1, grade2] and are in non-increasing order.  Each student record occupies a line with the student’s name and ID, separated by one space.  If there is no student’s grade in that interval, output “NONE” instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4<br>Tom CS000001 59<br>Joe Math990112 89<br>Mike CS991301 100<br>Mary EE990830 95<br>60 100</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Mike CS991301<br>Mary EE990830<br>Joe Math990112</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\tstudent(<span class=\"built_in\">string</span> n,<span class=\"built_in\">string</span> i, <span class=\"keyword\">int</span> g) &#123;</span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tid = i;</span><br><span class=\"line\">\t\tgrade = g;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt; re;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name,id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;name&gt;&gt;id&gt;&gt;grade;</span><br><span class=\"line\">\t\t<span class=\"function\">student <span class=\"title\">tmp</span><span class=\"params\">(name,id,grade)</span></span>;</span><br><span class=\"line\">\t\tre.push_back(tmp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> min_grade,max_grade;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;min_grade&gt;&gt;max_grade;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt;::iterator iter = re.begin();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (iter != re.end()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((*iter).grade &lt; min_grade || (*iter).grade &gt; max_grade)</span><br><span class=\"line\">\t\t\tre.erase(iter);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\titer++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span> ; k &lt; re.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; re.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (re[i].grade &lt; re[i+<span class=\"number\">1</span>].grade) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"function\">student <span class=\"title\">tmp</span><span class=\"params\">(re[i].name,re[i].id,re[i].grade)</span></span>;</span><br><span class=\"line\">\t\t\t\tre[i] = re[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tre[i+<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re.empty()) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NONE\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re[<span class=\"number\">0</span>].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[<span class=\"number\">0</span>].id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; re.size(); i++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;re[i].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[i].id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1086-Tree-Traversals-Again-25\"><a href=\"#1086-Tree-Traversals-Again-25\" class=\"headerlink\" title=\"1086 Tree Traversals Again (25)\"></a>1086 Tree Traversals Again (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>An inorder binary tree traversal can be implemented in a non-recursive way with a stack.  For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop().  Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations.  Your task is to give the postorder traversal sequence of this tree.</p>\n<p><img src=\"/images/pat_1086.jpg\" alt=\"\"></p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains a positive integer N (&lt;=30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N).  Then 2N lines follow, each describes a stack operation in the format: “Push X” where X is the index of the node being pushed onto the stack; or “Pop” meaning to pop one node from the stack.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print the postorder traversal sequence of the corresponding tree in one line.  A solution is guaranteed to exist.  All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>6<br>Push 1<br>Push 2<br>Push 3<br>Pop<br>Pop<br>Push 4<br>Pop<br>Pop<br>Push 5<br>Push 6<br>Pop<br>Pop</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 4 2 6 5 1</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>以上述例子为例，按顺序排下来123456为前序，使用栈的pop顺序为中序，利用前序和中序可以得到后序。</p>\n<p>注意1-N为标号，每次push的为值，值有可能重复，但是push顺序为标号1-N。</p>\n<p>可以用下边这个测试用例测试：</p>\n<blockquote>\n<p>//输入</p>\n<p>19<br>Push 4<br>Push 11<br>Push 7<br>Push 12<br>Pop<br>Pop<br>Pop<br>Push 14<br>Push 17<br>Pop<br>Pop<br>Push 6<br>Push 18<br>Pop<br>Push 8<br>Pop<br>Pop<br>Push 4<br>Pop<br>Pop<br>Push 11<br>Push 16<br>Push 11<br>Push 12<br>Pop<br>Push 2<br>Pop<br>Pop<br>Pop<br>Push 7<br>Push 4<br>Pop<br>Pop<br>Push 12<br>Pop<br>Pop<br>Push 11<br>Pop</p>\n<p>// 输出</p>\n<p>12 7 17 8 18 4 6 14 11 2 12 11 4 12 7 16 11 11 4 </p>\n</blockquote>\n<p>我的代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; post;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePostOrder</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; in, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tpost.push_back(pre[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> root_num = pre[<span class=\"number\">0</span>], root_pos_of_in = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; root_pos_of_in &lt; len; root_pos_of_in++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (in[root_pos_of_in] == root_num) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> left_len = root_pos_of_in;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> right_len = len - left_len - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre_left,pre_right,in_left,in_right;</span><br><span class=\"line\">\tpre_left.assign(pre.begin()+<span class=\"number\">1</span>, pre.begin()+<span class=\"number\">1</span>+left_len);</span><br><span class=\"line\">\tpre_right.assign(pre.begin()+<span class=\"number\">1</span>+left_len, pre.end());</span><br><span class=\"line\">\tin_left.assign(in.begin(),in.begin()+left_len);</span><br><span class=\"line\">\tin_right.assign(in.begin()+left_len+<span class=\"number\">1</span>, in.end());</span><br><span class=\"line\">\tgeneratePostOrder(pre_left,in_left,left_len);</span><br><span class=\"line\">\tgeneratePostOrder(pre_right,in_right,right_len);</span><br><span class=\"line\">\tpost.push_back(root_num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, tmp;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> op;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre,in,value;</span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; tmp_stack;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>*n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;op;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (op == <span class=\"string\">\"Push\"</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">\t\t\tvalue.push_back(tmp);</span><br><span class=\"line\">\t\t\ttmp_stack.push(index);</span><br><span class=\"line\">\t\t\tpre.push_back(index++);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tin.push_back(tmp_stack.top());</span><br><span class=\"line\">\t\t\ttmp_stack.pop();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgeneratePostOrder(pre,in,n);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;value[post[<span class=\"number\">0</span>]];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;value[post[i]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10xx\"><a href=\"#10xx\" class=\"headerlink\" title=\"10xx\"></a>10xx</h2><p><strong>题目描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>实现代码</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>OJ：<a href=\"https://www.nowcoder.com/pat\" target=\"_blank\" rel=\"noopener\">牛客网</a></p>\n<hr>\n<h2 id=\"1001-A-B-Format-20\"><a href=\"#1001-A-B-Format-20\" class=\"headerlink\" title=\"1001 A+B Format (20)\"></a>1001 A+B Format (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Calculate a + b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a pair of integers a and b where -1000000 &lt;= a, b &lt;= 1000000.  The numbers are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, you should output the sum of a and b in one line.  The sum must be written in the standard format.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>-1000000 9</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>-999,991</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> digit[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) digit[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,re;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    re = a + b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">'-'</span>;</span><br><span class=\"line\">        re = -re;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(re) &#123;</span><br><span class=\"line\">        digit[i] = (re%<span class=\"number\">10</span>);</span><br><span class=\"line\">        re/=<span class=\"number\">10</span>;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i<span class=\"number\">-1</span>; k &gt;=<span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;digit[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k%<span class=\"number\">3</span> == <span class=\"number\">0</span> &amp;&amp; k&gt;<span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">','</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1002-A-B-for-Polynomials-25\"><a href=\"#1002-A-B-for-Polynomials-25\" class=\"headerlink\" title=\"1002 A+B for Polynomials (25)\"></a>1002 A+B for Polynomials (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time, you are supposed to find A+B where A and B are two polynomials.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:<br>K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively.  It is given that 1 &lt;= K &lt;= 10，0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the sum of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  <strong>Please be accurate to 1 decimal place.</strong></p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 2 1.5 1 2.9 0 3.2</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>注意保留小数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">item</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> value;</span><br><span class=\"line\">\titem(<span class=\"keyword\">int</span> a, <span class=\"keyword\">float</span> b) &#123;n=a,value=b;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;item&gt; polynomials;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_n;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> tmp_value;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\tpolynomials.push_back(item(tmp_n,tmp_value));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> hasItem = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (polynomials[i].n == tmp_n) &#123;</span><br><span class=\"line\">\t\t\t\thasItem = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\tpolynomials[i].value+=tmp_value;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (polynomials[i].value == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\tpolynomials.erase(polynomials.begin()+i);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hasItem) polynomials.push_back(item(tmp_n,tmp_value));\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; polynomials.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (polynomials[i].n &lt; polynomials[i+<span class=\"number\">1</span>].n) &#123;</span><br><span class=\"line\">\t\t\t\titem tmp_item = polynomials[i];</span><br><span class=\"line\">\t\t\t\tpolynomials[i] = polynomials[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tpolynomials[i+<span class=\"number\">1</span>] = tmp_item;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;polynomials.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; polynomials.size(); i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %.1f\"</span>, polynomials[i].n, polynomials[i].value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1003-Emergency-25\"><a href=\"#1003-Emergency-25\" class=\"headerlink\" title=\"1003 Emergency (25)\"></a>1003 Emergency (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>As an emergency rescue team leader of a city, you are given a special map of your country.  The map shows several scattered cities connected by some roads.  Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map.  When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (&lt;= 500) - the number of cities (and the cities are numbered from 0 to N-1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively.  The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city.  Then M lines follow, each describes a road with three integers c1, c2 and L, which are the pair of cities connected by a road and the length of that road, respectively.<br>It is guaranteed that there exists at least one path from C1 to C2.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2, and the maximum amount of rescue teams you can possibly gather.</p>\n<p>All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5 6 0 2<br>1 2 1 5 3<br>0 1 1<br>0 2 2<br>0 3 1<br>1 2 1<br>2 4 1<br>3 4 1</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>2 4</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>dijkstra最短路</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">road</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> endCity;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length;</span><br><span class=\"line\">\troad(<span class=\"keyword\">int</span> e, <span class=\"keyword\">int</span> l) &#123;endCity = e, length = l;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m,c1,c2;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;c1&gt;&gt;c2;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; teamsCount;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp1,tmp2,tmp3;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp1;</span><br><span class=\"line\">\t\tteamsCount.push_back(tmp1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;road&gt; &gt; roads(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp1&gt;&gt;tmp2&gt;&gt;tmp3;</span><br><span class=\"line\">\t\troads[tmp1].push_back(road(tmp2,tmp3));</span><br><span class=\"line\">\t\troads[tmp2].push_back(road(tmp1,tmp3));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; maxTeams(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) maxTeams[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tmaxTeams[c1] = teamsCount[c1];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minLen(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) minLen[i] = INT_MAX;</span><br><span class=\"line\">\tminLen[c1] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> currentCity = c1;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minLenRoadCount(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) minLenRoadCount[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; visited(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tvisited[c1] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != c2) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = roads[currentCity].size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[roads[currentCity][i].endCity]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> endCity = roads[currentCity][i].endCity;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> length = roads[currentCity][i].length;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (minLen[endCity] &gt; minLen[currentCity] + length) &#123;</span><br><span class=\"line\">\t\t\t\tminLen[endCity] = minLen[currentCity] + length;</span><br><span class=\"line\">\t\t\t\tminLenRoadCount[endCity] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (minLen[endCity] == minLen[currentCity] + length) &#123;</span><br><span class=\"line\">\t\t\t\tminLenRoadCount[endCity]++;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (maxTeams[endCity] &lt; maxTeams[currentCity] + teamsCount[endCity])</span><br><span class=\"line\">\t\t\t\t\tmaxTeams[endCity] = maxTeams[currentCity] + teamsCount[endCity];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> min = INT_MAX;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (minLen[i] &lt; min) &#123;</span><br><span class=\"line\">\t\t\t\tmin = minLen[i];</span><br><span class=\"line\">\t\t\t\tcurrentCity = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tvisited[currentCity] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;minLenRoadCount[c2]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;maxTeams[c2];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1004-Counting-Leaves-30\"><a href=\"#1004-Counting-Leaves-30\" class=\"headerlink\" title=\"1004 Counting Leaves (30)\"></a>1004 Counting Leaves (30)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A family hierarchy is usually presented by a pedigree tree.  Your job is to count those family members who have no child.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a line containing 0 &lt; N &lt; 100, the number of nodes in a tree, and M (&lt; N), the number of non-leaf nodes.  Then M lines follow, each in the format:</p>\n<p>ID K ID[1] ID[2] … ID[K]</p>\n<p>where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID’s of its children.  For the sake of simplicity, let us fix the root ID to be 01.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, you are supposed to count those family members who have no child <strong>for every seniority level</strong> starting from the root.  The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.<br>The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child.  Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node.  Then we should output “0 1” in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1<br>01 1 02</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>0 1</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_NODES 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> childs_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; childs;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">\tnode nodes[MAX_NODES];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id,k,tmp;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;k;</span><br><span class=\"line\">\t\tnodes[id].id = id;</span><br><span class=\"line\">\t\tnodes[id].childs_count = k;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">\t\t\t(nodes[id].childs).push_back(tmp);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; this_level, next_level;</span><br><span class=\"line\">\tthis_level.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count_output = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; this_level.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nodes[this_level[i]].childs_count == <span class=\"number\">0</span>) count_output++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> next_level.insert(next_level.begin(),nodes[this_level[i]].childs.begin(),nodes[this_level[i]].childs.end());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;count_output;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (next_level.empty()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\tthis_level = next_level;</span><br><span class=\"line\">\t\tnext_level.clear();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1005-Spell-It-Right-20\"><a href=\"#1005-Spell-It-Right-20\" class=\"headerlink\" title=\"1005 Spell It Right (20)\"></a>1005 Spell It Right (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies one line which contains an N (&lt;= 10^100).</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>12345</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>one five</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = n.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) re+=(n[i]-<span class=\"string\">'0'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">string</span> english[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"zero\"</span>,<span class=\"string\">\"one\"</span>,<span class=\"string\">\"two\"</span>,<span class=\"string\">\"three\"</span>,<span class=\"string\">\"four\"</span>,<span class=\"string\">\"five\"</span>,<span class=\"string\">\"six\"</span>,<span class=\"string\">\"seven\"</span>,<span class=\"string\">\"eight\"</span>,<span class=\"string\">\"nine\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> digit[<span class=\"number\">100</span>], re_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (re) &#123;</span><br><span class=\"line\">        digit[re_len] = (re%<span class=\"number\">10</span>);</span><br><span class=\"line\">        re/=<span class=\"number\">10</span>;</span><br><span class=\"line\">        re_len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = re_len<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;english[digit[i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1006-Sign-In-and-Sign-Out-25\"><a href=\"#1006-Sign-In-and-Sign-Out-25\" class=\"headerlink\" title=\"1006 Sign In and Sign Out (25)\"></a>1006 Sign In and Sign Out (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door.  Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case contains the records for one day.  The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:</p>\n<p>ID_number Sign_in_time Sign_out_time</p>\n<p>where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day.  The two ID numbers must be separated by one space.<br>Note:  It is guaranteed that the records are consistent.  That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>CS301111 15:30:28 17:00:10<br>SC3021234 08:00:00 11:25:25<br>CS301133 21:45:00 21:58:40</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>SC3021234 CS301133</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">a_larger_than_b</span><span class=\"params\">(<span class=\"built_in\">string</span> a, <span class=\"built_in\">string</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; b[i]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] &gt; b[i]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> id,in,out;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> result_in_id, result_in_time, result_out_id, result_out_time;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;in&gt;&gt;out;</span><br><span class=\"line\">    result_in_id = result_out_id = id;</span><br><span class=\"line\">    result_in_time = in;</span><br><span class=\"line\">    result_out_time = out;</span><br><span class=\"line\">    n--;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;in&gt;&gt;out;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a_larger_than_b(result_in_time,in)) &#123;</span><br><span class=\"line\">            result_in_id = id;</span><br><span class=\"line\">            result_in_time = in;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a_larger_than_b(out,result_out_time)) &#123;</span><br><span class=\"line\">            result_out_id = id;</span><br><span class=\"line\">            result_out_time = out;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;result_in_id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;result_out_id;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1007-Maximum-Subsequence-Sum-25\"><a href=\"#1007-Maximum-Subsequence-Sum-25\" class=\"headerlink\" title=\"1007 Maximum Subsequence Sum (25)\"></a>1007 Maximum Subsequence Sum (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a sequence of K integers { N1<br>, N2<br>, …, NK<br> }.  A continuous subsequence is defined to be { Ni<br>, Ni+1<br>, …, Nj<br> } where 1 &lt;= i &lt;= j &lt;= K.  The <em>Maximum Subsequence</em><br> is the continuous subsequence which has the largest sum of its<br>elements.  For example, given sequence { -2, 11, -4, 13, -5, -2 }, its<br>maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>\n<p>Now you are supposed to find the largest sum, together with the first<br>and the last numbers of the maximum subsequence.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies two lines.  The first line contains a positive integer K (&lt;= 10000).  The second line contains K numbers, separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line.  In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case).  If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>10<br>-10 1 2 3 4 -5 -23 3 7 -21</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>10 1 4</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p><u>和为负的子序列一定不会是最大和子序列的开头。</u></p>\n<p>当当前和小于0时，使用临时”first number”记录下一个数，</p>\n<p>更新最大和时，当前数为“last number”， 临时“first number”中存储的值为“first number”的值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* nums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> allNegative = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;nums[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nums[i] &gt;= <span class=\"number\">0</span>) allNegative = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (allNegative) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;nums[<span class=\"number\">0</span>]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;nums[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>, currentSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> firstNum = nums[<span class=\"number\">0</span>], lastNum = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> firstNumCurrent = firstNum;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tcurrentSum+=nums[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (currentSum &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tfirstNumCurrent = nums[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSum &gt; maxSum) &#123;</span><br><span class=\"line\">\t\t\t\tmaxSum = currentSum;</span><br><span class=\"line\">\t\t\t\tfirstNum = firstNumCurrent;</span><br><span class=\"line\">\t\t\t\tlastNum = nums[i];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;maxSum&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;firstNum&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;lastNum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> nums;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1008-Elevator-20\"><a href=\"#1008-Elevator-20\" class=\"headerlink\" title=\"1008 Elevator (20)\"></a>1008 Elevator (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.<br>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print the total time on a single line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3 2 3 1</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>41</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b, n, re = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; b;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &gt; a) &#123;</span><br><span class=\"line\">            re+=((b-a)*<span class=\"number\">6</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            re+=((a-b)*<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        re+=<span class=\"number\">5</span>;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;re;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1009-Product-of-Polynomials-25\"><a href=\"#1009-Product-of-Polynomials-25\" class=\"headerlink\" title=\"1009 Product of Polynomials (25)\"></a>1009 Product of Polynomials (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time, you are supposed to find A*B where A and B are two polynomials.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:<br>K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively.  It is given that 1 &lt;= K &lt;= 10, 0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the product of A and B in one line, with the same format as the input.  Notice that there must be NO extra space at the end of each line.  Please be accurate up to 1 decimal place.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 3 3.6 2 6.0 1 1.6</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>把<a href=\"#1002-A-B-for-Polynomials-25\">1002 A+B for Polynomials (25)</a>稍微改一下就好。</p>\n<p>使用<code>float</code>虽然算出来明明是对的但是过不了牛客的测试，全部换成<code>double</code>就好了，不知道是什么问题。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">item</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> value;</span><br><span class=\"line\">\titem(<span class=\"keyword\">int</span> a, <span class=\"keyword\">double</span> b) &#123;n=a,value=b;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;item&gt; polynomials, result;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_n;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> tmp_value;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\tpolynomials.push_back(item(tmp_n,tmp_value));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_n&gt;&gt;tmp_value;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; polynomials.size(); k++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">bool</span> hasItem = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size(); i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (result[i].n == tmp_n+polynomials[k].n) &#123;</span><br><span class=\"line\">\t\t\t\t\thasItem = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t\tresult[i].value+=(tmp_value*polynomials[k].value);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (result[i].value == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\t\tresult.erase(result.begin()+i);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!hasItem) result.push_back(item(tmp_n+polynomials[k].n,tmp_value*polynomials[k].value));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; result.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result[i].n &lt; result[i+<span class=\"number\">1</span>].n) &#123;</span><br><span class=\"line\">\t\t\t\titem tmp_item = result[i];</span><br><span class=\"line\">\t\t\t\tresult[i] = result[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tresult[i+<span class=\"number\">1</span>] = tmp_item;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;result.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size(); i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %.1f\"</span>, result[i].n, result[i].value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1015-Reversible-Primes-20\"><a href=\"#1015-Reversible-Primes-20\" class=\"headerlink\" title=\"1015 Reversible Primes (20)\"></a>1015 Reversible Primes (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A <em>reversible prime</em><br> in any number system is a prime whose “reverse” in that<br>number system is also a prime. For example in the decimal system 73 is a<br>reversible prime because its reverse 37 is also a prime.</p>\n<p>Now given any two positive integers N (&lt; 105<br>) and D (1 &lt; D &lt;= 10), you are supposed to tell if N is a<br>reversible prime with radix D.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>The input file consists of several test cases.  Each case occupies a line which contains two integers N and D.  The input is finished by a negative N.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line “Yes” if N is a reversible prime with radix D, or “No” if not.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>73 10<br>23 2<br>23 10<br>-2</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Yes<br>Yes<br>No</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>求N以及N在D进制下反转后是否均为质数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">reverseWithRadix</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; remainers;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tremainers.push_back(n%d);</span><br><span class=\"line\">\t\tn/=d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> re = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bit_count = remainers.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bit_count; i++)</span><br><span class=\"line\">\t\tre+=(<span class=\"built_in\">pow</span>(d,bit_count-i<span class=\"number\">-1</span>)*remainers[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">4</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sqrt_n = <span class=\"built_in\">sqrt</span>(n) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= sqrt_n; i+=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,d;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isPrime(n) &amp;&amp; isPrime(reverseWithRadix(n,d))) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Yes\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1020-Tree-Traversals-25\"><a href=\"#1020-Tree-Traversals-25\" class=\"headerlink\" title=\"1020 Tree Traversals (25)\"></a>1020 Tree Traversals (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Suppose that all the keys in a binary tree are distinct positive integers.  Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line gives a positive integer N (&lt;=30), the total number of nodes in the binary tree.  The second line gives the <strong>postorder</strong> sequence and the third line gives the <strong>inorder</strong> sequence.  All the numbers in a line are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line the level order traversal sequence of the corresponding binary tree.  All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>7<br>2 3 1 5 7 6 4<br>1 2 3 4 5 6 7</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>4 1 6 3 5 7 2</p>\n</blockquote>\n<p>postorder: 后序遍历</p>\n<p>inorder: 中序遍历</p>\n<p>level order: 层序遍历（从根开始,依次向下,对于每一层从左向右遍历）</p>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tnode* left;</span><br><span class=\"line\">\tnode* right;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">node* <span class=\"title\">binaryTreeRoot</span><span class=\"params\">(<span class=\"keyword\">int</span>* postorder, <span class=\"keyword\">int</span>* inorder, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnode* root = <span class=\"keyword\">new</span> node;</span><br><span class=\"line\">\troot-&gt;value = *(postorder+len<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; pos &lt; len; pos++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (*(inorder+pos) == root-&gt;value) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\troot-&gt;left = binaryTreeRoot(postorder, inorder, pos);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> rightLen = len - pos - <span class=\"number\">1</span>;</span><br><span class=\"line\">\troot-&gt;right = binaryTreeRoot(postorder+pos, inorder+pos+<span class=\"number\">1</span>, rightLen);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteNodes</span><span class=\"params\">(node* root)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tdeleteNodes(root-&gt;left);</span><br><span class=\"line\">\tdeleteNodes(root-&gt;right);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* postorderNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* inorderNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;postorderNodes[i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;inorderNodes[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\tnode* root = binaryTreeRoot(postorderNodes, inorderNodes, n);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>&lt;node*&gt; levelNodes;</span><br><span class=\"line\">\tlevelNodes.push(root);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tnode* tmp = levelNodes.front();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tmp-&gt;left) levelNodes.push(tmp-&gt;left);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tmp-&gt;right) levelNodes.push(tmp-&gt;right);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;tmp-&gt;value;</span><br><span class=\"line\">\t\tlevelNodes.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!levelNodes.empty()) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdeleteNodes(root);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> postorderNodes;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> inorderNodes;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1023-Have-Fun-with-Numbers-20\"><a href=\"#1023-Have-Fun-with-Numbers-20\" class=\"headerlink\" title=\"1023 Have Fun with Numbers (20)\"></a>1023 Have Fun with Numbers (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication.  Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation.  Check to see the result if we double it again!</p>\n<p>Now you are suppose to check if there are more numbers with this property.  That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains one positive integer with no more than 20 digits.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, first print in a line “Yes” if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or “No” if not.  Then in the next line, print the doubled number.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>1234567899</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Yes<br>2469135798</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>若双倍后多一位则为No;</p>\n<p>使用<code>digit_count[i]</code>保存数字<code>i</code>（0-9）的个数，</p>\n<p>再减去双倍后各个数字的个数，若每一个<code>digit_count[i]</code>均为0则为Yes,否则为No。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> digit_count[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) digit_count[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;s;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = s.size();</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; digits;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> digit = s[i]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\tdigits.push_back(digit);</span><br><span class=\"line\">\t\tdigit_count[digit]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = k<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\tdigits[i] = <span class=\"number\">2</span>*digits[i] + carry;</span><br><span class=\"line\">\t\tcarry = digits[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tdigits[i] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tdigit_count[digits[i]]--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (carry) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\\n\"</span>&lt;&lt;carry;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) <span class=\"built_in\">cout</span>&lt;&lt;digits[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (digit_count[i] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tresult = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (result) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Yes\\n\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No\\n\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) <span class=\"built_in\">cout</span>&lt;&lt;digits[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1027-Colors-in-Mars-20\"><a href=\"#1027-Colors-in-Mars-20\" class=\"headerlink\" title=\"1027 Colors in Mars (20)\"></a>1027 Colors in Mars (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>People in Mars represent the colors in their computers in a similar way as the Earth people.  That is, a color is represented by a 6-digit number, where the first 2 digits are for Red, the middle 2 digits for Green, and the last 2 digits  for Blue.  The only difference is that they use radix 13 (0-9 and A-C) instead of 16.  Now given a color in three decimal numbers (each between 0 and 168), you are supposed to output their Mars RGB values.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case which occupies a line containing the three decimal color values.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the Mars RGB value in the following format: first output “#”, then followed by a 6-digit number where all the English characters must be upper-cased.  If a single color is only 1-digit long, you must print a “0” to the left.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>15 43 71</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>#123456</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">'#'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = n/<span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp &gt; <span class=\"number\">9</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"keyword\">char</span>((tmp<span class=\"number\">-10</span>)+<span class=\"string\">'A'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;tmp;</span><br><span class=\"line\">        tmp = n%<span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp &gt; <span class=\"number\">9</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"keyword\">char</span>((tmp<span class=\"number\">-10</span>)+<span class=\"string\">'A'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1028-List-Sorting-25\"><a href=\"#1028-List-Sorting-25\" class=\"headerlink\" title=\"1028 List Sorting (25)\"></a>1028 List Sorting (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Excel can sort records according to any column.  Now you are supposed to imitate this function.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains two integers N (&lt;=100000) and C, where N is the number of records and C is the column that you are supposed to sort the records with.  Then N lines follow, each contains a record of a student.  A student’s record consists of his or her distinct ID (a 6-digit number), name (a string with no more than 8 characters without space), and grade (an integer between 0 and 100, inclusive).</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output the sorting result in N lines.  That is, if C = 1 then the records must be sorted in increasing order according to ID’s; if C = 2 then the records must be sorted in non-decreasing order according to names; and if C = 3 then the records must be sorted in non-decreasing order according to grades.  <strong>If there are several students who have the same name or grade, they must be sorted according to their ID’s in increasing order.</strong></p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3 1<br>000007 James 85<br>000010 Amy 90<br>000001 Zoe 60</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>000001 Zoe 60<br>000007 James 85<br>000010 Amy 90</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>利用结构体，使用sort函数排序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\tstudent(<span class=\"built_in\">string</span> i, <span class=\"built_in\">string</span> n, <span class=\"keyword\">int</span> g) &#123;id = i, name = n, grade = g;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp1</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.id &lt; b.id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp2</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a.name == b.name)?(a.id &lt; b.id):(a.name &lt; b.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp3</span><span class=\"params\">(student a, student b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a.grade == b.grade)?(a.id &lt; b.id):(a.grade &lt; b.grade);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,c;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;c;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt; students;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id,name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;name&gt;&gt;grade;</span><br><span class=\"line\">\t\tstudents.push_back(student(id,name,grade));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c == <span class=\"number\">1</span>) sort(students.begin(),students.end(),cmp1);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"number\">2</span>) sort(students.begin(),students.end(),cmp2);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> sort(students.begin(),students.end(),cmp3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;students[<span class=\"number\">0</span>].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[<span class=\"number\">0</span>].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[<span class=\"number\">0</span>].grade;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;students[i].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[i].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;students[i].grade;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1029-Median-25\"><a href=\"#1029-Median-25\" class=\"headerlink\" title=\"1029 Median (25)\"></a>1029 Median (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given an increasing sequence S of N integers, the <em>median</em> is the number at the middle position.  For example, the median of S1={11, 12, 13, 14} is 12, and the median of S2={9, 10, 15, 16, 17} is 15.  The median of two sequences is defined to be the median of the nondecreasing sequence which contains all the elements of both sequences.  For example, the median of S1 and S2 is 13.<br>Given two increasing sequences of integers, you are asked to find their median.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case occupies 2 lines, each gives the information of a sequence.  For each sequence, the first positive integer N (&lt;=1000000) is the size of that sequence.  Then N integers follow, separated by a space.  It is guaranteed that all the integers are in the range of <strong>long int</strong>.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the median of the two given sequences in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4 11 12 13 14<br>5 9 10 15 16 17</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>13</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>用两个数组存储两组数据，每组数据一个pos，比较两个pos出的数值大小，较小值的pos向后移，直到找到中位数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* firstSequence = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) <span class=\"built_in\">cin</span>&gt;&gt;firstSequence[i];</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* secondSequence = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"built_in\">cin</span>&gt;&gt;secondSequence[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> firstPos = <span class=\"number\">0</span>, secondPos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"keyword\">int</span>((m+n+<span class=\"number\">1</span>)/<span class=\"number\">2</span>); i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (firstPos == m) <span class=\"built_in\">cout</span>&lt;&lt;secondSequence[secondPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondPos == n) <span class=\"built_in\">cout</span>&lt;&lt;firstSequence[firstPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstSequence[firstPos] &lt; secondSequence[secondPos]) <span class=\"built_in\">cout</span>&lt;&lt;firstSequence[firstPos];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;secondSequence[secondPos];</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (firstPos == m) secondPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (secondPos == n) firstPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstSequence[firstPos] &lt; secondSequence[secondPos]) firstPos++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> secondPos++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> firstSequence;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> secondSequence;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1030-Travel-Plan-30\"><a href=\"#1030-Travel-Plan-30\" class=\"headerlink\" title=\"1030 Travel Plan (30)\"></a>1030 Travel Plan (30)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>A traveler’s map gives the distances between cities along the highways, together with the cost of each highway.<br> Now you are supposed to write a program to help a traveler to decide the shortest path between his/her starting city and the destination.<br> If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.</p>\n<p> DECLARE: The test data in PAT is wrong,we strengthened the test data.If the same code got passed in pat,it may not be able to get passed in NOWCODER,please check your code.(This means that our test data is no problem,I guarantee.)</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a line containing 4 positive integers N, M, S, and D, where N (&lt;=500) is the number of cities (and hence the cities are numbered from 0 to N-1); M is the number of highways; S and D are the starting and the destination cities, respectively. Then M lines follow, each provides the information of a highway, in the format:<br> City1 City2 Distance Cost</p>\n<p> where the numbers are all integers no more than 500, and are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4 5 0 3</p>\n<p>0 1 1 20</p>\n<p>1 3 2 30</p>\n<p>0 3 4 10</p>\n<p>0 2 2 20</p>\n<p>2 3 1 20</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>0 2 3 3 40</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>最短路问题，用Dijkstra（迪杰斯特拉）算法解即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">highway</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> endCity;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> distance;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">\thighway(<span class=\"keyword\">int</span> e, <span class=\"keyword\">int</span> d, <span class=\"keyword\">int</span> c) &#123;endCity=e,distance=d,cost=c;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// N为城市数，M为公路数，S为开始城市，D为结束城市</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> N,M,S,D;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;N&gt;&gt;M&gt;&gt;S&gt;&gt;D;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// highways(i) 为与城市i相连的所有公路</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;highway&gt; &gt; highways(N);</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span>* visited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* distance = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* cost = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* lastCity = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </span><br><span class=\"line\">\t\tvisited[i] = <span class=\"literal\">false</span>, distance[i] = cost[i] = INT_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读入数据，更新highways</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp_city_1, tmp_city_2, tmp_distance, tmp_cost;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (M--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp_city_1&gt;&gt;tmp_city_2&gt;&gt;tmp_distance&gt;&gt;tmp_cost;</span><br><span class=\"line\">\t\thighways[tmp_city_1].push_back(highway(tmp_city_2,tmp_distance,tmp_cost));</span><br><span class=\"line\">\t\thighways[tmp_city_2].push_back(highway(tmp_city_1,tmp_distance,tmp_cost));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// dijkstra</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> currentCity = S;</span><br><span class=\"line\">\tvisited[S] = <span class=\"literal\">true</span>, distance[S] = cost[S] = <span class=\"number\">0</span>, lastCity[S] = S;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != D) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; highways[currentCity].size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> tmp_endCity = highways[currentCity][i].endCity, </span><br><span class=\"line\">\t\t\t\ttmp_distance = highways[currentCity][i].distance,</span><br><span class=\"line\">\t\t\t\ttmp_cost = highways[currentCity][i].cost;\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[tmp_endCity]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distance[currentCity] + tmp_distance &lt; distance[tmp_endCity] ||</span><br><span class=\"line\">\t\t\t\t(distance[currentCity] + tmp_distance == distance[tmp_endCity] &amp;&amp; </span><br><span class=\"line\">\t\t\t\t cost[currentCity] + tmp_cost &lt; cost[tmp_endCity])) &#123;</span><br><span class=\"line\">\t\t\t\tdistance[tmp_endCity] = distance[currentCity] + tmp_distance;</span><br><span class=\"line\">\t\t\t\tcost[tmp_endCity] = cost[currentCity] + tmp_cost;</span><br><span class=\"line\">\t\t\t\tlastCity[tmp_endCity] = currentCity;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> minDistance = INT_MAX;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visited[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (distance[i] &lt; minDistance) minDistance=distance[i],currentCity = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加离起始点最短的点到已访问集</span></span><br><span class=\"line\">\t\tvisited[currentCity] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 逆序列逆向输出即为最短路径</span></span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; pathStack;</span><br><span class=\"line\">\tpathStack.push(D);</span><br><span class=\"line\">\tcurrentCity = D;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (currentCity != S) &#123;</span><br><span class=\"line\">\t\tcurrentCity = lastCity[currentCity];</span><br><span class=\"line\">\t\tpathStack.push(currentCity);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!pathStack.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;pathStack.top()&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\tpathStack.pop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;distance[D]&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;cost[D];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> visited,distance,cost,lastCity;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1035-Password-20\"><a href=\"#1035-Password-20\" class=\"headerlink\" title=\"1035 Password (20)\"></a>1035 Password (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>To prepare for PAT, the judge sometimes has to generate random passwords for the users.  The problem is that there are always some confusing passwords since it is hard to distinguish 1 (one) from l (L in lowercase), or 0 (zero) from O (o in uppercase).  One solution is to replace 1 (one) by @, 0 (zero) by %, l by L, and O by o.  Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a positive integer N (&lt;= 1000), followed by N lines of accounts.  Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, first print the number M of accounts that have been modified, then print in the following M lines the modified accounts info, that is, the user names and the corresponding modified passwords.  The accounts must be printed in the same order as they are read in.  If no account is modified, print in one line “There are N accounts and no account is modified” where N is the total number of accounts.  However, if N is one, you must print “There is 1 account and no account is modified” instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>Team000002 Rlsp0dfa<br>Team000003 perfectpwd<br>Team000001 R1spOdfa</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>2<br>Team000002 RLsp%dfa<br>Team000001 R@spodfa</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">account</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> password;</span><br><span class=\"line\">\taccount(<span class=\"built_in\">string</span> i, <span class=\"built_in\">string</span> p) &#123;id = i, password = p;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;account&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id,password;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;id&gt;&gt;password;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (password.find_first_of(<span class=\"string\">'0'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'O'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'1'</span>) == <span class=\"built_in\">string</span>::npos &amp;&amp;</span><br><span class=\"line\">\t\t\tpassword.find_first_of(<span class=\"string\">'l'</span>) == <span class=\"built_in\">string</span>::npos)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; password.size(); s++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'0'</span>) password[s] = <span class=\"string\">'%'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'O'</span>) password[s] = <span class=\"string\">'o'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'1'</span>) password[s] = <span class=\"string\">'@'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (password[s] == <span class=\"string\">'l'</span>) password[s] = <span class=\"string\">'L'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tresult.push_back(account(id,password));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result_len = result.size();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> &amp;&amp; result_len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"There is 1 account and no account is modified\"</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result_len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"There are \"</span>&lt;&lt;n&lt;&lt;<span class=\"string\">\" accounts and no account is modified\"</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;result_len;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result_len; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;result[i].id&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;result[i].password;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1036-Boys-vs-Girls-25\"><a href=\"#1036-Boys-vs-Girls-25\" class=\"headerlink\" title=\"1036 Boys vs Girls (25)\"></a>1036 Boys vs Girls (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>This time you are asked to tell the difference between the lowest grade of all the male students and the highest grade of all the female students.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case contains a positive integer N, followed by N lines of student information.  Each line contains a student’s name, gender, ID and grade, separated by a space, where name and ID are strings of no more than 10 characters with no space, gender is either F (female) or M (male), and grade is an integer between 0 and 100.  It is guaranteed that all the grades are distinct.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output in 3 lines.  The first line gives the name and ID of the female student with the highest grade, and the second line gives that of the male student with the lowest grade.  The third line gives the difference gradeF-gradeM.  If one such kind of student is missing, output “Absent” in the corresponding line, and output “NA” in the third line instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>3<br>Joe M Math990112 89<br>Mike M CS991301 100<br>Mary F EE990830 95</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Mary EE990830<br>Joe Math990112<br>6</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> re_male_name, re_male_id;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> re_female_name, re_female_id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> re_male_grade = <span class=\"number\">101</span>, re_female_grade = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name, gender, id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;name&gt;&gt;gender&gt;&gt;id&gt;&gt;grade;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (gender==<span class=\"string\">\"M\"</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grade &lt; re_male_grade) &#123;</span><br><span class=\"line\">\t\t\t\tre_male_name = name;</span><br><span class=\"line\">\t\t\t\tre_male_id = id;</span><br><span class=\"line\">\t\t\t\tre_male_grade = grade;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grade &gt; re_female_grade) &#123;</span><br><span class=\"line\">\t\t\t\tre_female_name = name;</span><br><span class=\"line\">\t\t\t\tre_female_id = id;</span><br><span class=\"line\">\t\t\t\tre_female_grade = grade;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_female_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Absent\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_female_name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_female_id&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_male_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Absent\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_male_name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_male_id&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re_female_name==<span class=\"string\">\"\"</span> || re_male_name==<span class=\"string\">\"\"</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NA\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;re_female_grade - re_male_grade;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1037-Magic-Coupon-25\"><a href=\"#1037-Magic-Coupon-25\" class=\"headerlink\" title=\"1037 Magic Coupon (25)\"></a>1037 Magic Coupon (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>The magic shop in Mars is offering some magic coupons.  Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may get N times the value of that product back!  What is more, the shop also offers some bonus product for free.  However, if you apply a coupon with a positive N to this bonus product, you will have to pay the shop N times the value of the bonus product… but hey, magically, they have some coupons with negative N’s!<br>For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M\\$) where a negative value corresponds to a bonus product.  You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; coupon 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back.  On the other hand, if you apply coupon 3 to product 4, you will have to pay M\\$12 to the shop.<br>Each coupon and each product may be selected at most once.  Your task is to get as much money back as possible.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains the number of coupons NC, followed by a line with NC coupon integers.  Then the next line contains the number of products NP, followed by a line with NP product values.  Here 1&lt;= NC, NP &lt;= 105, and it is guaranteed that all the numbers will not exceed 230.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, simply print in a line the maximum amount of money you can get back.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4<br>1 2 4 -1<br>4<br>7 6 -2 -3</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>43</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<h2 id=\"1054-The-Dominant-Color-20\"><a href=\"#1054-The-Dominant-Color-20\" class=\"headerlink\" title=\"1054 The Dominant Color (20)\"></a>1054 The Dominant Color (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Behind the scenes in the computer’s memory, color is always talked about as a series of 24 bits of information for each pixel.  In an image, the color with the largest proportional area is called the dominant color.  <strong>A <em>strictly</em> dominant color takes more than half of the total area.</strong>  Now given an image of resolution M by N (for example, 800x600), you are supposed to point out the strictly dominant color.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains 2 positive numbers: M (&lt;=800) and N (&lt;=600) which are the resolutions of the image.  Then N lines follow, each contains M digital colors in the range [0, 224).  It is guaranteed that the strictly dominant color exists for each input image.  All the numbers in a line are separated by a space.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, simply print the dominant color in a line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5 3<br>0 0 255 16777215 24<br>24 24 0 0 24<br>24 0 24 24 24</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p> 24</p>\n</blockquote>\n<p>首先要注意到dominant color是超过半数的，刚开始只想到了排序后最中间的数一定为结果，但是要存储的数据太多，后来看了<a href=\"https://blog.csdn.net/zhu_liangwei/article/details/9734671\" target=\"_blank\" rel=\"noopener\">参考链接</a>，学会了下边这个方法。</p>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m, n, all_count, tmp, re = <span class=\"number\">-1</span>, count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class=\"line\">    all_count = m*n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (all_count--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) re = tmp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (re == tmp) count++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;re;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1081-Rational-Sum-20\"><a href=\"#1081-Rational-Sum-20\" class=\"headerlink\" title=\"1081 Rational Sum (20)\"></a>1081 Rational Sum (20)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given N rational numbers in the form “numerator/denominator”, you are supposed to calculate their sum.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case. Each case starts with a positive integer N (&lt;=100), followed in the next line N rational numbers “a1/b1 a2/b2 …” where all the numerators and denominators are in the range of “long int”.  If there is a negative number, then the sign must appear in front of the numerator.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, output the sum in the simplest form “integer numerator/denominator” where “integer” is the integer part of the sum, “numerator” &lt; “denominator”, and the numerator and the denominator have no common factor.  You must output only the fractional part if the integer part is 0.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>5<br>2/5 4/15 1/30 -2/60 8/3</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 1/3</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((b==<span class=\"number\">0</span>)?<span class=\"built_in\">abs</span>(a):gcd(b,a%b));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n, tmp_gcd;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> re_integer = <span class=\"number\">0</span>, re_numerator, re_denominator;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;re_numerator&gt;&gt;c&gt;&gt;re_denominator;</span><br><span class=\"line\">    tmp_gcd = gcd(re_numerator,re_denominator);</span><br><span class=\"line\">    re_numerator/=tmp_gcd,re_denominator/=tmp_gcd;</span><br><span class=\"line\">    re_integer += <span class=\"keyword\">int</span>(re_numerator/re_denominator);</span><br><span class=\"line\">    re_numerator%=re_denominator;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp_nu, tmp_de, tmp_nu_re, tmp_de_re;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;tmp_nu&gt;&gt;c&gt;&gt;tmp_de;</span><br><span class=\"line\">        tmp_de_re = tmp_de * re_denominator;</span><br><span class=\"line\">        tmp_nu_re = tmp_nu * re_denominator + tmp_de * re_numerator;</span><br><span class=\"line\">        tmp_gcd = gcd(tmp_de_re,tmp_nu_re);</span><br><span class=\"line\">        tmp_de_re/=tmp_gcd,tmp_nu_re/=tmp_gcd;</span><br><span class=\"line\">        re_integer += <span class=\"keyword\">int</span>(tmp_nu_re/tmp_de_re);</span><br><span class=\"line\">        re_numerator = tmp_nu_re % tmp_de_re;</span><br><span class=\"line\">        re_denominator = tmp_de_re;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re_integer == <span class=\"number\">0</span> &amp;&amp; re_numerator == <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (re_integer == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;re_numerator&lt;&lt;<span class=\"string\">'/'</span>&lt;&lt;re_denominator;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (re_numerator == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re_integer;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re_integer&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re_numerator&lt;&lt;<span class=\"string\">'/'</span>&lt;&lt;re_denominator;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1082-Read-Number-in-Chinese-25\"><a href=\"#1082-Read-Number-in-Chinese-25\" class=\"headerlink\" title=\"1082 Read Number in Chinese (25)\"></a>1082 Read Number in Chinese (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way.  Output “Fu” first if it is negative.  For example, -123456789 is read as “Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu”.  Note: zero (“ling”) must be handled correctly according to the Chinese tradition.  For example, 100800 is “yi Shi Wan ling ba Bai”.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case, which gives an integer with no more than 9 digits.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print in a line the Chinese way of reading the number.  The characters are separated by a space and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>-123456789</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>首先按照数字单位的顺序添加到结果容器中，然后遍历结果容器，如果有连续重复的”ling”只留一个，如果”Wan”前有“ling”去掉0，如果”Wan”直接跟在“Yi”后边将“Wan”换成“ling”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> units[] = &#123;<span class=\"string\">\"\"</span>,<span class=\"string\">\"Shi\"</span>,<span class=\"string\">\"Bai\"</span>,<span class=\"string\">\"Qian\"</span>,<span class=\"string\">\"Wan\"</span>,<span class=\"string\">\"Shi\"</span>,<span class=\"string\">\"Bai\"</span>,<span class=\"string\">\"Qian\"</span>,<span class=\"string\">\"Yi\"</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> digits[] = &#123;<span class=\"string\">\"ling\"</span>,<span class=\"string\">\"yi\"</span>,<span class=\"string\">\"er\"</span>,<span class=\"string\">\"san\"</span>,<span class=\"string\">\"si\"</span>,<span class=\"string\">\"wu\"</span>,<span class=\"string\">\"liu\"</span>,<span class=\"string\">\"qi\"</span>,<span class=\"string\">\"ba\"</span>,<span class=\"string\">\"jiu\"</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; re;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tre.push_back(<span class=\"string\">\"Fu\"</span>);</span><br><span class=\"line\">\t\tn = -n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"ling\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; n_digits;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tn_digits.push_back(n%<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tn/=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = n_digits.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = len<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\tre.push_back(digits[n_digits[i]]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i==<span class=\"number\">4</span> || n_digits[i] != <span class=\"number\">0</span> &amp;&amp; i&gt;<span class=\"number\">0</span>) re.push_back(units[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;::iterator iter = re.begin()+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (iter &lt; re.end()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"ling\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"ling\"</span>)</span><br><span class=\"line\">\t\t\tre.erase(iter);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"Wan\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"ling\"</span>)</span><br><span class=\"line\">\t\t\tre.erase((iter--)<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(iter)==<span class=\"string\">\"Wan\"</span> &amp;&amp; *(iter<span class=\"number\">-1</span>)==<span class=\"string\">\"Yi\"</span>)</span><br><span class=\"line\">\t\t\t*(iter++) = <span class=\"string\">\"ling\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\titer++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re.size()&gt;<span class=\"number\">1</span> &amp;&amp; re[re.size()<span class=\"number\">-1</span>]==<span class=\"string\">\"ling\"</span>) re.erase(re.end()<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;re[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; re.size(); i++) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[i];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1083-List-Grades-25\"><a href=\"#1083-List-Grades-25\" class=\"headerlink\" title=\"1083 List Grades (25)\"></a>1083 List Grades (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>Given a list of N student records with name, ID and grade.  You are supposed to sort the records with respect to the grade in non-increasing order, and output those student records of which the grades are in a given interval.</p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  Each case is given in the following format:<br>N<br>name[1] ID[1] grade[1]<br>name[2] ID[2] grade[2]<br>… …<br>name[N] ID[N] grade[N]<br>grade1 grade2</p>\n<p>where name[i] and ID[i] are strings of no more than 10 characters with no space, grade[i] is an integer in [0, 100], grade1 and grade2 are the boundaries of the grade’s interval.  It is guaranteed that all the grades are <em>distinct</em>.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case you should output the student records of which the grades are in the given interval [grade1, grade2] and are in non-increasing order.  Each student record occupies a line with the student’s name and ID, separated by one space.  If there is no student’s grade in that interval, output “NONE” instead.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>4<br>Tom CS000001 59<br>Joe Math990112 89<br>Mike CS991301 100<br>Mary EE990830 95<br>60 100</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>Mike CS991301<br>Mary EE990830<br>Joe Math990112</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\tstudent(<span class=\"built_in\">string</span> n,<span class=\"built_in\">string</span> i, <span class=\"keyword\">int</span> g) &#123;</span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tid = i;</span><br><span class=\"line\">\t\tgrade = g;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt; re;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name,id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> grade;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;name&gt;&gt;id&gt;&gt;grade;</span><br><span class=\"line\">\t\t<span class=\"function\">student <span class=\"title\">tmp</span><span class=\"params\">(name,id,grade)</span></span>;</span><br><span class=\"line\">\t\tre.push_back(tmp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> min_grade,max_grade;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;min_grade&gt;&gt;max_grade;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;student&gt;::iterator iter = re.begin();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (iter != re.end()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((*iter).grade &lt; min_grade || (*iter).grade &gt; max_grade)</span><br><span class=\"line\">\t\t\tre.erase(iter);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\titer++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span> ; k &lt; re.size(); k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; re.size()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (re[i].grade &lt; re[i+<span class=\"number\">1</span>].grade) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"function\">student <span class=\"title\">tmp</span><span class=\"params\">(re[i].name,re[i].id,re[i].grade)</span></span>;</span><br><span class=\"line\">\t\t\t\tre[i] = re[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tre[i+<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re.empty()) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NONE\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;re[<span class=\"number\">0</span>].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[<span class=\"number\">0</span>].id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; re.size(); i++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"\\n\"</span>&lt;&lt;re[i].name&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;re[i].id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1086-Tree-Traversals-Again-25\"><a href=\"#1086-Tree-Traversals-Again-25\" class=\"headerlink\" title=\"1086 Tree Traversals Again (25)\"></a>1086 Tree Traversals Again (25)</h2><p><strong>题目描述</strong></p>\n<blockquote>\n<p>An inorder binary tree traversal can be implemented in a non-recursive way with a stack.  For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop().  Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations.  Your task is to give the postorder traversal sequence of this tree.</p>\n<p><img src=\"/images/pat_1086.jpg\" alt=\"\"></p>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>Each input file contains one test case.  For each case, the first line contains a positive integer N (&lt;=30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N).  Then 2N lines follow, each describes a stack operation in the format: “Push X” where X is the index of the node being pushed onto the stack; or “Pop” meaning to pop one node from the stack.</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>For each test case, print the postorder traversal sequence of the corresponding tree in one line.  A solution is guaranteed to exist.  All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n<p>6<br>Push 1<br>Push 2<br>Push 3<br>Pop<br>Pop<br>Push 4<br>Pop<br>Pop<br>Push 5<br>Push 6<br>Pop<br>Pop</p>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n<p>3 4 2 6 5 1</p>\n</blockquote>\n<p><strong>实现代码</strong></p>\n<p>以上述例子为例，按顺序排下来123456为前序，使用栈的pop顺序为中序，利用前序和中序可以得到后序。</p>\n<p>注意1-N为标号，每次push的为值，值有可能重复，但是push顺序为标号1-N。</p>\n<p>可以用下边这个测试用例测试：</p>\n<blockquote>\n<p>//输入</p>\n<p>19<br>Push 4<br>Push 11<br>Push 7<br>Push 12<br>Pop<br>Pop<br>Pop<br>Push 14<br>Push 17<br>Pop<br>Pop<br>Push 6<br>Push 18<br>Pop<br>Push 8<br>Pop<br>Pop<br>Push 4<br>Pop<br>Pop<br>Push 11<br>Push 16<br>Push 11<br>Push 12<br>Pop<br>Push 2<br>Pop<br>Pop<br>Pop<br>Push 7<br>Push 4<br>Pop<br>Pop<br>Push 12<br>Pop<br>Pop<br>Push 11<br>Pop</p>\n<p>// 输出</p>\n<p>12 7 17 8 18 4 6 14 11 2 12 11 4 12 7 16 11 11 4 </p>\n</blockquote>\n<p>我的代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; post;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePostOrder</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; in, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tpost.push_back(pre[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> root_num = pre[<span class=\"number\">0</span>], root_pos_of_in = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; root_pos_of_in &lt; len; root_pos_of_in++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (in[root_pos_of_in] == root_num) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> left_len = root_pos_of_in;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> right_len = len - left_len - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre_left,pre_right,in_left,in_right;</span><br><span class=\"line\">\tpre_left.assign(pre.begin()+<span class=\"number\">1</span>, pre.begin()+<span class=\"number\">1</span>+left_len);</span><br><span class=\"line\">\tpre_right.assign(pre.begin()+<span class=\"number\">1</span>+left_len, pre.end());</span><br><span class=\"line\">\tin_left.assign(in.begin(),in.begin()+left_len);</span><br><span class=\"line\">\tin_right.assign(in.begin()+left_len+<span class=\"number\">1</span>, in.end());</span><br><span class=\"line\">\tgeneratePostOrder(pre_left,in_left,left_len);</span><br><span class=\"line\">\tgeneratePostOrder(pre_right,in_right,right_len);</span><br><span class=\"line\">\tpost.push_back(root_num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, tmp;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> op;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pre,in,value;</span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; tmp_stack;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>*n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;op;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (op == <span class=\"string\">\"Push\"</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">\t\t\tvalue.push_back(tmp);</span><br><span class=\"line\">\t\t\ttmp_stack.push(index);</span><br><span class=\"line\">\t\t\tpre.push_back(index++);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tin.push_back(tmp_stack.top());</span><br><span class=\"line\">\t\t\ttmp_stack.pop();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgeneratePostOrder(pre,in,n);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) <span class=\"built_in\">cout</span>&lt;&lt;value[post[<span class=\"number\">0</span>]];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;value[post[i]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10xx\"><a href=\"#10xx\" class=\"headerlink\" title=\"10xx\"></a>10xx</h2><p><strong>题目描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输入描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输入例子</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>输出例子</strong></p>\n<blockquote>\n</blockquote>\n<p><strong>实现代码</strong></p>\n"},{"title":"Ubuntu下使用Deepin-wine的移植版安装qq微信等","toc":false,"date":"2018-09-18T08:12:49.000Z","_content":"\n下载Deepin-wine的Ubuntu移植版：\n\n`git clone https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git`\n\n进入 `deepin-wine-for-ubuntu/`文件夹\n\n在终端内运行`./install.sh`\n\n这样就安装完成啦，现在就可以安装qq微信之类的软件啦：\n\n[所有deepin-wine内支持的windows软件下载地址](http://mirrors.aliyun.com/deepin/pool/non-free/d/)\n\n其中qq下载地址为：http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/deepin.com.qq.im_8.9.19983deepin23_i386.deb\n\n微信下载地址为：http://202.116.81.74/cache/6/01/mirrors.aliyun.com/2fcea7de3a93db0339ae7eb601f36a83/deepin.com.wechat_2.6.2.31deepin0_i386.deb\n\n下载之后进入下载目录，终端内运行：\n\n`sudo dpkg -i deepin.com.qq.im_8.9.19983deepin23_i386.deb `\n\n和\n\n`sudo dpkg -i deepin.com.wechat_2.6.2.31deepin0_i386.deb`即可。\n\n然后在自己的应用程序目录就可以看到qq和微信了。","source":"_posts/Ubuntu下使用Deepin-wine的移植版安装qq微信等.md","raw":"---\ntitle: Ubuntu下使用Deepin-wine的移植版安装qq微信等\ntoc: false\ndate: 2018-09-18 16:12:49\ncategories:\n- methods\ntags:\n- ubuntu\n---\n\n下载Deepin-wine的Ubuntu移植版：\n\n`git clone https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git`\n\n进入 `deepin-wine-for-ubuntu/`文件夹\n\n在终端内运行`./install.sh`\n\n这样就安装完成啦，现在就可以安装qq微信之类的软件啦：\n\n[所有deepin-wine内支持的windows软件下载地址](http://mirrors.aliyun.com/deepin/pool/non-free/d/)\n\n其中qq下载地址为：http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/deepin.com.qq.im_8.9.19983deepin23_i386.deb\n\n微信下载地址为：http://202.116.81.74/cache/6/01/mirrors.aliyun.com/2fcea7de3a93db0339ae7eb601f36a83/deepin.com.wechat_2.6.2.31deepin0_i386.deb\n\n下载之后进入下载目录，终端内运行：\n\n`sudo dpkg -i deepin.com.qq.im_8.9.19983deepin23_i386.deb `\n\n和\n\n`sudo dpkg -i deepin.com.wechat_2.6.2.31deepin0_i386.deb`即可。\n\n然后在自己的应用程序目录就可以看到qq和微信了。","slug":"Ubuntu下使用Deepin-wine的移植版安装qq微信等","published":1,"updated":"2018-09-18T08:19:10.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0b000ucragzyu9mmw9","content":"<p>下载Deepin-wine的Ubuntu移植版：</p>\n<p><code>git clone https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git</code></p>\n<p>进入 <code>deepin-wine-for-ubuntu/</code>文件夹</p>\n<p>在终端内运行<code>./install.sh</code></p>\n<p>这样就安装完成啦，现在就可以安装qq微信之类的软件啦：</p>\n<p><a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/\" target=\"_blank\" rel=\"noopener\">所有deepin-wine内支持的windows软件下载地址</a></p>\n<p>其中qq下载地址为：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/deepin.com.qq.im_8.9.19983deepin23_i386.deb\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/deepin.com.qq.im_8.9.19983deepin23_i386.deb</a></p>\n<p>微信下载地址为：<a href=\"http://202.116.81.74/cache/6/01/mirrors.aliyun.com/2fcea7de3a93db0339ae7eb601f36a83/deepin.com.wechat_2.6.2.31deepin0_i386.deb\" target=\"_blank\" rel=\"noopener\">http://202.116.81.74/cache/6/01/mirrors.aliyun.com/2fcea7de3a93db0339ae7eb601f36a83/deepin.com.wechat_2.6.2.31deepin0_i386.deb</a></p>\n<p>下载之后进入下载目录，终端内运行：</p>\n<p><code>sudo dpkg -i deepin.com.qq.im_8.9.19983deepin23_i386.deb</code></p>\n<p>和</p>\n<p><code>sudo dpkg -i deepin.com.wechat_2.6.2.31deepin0_i386.deb</code>即可。</p>\n<p>然后在自己的应用程序目录就可以看到qq和微信了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>下载Deepin-wine的Ubuntu移植版：</p>\n<p><code>git clone https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git</code></p>\n<p>进入 <code>deepin-wine-for-ubuntu/</code>文件夹</p>\n<p>在终端内运行<code>./install.sh</code></p>\n<p>这样就安装完成啦，现在就可以安装qq微信之类的软件啦：</p>\n<p><a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/\" target=\"_blank\" rel=\"noopener\">所有deepin-wine内支持的windows软件下载地址</a></p>\n<p>其中qq下载地址为：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/deepin.com.qq.im_8.9.19983deepin23_i386.deb\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/deepin.com.qq.im_8.9.19983deepin23_i386.deb</a></p>\n<p>微信下载地址为：<a href=\"http://202.116.81.74/cache/6/01/mirrors.aliyun.com/2fcea7de3a93db0339ae7eb601f36a83/deepin.com.wechat_2.6.2.31deepin0_i386.deb\" target=\"_blank\" rel=\"noopener\">http://202.116.81.74/cache/6/01/mirrors.aliyun.com/2fcea7de3a93db0339ae7eb601f36a83/deepin.com.wechat_2.6.2.31deepin0_i386.deb</a></p>\n<p>下载之后进入下载目录，终端内运行：</p>\n<p><code>sudo dpkg -i deepin.com.qq.im_8.9.19983deepin23_i386.deb</code></p>\n<p>和</p>\n<p><code>sudo dpkg -i deepin.com.wechat_2.6.2.31deepin0_i386.deb</code>即可。</p>\n<p>然后在自己的应用程序目录就可以看到qq和微信了。</p>\n"},{"title":"JavaScript学习记录四","toc":true,"date":"2018-09-16T12:31:22.000Z","_content":"\n——《JavaScript高级程序设计（第2版）》学习笔记\n\n要多查阅[MDN Web 文档](https://developer.mozilla.org/zh-CN/docs/Web)\n\n---\n\n# BOM\n\nBrowser Object Model，浏览器对象模型。\n\nBOM提供了很多用于访问浏览器的功能，这些功能与任何网页内容无关。\n\nBOM缺少事实上的规范，因此浏览器之间共有的对象就成了事实上的标准。\n\n没有所谓的标准BOM实现或者标准BOM接口。\n\n图片来源于网络：\n\n![BOM结构图](http://www.splessons.com/wp-content/uploads/2016/03/javascript-bom-01-splessons-1.png)\n\n## window对象\n\n[window文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Window)\n\nBOM的核心对象是window，表示浏览器的一个实例。\n\n在浏览器中，window对象有双重角色：\n\n- 通过JavaScript访问浏览器窗口的一个接口\n- ECMAScript规定的Global对象\n\n因此window对象有权访问parseInt()等方法。\n\n### 全局作用域\n\n因为window对象又是ECMAScript中的Global对象，因此在全局作用域中声明的所有变量、函数都会变成window对象的属性和方法。\n\n在全局作用域中，this指向window。\n\n### ！窗口关系及框架\n\n**因为书中使用的frameset和frame已经被HTML5废弃，用iframe取代，因此在看了HTML5后再来补充这一部分。**\n\ntop、parent、一个框架一个window对象\n\n### ！窗口位置\n\nscreenLeft、screenX、moveTo等属性等看完文档再来详细记。\n\n### ！窗口大小\n\ninnerWidth、outerWidth、clientWidth、pageWidth、resizeTo()等属性等看完文档再来详细记。\n\n### 导航和打开窗口\n\nwindow.open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口，返回指向新窗口的引用。\n\n`window.open(URL,name,specs,replace)`，具体格式看[这里](http://www.runoob.com/jsref/met-win-open.html)。\n\n新创建的window对象有一个opener属性，保存着打开它的原始窗口对象。\n\n#### 安全限制\n\n弹窗广告问题。\n\n为了解决这个问题，有些浏览器开始在弹出窗口配置方面增加限制。\n\n#### 弹出窗口屏蔽程序\n\n弹出窗口被屏蔽有两种可能：\n\n- 被浏览器内置的屏蔽程序阻止，则window.open()很有可能返回null\n- 被浏览器扩展或其他程序阻止，则window.open()通常会抛出异常\n\n因此要想准确地检测弹出窗口是否被屏蔽：\n\n```js\nvar blocked = false;\ntry {\n  var popup = window.open(\"https://blog.zmj97.top\", \"_blank\");\n  if (popup == null) {\n    blocked = true;\n  }\n} catch(e) {\n  blocked = true;\n}\nif (blocked) {\n  alert(\"The Popup was blocked!\");\n}\n```\n\n检测弹出窗口是否被屏蔽并不会阻止浏览器显示与被屏蔽窗口的相关信息。\n\n### 超时调用\n\nsetTimeout()函数接受两个参数，要执行的代码和执行代码前要等待多少毫秒。\n\n第一个参数可以是一个包含JavaScript代码的字符串（不推荐，就和在eval()函数中使用的字符串一样），\n\n也可以是一个函数：\n\n```js\nsetTimeout(\"alert('Hello World!')\", 1000); // 不推荐\n\n// 推荐的调用方式\nsetTimeout(function() {\n  alert('Hello World!');\n}, 1000);\n```\n\n调用setTImeout()后，该方法会返回一个数值ID，表示超时调用，\n\n可以用它作为参数调用clearTimeout()来取消超时调用。\n\n超时调用ID是计划执行代码的唯一标识符。\n\n```js\n// 设置超时调用\nvar timeoutId = setTimeout(function() {\n  alert('Hello World!');\n}, 1000);\n// 把它取消\nclearTimeout(timeoutId);\n```\n\n超时调用的代码都是在全局作用域中执行的，因此函数中的this的值通常指向window对象。\n\n### 间歇调用\n\nsetInterval()函数接受两个参数，要执行的代码和每次执行代码前要等待多少毫秒。\n\n```js\nsetInterval(\"alert('Hello World!')\", 1000); // 不推荐\n\n// 推荐的调用方式\nsetInterval(function() {\n  alert('Hello World!');\n}, 1000);\n```\n\n取消间歇调用：\n\n```js\nvar num = 0;\nvar max = 10;\nvar intervalId = null;\n\nfunction incrementNumber() {\n  num++;\n  // 如果执行次数到达max，则取消间歇调用\n  if (num == max) {\n    clearInterval(intervalId);\n    alert(\"Done\");\n  }\n}\n\nintervalId = setInterval(incrementNumber, 500);\n```\n\n实际上，使用超时调用来模拟间歇调用被认为是最佳模式，因为后一个间歇调用可能会在前一个间歇调用结束之前启动。\n\n```js\nvar num = 0;\nvar max = 10;\n\nfunction incrementNumber() {\n  num++;\n  // 如果执行次数未到达max，则设置另一次超时调用\n  if (num < max) {\n    setTimeout(incrementNumber, 500);\n  } else {\n    alert(\"Done\");\n  }\n}\n\nsetTimeout(incrementNumber, 500);\n```\n\n### 系统对话框\n\n`alert()`只有一个确认按钮\n\n`confirm()`有确认和取消两个按钮，返回true表示点了确认，false表示点了取消\n\n`prompt()`，提示框，有一个文本输入域和确认取消按钮，两个参数为要显示给用户的提示内容和文本输入域内的默认内容，如果点击确认则返回文本输入域的值，否则返回null。\n\n三者均不涉及HTML、CSS、JavaScript。\n\n还有含有复选框的对话框选择是否阻止后续的对话框的显示。\n\n还可以在JavaScript中通过`window.print()`和`window.find()`来显示打印和查找对话框。这两者是异步显示的，因此对话框计数器的不会吧它们计算在内。\n\n## location对象\n\n提供了与当前窗口中加载的文档有关的信息和一些导航功能。\n\nlocation对象既是window对象的属性，有事document对象的属性。\n\nlocation将URL解析为独立的片段。\n\n下面是location对象的所有属性（忽略了每个属性前的location前缀）：\n\n| 属性名   | 例子                     | 说明                                                         |\n| -------- | ------------------------ | ------------------------------------------------------------ |\n| hash     | \"#contents\"              | 返回URL中的hash（#号后跟零或多个字符），如果URL中不包含散列，则返回空字符串 |\n| host     | \"blog.zmj97.top:80\"      | 返回服务器名称和端口号（如果有）                             |\n| hostname | \"blog.zmj97.top\"         | 返回不带端口号的服务器名称                                   |\n| href     | \"https://blog.zmj97.top\" | 返回当前加载页面的完整URL。location对象的toString()方法也返回这个值 |\n| pathname | \"/tag/\"                  | 返回URL中的目录和/或文件名                                   |\n| port     | \"8080\"                   | 返回URL指定的端口号。如果URL中不包含端口号，则返回空字符串   |\n| protocol | \"https:\"                 | 返回页面使用的协议，通常是http:或https:                      |\n| search   | \"?q=javascript\"          | 返回URL的查询字符串。这个字符串以问号开头                    |\n\n### 查询字符串参数\n\n尽管location.search返回从问号到URL末尾的所有内容，但却没有办法逐个访问每个查询字符串参数，因此可以：\n\n```js\nfunction getQueryStringArgs() {\n  // 取得查询字符串并去掉开头的问号\n  var qs = (location.search.length > 0 ? location.search.substring(1) : \"\");\n  // 保存数据的对象\n  var args = {};\n  // 取得每一项\n  var items = qs.split(\"&\");\n  var item = null,\n      name = null,\n      value = null;\n  // 逐个添加到args中\n  for (var i = 0; i < items.length; i++) {\n    item = items[i].split(\"=\");\n    name = decodeURIComponent(item[0]);\n    value = decodeURIComponent(item[1]);\n    args[name] = value;\n  }\n\n  return args;\n}\n```\n\n### 位置操作\n\n`location.assign(\"https://blog.zmj97.top\")`，立即打开新URL并在浏览器的历史记录中生成一条记录。\n\n`window.location = \"https://blog.zmj97.top\"`和`location.href = \"https://blog.zmj97.top\"`与调用assign()的效果一样。\n\n每次修改location对象的属性，页面都会以新URL重新加载（hash除外），并在浏览器的历史记录中生成一条新纪录（包括hash）。\n\n使用`location.replace(\"https://blog.zmj97.top\")`加载新页面后不会生成历史记录，也不能后退。\n\n`location.reload()`重新加载，有可能从缓存中加载\n\n`location.reload(true)`从服务器重新加载\n\n位于reload()调用之后的代码可能会也可能不会执行，取决于网络延迟或系统资源等因素。\n\n因此最好将reload()放在代码的最后一行。\n\n## navigator对象\n\n用于识别客户端浏览器，包含有关浏览器的信息。\n\n### 检测插件\n\nnavigator.plugins数组的每一项包含下列属性：\n\n- name：插件名字\n- description：插件描述\n- filename：插件文件名\n- length：插件所处理的MIME类型数量\n\n```js\n// 检查插件（IE中无效）\nfunction hasPlugin(name) {\n  name = name.toLowerCase();\n  for (var i = 0; i < navigator.plugins.length; i++) {\n    if (navigator.plugins[i].toLowerCase().indexOf(name) > -1) {\n      return true;\n    }\n  }\n\n  return false;\n}\n```\n\n每个插件对象本身也是一个MimeType对象的数组，包括四个属性：\n\n- MIME类型描述description\n- 回指插件对象的enablePlugin\n- MIME类型对应的文件扩展名的字符串suffixes（以逗号分割）\n- 完整MIME类型字符串type\n\n在IE中检查插件只能使用专有的ActiveXObject类型，还要知道插件的COM标识符。\n\nplugins集合有一个refresh()方法用于刷新插件，传入true会加载包含插件的所有页面。否则只更新插件不重新加载页面。\n\n### 注册处理程序\n\nregisterContentHandler()、registerProtocalHandler()\n\n为站点指明处理特定类型的信息\n\n## screen对象\n\n所有浏览器都支持的属性：\n\n- availHeight：可用的屏幕高度（像素高度-系统部件高度），只读\n- availWidth：可用的屏幕宽度（像素宽度-系统部件宽度），只读\n- colorDepth：用于表现颜色的位数，多数系统都是32位，只读\n- height：屏幕的像素高度\n- width：屏幕的像素宽度\n\n## history对象\n\n保存用户上网的历史记录\n\n使用go()方法可以在用户的历史记录中任意跳转\n\n```js\nhistory.go(-1); // 后退一页\nhistory.go(2); // 前进两页\nhistory.back(); // 后退一页\nhistory.forward(); // 前进一页\n```\n\n也可以传入一个字符串：浏览器会跳转到历史记录中最近包含该字符串的页面\n\n```js\nhistory.go(\"wrox.com\"); // 跳转到最近的wrox.com页面\n```\n\n# 客户端检测\n\n不到万不得已，不要使用客户端检测。\n\n先设计最通用的方案，然后再使用特定于浏览器的技术增强该方案。\n\n## 能力检测\n\n又称特性检测，是最受人们接受的检测方式。\n\n能力检测的目标不是识别特定的浏览器，而是识别浏览器的能力。\n\n不用顾及特定的浏览器如何如何，只要它支持特定的能力，就可以给出解决方案。\n\n基本模式：\n\n```js\nif (object.propertyInQuestion) {\n  // 使用object.propertyInQuestion\n}\n```\n\n- 先测试达成目的的最常用的特性\n- 必须测试实际要用到的特性，而不是通过判断另一个特性是否存在来判断是什么浏览器，然后决定是否用这个特性\n\n如果确定自己的应用程序需要使用哪些特定的浏览器特性，最好一次性检测所有相关特性：\n\n```js\n// 确定浏览器是否支持Netscape风格的插件\nvar hasNSPlugins = !!(navigator.plugins && navigator.plugins.length);\n```\n\n> 在实际开发中，应该将能力检测作为确定下一步解决方案的依据，而不是用它来判断用户使用的是什么浏览器。\n\n## 怪癖检测\n\n怪癖检测的目标是识别浏览器的特殊行为，知道浏览器存在什么缺陷。\n\n例如IE中有一个bug，如果某个实例属性与标记为[[DontEnum]]的某个原型属性同名，则该实例属性不会出现在for-in循环中：\n\n```js\nvar hasDontEnumQuirk = function() {\n  var o = {\n    toString: function() {}\n  };\n  for (var prop in o) {\n    if (prop == toString) {\n      return false;\n    }\n  }\n  return true;\n}();\n```\n\n怪癖通常为某个浏览器独有的，且被归类为bug。\n\n由于检测怪癖涉及运行代码，因此仅检测有直接影响的怪癖，且最好在脚本一开始就执行此类检测，以便尽早解决问题。\n\n","source":"_posts/JavaScript学习记录四.md","raw":"---\ntitle: JavaScript学习记录四\ntoc: true\ndate: 2018-09-16 20:31:22\ncategories:\n- Web\ntags:\n- JavaScript\n---\n\n——《JavaScript高级程序设计（第2版）》学习笔记\n\n要多查阅[MDN Web 文档](https://developer.mozilla.org/zh-CN/docs/Web)\n\n---\n\n# BOM\n\nBrowser Object Model，浏览器对象模型。\n\nBOM提供了很多用于访问浏览器的功能，这些功能与任何网页内容无关。\n\nBOM缺少事实上的规范，因此浏览器之间共有的对象就成了事实上的标准。\n\n没有所谓的标准BOM实现或者标准BOM接口。\n\n图片来源于网络：\n\n![BOM结构图](http://www.splessons.com/wp-content/uploads/2016/03/javascript-bom-01-splessons-1.png)\n\n## window对象\n\n[window文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Window)\n\nBOM的核心对象是window，表示浏览器的一个实例。\n\n在浏览器中，window对象有双重角色：\n\n- 通过JavaScript访问浏览器窗口的一个接口\n- ECMAScript规定的Global对象\n\n因此window对象有权访问parseInt()等方法。\n\n### 全局作用域\n\n因为window对象又是ECMAScript中的Global对象，因此在全局作用域中声明的所有变量、函数都会变成window对象的属性和方法。\n\n在全局作用域中，this指向window。\n\n### ！窗口关系及框架\n\n**因为书中使用的frameset和frame已经被HTML5废弃，用iframe取代，因此在看了HTML5后再来补充这一部分。**\n\ntop、parent、一个框架一个window对象\n\n### ！窗口位置\n\nscreenLeft、screenX、moveTo等属性等看完文档再来详细记。\n\n### ！窗口大小\n\ninnerWidth、outerWidth、clientWidth、pageWidth、resizeTo()等属性等看完文档再来详细记。\n\n### 导航和打开窗口\n\nwindow.open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口，返回指向新窗口的引用。\n\n`window.open(URL,name,specs,replace)`，具体格式看[这里](http://www.runoob.com/jsref/met-win-open.html)。\n\n新创建的window对象有一个opener属性，保存着打开它的原始窗口对象。\n\n#### 安全限制\n\n弹窗广告问题。\n\n为了解决这个问题，有些浏览器开始在弹出窗口配置方面增加限制。\n\n#### 弹出窗口屏蔽程序\n\n弹出窗口被屏蔽有两种可能：\n\n- 被浏览器内置的屏蔽程序阻止，则window.open()很有可能返回null\n- 被浏览器扩展或其他程序阻止，则window.open()通常会抛出异常\n\n因此要想准确地检测弹出窗口是否被屏蔽：\n\n```js\nvar blocked = false;\ntry {\n  var popup = window.open(\"https://blog.zmj97.top\", \"_blank\");\n  if (popup == null) {\n    blocked = true;\n  }\n} catch(e) {\n  blocked = true;\n}\nif (blocked) {\n  alert(\"The Popup was blocked!\");\n}\n```\n\n检测弹出窗口是否被屏蔽并不会阻止浏览器显示与被屏蔽窗口的相关信息。\n\n### 超时调用\n\nsetTimeout()函数接受两个参数，要执行的代码和执行代码前要等待多少毫秒。\n\n第一个参数可以是一个包含JavaScript代码的字符串（不推荐，就和在eval()函数中使用的字符串一样），\n\n也可以是一个函数：\n\n```js\nsetTimeout(\"alert('Hello World!')\", 1000); // 不推荐\n\n// 推荐的调用方式\nsetTimeout(function() {\n  alert('Hello World!');\n}, 1000);\n```\n\n调用setTImeout()后，该方法会返回一个数值ID，表示超时调用，\n\n可以用它作为参数调用clearTimeout()来取消超时调用。\n\n超时调用ID是计划执行代码的唯一标识符。\n\n```js\n// 设置超时调用\nvar timeoutId = setTimeout(function() {\n  alert('Hello World!');\n}, 1000);\n// 把它取消\nclearTimeout(timeoutId);\n```\n\n超时调用的代码都是在全局作用域中执行的，因此函数中的this的值通常指向window对象。\n\n### 间歇调用\n\nsetInterval()函数接受两个参数，要执行的代码和每次执行代码前要等待多少毫秒。\n\n```js\nsetInterval(\"alert('Hello World!')\", 1000); // 不推荐\n\n// 推荐的调用方式\nsetInterval(function() {\n  alert('Hello World!');\n}, 1000);\n```\n\n取消间歇调用：\n\n```js\nvar num = 0;\nvar max = 10;\nvar intervalId = null;\n\nfunction incrementNumber() {\n  num++;\n  // 如果执行次数到达max，则取消间歇调用\n  if (num == max) {\n    clearInterval(intervalId);\n    alert(\"Done\");\n  }\n}\n\nintervalId = setInterval(incrementNumber, 500);\n```\n\n实际上，使用超时调用来模拟间歇调用被认为是最佳模式，因为后一个间歇调用可能会在前一个间歇调用结束之前启动。\n\n```js\nvar num = 0;\nvar max = 10;\n\nfunction incrementNumber() {\n  num++;\n  // 如果执行次数未到达max，则设置另一次超时调用\n  if (num < max) {\n    setTimeout(incrementNumber, 500);\n  } else {\n    alert(\"Done\");\n  }\n}\n\nsetTimeout(incrementNumber, 500);\n```\n\n### 系统对话框\n\n`alert()`只有一个确认按钮\n\n`confirm()`有确认和取消两个按钮，返回true表示点了确认，false表示点了取消\n\n`prompt()`，提示框，有一个文本输入域和确认取消按钮，两个参数为要显示给用户的提示内容和文本输入域内的默认内容，如果点击确认则返回文本输入域的值，否则返回null。\n\n三者均不涉及HTML、CSS、JavaScript。\n\n还有含有复选框的对话框选择是否阻止后续的对话框的显示。\n\n还可以在JavaScript中通过`window.print()`和`window.find()`来显示打印和查找对话框。这两者是异步显示的，因此对话框计数器的不会吧它们计算在内。\n\n## location对象\n\n提供了与当前窗口中加载的文档有关的信息和一些导航功能。\n\nlocation对象既是window对象的属性，有事document对象的属性。\n\nlocation将URL解析为独立的片段。\n\n下面是location对象的所有属性（忽略了每个属性前的location前缀）：\n\n| 属性名   | 例子                     | 说明                                                         |\n| -------- | ------------------------ | ------------------------------------------------------------ |\n| hash     | \"#contents\"              | 返回URL中的hash（#号后跟零或多个字符），如果URL中不包含散列，则返回空字符串 |\n| host     | \"blog.zmj97.top:80\"      | 返回服务器名称和端口号（如果有）                             |\n| hostname | \"blog.zmj97.top\"         | 返回不带端口号的服务器名称                                   |\n| href     | \"https://blog.zmj97.top\" | 返回当前加载页面的完整URL。location对象的toString()方法也返回这个值 |\n| pathname | \"/tag/\"                  | 返回URL中的目录和/或文件名                                   |\n| port     | \"8080\"                   | 返回URL指定的端口号。如果URL中不包含端口号，则返回空字符串   |\n| protocol | \"https:\"                 | 返回页面使用的协议，通常是http:或https:                      |\n| search   | \"?q=javascript\"          | 返回URL的查询字符串。这个字符串以问号开头                    |\n\n### 查询字符串参数\n\n尽管location.search返回从问号到URL末尾的所有内容，但却没有办法逐个访问每个查询字符串参数，因此可以：\n\n```js\nfunction getQueryStringArgs() {\n  // 取得查询字符串并去掉开头的问号\n  var qs = (location.search.length > 0 ? location.search.substring(1) : \"\");\n  // 保存数据的对象\n  var args = {};\n  // 取得每一项\n  var items = qs.split(\"&\");\n  var item = null,\n      name = null,\n      value = null;\n  // 逐个添加到args中\n  for (var i = 0; i < items.length; i++) {\n    item = items[i].split(\"=\");\n    name = decodeURIComponent(item[0]);\n    value = decodeURIComponent(item[1]);\n    args[name] = value;\n  }\n\n  return args;\n}\n```\n\n### 位置操作\n\n`location.assign(\"https://blog.zmj97.top\")`，立即打开新URL并在浏览器的历史记录中生成一条记录。\n\n`window.location = \"https://blog.zmj97.top\"`和`location.href = \"https://blog.zmj97.top\"`与调用assign()的效果一样。\n\n每次修改location对象的属性，页面都会以新URL重新加载（hash除外），并在浏览器的历史记录中生成一条新纪录（包括hash）。\n\n使用`location.replace(\"https://blog.zmj97.top\")`加载新页面后不会生成历史记录，也不能后退。\n\n`location.reload()`重新加载，有可能从缓存中加载\n\n`location.reload(true)`从服务器重新加载\n\n位于reload()调用之后的代码可能会也可能不会执行，取决于网络延迟或系统资源等因素。\n\n因此最好将reload()放在代码的最后一行。\n\n## navigator对象\n\n用于识别客户端浏览器，包含有关浏览器的信息。\n\n### 检测插件\n\nnavigator.plugins数组的每一项包含下列属性：\n\n- name：插件名字\n- description：插件描述\n- filename：插件文件名\n- length：插件所处理的MIME类型数量\n\n```js\n// 检查插件（IE中无效）\nfunction hasPlugin(name) {\n  name = name.toLowerCase();\n  for (var i = 0; i < navigator.plugins.length; i++) {\n    if (navigator.plugins[i].toLowerCase().indexOf(name) > -1) {\n      return true;\n    }\n  }\n\n  return false;\n}\n```\n\n每个插件对象本身也是一个MimeType对象的数组，包括四个属性：\n\n- MIME类型描述description\n- 回指插件对象的enablePlugin\n- MIME类型对应的文件扩展名的字符串suffixes（以逗号分割）\n- 完整MIME类型字符串type\n\n在IE中检查插件只能使用专有的ActiveXObject类型，还要知道插件的COM标识符。\n\nplugins集合有一个refresh()方法用于刷新插件，传入true会加载包含插件的所有页面。否则只更新插件不重新加载页面。\n\n### 注册处理程序\n\nregisterContentHandler()、registerProtocalHandler()\n\n为站点指明处理特定类型的信息\n\n## screen对象\n\n所有浏览器都支持的属性：\n\n- availHeight：可用的屏幕高度（像素高度-系统部件高度），只读\n- availWidth：可用的屏幕宽度（像素宽度-系统部件宽度），只读\n- colorDepth：用于表现颜色的位数，多数系统都是32位，只读\n- height：屏幕的像素高度\n- width：屏幕的像素宽度\n\n## history对象\n\n保存用户上网的历史记录\n\n使用go()方法可以在用户的历史记录中任意跳转\n\n```js\nhistory.go(-1); // 后退一页\nhistory.go(2); // 前进两页\nhistory.back(); // 后退一页\nhistory.forward(); // 前进一页\n```\n\n也可以传入一个字符串：浏览器会跳转到历史记录中最近包含该字符串的页面\n\n```js\nhistory.go(\"wrox.com\"); // 跳转到最近的wrox.com页面\n```\n\n# 客户端检测\n\n不到万不得已，不要使用客户端检测。\n\n先设计最通用的方案，然后再使用特定于浏览器的技术增强该方案。\n\n## 能力检测\n\n又称特性检测，是最受人们接受的检测方式。\n\n能力检测的目标不是识别特定的浏览器，而是识别浏览器的能力。\n\n不用顾及特定的浏览器如何如何，只要它支持特定的能力，就可以给出解决方案。\n\n基本模式：\n\n```js\nif (object.propertyInQuestion) {\n  // 使用object.propertyInQuestion\n}\n```\n\n- 先测试达成目的的最常用的特性\n- 必须测试实际要用到的特性，而不是通过判断另一个特性是否存在来判断是什么浏览器，然后决定是否用这个特性\n\n如果确定自己的应用程序需要使用哪些特定的浏览器特性，最好一次性检测所有相关特性：\n\n```js\n// 确定浏览器是否支持Netscape风格的插件\nvar hasNSPlugins = !!(navigator.plugins && navigator.plugins.length);\n```\n\n> 在实际开发中，应该将能力检测作为确定下一步解决方案的依据，而不是用它来判断用户使用的是什么浏览器。\n\n## 怪癖检测\n\n怪癖检测的目标是识别浏览器的特殊行为，知道浏览器存在什么缺陷。\n\n例如IE中有一个bug，如果某个实例属性与标记为[[DontEnum]]的某个原型属性同名，则该实例属性不会出现在for-in循环中：\n\n```js\nvar hasDontEnumQuirk = function() {\n  var o = {\n    toString: function() {}\n  };\n  for (var prop in o) {\n    if (prop == toString) {\n      return false;\n    }\n  }\n  return true;\n}();\n```\n\n怪癖通常为某个浏览器独有的，且被归类为bug。\n\n由于检测怪癖涉及运行代码，因此仅检测有直接影响的怪癖，且最好在脚本一开始就执行此类检测，以便尽早解决问题。\n\n","slug":"JavaScript学习记录四","published":1,"updated":"2018-09-19T10:53:31.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0d000xcrag4f9ahywl","content":"<p>——《JavaScript高级程序设计（第2版）》学习笔记</p>\n<p>要多查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web\" target=\"_blank\" rel=\"noopener\">MDN Web 文档</a></p>\n<hr>\n<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><p>Browser Object Model，浏览器对象模型。</p>\n<p>BOM提供了很多用于访问浏览器的功能，这些功能与任何网页内容无关。</p>\n<p>BOM缺少事实上的规范，因此浏览器之间共有的对象就成了事实上的标准。</p>\n<p>没有所谓的标准BOM实现或者标准BOM接口。</p>\n<p>图片来源于网络：</p>\n<p><img src=\"http://www.splessons.com/wp-content/uploads/2016/03/javascript-bom-01-splessons-1.png\" alt=\"BOM结构图\"></p>\n<h2 id=\"window对象\"><a href=\"#window对象\" class=\"headerlink\" title=\"window对象\"></a>window对象</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window\" target=\"_blank\" rel=\"noopener\">window文档</a></p>\n<p>BOM的核心对象是window，表示浏览器的一个实例。</p>\n<p>在浏览器中，window对象有双重角色：</p>\n<ul>\n<li>通过JavaScript访问浏览器窗口的一个接口</li>\n<li>ECMAScript规定的Global对象</li>\n</ul>\n<p>因此window对象有权访问parseInt()等方法。</p>\n<h3 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h3><p>因为window对象又是ECMAScript中的Global对象，因此在全局作用域中声明的所有变量、函数都会变成window对象的属性和方法。</p>\n<p>在全局作用域中，this指向window。</p>\n<h3 id=\"！窗口关系及框架\"><a href=\"#！窗口关系及框架\" class=\"headerlink\" title=\"！窗口关系及框架\"></a>！窗口关系及框架</h3><p><strong>因为书中使用的frameset和frame已经被HTML5废弃，用iframe取代，因此在看了HTML5后再来补充这一部分。</strong></p>\n<p>top、parent、一个框架一个window对象</p>\n<h3 id=\"！窗口位置\"><a href=\"#！窗口位置\" class=\"headerlink\" title=\"！窗口位置\"></a>！窗口位置</h3><p>screenLeft、screenX、moveTo等属性等看完文档再来详细记。</p>\n<h3 id=\"！窗口大小\"><a href=\"#！窗口大小\" class=\"headerlink\" title=\"！窗口大小\"></a>！窗口大小</h3><p>innerWidth、outerWidth、clientWidth、pageWidth、resizeTo()等属性等看完文档再来详细记。</p>\n<h3 id=\"导航和打开窗口\"><a href=\"#导航和打开窗口\" class=\"headerlink\" title=\"导航和打开窗口\"></a>导航和打开窗口</h3><p>window.open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口，返回指向新窗口的引用。</p>\n<p><code>window.open(URL,name,specs,replace)</code>，具体格式看<a href=\"http://www.runoob.com/jsref/met-win-open.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>新创建的window对象有一个opener属性，保存着打开它的原始窗口对象。</p>\n<h4 id=\"安全限制\"><a href=\"#安全限制\" class=\"headerlink\" title=\"安全限制\"></a>安全限制</h4><p>弹窗广告问题。</p>\n<p>为了解决这个问题，有些浏览器开始在弹出窗口配置方面增加限制。</p>\n<h4 id=\"弹出窗口屏蔽程序\"><a href=\"#弹出窗口屏蔽程序\" class=\"headerlink\" title=\"弹出窗口屏蔽程序\"></a>弹出窗口屏蔽程序</h4><p>弹出窗口被屏蔽有两种可能：</p>\n<ul>\n<li>被浏览器内置的屏蔽程序阻止，则window.open()很有可能返回null</li>\n<li>被浏览器扩展或其他程序阻止，则window.open()通常会抛出异常</li>\n</ul>\n<p>因此要想准确地检测弹出窗口是否被屏蔽：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blocked = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> popup = <span class=\"built_in\">window</span>.open(<span class=\"string\">\"https://blog.zmj97.top\"</span>, <span class=\"string\">\"_blank\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (popup == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (blocked) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"The Popup was blocked!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>检测弹出窗口是否被屏蔽并不会阻止浏览器显示与被屏蔽窗口的相关信息。</p>\n<h3 id=\"超时调用\"><a href=\"#超时调用\" class=\"headerlink\" title=\"超时调用\"></a>超时调用</h3><p>setTimeout()函数接受两个参数，要执行的代码和执行代码前要等待多少毫秒。</p>\n<p>第一个参数可以是一个包含JavaScript代码的字符串（不推荐，就和在eval()函数中使用的字符串一样），</p>\n<p>也可以是一个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"string\">\"alert('Hello World!')\"</span>, <span class=\"number\">1000</span>); <span class=\"comment\">// 不推荐</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 推荐的调用方式</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>调用setTImeout()后，该方法会返回一个数值ID，表示超时调用，</p>\n<p>可以用它作为参数调用clearTimeout()来取消超时调用。</p>\n<p>超时调用ID是计划执行代码的唯一标识符。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置超时调用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutId = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 把它取消</span></span><br><span class=\"line\">clearTimeout(timeoutId);</span><br></pre></td></tr></table></figure>\n<p>超时调用的代码都是在全局作用域中执行的，因此函数中的this的值通常指向window对象。</p>\n<h3 id=\"间歇调用\"><a href=\"#间歇调用\" class=\"headerlink\" title=\"间歇调用\"></a>间歇调用</h3><p>setInterval()函数接受两个参数，要执行的代码和每次执行代码前要等待多少毫秒。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(<span class=\"string\">\"alert('Hello World!')\"</span>, <span class=\"number\">1000</span>); <span class=\"comment\">// 不推荐</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 推荐的调用方式</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>取消间歇调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> intervalId = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">incrementNumber</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  num++;</span><br><span class=\"line\">  <span class=\"comment\">// 如果执行次数到达max，则取消间歇调用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num == max) &#123;</span><br><span class=\"line\">    clearInterval(intervalId);</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">intervalId = setInterval(incrementNumber, <span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n<p>实际上，使用超时调用来模拟间歇调用被认为是最佳模式，因为后一个间歇调用可能会在前一个间歇调用结束之前启动。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">incrementNumber</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  num++;</span><br><span class=\"line\">  <span class=\"comment\">// 如果执行次数未到达max，则设置另一次超时调用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt; max) &#123;</span><br><span class=\"line\">    setTimeout(incrementNumber, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(incrementNumber, <span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"系统对话框\"><a href=\"#系统对话框\" class=\"headerlink\" title=\"系统对话框\"></a>系统对话框</h3><p><code>alert()</code>只有一个确认按钮</p>\n<p><code>confirm()</code>有确认和取消两个按钮，返回true表示点了确认，false表示点了取消</p>\n<p><code>prompt()</code>，提示框，有一个文本输入域和确认取消按钮，两个参数为要显示给用户的提示内容和文本输入域内的默认内容，如果点击确认则返回文本输入域的值，否则返回null。</p>\n<p>三者均不涉及HTML、CSS、JavaScript。</p>\n<p>还有含有复选框的对话框选择是否阻止后续的对话框的显示。</p>\n<p>还可以在JavaScript中通过<code>window.print()</code>和<code>window.find()</code>来显示打印和查找对话框。这两者是异步显示的，因此对话框计数器的不会吧它们计算在内。</p>\n<h2 id=\"location对象\"><a href=\"#location对象\" class=\"headerlink\" title=\"location对象\"></a>location对象</h2><p>提供了与当前窗口中加载的文档有关的信息和一些导航功能。</p>\n<p>location对象既是window对象的属性，有事document对象的属性。</p>\n<p>location将URL解析为独立的片段。</p>\n<p>下面是location对象的所有属性（忽略了每个属性前的location前缀）：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>例子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hash</td>\n<td>“#contents”</td>\n<td>返回URL中的hash（#号后跟零或多个字符），如果URL中不包含散列，则返回空字符串</td>\n</tr>\n<tr>\n<td>host</td>\n<td>“blog.zmj97.top:80”</td>\n<td>返回服务器名称和端口号（如果有）</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>“blog.zmj97.top”</td>\n<td>返回不带端口号的服务器名称</td>\n</tr>\n<tr>\n<td>href</td>\n<td>“<a href=\"https://blog.zmj97.top&quot;\" target=\"_blank\" rel=\"noopener\">https://blog.zmj97.top&quot;</a></td>\n<td>返回当前加载页面的完整URL。location对象的toString()方法也返回这个值</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>“/tag/“</td>\n<td>返回URL中的目录和/或文件名</td>\n</tr>\n<tr>\n<td>port</td>\n<td>“8080”</td>\n<td>返回URL指定的端口号。如果URL中不包含端口号，则返回空字符串</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>“https:”</td>\n<td>返回页面使用的协议，通常是http:或https:</td>\n</tr>\n<tr>\n<td>search</td>\n<td>“?q=javascript”</td>\n<td>返回URL的查询字符串。这个字符串以问号开头</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"查询字符串参数\"><a href=\"#查询字符串参数\" class=\"headerlink\" title=\"查询字符串参数\"></a>查询字符串参数</h3><p>尽管location.search返回从问号到URL末尾的所有内容，但却没有办法逐个访问每个查询字符串参数，因此可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryStringArgs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 取得查询字符串并去掉开头的问号</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> qs = (location.search.length &gt; <span class=\"number\">0</span> ? location.search.substring(<span class=\"number\">1</span>) : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 保存数据的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 取得每一项</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = qs.split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> item = <span class=\"literal\">null</span>,</span><br><span class=\"line\">      name = <span class=\"literal\">null</span>,</span><br><span class=\"line\">      value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 逐个添加到args中</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">    item = items[i].split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">    name = <span class=\"built_in\">decodeURIComponent</span>(item[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    value = <span class=\"built_in\">decodeURIComponent</span>(item[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    args[name] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h3><p><code>location.assign(&quot;https://blog.zmj97.top&quot;)</code>，立即打开新URL并在浏览器的历史记录中生成一条记录。</p>\n<p><code>window.location = &quot;https://blog.zmj97.top&quot;</code>和<code>location.href = &quot;https://blog.zmj97.top&quot;</code>与调用assign()的效果一样。</p>\n<p>每次修改location对象的属性，页面都会以新URL重新加载（hash除外），并在浏览器的历史记录中生成一条新纪录（包括hash）。</p>\n<p>使用<code>location.replace(&quot;https://blog.zmj97.top&quot;)</code>加载新页面后不会生成历史记录，也不能后退。</p>\n<p><code>location.reload()</code>重新加载，有可能从缓存中加载</p>\n<p><code>location.reload(true)</code>从服务器重新加载</p>\n<p>位于reload()调用之后的代码可能会也可能不会执行，取决于网络延迟或系统资源等因素。</p>\n<p>因此最好将reload()放在代码的最后一行。</p>\n<h2 id=\"navigator对象\"><a href=\"#navigator对象\" class=\"headerlink\" title=\"navigator对象\"></a>navigator对象</h2><p>用于识别客户端浏览器，包含有关浏览器的信息。</p>\n<h3 id=\"检测插件\"><a href=\"#检测插件\" class=\"headerlink\" title=\"检测插件\"></a>检测插件</h3><p>navigator.plugins数组的每一项包含下列属性：</p>\n<ul>\n<li>name：插件名字</li>\n<li>description：插件描述</li>\n<li>filename：插件文件名</li>\n<li>length：插件所处理的MIME类型数量</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查插件（IE中无效）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasPlugin</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  name = name.toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; navigator.plugins.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (navigator.plugins[i].toLowerCase().indexOf(name) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每个插件对象本身也是一个MimeType对象的数组，包括四个属性：</p>\n<ul>\n<li>MIME类型描述description</li>\n<li>回指插件对象的enablePlugin</li>\n<li>MIME类型对应的文件扩展名的字符串suffixes（以逗号分割）</li>\n<li>完整MIME类型字符串type</li>\n</ul>\n<p>在IE中检查插件只能使用专有的ActiveXObject类型，还要知道插件的COM标识符。</p>\n<p>plugins集合有一个refresh()方法用于刷新插件，传入true会加载包含插件的所有页面。否则只更新插件不重新加载页面。</p>\n<h3 id=\"注册处理程序\"><a href=\"#注册处理程序\" class=\"headerlink\" title=\"注册处理程序\"></a>注册处理程序</h3><p>registerContentHandler()、registerProtocalHandler()</p>\n<p>为站点指明处理特定类型的信息</p>\n<h2 id=\"screen对象\"><a href=\"#screen对象\" class=\"headerlink\" title=\"screen对象\"></a>screen对象</h2><p>所有浏览器都支持的属性：</p>\n<ul>\n<li>availHeight：可用的屏幕高度（像素高度-系统部件高度），只读</li>\n<li>availWidth：可用的屏幕宽度（像素宽度-系统部件宽度），只读</li>\n<li>colorDepth：用于表现颜色的位数，多数系统都是32位，只读</li>\n<li>height：屏幕的像素高度</li>\n<li>width：屏幕的像素宽度</li>\n</ul>\n<h2 id=\"history对象\"><a href=\"#history对象\" class=\"headerlink\" title=\"history对象\"></a>history对象</h2><p>保存用户上网的历史记录</p>\n<p>使用go()方法可以在用户的历史记录中任意跳转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history.go(<span class=\"number\">-1</span>); <span class=\"comment\">// 后退一页</span></span><br><span class=\"line\">history.go(<span class=\"number\">2</span>); <span class=\"comment\">// 前进两页</span></span><br><span class=\"line\">history.back(); <span class=\"comment\">// 后退一页</span></span><br><span class=\"line\">history.forward(); <span class=\"comment\">// 前进一页</span></span><br></pre></td></tr></table></figure>\n<p>也可以传入一个字符串：浏览器会跳转到历史记录中最近包含该字符串的页面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history.go(<span class=\"string\">\"wrox.com\"</span>); <span class=\"comment\">// 跳转到最近的wrox.com页面</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"客户端检测\"><a href=\"#客户端检测\" class=\"headerlink\" title=\"客户端检测\"></a>客户端检测</h1><p>不到万不得已，不要使用客户端检测。</p>\n<p>先设计最通用的方案，然后再使用特定于浏览器的技术增强该方案。</p>\n<h2 id=\"能力检测\"><a href=\"#能力检测\" class=\"headerlink\" title=\"能力检测\"></a>能力检测</h2><p>又称特性检测，是最受人们接受的检测方式。</p>\n<p>能力检测的目标不是识别特定的浏览器，而是识别浏览器的能力。</p>\n<p>不用顾及特定的浏览器如何如何，只要它支持特定的能力，就可以给出解决方案。</p>\n<p>基本模式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (object.propertyInQuestion) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用object.propertyInQuestion</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>先测试达成目的的最常用的特性</li>\n<li>必须测试实际要用到的特性，而不是通过判断另一个特性是否存在来判断是什么浏览器，然后决定是否用这个特性</li>\n</ul>\n<p>如果确定自己的应用程序需要使用哪些特定的浏览器特性，最好一次性检测所有相关特性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 确定浏览器是否支持Netscape风格的插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasNSPlugins = !!(navigator.plugins &amp;&amp; navigator.plugins.length);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在实际开发中，应该将能力检测作为确定下一步解决方案的依据，而不是用它来判断用户使用的是什么浏览器。</p>\n</blockquote>\n<h2 id=\"怪癖检测\"><a href=\"#怪癖检测\" class=\"headerlink\" title=\"怪癖检测\"></a>怪癖检测</h2><p>怪癖检测的目标是识别浏览器的特殊行为，知道浏览器存在什么缺陷。</p>\n<p>例如IE中有一个bug，如果某个实例属性与标记为[[DontEnum]]的某个原型属性同名，则该实例属性不会出现在for-in循环中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasDontEnumQuirk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop == toString) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>怪癖通常为某个浏览器独有的，且被归类为bug。</p>\n<p>由于检测怪癖涉及运行代码，因此仅检测有直接影响的怪癖，且最好在脚本一开始就执行此类检测，以便尽早解决问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>——《JavaScript高级程序设计（第2版）》学习笔记</p>\n<p>要多查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web\" target=\"_blank\" rel=\"noopener\">MDN Web 文档</a></p>\n<hr>\n<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><p>Browser Object Model，浏览器对象模型。</p>\n<p>BOM提供了很多用于访问浏览器的功能，这些功能与任何网页内容无关。</p>\n<p>BOM缺少事实上的规范，因此浏览器之间共有的对象就成了事实上的标准。</p>\n<p>没有所谓的标准BOM实现或者标准BOM接口。</p>\n<p>图片来源于网络：</p>\n<p><img src=\"http://www.splessons.com/wp-content/uploads/2016/03/javascript-bom-01-splessons-1.png\" alt=\"BOM结构图\"></p>\n<h2 id=\"window对象\"><a href=\"#window对象\" class=\"headerlink\" title=\"window对象\"></a>window对象</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window\" target=\"_blank\" rel=\"noopener\">window文档</a></p>\n<p>BOM的核心对象是window，表示浏览器的一个实例。</p>\n<p>在浏览器中，window对象有双重角色：</p>\n<ul>\n<li>通过JavaScript访问浏览器窗口的一个接口</li>\n<li>ECMAScript规定的Global对象</li>\n</ul>\n<p>因此window对象有权访问parseInt()等方法。</p>\n<h3 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h3><p>因为window对象又是ECMAScript中的Global对象，因此在全局作用域中声明的所有变量、函数都会变成window对象的属性和方法。</p>\n<p>在全局作用域中，this指向window。</p>\n<h3 id=\"！窗口关系及框架\"><a href=\"#！窗口关系及框架\" class=\"headerlink\" title=\"！窗口关系及框架\"></a>！窗口关系及框架</h3><p><strong>因为书中使用的frameset和frame已经被HTML5废弃，用iframe取代，因此在看了HTML5后再来补充这一部分。</strong></p>\n<p>top、parent、一个框架一个window对象</p>\n<h3 id=\"！窗口位置\"><a href=\"#！窗口位置\" class=\"headerlink\" title=\"！窗口位置\"></a>！窗口位置</h3><p>screenLeft、screenX、moveTo等属性等看完文档再来详细记。</p>\n<h3 id=\"！窗口大小\"><a href=\"#！窗口大小\" class=\"headerlink\" title=\"！窗口大小\"></a>！窗口大小</h3><p>innerWidth、outerWidth、clientWidth、pageWidth、resizeTo()等属性等看完文档再来详细记。</p>\n<h3 id=\"导航和打开窗口\"><a href=\"#导航和打开窗口\" class=\"headerlink\" title=\"导航和打开窗口\"></a>导航和打开窗口</h3><p>window.open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口，返回指向新窗口的引用。</p>\n<p><code>window.open(URL,name,specs,replace)</code>，具体格式看<a href=\"http://www.runoob.com/jsref/met-win-open.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>新创建的window对象有一个opener属性，保存着打开它的原始窗口对象。</p>\n<h4 id=\"安全限制\"><a href=\"#安全限制\" class=\"headerlink\" title=\"安全限制\"></a>安全限制</h4><p>弹窗广告问题。</p>\n<p>为了解决这个问题，有些浏览器开始在弹出窗口配置方面增加限制。</p>\n<h4 id=\"弹出窗口屏蔽程序\"><a href=\"#弹出窗口屏蔽程序\" class=\"headerlink\" title=\"弹出窗口屏蔽程序\"></a>弹出窗口屏蔽程序</h4><p>弹出窗口被屏蔽有两种可能：</p>\n<ul>\n<li>被浏览器内置的屏蔽程序阻止，则window.open()很有可能返回null</li>\n<li>被浏览器扩展或其他程序阻止，则window.open()通常会抛出异常</li>\n</ul>\n<p>因此要想准确地检测弹出窗口是否被屏蔽：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blocked = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> popup = <span class=\"built_in\">window</span>.open(<span class=\"string\">\"https://blog.zmj97.top\"</span>, <span class=\"string\">\"_blank\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (popup == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (blocked) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"The Popup was blocked!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>检测弹出窗口是否被屏蔽并不会阻止浏览器显示与被屏蔽窗口的相关信息。</p>\n<h3 id=\"超时调用\"><a href=\"#超时调用\" class=\"headerlink\" title=\"超时调用\"></a>超时调用</h3><p>setTimeout()函数接受两个参数，要执行的代码和执行代码前要等待多少毫秒。</p>\n<p>第一个参数可以是一个包含JavaScript代码的字符串（不推荐，就和在eval()函数中使用的字符串一样），</p>\n<p>也可以是一个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"string\">\"alert('Hello World!')\"</span>, <span class=\"number\">1000</span>); <span class=\"comment\">// 不推荐</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 推荐的调用方式</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>调用setTImeout()后，该方法会返回一个数值ID，表示超时调用，</p>\n<p>可以用它作为参数调用clearTimeout()来取消超时调用。</p>\n<p>超时调用ID是计划执行代码的唯一标识符。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置超时调用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutId = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 把它取消</span></span><br><span class=\"line\">clearTimeout(timeoutId);</span><br></pre></td></tr></table></figure>\n<p>超时调用的代码都是在全局作用域中执行的，因此函数中的this的值通常指向window对象。</p>\n<h3 id=\"间歇调用\"><a href=\"#间歇调用\" class=\"headerlink\" title=\"间歇调用\"></a>间歇调用</h3><p>setInterval()函数接受两个参数，要执行的代码和每次执行代码前要等待多少毫秒。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(<span class=\"string\">\"alert('Hello World!')\"</span>, <span class=\"number\">1000</span>); <span class=\"comment\">// 不推荐</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 推荐的调用方式</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>取消间歇调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> intervalId = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">incrementNumber</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  num++;</span><br><span class=\"line\">  <span class=\"comment\">// 如果执行次数到达max，则取消间歇调用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num == max) &#123;</span><br><span class=\"line\">    clearInterval(intervalId);</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">intervalId = setInterval(incrementNumber, <span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n<p>实际上，使用超时调用来模拟间歇调用被认为是最佳模式，因为后一个间歇调用可能会在前一个间歇调用结束之前启动。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">incrementNumber</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  num++;</span><br><span class=\"line\">  <span class=\"comment\">// 如果执行次数未到达max，则设置另一次超时调用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt; max) &#123;</span><br><span class=\"line\">    setTimeout(incrementNumber, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(incrementNumber, <span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"系统对话框\"><a href=\"#系统对话框\" class=\"headerlink\" title=\"系统对话框\"></a>系统对话框</h3><p><code>alert()</code>只有一个确认按钮</p>\n<p><code>confirm()</code>有确认和取消两个按钮，返回true表示点了确认，false表示点了取消</p>\n<p><code>prompt()</code>，提示框，有一个文本输入域和确认取消按钮，两个参数为要显示给用户的提示内容和文本输入域内的默认内容，如果点击确认则返回文本输入域的值，否则返回null。</p>\n<p>三者均不涉及HTML、CSS、JavaScript。</p>\n<p>还有含有复选框的对话框选择是否阻止后续的对话框的显示。</p>\n<p>还可以在JavaScript中通过<code>window.print()</code>和<code>window.find()</code>来显示打印和查找对话框。这两者是异步显示的，因此对话框计数器的不会吧它们计算在内。</p>\n<h2 id=\"location对象\"><a href=\"#location对象\" class=\"headerlink\" title=\"location对象\"></a>location对象</h2><p>提供了与当前窗口中加载的文档有关的信息和一些导航功能。</p>\n<p>location对象既是window对象的属性，有事document对象的属性。</p>\n<p>location将URL解析为独立的片段。</p>\n<p>下面是location对象的所有属性（忽略了每个属性前的location前缀）：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>例子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hash</td>\n<td>“#contents”</td>\n<td>返回URL中的hash（#号后跟零或多个字符），如果URL中不包含散列，则返回空字符串</td>\n</tr>\n<tr>\n<td>host</td>\n<td>“blog.zmj97.top:80”</td>\n<td>返回服务器名称和端口号（如果有）</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>“blog.zmj97.top”</td>\n<td>返回不带端口号的服务器名称</td>\n</tr>\n<tr>\n<td>href</td>\n<td>“<a href=\"https://blog.zmj97.top&quot;\" target=\"_blank\" rel=\"noopener\">https://blog.zmj97.top&quot;</a></td>\n<td>返回当前加载页面的完整URL。location对象的toString()方法也返回这个值</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>“/tag/“</td>\n<td>返回URL中的目录和/或文件名</td>\n</tr>\n<tr>\n<td>port</td>\n<td>“8080”</td>\n<td>返回URL指定的端口号。如果URL中不包含端口号，则返回空字符串</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>“https:”</td>\n<td>返回页面使用的协议，通常是http:或https:</td>\n</tr>\n<tr>\n<td>search</td>\n<td>“?q=javascript”</td>\n<td>返回URL的查询字符串。这个字符串以问号开头</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"查询字符串参数\"><a href=\"#查询字符串参数\" class=\"headerlink\" title=\"查询字符串参数\"></a>查询字符串参数</h3><p>尽管location.search返回从问号到URL末尾的所有内容，但却没有办法逐个访问每个查询字符串参数，因此可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryStringArgs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 取得查询字符串并去掉开头的问号</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> qs = (location.search.length &gt; <span class=\"number\">0</span> ? location.search.substring(<span class=\"number\">1</span>) : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 保存数据的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 取得每一项</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> items = qs.split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> item = <span class=\"literal\">null</span>,</span><br><span class=\"line\">      name = <span class=\"literal\">null</span>,</span><br><span class=\"line\">      value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 逐个添加到args中</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">    item = items[i].split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">    name = <span class=\"built_in\">decodeURIComponent</span>(item[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    value = <span class=\"built_in\">decodeURIComponent</span>(item[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    args[name] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h3><p><code>location.assign(&quot;https://blog.zmj97.top&quot;)</code>，立即打开新URL并在浏览器的历史记录中生成一条记录。</p>\n<p><code>window.location = &quot;https://blog.zmj97.top&quot;</code>和<code>location.href = &quot;https://blog.zmj97.top&quot;</code>与调用assign()的效果一样。</p>\n<p>每次修改location对象的属性，页面都会以新URL重新加载（hash除外），并在浏览器的历史记录中生成一条新纪录（包括hash）。</p>\n<p>使用<code>location.replace(&quot;https://blog.zmj97.top&quot;)</code>加载新页面后不会生成历史记录，也不能后退。</p>\n<p><code>location.reload()</code>重新加载，有可能从缓存中加载</p>\n<p><code>location.reload(true)</code>从服务器重新加载</p>\n<p>位于reload()调用之后的代码可能会也可能不会执行，取决于网络延迟或系统资源等因素。</p>\n<p>因此最好将reload()放在代码的最后一行。</p>\n<h2 id=\"navigator对象\"><a href=\"#navigator对象\" class=\"headerlink\" title=\"navigator对象\"></a>navigator对象</h2><p>用于识别客户端浏览器，包含有关浏览器的信息。</p>\n<h3 id=\"检测插件\"><a href=\"#检测插件\" class=\"headerlink\" title=\"检测插件\"></a>检测插件</h3><p>navigator.plugins数组的每一项包含下列属性：</p>\n<ul>\n<li>name：插件名字</li>\n<li>description：插件描述</li>\n<li>filename：插件文件名</li>\n<li>length：插件所处理的MIME类型数量</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查插件（IE中无效）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasPlugin</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  name = name.toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; navigator.plugins.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (navigator.plugins[i].toLowerCase().indexOf(name) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每个插件对象本身也是一个MimeType对象的数组，包括四个属性：</p>\n<ul>\n<li>MIME类型描述description</li>\n<li>回指插件对象的enablePlugin</li>\n<li>MIME类型对应的文件扩展名的字符串suffixes（以逗号分割）</li>\n<li>完整MIME类型字符串type</li>\n</ul>\n<p>在IE中检查插件只能使用专有的ActiveXObject类型，还要知道插件的COM标识符。</p>\n<p>plugins集合有一个refresh()方法用于刷新插件，传入true会加载包含插件的所有页面。否则只更新插件不重新加载页面。</p>\n<h3 id=\"注册处理程序\"><a href=\"#注册处理程序\" class=\"headerlink\" title=\"注册处理程序\"></a>注册处理程序</h3><p>registerContentHandler()、registerProtocalHandler()</p>\n<p>为站点指明处理特定类型的信息</p>\n<h2 id=\"screen对象\"><a href=\"#screen对象\" class=\"headerlink\" title=\"screen对象\"></a>screen对象</h2><p>所有浏览器都支持的属性：</p>\n<ul>\n<li>availHeight：可用的屏幕高度（像素高度-系统部件高度），只读</li>\n<li>availWidth：可用的屏幕宽度（像素宽度-系统部件宽度），只读</li>\n<li>colorDepth：用于表现颜色的位数，多数系统都是32位，只读</li>\n<li>height：屏幕的像素高度</li>\n<li>width：屏幕的像素宽度</li>\n</ul>\n<h2 id=\"history对象\"><a href=\"#history对象\" class=\"headerlink\" title=\"history对象\"></a>history对象</h2><p>保存用户上网的历史记录</p>\n<p>使用go()方法可以在用户的历史记录中任意跳转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history.go(<span class=\"number\">-1</span>); <span class=\"comment\">// 后退一页</span></span><br><span class=\"line\">history.go(<span class=\"number\">2</span>); <span class=\"comment\">// 前进两页</span></span><br><span class=\"line\">history.back(); <span class=\"comment\">// 后退一页</span></span><br><span class=\"line\">history.forward(); <span class=\"comment\">// 前进一页</span></span><br></pre></td></tr></table></figure>\n<p>也可以传入一个字符串：浏览器会跳转到历史记录中最近包含该字符串的页面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history.go(<span class=\"string\">\"wrox.com\"</span>); <span class=\"comment\">// 跳转到最近的wrox.com页面</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"客户端检测\"><a href=\"#客户端检测\" class=\"headerlink\" title=\"客户端检测\"></a>客户端检测</h1><p>不到万不得已，不要使用客户端检测。</p>\n<p>先设计最通用的方案，然后再使用特定于浏览器的技术增强该方案。</p>\n<h2 id=\"能力检测\"><a href=\"#能力检测\" class=\"headerlink\" title=\"能力检测\"></a>能力检测</h2><p>又称特性检测，是最受人们接受的检测方式。</p>\n<p>能力检测的目标不是识别特定的浏览器，而是识别浏览器的能力。</p>\n<p>不用顾及特定的浏览器如何如何，只要它支持特定的能力，就可以给出解决方案。</p>\n<p>基本模式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (object.propertyInQuestion) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用object.propertyInQuestion</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>先测试达成目的的最常用的特性</li>\n<li>必须测试实际要用到的特性，而不是通过判断另一个特性是否存在来判断是什么浏览器，然后决定是否用这个特性</li>\n</ul>\n<p>如果确定自己的应用程序需要使用哪些特定的浏览器特性，最好一次性检测所有相关特性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 确定浏览器是否支持Netscape风格的插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasNSPlugins = !!(navigator.plugins &amp;&amp; navigator.plugins.length);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在实际开发中，应该将能力检测作为确定下一步解决方案的依据，而不是用它来判断用户使用的是什么浏览器。</p>\n</blockquote>\n<h2 id=\"怪癖检测\"><a href=\"#怪癖检测\" class=\"headerlink\" title=\"怪癖检测\"></a>怪癖检测</h2><p>怪癖检测的目标是识别浏览器的特殊行为，知道浏览器存在什么缺陷。</p>\n<p>例如IE中有一个bug，如果某个实例属性与标记为[[DontEnum]]的某个原型属性同名，则该实例属性不会出现在for-in循环中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasDontEnumQuirk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop == toString) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>怪癖通常为某个浏览器独有的，且被归类为bug。</p>\n<p>由于检测怪癖涉及运行代码，因此仅检测有直接影响的怪癖，且最好在脚本一开始就执行此类检测，以便尽早解决问题。</p>\n"},{"title":"git相关整理","toc":false,"date":"2018-09-24T12:42:55.000Z","_content":"\n## git merge 和 git merge --no--ff有什么区别?\n\n`git merge`命令用于合并指定分支到当前分支。默认情况下，执行`快进式合并`（fast-farward merge），直接通过把master指向feature来将两个分支并为一个分支，只保存master的分支信息。\n\n`git merge --no--ff`执行正常合并，在master分支上生成新的节点，可以就可以保存之前的feature分支历史。能够更好的查看merge历史和branch状态。\n\n因此为了保证版本演进的清晰，推荐使用`--no--ff`的方法。\n\n![img](http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070505.png)\n\n![Image result for git merge -- no ff](https://i.stack.imgur.com/FMD5h.png)\n\n## 工作区与暂存区\n\n**工作区**：workspace，git管理的当前文件夹\n\n**暂存区**：stage/index，工作区与分支之间的中转站\n\n![工作区与暂存区](http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg)\n\n`git add`——将修改添加到暂存区\n\n`git checkout -- filename`——撤销工作区中指定文件的修改\n\n`git checkout .`  ——撤销工作区中当前目录中的所有更改\n\n`git rm --cached filename`——删除暂存区中的指定文件，但保留本地文件\n\n`git rm filename`——删除暂存区中的指定文件，同时删除本地文件\n\n## 版本回退\n\n### reset\n\n`git reset --soft` ——只回退commit，暂存区和工作区不做出改变。\n\n`git reset --hard`——回退commit、暂存区、工作区，即本地的代码也会回退，**慎用！**\n\n`git reset --mixed`——回退commit和暂存区，以上两种情况的中和版本，reset不带参数的**默认方式**\n\n<u>关于版本：</u>\n\n`HEAD`——当前版本\n\n`HEAD^`——上一个版本\n\n`HEAD^^`——上上一个版本\n\n`HEAD^^^`——上上上一个版本\n\n`HEAD~n`——上n个版本\n\n也可以使用`commitID`\n\n<u>一个栗子：</u>\n\n`git reset --soft HEAD^`\n\n只回退commit到上一个版本\n\n**reset回退不会保留回退到的版本之后的所有commit**，因此在push时会因为落后于远程commit而报错，若想强制覆盖，可以为push命令加上`--force`或`-f`来进行强制操作。\n\n### revert\n\nrevert用一个新提交来消除一个历史提交所做的所有修改，即\n\n**revert不影响以前的所有commit**\n\n```shell\ngit revert HEAD // 撤销最近一次提交\ngit revert HEAD^ // 撤销上上次提交\ngit revert commitID // 撤销指定id的提交\n```\n\n## 回退暂存区的修改\n\n`git reset HEAD`，命令具体含义看上边的版本回退。\n\n## 删除分支\n\n`git branch -d BranchName`——删除本地分支\n\n`git push origin --delete BranchName`/`git push origin :BranchName`——删除远程分支\n\n## git pull 与 git fetch 区别\n\n`git fetch`——拉取远程分支并更新到`origin/BranchName`分支中\n\n`git pull`——拉取远程分支后与本地当前分支合并\n\n```shell\ngit fetch origin master // 保存在本地'origin/master'分支中\ngit merge origin/master // 将fetch到的分支合并到本地的当前分支中\n\ngit pull origin master // 以上两句命令相当于这一句命令\n```\n\n## 合并时出现冲突的解决办法\n\n`git merge`显示冲突时，\n\n使用`git status`查看冲突的文件，\n\n冲突部分用`<<<<<<< =======  >>>>>>>`标示，\n\n编辑冲突的文件：\n\n```js\n// ……\n\n<<<<<<< HEAD // 合并当前分支的内容\n// ……\n=======\n// ……\n>>>>>>> BranchName // 合并前要合并的分支的内容\n\n// ……\n```\n\n然后`git add`冲突文件发现成功了！秒啊！\n\n\n\n","source":"_posts/git相关整理.md","raw":"---\ntitle: git相关整理\ntoc: false\ndate: 2018-09-24 20:42:55\ncategories:\n- Web\ntags:\n- git\n---\n\n## git merge 和 git merge --no--ff有什么区别?\n\n`git merge`命令用于合并指定分支到当前分支。默认情况下，执行`快进式合并`（fast-farward merge），直接通过把master指向feature来将两个分支并为一个分支，只保存master的分支信息。\n\n`git merge --no--ff`执行正常合并，在master分支上生成新的节点，可以就可以保存之前的feature分支历史。能够更好的查看merge历史和branch状态。\n\n因此为了保证版本演进的清晰，推荐使用`--no--ff`的方法。\n\n![img](http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070505.png)\n\n![Image result for git merge -- no ff](https://i.stack.imgur.com/FMD5h.png)\n\n## 工作区与暂存区\n\n**工作区**：workspace，git管理的当前文件夹\n\n**暂存区**：stage/index，工作区与分支之间的中转站\n\n![工作区与暂存区](http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg)\n\n`git add`——将修改添加到暂存区\n\n`git checkout -- filename`——撤销工作区中指定文件的修改\n\n`git checkout .`  ——撤销工作区中当前目录中的所有更改\n\n`git rm --cached filename`——删除暂存区中的指定文件，但保留本地文件\n\n`git rm filename`——删除暂存区中的指定文件，同时删除本地文件\n\n## 版本回退\n\n### reset\n\n`git reset --soft` ——只回退commit，暂存区和工作区不做出改变。\n\n`git reset --hard`——回退commit、暂存区、工作区，即本地的代码也会回退，**慎用！**\n\n`git reset --mixed`——回退commit和暂存区，以上两种情况的中和版本，reset不带参数的**默认方式**\n\n<u>关于版本：</u>\n\n`HEAD`——当前版本\n\n`HEAD^`——上一个版本\n\n`HEAD^^`——上上一个版本\n\n`HEAD^^^`——上上上一个版本\n\n`HEAD~n`——上n个版本\n\n也可以使用`commitID`\n\n<u>一个栗子：</u>\n\n`git reset --soft HEAD^`\n\n只回退commit到上一个版本\n\n**reset回退不会保留回退到的版本之后的所有commit**，因此在push时会因为落后于远程commit而报错，若想强制覆盖，可以为push命令加上`--force`或`-f`来进行强制操作。\n\n### revert\n\nrevert用一个新提交来消除一个历史提交所做的所有修改，即\n\n**revert不影响以前的所有commit**\n\n```shell\ngit revert HEAD // 撤销最近一次提交\ngit revert HEAD^ // 撤销上上次提交\ngit revert commitID // 撤销指定id的提交\n```\n\n## 回退暂存区的修改\n\n`git reset HEAD`，命令具体含义看上边的版本回退。\n\n## 删除分支\n\n`git branch -d BranchName`——删除本地分支\n\n`git push origin --delete BranchName`/`git push origin :BranchName`——删除远程分支\n\n## git pull 与 git fetch 区别\n\n`git fetch`——拉取远程分支并更新到`origin/BranchName`分支中\n\n`git pull`——拉取远程分支后与本地当前分支合并\n\n```shell\ngit fetch origin master // 保存在本地'origin/master'分支中\ngit merge origin/master // 将fetch到的分支合并到本地的当前分支中\n\ngit pull origin master // 以上两句命令相当于这一句命令\n```\n\n## 合并时出现冲突的解决办法\n\n`git merge`显示冲突时，\n\n使用`git status`查看冲突的文件，\n\n冲突部分用`<<<<<<< =======  >>>>>>>`标示，\n\n编辑冲突的文件：\n\n```js\n// ……\n\n<<<<<<< HEAD // 合并当前分支的内容\n// ……\n=======\n// ……\n>>>>>>> BranchName // 合并前要合并的分支的内容\n\n// ……\n```\n\n然后`git add`冲突文件发现成功了！秒啊！\n\n\n\n","slug":"git相关整理","published":1,"updated":"2018-09-24T14:59:27.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0f0012cragxa7impim","content":"<h2 id=\"git-merge-和-git-merge-–no–ff有什么区别\"><a href=\"#git-merge-和-git-merge-–no–ff有什么区别\" class=\"headerlink\" title=\"git merge 和 git merge –no–ff有什么区别?\"></a>git merge 和 git merge –no–ff有什么区别?</h2><p><code>git merge</code>命令用于合并指定分支到当前分支。默认情况下，执行<code>快进式合并</code>（fast-farward merge），直接通过把master指向feature来将两个分支并为一个分支，只保存master的分支信息。</p>\n<p><code>git merge --no--ff</code>执行正常合并，在master分支上生成新的节点，可以就可以保存之前的feature分支历史。能够更好的查看merge历史和branch状态。</p>\n<p>因此为了保证版本演进的清晰，推荐使用<code>--no--ff</code>的方法。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070505.png\" alt=\"img\"></p>\n<p><img src=\"https://i.stack.imgur.com/FMD5h.png\" alt=\"Image result for git merge -- no ff\"></p>\n<h2 id=\"工作区与暂存区\"><a href=\"#工作区与暂存区\" class=\"headerlink\" title=\"工作区与暂存区\"></a>工作区与暂存区</h2><p><strong>工作区</strong>：workspace，git管理的当前文件夹</p>\n<p><strong>暂存区</strong>：stage/index，工作区与分支之间的中转站</p>\n<p><img src=\"http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg\" alt=\"工作区与暂存区\"></p>\n<p><code>git add</code>——将修改添加到暂存区</p>\n<p><code>git checkout -- filename</code>——撤销工作区中指定文件的修改</p>\n<p><code>git checkout .</code>  ——撤销工作区中当前目录中的所有更改</p>\n<p><code>git rm --cached filename</code>——删除暂存区中的指定文件，但保留本地文件</p>\n<p><code>git rm filename</code>——删除暂存区中的指定文件，同时删除本地文件</p>\n<h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><h3 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h3><p><code>git reset --soft</code> ——只回退commit，暂存区和工作区不做出改变。</p>\n<p><code>git reset --hard</code>——回退commit、暂存区、工作区，即本地的代码也会回退，<strong>慎用！</strong></p>\n<p><code>git reset --mixed</code>——回退commit和暂存区，以上两种情况的中和版本，reset不带参数的<strong>默认方式</strong></p>\n<p><u>关于版本：</u></p>\n<p><code>HEAD</code>——当前版本</p>\n<p><code>HEAD^</code>——上一个版本</p>\n<p><code>HEAD^^</code>——上上一个版本</p>\n<p><code>HEAD^^^</code>——上上上一个版本</p>\n<p><code>HEAD~n</code>——上n个版本</p>\n<p>也可以使用<code>commitID</code></p>\n<p><u>一个栗子：</u></p>\n<p><code>git reset --soft HEAD^</code></p>\n<p>只回退commit到上一个版本</p>\n<p><strong>reset回退不会保留回退到的版本之后的所有commit</strong>，因此在push时会因为落后于远程commit而报错，若想强制覆盖，可以为push命令加上<code>--force</code>或<code>-f</code>来进行强制操作。</p>\n<h3 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h3><p>revert用一个新提交来消除一个历史提交所做的所有修改，即</p>\n<p><strong>revert不影响以前的所有commit</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert HEAD // 撤销最近一次提交</span><br><span class=\"line\">git revert HEAD^ // 撤销上上次提交</span><br><span class=\"line\">git revert commitID // 撤销指定id的提交</span><br></pre></td></tr></table></figure>\n<h2 id=\"回退暂存区的修改\"><a href=\"#回退暂存区的修改\" class=\"headerlink\" title=\"回退暂存区的修改\"></a>回退暂存区的修改</h2><p><code>git reset HEAD</code>，命令具体含义看上边的版本回退。</p>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><p><code>git branch -d BranchName</code>——删除本地分支</p>\n<p><code>git push origin --delete BranchName</code>/<code>git push origin :BranchName</code>——删除远程分支</p>\n<h2 id=\"git-pull-与-git-fetch-区别\"><a href=\"#git-pull-与-git-fetch-区别\" class=\"headerlink\" title=\"git pull 与 git fetch 区别\"></a>git pull 与 git fetch 区别</h2><p><code>git fetch</code>——拉取远程分支并更新到<code>origin/BranchName</code>分支中</p>\n<p><code>git pull</code>——拉取远程分支后与本地当前分支合并</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin master // 保存在本地'origin/master'分支中</span><br><span class=\"line\">git merge origin/master // 将fetch到的分支合并到本地的当前分支中</span><br><span class=\"line\"></span><br><span class=\"line\">git pull origin master // 以上两句命令相当于这一句命令</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并时出现冲突的解决办法\"><a href=\"#合并时出现冲突的解决办法\" class=\"headerlink\" title=\"合并时出现冲突的解决办法\"></a>合并时出现冲突的解决办法</h2><p><code>git merge</code>显示冲突时，</p>\n<p>使用<code>git status</code>查看冲突的文件，</p>\n<p>冲突部分用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; =======  &gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标示，</p>\n<p>编辑冲突的文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ……</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&lt;<span class=\"xml\"><span class=\"tag\">&lt;&lt;&lt;&lt;&lt; <span class=\"attr\">HEAD</span> // 合并当前分支的内容</span></span></span><br><span class=\"line\"><span class=\"xml\">// ……</span></span><br><span class=\"line\"><span class=\"xml\">=======</span></span><br><span class=\"line\"><span class=\"xml\">// ……</span></span><br><span class=\"line\"><span class=\"xml\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; BranchName // 合并前要合并的分支的内容</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">// ……</span></span><br></pre></td></tr></table></figure>\n<p>然后<code>git add</code>冲突文件发现成功了！秒啊！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git-merge-和-git-merge-–no–ff有什么区别\"><a href=\"#git-merge-和-git-merge-–no–ff有什么区别\" class=\"headerlink\" title=\"git merge 和 git merge –no–ff有什么区别?\"></a>git merge 和 git merge –no–ff有什么区别?</h2><p><code>git merge</code>命令用于合并指定分支到当前分支。默认情况下，执行<code>快进式合并</code>（fast-farward merge），直接通过把master指向feature来将两个分支并为一个分支，只保存master的分支信息。</p>\n<p><code>git merge --no--ff</code>执行正常合并，在master分支上生成新的节点，可以就可以保存之前的feature分支历史。能够更好的查看merge历史和branch状态。</p>\n<p>因此为了保证版本演进的清晰，推荐使用<code>--no--ff</code>的方法。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070505.png\" alt=\"img\"></p>\n<p><img src=\"https://i.stack.imgur.com/FMD5h.png\" alt=\"Image result for git merge -- no ff\"></p>\n<h2 id=\"工作区与暂存区\"><a href=\"#工作区与暂存区\" class=\"headerlink\" title=\"工作区与暂存区\"></a>工作区与暂存区</h2><p><strong>工作区</strong>：workspace，git管理的当前文件夹</p>\n<p><strong>暂存区</strong>：stage/index，工作区与分支之间的中转站</p>\n<p><img src=\"http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg\" alt=\"工作区与暂存区\"></p>\n<p><code>git add</code>——将修改添加到暂存区</p>\n<p><code>git checkout -- filename</code>——撤销工作区中指定文件的修改</p>\n<p><code>git checkout .</code>  ——撤销工作区中当前目录中的所有更改</p>\n<p><code>git rm --cached filename</code>——删除暂存区中的指定文件，但保留本地文件</p>\n<p><code>git rm filename</code>——删除暂存区中的指定文件，同时删除本地文件</p>\n<h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><h3 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h3><p><code>git reset --soft</code> ——只回退commit，暂存区和工作区不做出改变。</p>\n<p><code>git reset --hard</code>——回退commit、暂存区、工作区，即本地的代码也会回退，<strong>慎用！</strong></p>\n<p><code>git reset --mixed</code>——回退commit和暂存区，以上两种情况的中和版本，reset不带参数的<strong>默认方式</strong></p>\n<p><u>关于版本：</u></p>\n<p><code>HEAD</code>——当前版本</p>\n<p><code>HEAD^</code>——上一个版本</p>\n<p><code>HEAD^^</code>——上上一个版本</p>\n<p><code>HEAD^^^</code>——上上上一个版本</p>\n<p><code>HEAD~n</code>——上n个版本</p>\n<p>也可以使用<code>commitID</code></p>\n<p><u>一个栗子：</u></p>\n<p><code>git reset --soft HEAD^</code></p>\n<p>只回退commit到上一个版本</p>\n<p><strong>reset回退不会保留回退到的版本之后的所有commit</strong>，因此在push时会因为落后于远程commit而报错，若想强制覆盖，可以为push命令加上<code>--force</code>或<code>-f</code>来进行强制操作。</p>\n<h3 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h3><p>revert用一个新提交来消除一个历史提交所做的所有修改，即</p>\n<p><strong>revert不影响以前的所有commit</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert HEAD // 撤销最近一次提交</span><br><span class=\"line\">git revert HEAD^ // 撤销上上次提交</span><br><span class=\"line\">git revert commitID // 撤销指定id的提交</span><br></pre></td></tr></table></figure>\n<h2 id=\"回退暂存区的修改\"><a href=\"#回退暂存区的修改\" class=\"headerlink\" title=\"回退暂存区的修改\"></a>回退暂存区的修改</h2><p><code>git reset HEAD</code>，命令具体含义看上边的版本回退。</p>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><p><code>git branch -d BranchName</code>——删除本地分支</p>\n<p><code>git push origin --delete BranchName</code>/<code>git push origin :BranchName</code>——删除远程分支</p>\n<h2 id=\"git-pull-与-git-fetch-区别\"><a href=\"#git-pull-与-git-fetch-区别\" class=\"headerlink\" title=\"git pull 与 git fetch 区别\"></a>git pull 与 git fetch 区别</h2><p><code>git fetch</code>——拉取远程分支并更新到<code>origin/BranchName</code>分支中</p>\n<p><code>git pull</code>——拉取远程分支后与本地当前分支合并</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin master // 保存在本地'origin/master'分支中</span><br><span class=\"line\">git merge origin/master // 将fetch到的分支合并到本地的当前分支中</span><br><span class=\"line\"></span><br><span class=\"line\">git pull origin master // 以上两句命令相当于这一句命令</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并时出现冲突的解决办法\"><a href=\"#合并时出现冲突的解决办法\" class=\"headerlink\" title=\"合并时出现冲突的解决办法\"></a>合并时出现冲突的解决办法</h2><p><code>git merge</code>显示冲突时，</p>\n<p>使用<code>git status</code>查看冲突的文件，</p>\n<p>冲突部分用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; =======  &gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标示，</p>\n<p>编辑冲突的文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ……</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&lt;<span class=\"xml\"><span class=\"tag\">&lt;&lt;&lt;&lt;&lt; <span class=\"attr\">HEAD</span> // 合并当前分支的内容</span></span></span><br><span class=\"line\"><span class=\"xml\">// ……</span></span><br><span class=\"line\"><span class=\"xml\">=======</span></span><br><span class=\"line\"><span class=\"xml\">// ……</span></span><br><span class=\"line\"><span class=\"xml\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; BranchName // 合并前要合并的分支的内容</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">// ……</span></span><br></pre></td></tr></table></figure>\n<p>然后<code>git add</code>冲突文件发现成功了！秒啊！</p>\n"},{"title":"hexo创建的tags和categories页面为空的解决办法","toc":false,"date":"2018-04-15T18:26:10.000Z","_content":"\n\n\n主题：landscape\n\n添加type以及menu后仍然显示空白的解决办法：\n\n打开landscape/_partial/article.ejs，\n\n在`<div class=\"article-entry\" itemprop=\"articleBody\">`的div内添加：\n\n```ejs\n<% if (page.type === \"tags\") { %>\n  <div class=\"tag-cloud\">\n    <div class=\"tag-cloud-title\">\n    <%- \"TOTAl : \" + site.tags.length %>\n    </div>\n\n    <div class=\"tag-cloud-tags\">\n    <%- tagcloud({\n      min_font: 12,\n      max_font: 30,\n      amount: 200,\n      color: true,\n      start_color: '#555',\n      end_color: '#111'\n      }) %>\n    </div>\n  </div>\n\n  <% } else if (page.type === 'categories') { %>\n\n  <div class=\"category-all-page\">\n    <div class=\"category-all-title\">\n    <%- \"TOTAL : \" + site.categories.length %>\n    </div>\n\n    <div class=\"category-all\">\n    <%- list_categories() %>\n    </div>\n\n  </div>\n<% } %>\n```\n\n重新打开即可看到正常显示的标签和分类页。\n\n\n\n修改categories页面样式（也可以自己设计修改）：\n\n打开landscape/source/css/_partial/article.styl，在尾部添加：\n\n```css\n.category-all-page {\n  a:link {\n    font-size: 14px;\n    color: #333;\n    text-decoration: none;\n  }\n  a:hover {\n    font-size: 14px;\n    color: #d8d;\n    text-decoration: none;\n    font-weight: bold;\n  }\n  .category-all-title { text-align: left; }\n\n  .category-all { \n    margin-top: 20px; \n  }\n\n  .category-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  .category-list-item { \n    text-align: center;\n    display: inline-block;\n    margin: 8px; \n    padding: 8px;\n    width: 150px;\n    position: relative;\n    background-color: rgba(237, 237, 237, 0.53);\n    border-radius: 1px;\n    box-shadow:0px 0px  0px 1px #ccc;\n  }\n\n  .category-list-link {\n  \tcolor: #333;\n  }\n\n  .category-list-count {\n    color: #333;\n    &:before {\n      display: inline;\n      content: \" (\"\n    }\n    &:after {\n      display: inline;\n      content: \") \"\n    }\n  }\n\n  .category-list-child { padding-left: 10px; color: #333;}\n}\n\n\n```\n\n","source":"_posts/hexo创建的tags和categories页面为空的解决办法.md","raw":"---\ntitle: hexo创建的tags和categories页面为空的解决办法\ntoc: false\ndate: 2018-04-16 02:26:10\ncategories:\n- methods\ntags:\n- hexo\n---\n\n\n\n主题：landscape\n\n添加type以及menu后仍然显示空白的解决办法：\n\n打开landscape/_partial/article.ejs，\n\n在`<div class=\"article-entry\" itemprop=\"articleBody\">`的div内添加：\n\n```ejs\n<% if (page.type === \"tags\") { %>\n  <div class=\"tag-cloud\">\n    <div class=\"tag-cloud-title\">\n    <%- \"TOTAl : \" + site.tags.length %>\n    </div>\n\n    <div class=\"tag-cloud-tags\">\n    <%- tagcloud({\n      min_font: 12,\n      max_font: 30,\n      amount: 200,\n      color: true,\n      start_color: '#555',\n      end_color: '#111'\n      }) %>\n    </div>\n  </div>\n\n  <% } else if (page.type === 'categories') { %>\n\n  <div class=\"category-all-page\">\n    <div class=\"category-all-title\">\n    <%- \"TOTAL : \" + site.categories.length %>\n    </div>\n\n    <div class=\"category-all\">\n    <%- list_categories() %>\n    </div>\n\n  </div>\n<% } %>\n```\n\n重新打开即可看到正常显示的标签和分类页。\n\n\n\n修改categories页面样式（也可以自己设计修改）：\n\n打开landscape/source/css/_partial/article.styl，在尾部添加：\n\n```css\n.category-all-page {\n  a:link {\n    font-size: 14px;\n    color: #333;\n    text-decoration: none;\n  }\n  a:hover {\n    font-size: 14px;\n    color: #d8d;\n    text-decoration: none;\n    font-weight: bold;\n  }\n  .category-all-title { text-align: left; }\n\n  .category-all { \n    margin-top: 20px; \n  }\n\n  .category-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  .category-list-item { \n    text-align: center;\n    display: inline-block;\n    margin: 8px; \n    padding: 8px;\n    width: 150px;\n    position: relative;\n    background-color: rgba(237, 237, 237, 0.53);\n    border-radius: 1px;\n    box-shadow:0px 0px  0px 1px #ccc;\n  }\n\n  .category-list-link {\n  \tcolor: #333;\n  }\n\n  .category-list-count {\n    color: #333;\n    &:before {\n      display: inline;\n      content: \" (\"\n    }\n    &:after {\n      display: inline;\n      content: \") \"\n    }\n  }\n\n  .category-list-child { padding-left: 10px; color: #333;}\n}\n\n\n```\n\n","slug":"hexo创建的tags和categories页面为空的解决办法","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0g0015craggorp4l03","content":"<p>主题：landscape</p>\n<p>添加type以及menu后仍然显示空白的解决办法：</p>\n<p>打开landscape/_partial/article.ejs，</p>\n<p>在<code>&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</code>的div内添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (page.type === &quot;tags&quot;) &#123; %&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tag-cloud&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;tag-cloud-title&quot;&gt;</span><br><span class=\"line\">    &lt;%- &quot;TOTAl : &quot; + site.tags.length %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;tag-cloud-tags&quot;&gt;</span><br><span class=\"line\">    &lt;%- tagcloud(&#123;</span><br><span class=\"line\">      min_font: 12,</span><br><span class=\"line\">      max_font: 30,</span><br><span class=\"line\">      amount: 200,</span><br><span class=\"line\">      color: true,</span><br><span class=\"line\">      start_color: &apos;#555&apos;,</span><br><span class=\"line\">      end_color: &apos;#111&apos;</span><br><span class=\"line\">      &#125;) %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% &#125; else if (page.type === &apos;categories&apos;) &#123; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div class=&quot;category-all-page&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;category-all-title&quot;&gt;</span><br><span class=\"line\">    &lt;%- &quot;TOTAL : &quot; + site.categories.length %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;category-all&quot;&gt;</span><br><span class=\"line\">    &lt;%- list_categories() %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>重新打开即可看到正常显示的标签和分类页。</p>\n<p>修改categories页面样式（也可以自己设计修改）：</p>\n<p>打开landscape/source/css/_partial/article.styl，在尾部添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.category-all-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">a</span>:link &#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#d8d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.category-all-title</span> &#123; <span class=\"attribute\">text-align</span>: left; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-all</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-item</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">8px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(237, 237, 237, 0.53);</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>:<span class=\"number\">0px</span> <span class=\"number\">0px</span>  <span class=\"number\">0px</span> <span class=\"number\">1px</span> <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-link</span> &#123;</span><br><span class=\"line\">  \t<span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-count</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">inline</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">content</span>: \" (\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;<span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">      <span class=\"attribute\">content</span>: <span class=\"string\">\") \"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-child</span> &#123; <span class=\"attribute\">padding-left</span>: <span class=\"number\">10px</span>; <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>主题：landscape</p>\n<p>添加type以及menu后仍然显示空白的解决办法：</p>\n<p>打开landscape/_partial/article.ejs，</p>\n<p>在<code>&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</code>的div内添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (page.type === &quot;tags&quot;) &#123; %&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tag-cloud&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;tag-cloud-title&quot;&gt;</span><br><span class=\"line\">    &lt;%- &quot;TOTAl : &quot; + site.tags.length %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;tag-cloud-tags&quot;&gt;</span><br><span class=\"line\">    &lt;%- tagcloud(&#123;</span><br><span class=\"line\">      min_font: 12,</span><br><span class=\"line\">      max_font: 30,</span><br><span class=\"line\">      amount: 200,</span><br><span class=\"line\">      color: true,</span><br><span class=\"line\">      start_color: &apos;#555&apos;,</span><br><span class=\"line\">      end_color: &apos;#111&apos;</span><br><span class=\"line\">      &#125;) %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% &#125; else if (page.type === &apos;categories&apos;) &#123; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div class=&quot;category-all-page&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;category-all-title&quot;&gt;</span><br><span class=\"line\">    &lt;%- &quot;TOTAL : &quot; + site.categories.length %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;category-all&quot;&gt;</span><br><span class=\"line\">    &lt;%- list_categories() %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>重新打开即可看到正常显示的标签和分类页。</p>\n<p>修改categories页面样式（也可以自己设计修改）：</p>\n<p>打开landscape/source/css/_partial/article.styl，在尾部添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.category-all-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">a</span>:link &#123;</span><br><span class=\"line\">    font-size: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#d8d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.category-all-title</span> &#123; <span class=\"attribute\">text-align</span>: left; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-all</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-item</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">8px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(237, 237, 237, 0.53);</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>:<span class=\"number\">0px</span> <span class=\"number\">0px</span>  <span class=\"number\">0px</span> <span class=\"number\">1px</span> <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-link</span> &#123;</span><br><span class=\"line\">  \t<span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-count</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">inline</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">content</span>: \" (\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;<span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">      <span class=\"attribute\">content</span>: <span class=\"string\">\") \"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.category-list-child</span> &#123; <span class=\"attribute\">padding-left</span>: <span class=\"number\">10px</span>; <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"hexo博客谷歌百度收录踩坑日记","toc":false,"date":"2018-04-16T16:09:38.000Z","_content":"\n## 百度收录文件验证\n\n无论怎么把渲染关掉或者render_skip都说我的格式错误，看了一下源代码发现即使不渲染最后也会加上html的标签，于是放弃这个放弃了这个方式。\n\n## 百度收录html验证\n\n本来以为这个应该会直接就验证通过了，但是只要我修改了html，百度就无法访问我的博客，遂也放弃了这个方法..\n\n## 百度收录CNAME验证\n\n使用阿里云进行云解析但是阿里云现在不支持xxx.github.io的域名...\n\n于是踏上了新征程：\n\n## 自定义域名\n\n在阿里云买了一个最便宜的.top域名，把自定义域名和博客绑定上之后博客就无法访问了，需要细心等待，谷歌了一下一般不会超过48h就会绑定成功可以正常使用。\n\n阿里云的速度挺快，不到一个小时就好了。\n\n弄好自定义域名之后就悲催地发现评论板块无法登陆...磕磕绊绊[改好配置](http://blog.zmj97.top/2018/04/16/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法)后，终于开始重新进行百度收录了！\n\n## 谷歌收录\n\n由于白天的阴影先弄了谷歌收录，没有遇到什么大坑，一切都非常顺利，直到上sitemap时出现了两个问题：\n\n### sitmap.xml不存在\n\n安装sitemap插件时一定要加上`--save`！！：\n\n```shell\nnpm install hexo-generator-sitemap --save\n```\n\n而不是\n\n```shell\nnpm install hexo-generator-sitemap\n```\n\n### 测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址\n\n搜了一下，各家有各家的错误原因，我的是因为我在谷歌收录的网址是原网址`https://mikqueenge.github.io`，而上传的sitemap.xml的地址自动被解析为自定义域名`http://blog.zmj97.top/sitemap.xml`才出现了错误，再添加收录网站`http://blog.zmj97.top`然后在这个地址下添加sitemap即可。\n\n## 百度收录\n\n### `token`\n\n数据引入->链接提交->自动提交->主动推送（实时）->推送接口 中的接口调用地址中有token的值。\n\n### 自动抓取sitemap失败\n\n直接访问提交的数据文件地址`http://blog.zmj97.top/baidu_sitemap.txt`是可以看到的，但是因为 GitHub 屏蔽了百度的爬虫所以百度无法抓取...\n\n然后发现我的配置跟主动推送的配置（[参考链接](http://www.yuan-ji.me/Hexo-优化%EF%BC%9A提交sitemap及解决百度爬虫抓取-GitHub-Pages-问题/)）很像，但是deploy baidu_submitter一直出错，看了错误信息才发现是因为把`baidu_url_submit:`下的`path: baidu_urls.txt`擅自改了文件名导致的...\n\n终于好了...踩坑结束！","source":"_posts/hexo博客谷歌百度收录踩坑日记.md","raw":"---\ntitle: hexo博客谷歌百度收录踩坑日记\ntoc: false\ndate: 2018-04-17 00:09:38\ncategories:\n- methods\ntags:\n- hexo\n- 网站收录\n---\n\n## 百度收录文件验证\n\n无论怎么把渲染关掉或者render_skip都说我的格式错误，看了一下源代码发现即使不渲染最后也会加上html的标签，于是放弃这个放弃了这个方式。\n\n## 百度收录html验证\n\n本来以为这个应该会直接就验证通过了，但是只要我修改了html，百度就无法访问我的博客，遂也放弃了这个方法..\n\n## 百度收录CNAME验证\n\n使用阿里云进行云解析但是阿里云现在不支持xxx.github.io的域名...\n\n于是踏上了新征程：\n\n## 自定义域名\n\n在阿里云买了一个最便宜的.top域名，把自定义域名和博客绑定上之后博客就无法访问了，需要细心等待，谷歌了一下一般不会超过48h就会绑定成功可以正常使用。\n\n阿里云的速度挺快，不到一个小时就好了。\n\n弄好自定义域名之后就悲催地发现评论板块无法登陆...磕磕绊绊[改好配置](http://blog.zmj97.top/2018/04/16/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法)后，终于开始重新进行百度收录了！\n\n## 谷歌收录\n\n由于白天的阴影先弄了谷歌收录，没有遇到什么大坑，一切都非常顺利，直到上sitemap时出现了两个问题：\n\n### sitmap.xml不存在\n\n安装sitemap插件时一定要加上`--save`！！：\n\n```shell\nnpm install hexo-generator-sitemap --save\n```\n\n而不是\n\n```shell\nnpm install hexo-generator-sitemap\n```\n\n### 测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址\n\n搜了一下，各家有各家的错误原因，我的是因为我在谷歌收录的网址是原网址`https://mikqueenge.github.io`，而上传的sitemap.xml的地址自动被解析为自定义域名`http://blog.zmj97.top/sitemap.xml`才出现了错误，再添加收录网站`http://blog.zmj97.top`然后在这个地址下添加sitemap即可。\n\n## 百度收录\n\n### `token`\n\n数据引入->链接提交->自动提交->主动推送（实时）->推送接口 中的接口调用地址中有token的值。\n\n### 自动抓取sitemap失败\n\n直接访问提交的数据文件地址`http://blog.zmj97.top/baidu_sitemap.txt`是可以看到的，但是因为 GitHub 屏蔽了百度的爬虫所以百度无法抓取...\n\n然后发现我的配置跟主动推送的配置（[参考链接](http://www.yuan-ji.me/Hexo-优化%EF%BC%9A提交sitemap及解决百度爬虫抓取-GitHub-Pages-问题/)）很像，但是deploy baidu_submitter一直出错，看了错误信息才发现是因为把`baidu_url_submit:`下的`path: baidu_urls.txt`擅自改了文件名导致的...\n\n终于好了...踩坑结束！","slug":"hexo博客谷歌百度收录踩坑日记","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0i0019crag1um93z3p","content":"<h2 id=\"百度收录文件验证\"><a href=\"#百度收录文件验证\" class=\"headerlink\" title=\"百度收录文件验证\"></a>百度收录文件验证</h2><p>无论怎么把渲染关掉或者render_skip都说我的格式错误，看了一下源代码发现即使不渲染最后也会加上html的标签，于是放弃这个放弃了这个方式。</p>\n<h2 id=\"百度收录html验证\"><a href=\"#百度收录html验证\" class=\"headerlink\" title=\"百度收录html验证\"></a>百度收录html验证</h2><p>本来以为这个应该会直接就验证通过了，但是只要我修改了html，百度就无法访问我的博客，遂也放弃了这个方法..</p>\n<h2 id=\"百度收录CNAME验证\"><a href=\"#百度收录CNAME验证\" class=\"headerlink\" title=\"百度收录CNAME验证\"></a>百度收录CNAME验证</h2><p>使用阿里云进行云解析但是阿里云现在不支持xxx.github.io的域名…</p>\n<p>于是踏上了新征程：</p>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><p>在阿里云买了一个最便宜的.top域名，把自定义域名和博客绑定上之后博客就无法访问了，需要细心等待，谷歌了一下一般不会超过48h就会绑定成功可以正常使用。</p>\n<p>阿里云的速度挺快，不到一个小时就好了。</p>\n<p>弄好自定义域名之后就悲催地发现评论板块无法登陆…磕磕绊绊<a href=\"http://blog.zmj97.top/2018/04/16/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法\" target=\"_blank\" rel=\"noopener\">改好配置</a>后，终于开始重新进行百度收录了！</p>\n<h2 id=\"谷歌收录\"><a href=\"#谷歌收录\" class=\"headerlink\" title=\"谷歌收录\"></a>谷歌收录</h2><p>由于白天的阴影先弄了谷歌收录，没有遇到什么大坑，一切都非常顺利，直到上sitemap时出现了两个问题：</p>\n<h3 id=\"sitmap-xml不存在\"><a href=\"#sitmap-xml不存在\" class=\"headerlink\" title=\"sitmap.xml不存在\"></a>sitmap.xml不存在</h3><p>安装sitemap插件时一定要加上<code>--save</code>！！：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n<p>而不是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试sitmap-xml出现错误：此位置的-Sitemap-不允许此网址\"><a href=\"#测试sitmap-xml出现错误：此位置的-Sitemap-不允许此网址\" class=\"headerlink\" title=\"测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址\"></a>测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址</h3><p>搜了一下，各家有各家的错误原因，我的是因为我在谷歌收录的网址是原网址<code>https://mikqueenge.github.io</code>，而上传的sitemap.xml的地址自动被解析为自定义域名<code>http://blog.zmj97.top/sitemap.xml</code>才出现了错误，再添加收录网站<code>http://blog.zmj97.top</code>然后在这个地址下添加sitemap即可。</p>\n<h2 id=\"百度收录\"><a href=\"#百度收录\" class=\"headerlink\" title=\"百度收录\"></a>百度收录</h2><h3 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a><code>token</code></h3><p>数据引入-&gt;链接提交-&gt;自动提交-&gt;主动推送（实时）-&gt;推送接口 中的接口调用地址中有token的值。</p>\n<h3 id=\"自动抓取sitemap失败\"><a href=\"#自动抓取sitemap失败\" class=\"headerlink\" title=\"自动抓取sitemap失败\"></a>自动抓取sitemap失败</h3><p>直接访问提交的数据文件地址<code>http://blog.zmj97.top/baidu_sitemap.txt</code>是可以看到的，但是因为 GitHub 屏蔽了百度的爬虫所以百度无法抓取…</p>\n<p>然后发现我的配置跟主动推送的配置（<a href=\"http://www.yuan-ji.me/Hexo-优化%EF%BC%9A提交sitemap及解决百度爬虫抓取-GitHub-Pages-问题/\" target=\"_blank\" rel=\"noopener\">参考链接</a>）很像，但是deploy baidu_submitter一直出错，看了错误信息才发现是因为把<code>baidu_url_submit:</code>下的<code>path: baidu_urls.txt</code>擅自改了文件名导致的…</p>\n<p>终于好了…踩坑结束！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"百度收录文件验证\"><a href=\"#百度收录文件验证\" class=\"headerlink\" title=\"百度收录文件验证\"></a>百度收录文件验证</h2><p>无论怎么把渲染关掉或者render_skip都说我的格式错误，看了一下源代码发现即使不渲染最后也会加上html的标签，于是放弃这个放弃了这个方式。</p>\n<h2 id=\"百度收录html验证\"><a href=\"#百度收录html验证\" class=\"headerlink\" title=\"百度收录html验证\"></a>百度收录html验证</h2><p>本来以为这个应该会直接就验证通过了，但是只要我修改了html，百度就无法访问我的博客，遂也放弃了这个方法..</p>\n<h2 id=\"百度收录CNAME验证\"><a href=\"#百度收录CNAME验证\" class=\"headerlink\" title=\"百度收录CNAME验证\"></a>百度收录CNAME验证</h2><p>使用阿里云进行云解析但是阿里云现在不支持xxx.github.io的域名…</p>\n<p>于是踏上了新征程：</p>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><p>在阿里云买了一个最便宜的.top域名，把自定义域名和博客绑定上之后博客就无法访问了，需要细心等待，谷歌了一下一般不会超过48h就会绑定成功可以正常使用。</p>\n<p>阿里云的速度挺快，不到一个小时就好了。</p>\n<p>弄好自定义域名之后就悲催地发现评论板块无法登陆…磕磕绊绊<a href=\"http://blog.zmj97.top/2018/04/16/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法\" target=\"_blank\" rel=\"noopener\">改好配置</a>后，终于开始重新进行百度收录了！</p>\n<h2 id=\"谷歌收录\"><a href=\"#谷歌收录\" class=\"headerlink\" title=\"谷歌收录\"></a>谷歌收录</h2><p>由于白天的阴影先弄了谷歌收录，没有遇到什么大坑，一切都非常顺利，直到上sitemap时出现了两个问题：</p>\n<h3 id=\"sitmap-xml不存在\"><a href=\"#sitmap-xml不存在\" class=\"headerlink\" title=\"sitmap.xml不存在\"></a>sitmap.xml不存在</h3><p>安装sitemap插件时一定要加上<code>--save</code>！！：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n<p>而不是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试sitmap-xml出现错误：此位置的-Sitemap-不允许此网址\"><a href=\"#测试sitmap-xml出现错误：此位置的-Sitemap-不允许此网址\" class=\"headerlink\" title=\"测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址\"></a>测试sitmap.xml出现错误：此位置的 Sitemap 不允许此网址</h3><p>搜了一下，各家有各家的错误原因，我的是因为我在谷歌收录的网址是原网址<code>https://mikqueenge.github.io</code>，而上传的sitemap.xml的地址自动被解析为自定义域名<code>http://blog.zmj97.top/sitemap.xml</code>才出现了错误，再添加收录网站<code>http://blog.zmj97.top</code>然后在这个地址下添加sitemap即可。</p>\n<h2 id=\"百度收录\"><a href=\"#百度收录\" class=\"headerlink\" title=\"百度收录\"></a>百度收录</h2><h3 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a><code>token</code></h3><p>数据引入-&gt;链接提交-&gt;自动提交-&gt;主动推送（实时）-&gt;推送接口 中的接口调用地址中有token的值。</p>\n<h3 id=\"自动抓取sitemap失败\"><a href=\"#自动抓取sitemap失败\" class=\"headerlink\" title=\"自动抓取sitemap失败\"></a>自动抓取sitemap失败</h3><p>直接访问提交的数据文件地址<code>http://blog.zmj97.top/baidu_sitemap.txt</code>是可以看到的，但是因为 GitHub 屏蔽了百度的爬虫所以百度无法抓取…</p>\n<p>然后发现我的配置跟主动推送的配置（<a href=\"http://www.yuan-ji.me/Hexo-优化%EF%BC%9A提交sitemap及解决百度爬虫抓取-GitHub-Pages-问题/\" target=\"_blank\" rel=\"noopener\">参考链接</a>）很像，但是deploy baidu_submitter一直出错，看了错误信息才发现是因为把<code>baidu_url_submit:</code>下的<code>path: baidu_urls.txt</code>擅自改了文件名导致的…</p>\n<p>终于好了…踩坑结束！</p>\n"},{"title":"numpy常用函数和数据类型","date":"2018-04-01T08:27:34.000Z","_content":"\n\n\n### np.random.rand\n\nnp.random.rand(d0,d1,...,dn)表示创造一个(n+1)维的大小为d0\\*d1\\*...\\*dn的数组，其中每一个数都是随机产生的[0, 1)内的数。\n\n```python\n>>> np.random.rand(3,2)\narray([[0.91184685, 0.81463722],\n       [0.9261665 , 0.960428  ],\n       [0.52837831, 0.61184641]])\n```\n\n### np.float32\n\n数据类型，32位浮点数。\n\n### np.dot\n\n矩阵乘法。np.dot(x, y)表示矩阵x和y相乘。\n\n```python\n>>> a = [1, 2]\n>>> b = [[3], [4]]\n>>> np.dot(a,b)\narray([11])\n```\n\n\n\n","source":"_posts/numpy常用函数和数据类型.md","raw":"---\ntitle: numpy常用函数和数据类型\ndate: 2018-04-01 16:27:34\ncategories: \n- Python\ntags:\n- numpy\n---\n\n\n\n### np.random.rand\n\nnp.random.rand(d0,d1,...,dn)表示创造一个(n+1)维的大小为d0\\*d1\\*...\\*dn的数组，其中每一个数都是随机产生的[0, 1)内的数。\n\n```python\n>>> np.random.rand(3,2)\narray([[0.91184685, 0.81463722],\n       [0.9261665 , 0.960428  ],\n       [0.52837831, 0.61184641]])\n```\n\n### np.float32\n\n数据类型，32位浮点数。\n\n### np.dot\n\n矩阵乘法。np.dot(x, y)表示矩阵x和y相乘。\n\n```python\n>>> a = [1, 2]\n>>> b = [[3], [4]]\n>>> np.dot(a,b)\narray([11])\n```\n\n\n\n","slug":"numpy常用函数和数据类型","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0k001dcragqtoa8k3k","content":"<h3 id=\"np-random-rand\"><a href=\"#np-random-rand\" class=\"headerlink\" title=\"np.random.rand\"></a>np.random.rand</h3><p>np.random.rand(d0,d1,…,dn)表示创造一个(n+1)维的大小为d0*d1*…*dn的数组，其中每一个数都是随机产生的[0, 1)内的数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.rand(<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">array([[<span class=\"number\">0.91184685</span>, <span class=\"number\">0.81463722</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.9261665</span> , <span class=\"number\">0.960428</span>  ],</span><br><span class=\"line\">       [<span class=\"number\">0.52837831</span>, <span class=\"number\">0.61184641</span>]])</span><br></pre></td></tr></table></figure>\n<h3 id=\"np-float32\"><a href=\"#np-float32\" class=\"headerlink\" title=\"np.float32\"></a>np.float32</h3><p>数据类型，32位浮点数。</p>\n<h3 id=\"np-dot\"><a href=\"#np-dot\" class=\"headerlink\" title=\"np.dot\"></a>np.dot</h3><p>矩阵乘法。np.dot(x, y)表示矩阵x和y相乘。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [[<span class=\"number\">3</span>], [<span class=\"number\">4</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.dot(a,b)</span><br><span class=\"line\">array([<span class=\"number\">11</span>])</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"np-random-rand\"><a href=\"#np-random-rand\" class=\"headerlink\" title=\"np.random.rand\"></a>np.random.rand</h3><p>np.random.rand(d0,d1,…,dn)表示创造一个(n+1)维的大小为d0*d1*…*dn的数组，其中每一个数都是随机产生的[0, 1)内的数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.rand(<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">array([[<span class=\"number\">0.91184685</span>, <span class=\"number\">0.81463722</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.9261665</span> , <span class=\"number\">0.960428</span>  ],</span><br><span class=\"line\">       [<span class=\"number\">0.52837831</span>, <span class=\"number\">0.61184641</span>]])</span><br></pre></td></tr></table></figure>\n<h3 id=\"np-float32\"><a href=\"#np-float32\" class=\"headerlink\" title=\"np.float32\"></a>np.float32</h3><p>数据类型，32位浮点数。</p>\n<h3 id=\"np-dot\"><a href=\"#np-dot\" class=\"headerlink\" title=\"np.dot\"></a>np.dot</h3><p>矩阵乘法。np.dot(x, y)表示矩阵x和y相乘。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [[<span class=\"number\">3</span>], [<span class=\"number\">4</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.dot(a,b)</span><br><span class=\"line\">array([<span class=\"number\">11</span>])</span><br></pre></td></tr></table></figure>\n"},{"title":"ubuntu 18.04下安装稳定版Chrome谷歌浏览器","toc":false,"date":"2018-09-02T00:30:57.000Z","_content":"\n\n\n由于官方下载页面打不开，因此找了一个网盘下载的，[网盘下载点击这里](https://pan.baidu.com/s/1vC974ES6Y4UPdyRNTAJpZg)。\n\n\n\n安装相关依赖：\n\n```powershell\nsudo apt-get install libcurl3\nsudo apt-get install libappindicator1\nsudo apt-get install libpango1.0-0\nsudo apt-get install libgooglepinyin0\n```\n\n\n\n进入下载目录，运行下列命令即可：\n\n```powershell\nsudo mv google-chrome-stable_current_amd64.deb /usr/local\ncd /usr/local\nsudo dpkg -i google-chrome-stable_current_amd64.deb\n```\n\n\n\n进行更新：\n\n```powershell\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n\n\n\n\n显示如下提示即安装成功：\n\n```powershell\nzmj@zmj:/usr/local$ sudo dpkg -i google-chrome-stable_current_amd64.deb\nSelecting previously unselected package google-chrome-stable.\n(Reading database ... 217976 files and directories currently installed.)\nPreparing to unpack google-chrome-stable_current_amd64.deb ...\nUnpacking google-chrome-stable (51.0.2704.106-1) ...\nSetting up google-chrome-stable (51.0.2704.106-1) ...\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/x-www-browser (x-www-browser) in auto mode\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/gnome-www-browser (gnome-www-browser) in auto mode\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/google-chrome (google-chrome) in auto mode\nProcessing triggers for gnome-menus (3.13.3-11ubuntu1.1) ...\nProcessing triggers for desktop-file-utils (0.23-1ubuntu3.18.04.1) ...\nProcessing triggers for mime-support (3.60ubuntu1) ...\nProcessing triggers for man-db (2.8.3-2ubuntu0.1) ...\n\n```\n\n","source":"_posts/ubuntu-18-04下安装稳定版Chrome谷歌浏览器.md","raw":"---\ntitle: ubuntu 18.04下安装稳定版Chrome谷歌浏览器\ntoc: false\ndate: 2018-09-02 08:30:57\ncategories:\n- methods\ntags:\n- ubuntu\n- Chrome\n---\n\n\n\n由于官方下载页面打不开，因此找了一个网盘下载的，[网盘下载点击这里](https://pan.baidu.com/s/1vC974ES6Y4UPdyRNTAJpZg)。\n\n\n\n安装相关依赖：\n\n```powershell\nsudo apt-get install libcurl3\nsudo apt-get install libappindicator1\nsudo apt-get install libpango1.0-0\nsudo apt-get install libgooglepinyin0\n```\n\n\n\n进入下载目录，运行下列命令即可：\n\n```powershell\nsudo mv google-chrome-stable_current_amd64.deb /usr/local\ncd /usr/local\nsudo dpkg -i google-chrome-stable_current_amd64.deb\n```\n\n\n\n进行更新：\n\n```powershell\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n\n\n\n\n显示如下提示即安装成功：\n\n```powershell\nzmj@zmj:/usr/local$ sudo dpkg -i google-chrome-stable_current_amd64.deb\nSelecting previously unselected package google-chrome-stable.\n(Reading database ... 217976 files and directories currently installed.)\nPreparing to unpack google-chrome-stable_current_amd64.deb ...\nUnpacking google-chrome-stable (51.0.2704.106-1) ...\nSetting up google-chrome-stable (51.0.2704.106-1) ...\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/x-www-browser (x-www-browser) in auto mode\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/gnome-www-browser (gnome-www-browser) in auto mode\nupdate-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/google-chrome (google-chrome) in auto mode\nProcessing triggers for gnome-menus (3.13.3-11ubuntu1.1) ...\nProcessing triggers for desktop-file-utils (0.23-1ubuntu3.18.04.1) ...\nProcessing triggers for mime-support (3.60ubuntu1) ...\nProcessing triggers for man-db (2.8.3-2ubuntu0.1) ...\n\n```\n\n","slug":"ubuntu-18-04下安装稳定版Chrome谷歌浏览器","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0l001gcragvq6b8aml","content":"<p>由于官方下载页面打不开，因此找了一个网盘下载的，<a href=\"https://pan.baidu.com/s/1vC974ES6Y4UPdyRNTAJpZg\" target=\"_blank\" rel=\"noopener\">网盘下载点击这里</a>。</p>\n<p>安装相关依赖：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libcurl3</span><br><span class=\"line\">sudo apt-get install libappindicator1</span><br><span class=\"line\">sudo apt-get install libpango1.<span class=\"number\">0</span>-<span class=\"number\">0</span></span><br><span class=\"line\">sudo apt-get install libgooglepinyin0</span><br></pre></td></tr></table></figure>\n<p>进入下载目录，运行下列命令即可：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv google-chrome-stable_current_amd64.deb /usr/local</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>进行更新：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n<p>显示如下提示即安装成功：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zmj@zmj:/usr/local$ sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br><span class=\"line\">Selecting previously unselected package google-chrome-stable.</span><br><span class=\"line\">(Reading database ... <span class=\"number\">217976</span> files and directories currently installed.)</span><br><span class=\"line\">Preparing to unpack google-chrome-stable_current_amd64.deb ...</span><br><span class=\"line\">Unpacking google-chrome-stable (<span class=\"number\">51.0</span>.<span class=\"number\">2704.106</span>-<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Setting up google-chrome-stable (<span class=\"number\">51.0</span>.<span class=\"number\">2704.106</span>-<span class=\"number\">1</span>) ...</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/x-www-browser (x-www-browser) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/gnome-www-browser (gnome-www-browser) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/google-chrome (google-chrome) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> gnome-menus (<span class=\"number\">3.13</span>.<span class=\"number\">3</span>-<span class=\"number\">11</span>ubuntu1.<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> desktop-file-utils (<span class=\"number\">0.23</span>-<span class=\"number\">1</span>ubuntu3.<span class=\"number\">18.04</span>.<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> mime-support (<span class=\"number\">3.60</span>ubuntu1) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> man-db (<span class=\"number\">2.8</span>.<span class=\"number\">3</span>-<span class=\"number\">2</span>ubuntu0.<span class=\"number\">1</span>) ...</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>由于官方下载页面打不开，因此找了一个网盘下载的，<a href=\"https://pan.baidu.com/s/1vC974ES6Y4UPdyRNTAJpZg\" target=\"_blank\" rel=\"noopener\">网盘下载点击这里</a>。</p>\n<p>安装相关依赖：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libcurl3</span><br><span class=\"line\">sudo apt-get install libappindicator1</span><br><span class=\"line\">sudo apt-get install libpango1.<span class=\"number\">0</span>-<span class=\"number\">0</span></span><br><span class=\"line\">sudo apt-get install libgooglepinyin0</span><br></pre></td></tr></table></figure>\n<p>进入下载目录，运行下列命令即可：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv google-chrome-stable_current_amd64.deb /usr/local</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>进行更新：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n<p>显示如下提示即安装成功：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zmj@zmj:/usr/local$ sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br><span class=\"line\">Selecting previously unselected package google-chrome-stable.</span><br><span class=\"line\">(Reading database ... <span class=\"number\">217976</span> files and directories currently installed.)</span><br><span class=\"line\">Preparing to unpack google-chrome-stable_current_amd64.deb ...</span><br><span class=\"line\">Unpacking google-chrome-stable (<span class=\"number\">51.0</span>.<span class=\"number\">2704.106</span>-<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Setting up google-chrome-stable (<span class=\"number\">51.0</span>.<span class=\"number\">2704.106</span>-<span class=\"number\">1</span>) ...</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/x-www-browser (x-www-browser) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/gnome-www-browser (gnome-www-browser) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">update-alternatives: using /usr/bin/google-chrome-stable to provide /usr/bin/google-chrome (google-chrome) <span class=\"keyword\">in</span> auto mode</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> gnome-menus (<span class=\"number\">3.13</span>.<span class=\"number\">3</span>-<span class=\"number\">11</span>ubuntu1.<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> desktop-file-utils (<span class=\"number\">0.23</span>-<span class=\"number\">1</span>ubuntu3.<span class=\"number\">18.04</span>.<span class=\"number\">1</span>) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> mime-support (<span class=\"number\">3.60</span>ubuntu1) ...</span><br><span class=\"line\">Processing triggers <span class=\"keyword\">for</span> man-db (<span class=\"number\">2.8</span>.<span class=\"number\">3</span>-<span class=\"number\">2</span>ubuntu0.<span class=\"number\">1</span>) ...</span><br></pre></td></tr></table></figure>\n"},{"title":"Vuex入门","toc":true,"date":"2018-09-23T14:30:52.000Z","_content":"\n## 安装\n\n比较常用的两种：\n\n### 直接下载或CDN引用\n\n从<https://unpkg.com/vuex>下载后利用script标签在vue后引入：\n\n```html\n<script src=\"/path/to/vue.js\"></script>\n<script src=\"/path/to/vuex.js\"></script>\n```\n\n或\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script src=\"https://unpkg.com/vuex@3.0.1/dist/vuex.js\"></script>\n```\n\n### 使用npm\n\n在项目目录下运行：\n\n```powershell\nnpm install vuex --save\n```\n\n在模块化的打包系统中利用这种方法时，必须显式地利用`Vue.use()`来安装Vuex（而script标签引入后是自动安装的）：\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n```\n\n## 介绍\n\n功能：把组件的共享状态抽取出来，用一个全局单例模式管理。\n\n核心：store（仓库），它包含了应用中的大部分state（状态，驱动应用的数据源）。\n\n这种全局单例模式管理和单纯的全局变量的区别：\n\n- **Vuex 的状态存储是响应式的**。若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n- **不能直接改变store中的state**。改变 store 中的state的唯一途径就是显式地**commit (提交) mutation（变化）**。这样我们可以方便地跟踪每一个状态的变化。\n\n一个栗子：\n\n```js\n// 如果在模块化构建系统中，请确保在开头调用了 Vue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    }\n  }\n})\n\n// 触发状态变更\nstore.commit('increment')\n\nconsole.log(store.state.count) // -> 1\n```\n\n**再次强调，使用提交 mutation ，而不是直接改变 `store.state.count`，**\n\n**是因为我们想要更明确地追踪到状态的变化。**\n\n当然，使用 Vuex 并**不意味着**需要将**所有的**状态放入 Vuex。\n\n虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。\n\n如果有些状态严格属于单个组件，最好还是作为组件的局部状态。\n\n你应该根据你的应用开发需要进行权衡和确定。\n\n## 核心概念\n\n### State\n\n每个应用只包含一个 store 实例，它包含了所有需要vuex管理的状态。\n\n#### 利用计算属性读取state\n\n从 store 实例中读取状态最简单的方法就是在[计算属性](https://cn.vuejs.org/guide/computed.html)中返回某个状态：\n\n```js\n// 创建一个 Counter 组件\nconst Counter = {\n  template: `<div>{{ count }}</div>`,\n  computed: {\n    count () {\n      return store.state.count\n    }\n  }\n}\n```\n\n但这种模式导致组件依赖全局状态单例。\n\n#### 注册 `store` 选项\n\n为了解决上述模式导致的组件依赖全局状态单例的问题，\n\n我们可以通过在**根实例**中注册 `store` 选项——\n\n这样 store 实例会注入到根组件下的所有子组件中，\n\n且子组件能通过 `this.$store` 访问到：（需调用 `Vue.use(Vuex)`）\n\n```js\n// 根组件\nconst app = new Vue({\n  el: '#app',\n  // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件\n  store,\n  components: { Counter },\n  template: `\n    <div class=\"app\">\n      <counter></counter>\n    </div>\n  `\n})\n```\n\n```js\n// 子组件\nconst Counter = {\n  template: `<div>{{ count }}</div>`,\n  computed: {\n    count () {\n      // 通过 this.$store 访问store\n      return this.$store.state.count\n    }\n  }\n}\n```\n\n#### `mapState`辅助函数\n\n当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。\n\n为了解决这个问题，我们可以使用 `mapState` 辅助函数帮助我们生成计算属性，让你少按几次键：\n\n```js\n// 在单独构建的版本中辅助函数为 Vuex.mapState\nimport { mapState } from 'vuex'\n\nexport default {\n  // ...\n  computed: mapState({\n    // 箭头函数可使代码更简练\n    // 将 `this.count` 映射为 `this.$store.state.count\n    count: state => state.count,\n\n    // 传字符串参数 'count' 等同于 `state => state.count`\n    countAlias: 'count',\n\n    // 为了能够使用 `this` 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) {\n      return state.count + this.localCount\n    }\n  })\n}\n```\n\n当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 `mapState` 传一个字符串数组。\n\n```js\ncomputed: mapState([\n  // 映射 this.count 为 store.state.count\n  'count'\n])\n```\n\n#### 对象展开操作符\n\nES6引入的新语法，由名字就可以看出来这个操作符的含义：把对象展开，\n\n来个栗子更容易理解：\n\n```js\nvar a = {'a':1, 'b':2, 'c':3};\n{...a,'d':4} // {a: 1, b: 2, c: 3, d: 4}\n\nvar b = [1,2,3];\n[...b,4] // [1, 2, 3, 4]\n```\n\n有了这个操作符，我们就可以把`mapState`函数和局部计算属性混合使用了：\n\n```js\ncomputed: {\n  // 局部计算属性\n  localComputed () { /* ... */ },\n  // 使用对象展开运算符将此对象展开混入到外部对象中\n  ...mapState({\n    // ...\n  })\n}\n```\n\n### Getter\n\nVuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。\n\n就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。\n\nGetter 会暴露为 `store.getters` 对象，你可以以属性的形式访问这些值；getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。\n\nGetter 接受 state 作为其第一个参数：\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    todos: [\n      { id: 1, text: '...', done: true },\n      { id: 2, text: '...', done: false }\n    ]\n  },\n  getters: {\n    doneTodos: state => {\n      return state.todos.filter(todo => todo.done)\n    }\n  }\n})\n\nstore.getters.doneTodos // -> [{ id: 1, text: '...', done: true }]\n```\n\nGetter 也可以接受其他 getter 作为第二个参数：\n\n```js\ngetters: {\n  // ...\n  doneTodosCount: (state, getters) => {\n    return getters.doneTodos.length\n  }\n}\n\nstore.getters.doneTodosCount // -> 1\n```\n\n你也可以通过让 getter 返回一个函数，来实现给 getter 传参。在你对 store 里的数组**进行查询**时非常有用。\n\n```js\ngetters: {\n  // ...\n  // getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。\n  getTodoById: (state) => (id) => {\n    return state.todos.find(todo => todo.id === id)\n  }\n}\n\nstore.getters.getTodoById(2) // -> { id: 2, text: '...', done: false }\n```\n\n我们可以很容易地在任何组件中使用getter：\n\n```js\ncomputed: {\n  doneTodosCount () {\n    return this.$store.getters.doneTodosCount\n  }\n}\n```\n\n我们也可以使用`mapGetters` 辅助函数将 store 中的 getter 映射到局部计算属性：\n\n```js\nimport { mapGetters } from 'vuex'\n\nexport default {\n  // ...\n  computed: {\n  // 使用对象展开运算符将 getter 混入 computed 对象中\n    ...mapGetters([\n      'doneTodosCount',\n      'anotherGetter',\n      // 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`\n      doneCount: 'doneTodosCount',\n      // ...\n    ])\n  }\n}\n```\n\n### Mutation\n\n**更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。**\n\nVuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 **事件类型 (type)** 和 一个 **回调函数 (handler)**。\n\n这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    // 这里的事件类型为 'increment' \n    increment (state) {\n      // 变更状态\n      state.count++\n    }\n  }\n})\n```\n\n但我们不能直接调用一个 mutation 回调函数，就像前面说的，我们只能提交 mutation。\n\n就像是事件注册：“当触发一个类型为 `increment` 的 mutation 时，调用此函数。”\n\n要唤醒一个 mutation handler，你需要以相应的 type 调用 **store.commit** 方法（即提交mutation）：\n\n```js\nstore.commit('increment')\n```\n\n#### 提交载荷Payload\n\n我们还可以向 `store.commit` 传入额外的参数，即 mutation 的 **载荷（payload）**：\n\n```js\n// ...\nmutations: {\n  increment (state, n) {\n    state.count += n\n  }\n}\nstore.commit('increment', 10)\n```\n\n在大多数情况下，载荷应该是一个对象，这样可以包含多个字段，并且记录的 mutation 会更易读：\n\n```js\n// ...\nmutations: {\n  increment (state, payload) {\n    state.count += payload.amount\n  }\n}\n// ...\n\nstore.commit('increment', {\n  amount: 10\n})\n```\n\n我们可以使用对象风格的提交方式，将一个直接包含 `type` 属性的对象作为载荷传给 mutations ：\n\n```js\nstore.commit({\n  type: 'increment',\n  amount: 10\n})\n```\n\n并且handler 无需改变：\n\n```js\nmutations: {\n  increment (state, payload) {\n    state.count += payload.amount\n  }\n}\n```\n\n#### Mutation 需遵守 Vue 的响应规则\n\n因为 Vuex 的 store 中的状态是响应式的，那么当我们使用Mutation变更状态时，监视状态的 Vue 组件也会自动更新。\n\n因此使用 Vuex 中的 mutation 也需要像使用Vue 一样遵守一些注意事项：\n\n1. 提前在 store 中初始化好所有所需属性。\n\n2. 当需要在对象上添加新属性时，你应该\n\n   - 使用 `Vue.set(obj, 'newProp', 123)`, 或者\n\n   - 以新对象替换老对象。例如利用ES6的对象展开运算符：\n\n     ```js\n     state.obj = { ...state.obj, newProp: 123 }\n     ```\n\n#### Mutation 必须是同步函数\n\n **mutation 必须是同步函数**。为什么？请参考下面的例子：\n\n```js\nmutations: {\n  someMutation (state) {\n    api.callAsyncMethod(() => {\n      state.count++\n    })\n  }\n}\n```\n\n假设我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志：\n\n每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。\n\n然而，在上面的例子中 mutation 中的**异步函数**中的回调让这不可能完成：\n\n当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——\n\n实质上任何在回调函数中进行的状态的改变都是不可追踪的。\n\n#### 在组件中提交 Mutation\n\n我们可以在组件中使用 `this.$store.commit('xxx')` 提交 mutation，\n\n或者使用 `mapMutations` 辅助函数将组件中的 methods 映射为 `store.commit` 调用（需要在根节点注入 `store`）：\n\n```js\nimport { mapMutations } from 'vuex'\n\nexport default {\n  // ...\n  methods: {\n    ...mapMutations([\n      'increment', // 将 `this.increment()` 映射为 `this.$store.commit('increment')`\n\n      // `mapMutations` 也支持载荷：\n      'incrementBy' // 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`\n    ]),\n    ...mapMutations({\n      add: 'increment' // 将 `this.add()` 映射为 `this.$store.commit('increment')`\n    })\n  }\n}\n```\n\n#### 使用常量替代 Mutation 事件类型\n\n使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：\n\n```js\n// mutation-types.js\nexport const SOME_MUTATION = 'SOME_MUTATION'\n// store.js\nimport Vuex from 'vuex'\nimport { SOME_MUTATION } from './mutation-types'\n\nconst store = new Vuex.Store({\n  state: { ... },\n  mutations: {\n    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名\n    [SOME_MUTATION] (state) {\n      // mutate state\n    }\n  }\n})\n```\n\n用不用常量取决于实际情况——在需要多人协作的大型项目中，这会很有帮助。你果然如果不想用，也完全可以不用。\n\n### Action\n\nAction 类似于 mutation，不同在于：\n\n- Action 是提交 mutation，而不是直接变更状态。\n- Action 可以包含任意异步操作。\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      // 变更状态\n      state.count++\n    }\n  },\n  actions: {\n    // 接受一个与 store 实例具有相同方法和属性的 context 对象\n    increment (context) {\n      // 提交mutation\n      context.commit('increment')\n    }\n  }\n})\n```\n\n实践中，我们可以使用 ES2015 的 **参数解构** 来简化代码（特别是我们需要调用 `commit` 很多次的时候）：\n\n```js\nactions: {\n  increment ({ commit }) {\n    commit('increment')\n  }\n}\n```\n\n#### 进行异步操作\n\n因为action是提交mutation而不是直接变更状态，因此我们就可以在action内部执行异步操作了：\n\n```js\nactions: {\n  incrementAsync ({ commit }) {\n    setTimeout(() => {\n      commit('increment')\n    }, 1000)\n  }\n}\n```\n\n#### 分发Action\n\nAction 通过 `store.dispatch` 方法触发：\n\n```js\nstore.dispatch('increment')\n```\n\nActions 支持Mutation同样的载荷方式和对象方式进行分发：\n\n```js\n// 以载荷形式分发\nstore.dispatch('incrementAsync', {\n  amount: 10\n})\n\n// 以对象形式分发\nstore.dispatch({\n  type: 'incrementAsync',\n  amount: 10\n})\n```\n\n也可以在组件中使用 `this.$store.dispatch('xxx')` 分发 action，或者使用 `mapActions` 辅助函数将组件的 methods 映射为 `store.dispatch` 调用（需要先在根节点注入 `store`）：\n\n```js\nimport { mapActions } from 'vuex'\n\nexport default {\n  // ...\n  methods: {\n    ...mapActions([\n      'increment', // 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`\n\n      // `mapActions` 也支持载荷：\n      'incrementBy' // 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`\n    ]),\n    ...mapActions({\n      add: 'increment' // 将 `this.add()` 映射为 `this.$store.dispatch('increment')`\n    })\n  }\n}\n```\n\n#### 组合 Action\n\nAction 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？\n\n##### 使用promise\n\n`store.dispatch` 可以处理被触发的 action 的处理函数返回的 Promise，\n\n然后返回这个 Promise：\n\n```js\nactions: {\n  actionA ({ commit }) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        commit('someMutation')\n        resolve()\n      }, 1000)\n    })\n  }\n}\n```\n\n现在我们就可以：\n\n```js\nstore.dispatch('actionA').then(() => {\n  // ...\n})\n```\n\n在另外一个 action 中也可以：\n\n```js\nactions: {\n  // ...\n  actionB ({ dispatch, commit }) {\n    return dispatch('actionA').then(() => {\n      commit('someOtherMutation')\n    })\n  }\n}\n```\n\n##### 使用async / await\n\n如果我们可以利用 **async / await**，我们还可以如下组合 action：\n\n```js\n// 假设 gotData() 和 gotOtherData() 返回的是 Promise\n\nactions: {\n  async actionA ({ commit }) {\n    commit('gotData', await getData())\n  },\n  async actionB ({ dispatch, commit }) {\n    await dispatch('actionA') // 等待 actionA 完成\n    commit('gotOtherData', await getOtherData())\n  }\n}\n```\n\n> 一个 `store.dispatch` 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。\n\n### Module\n\n由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。\n\n为了解决以上问题，Vuex 允许我们将 store 分割成**模块（module）**。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：\n\n```js\nconst moduleA = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n```\n\n#### 模块的局部状态\n\n对于模块内部的 mutation 和 getter，接收的第一个参数是**模块的局部状态对象**。\n\n```js\nconst moduleA = {\n  state: { count: 0 },\n  mutations: {\n    increment (state) {\n      // 这里的 `state` 对象是模块的局部状态\n      state.count++\n    }\n  },\n\n  getters: {\n    doubleCount (state) {\n      return state.count * 2\n    }\n  }\n}\n```\n\n同样，对于模块内部的 action，局部状态通过 `context.state` 暴露出来，根节点状态则为 `context.rootState`：\n\n```js\nconst moduleA = {\n  // ...\n  actions: {\n    incrementIfOddOnRootSum ({ state, commit, rootState }) {\n      if ((state.count + rootState.count) % 2 === 1) {\n        commit('increment')\n      }\n    }\n  }\n}\n```\n\n对于模块内部的 getter，根节点状态也会作为第三个参数暴露出来：\n\n```js\nconst moduleA = {\n  // ...\n  getters: {\n    sumWithRootCount (state, getters, rootState) {\n      return state.count + rootState.count\n    }\n  }\n}\n```\n\n## 项目结构\n\nVuex 并不限制我们的代码结构。但是，它规定了一些需要遵守的规则：\n\n1. 应用层级的状态应该集中到单个 store 对象中。\n2. 提交 **mutation** 是更改状态的唯一方法，并且这个过程是同步的。\n3. 异步逻辑都应该封装到 **action** 里面。\n\n如果 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。\n\n对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：\n\n```bash\n├── index.html\n├── main.js\n├── api\n│   └── ... # 抽取出API请求\n├── components\n│   ├── App.vue\n│   └── ...\n└── store\n    ├── index.js          # 我们组装模块并导出 store 的地方\n    ├── actions.js        # 根级别的 action\n    ├── mutations.js      # 根级别的 mutation\n    └── modules\n        ├── cart.js       # 购物车模块\n        └── products.js   # 产品模块\n```\n\n\n\n\n\n---\n\n有时候看不进去[文档](https://vuex.vuejs.org/zh/)，一边总结一边看就能看进去了 :)","source":"_posts/Vuex入门.md","raw":"---\ntitle: Vuex入门\ntoc: true\ndate: 2018-09-23 22:30:52\ncategories:\n- Web\ntags:\n- Vue\n- Vuex\n---\n\n## 安装\n\n比较常用的两种：\n\n### 直接下载或CDN引用\n\n从<https://unpkg.com/vuex>下载后利用script标签在vue后引入：\n\n```html\n<script src=\"/path/to/vue.js\"></script>\n<script src=\"/path/to/vuex.js\"></script>\n```\n\n或\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script src=\"https://unpkg.com/vuex@3.0.1/dist/vuex.js\"></script>\n```\n\n### 使用npm\n\n在项目目录下运行：\n\n```powershell\nnpm install vuex --save\n```\n\n在模块化的打包系统中利用这种方法时，必须显式地利用`Vue.use()`来安装Vuex（而script标签引入后是自动安装的）：\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n```\n\n## 介绍\n\n功能：把组件的共享状态抽取出来，用一个全局单例模式管理。\n\n核心：store（仓库），它包含了应用中的大部分state（状态，驱动应用的数据源）。\n\n这种全局单例模式管理和单纯的全局变量的区别：\n\n- **Vuex 的状态存储是响应式的**。若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n- **不能直接改变store中的state**。改变 store 中的state的唯一途径就是显式地**commit (提交) mutation（变化）**。这样我们可以方便地跟踪每一个状态的变化。\n\n一个栗子：\n\n```js\n// 如果在模块化构建系统中，请确保在开头调用了 Vue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    }\n  }\n})\n\n// 触发状态变更\nstore.commit('increment')\n\nconsole.log(store.state.count) // -> 1\n```\n\n**再次强调，使用提交 mutation ，而不是直接改变 `store.state.count`，**\n\n**是因为我们想要更明确地追踪到状态的变化。**\n\n当然，使用 Vuex 并**不意味着**需要将**所有的**状态放入 Vuex。\n\n虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。\n\n如果有些状态严格属于单个组件，最好还是作为组件的局部状态。\n\n你应该根据你的应用开发需要进行权衡和确定。\n\n## 核心概念\n\n### State\n\n每个应用只包含一个 store 实例，它包含了所有需要vuex管理的状态。\n\n#### 利用计算属性读取state\n\n从 store 实例中读取状态最简单的方法就是在[计算属性](https://cn.vuejs.org/guide/computed.html)中返回某个状态：\n\n```js\n// 创建一个 Counter 组件\nconst Counter = {\n  template: `<div>{{ count }}</div>`,\n  computed: {\n    count () {\n      return store.state.count\n    }\n  }\n}\n```\n\n但这种模式导致组件依赖全局状态单例。\n\n#### 注册 `store` 选项\n\n为了解决上述模式导致的组件依赖全局状态单例的问题，\n\n我们可以通过在**根实例**中注册 `store` 选项——\n\n这样 store 实例会注入到根组件下的所有子组件中，\n\n且子组件能通过 `this.$store` 访问到：（需调用 `Vue.use(Vuex)`）\n\n```js\n// 根组件\nconst app = new Vue({\n  el: '#app',\n  // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件\n  store,\n  components: { Counter },\n  template: `\n    <div class=\"app\">\n      <counter></counter>\n    </div>\n  `\n})\n```\n\n```js\n// 子组件\nconst Counter = {\n  template: `<div>{{ count }}</div>`,\n  computed: {\n    count () {\n      // 通过 this.$store 访问store\n      return this.$store.state.count\n    }\n  }\n}\n```\n\n#### `mapState`辅助函数\n\n当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。\n\n为了解决这个问题，我们可以使用 `mapState` 辅助函数帮助我们生成计算属性，让你少按几次键：\n\n```js\n// 在单独构建的版本中辅助函数为 Vuex.mapState\nimport { mapState } from 'vuex'\n\nexport default {\n  // ...\n  computed: mapState({\n    // 箭头函数可使代码更简练\n    // 将 `this.count` 映射为 `this.$store.state.count\n    count: state => state.count,\n\n    // 传字符串参数 'count' 等同于 `state => state.count`\n    countAlias: 'count',\n\n    // 为了能够使用 `this` 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) {\n      return state.count + this.localCount\n    }\n  })\n}\n```\n\n当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 `mapState` 传一个字符串数组。\n\n```js\ncomputed: mapState([\n  // 映射 this.count 为 store.state.count\n  'count'\n])\n```\n\n#### 对象展开操作符\n\nES6引入的新语法，由名字就可以看出来这个操作符的含义：把对象展开，\n\n来个栗子更容易理解：\n\n```js\nvar a = {'a':1, 'b':2, 'c':3};\n{...a,'d':4} // {a: 1, b: 2, c: 3, d: 4}\n\nvar b = [1,2,3];\n[...b,4] // [1, 2, 3, 4]\n```\n\n有了这个操作符，我们就可以把`mapState`函数和局部计算属性混合使用了：\n\n```js\ncomputed: {\n  // 局部计算属性\n  localComputed () { /* ... */ },\n  // 使用对象展开运算符将此对象展开混入到外部对象中\n  ...mapState({\n    // ...\n  })\n}\n```\n\n### Getter\n\nVuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。\n\n就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。\n\nGetter 会暴露为 `store.getters` 对象，你可以以属性的形式访问这些值；getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。\n\nGetter 接受 state 作为其第一个参数：\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    todos: [\n      { id: 1, text: '...', done: true },\n      { id: 2, text: '...', done: false }\n    ]\n  },\n  getters: {\n    doneTodos: state => {\n      return state.todos.filter(todo => todo.done)\n    }\n  }\n})\n\nstore.getters.doneTodos // -> [{ id: 1, text: '...', done: true }]\n```\n\nGetter 也可以接受其他 getter 作为第二个参数：\n\n```js\ngetters: {\n  // ...\n  doneTodosCount: (state, getters) => {\n    return getters.doneTodos.length\n  }\n}\n\nstore.getters.doneTodosCount // -> 1\n```\n\n你也可以通过让 getter 返回一个函数，来实现给 getter 传参。在你对 store 里的数组**进行查询**时非常有用。\n\n```js\ngetters: {\n  // ...\n  // getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。\n  getTodoById: (state) => (id) => {\n    return state.todos.find(todo => todo.id === id)\n  }\n}\n\nstore.getters.getTodoById(2) // -> { id: 2, text: '...', done: false }\n```\n\n我们可以很容易地在任何组件中使用getter：\n\n```js\ncomputed: {\n  doneTodosCount () {\n    return this.$store.getters.doneTodosCount\n  }\n}\n```\n\n我们也可以使用`mapGetters` 辅助函数将 store 中的 getter 映射到局部计算属性：\n\n```js\nimport { mapGetters } from 'vuex'\n\nexport default {\n  // ...\n  computed: {\n  // 使用对象展开运算符将 getter 混入 computed 对象中\n    ...mapGetters([\n      'doneTodosCount',\n      'anotherGetter',\n      // 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`\n      doneCount: 'doneTodosCount',\n      // ...\n    ])\n  }\n}\n```\n\n### Mutation\n\n**更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。**\n\nVuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 **事件类型 (type)** 和 一个 **回调函数 (handler)**。\n\n这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    // 这里的事件类型为 'increment' \n    increment (state) {\n      // 变更状态\n      state.count++\n    }\n  }\n})\n```\n\n但我们不能直接调用一个 mutation 回调函数，就像前面说的，我们只能提交 mutation。\n\n就像是事件注册：“当触发一个类型为 `increment` 的 mutation 时，调用此函数。”\n\n要唤醒一个 mutation handler，你需要以相应的 type 调用 **store.commit** 方法（即提交mutation）：\n\n```js\nstore.commit('increment')\n```\n\n#### 提交载荷Payload\n\n我们还可以向 `store.commit` 传入额外的参数，即 mutation 的 **载荷（payload）**：\n\n```js\n// ...\nmutations: {\n  increment (state, n) {\n    state.count += n\n  }\n}\nstore.commit('increment', 10)\n```\n\n在大多数情况下，载荷应该是一个对象，这样可以包含多个字段，并且记录的 mutation 会更易读：\n\n```js\n// ...\nmutations: {\n  increment (state, payload) {\n    state.count += payload.amount\n  }\n}\n// ...\n\nstore.commit('increment', {\n  amount: 10\n})\n```\n\n我们可以使用对象风格的提交方式，将一个直接包含 `type` 属性的对象作为载荷传给 mutations ：\n\n```js\nstore.commit({\n  type: 'increment',\n  amount: 10\n})\n```\n\n并且handler 无需改变：\n\n```js\nmutations: {\n  increment (state, payload) {\n    state.count += payload.amount\n  }\n}\n```\n\n#### Mutation 需遵守 Vue 的响应规则\n\n因为 Vuex 的 store 中的状态是响应式的，那么当我们使用Mutation变更状态时，监视状态的 Vue 组件也会自动更新。\n\n因此使用 Vuex 中的 mutation 也需要像使用Vue 一样遵守一些注意事项：\n\n1. 提前在 store 中初始化好所有所需属性。\n\n2. 当需要在对象上添加新属性时，你应该\n\n   - 使用 `Vue.set(obj, 'newProp', 123)`, 或者\n\n   - 以新对象替换老对象。例如利用ES6的对象展开运算符：\n\n     ```js\n     state.obj = { ...state.obj, newProp: 123 }\n     ```\n\n#### Mutation 必须是同步函数\n\n **mutation 必须是同步函数**。为什么？请参考下面的例子：\n\n```js\nmutations: {\n  someMutation (state) {\n    api.callAsyncMethod(() => {\n      state.count++\n    })\n  }\n}\n```\n\n假设我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志：\n\n每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。\n\n然而，在上面的例子中 mutation 中的**异步函数**中的回调让这不可能完成：\n\n当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——\n\n实质上任何在回调函数中进行的状态的改变都是不可追踪的。\n\n#### 在组件中提交 Mutation\n\n我们可以在组件中使用 `this.$store.commit('xxx')` 提交 mutation，\n\n或者使用 `mapMutations` 辅助函数将组件中的 methods 映射为 `store.commit` 调用（需要在根节点注入 `store`）：\n\n```js\nimport { mapMutations } from 'vuex'\n\nexport default {\n  // ...\n  methods: {\n    ...mapMutations([\n      'increment', // 将 `this.increment()` 映射为 `this.$store.commit('increment')`\n\n      // `mapMutations` 也支持载荷：\n      'incrementBy' // 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`\n    ]),\n    ...mapMutations({\n      add: 'increment' // 将 `this.add()` 映射为 `this.$store.commit('increment')`\n    })\n  }\n}\n```\n\n#### 使用常量替代 Mutation 事件类型\n\n使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：\n\n```js\n// mutation-types.js\nexport const SOME_MUTATION = 'SOME_MUTATION'\n// store.js\nimport Vuex from 'vuex'\nimport { SOME_MUTATION } from './mutation-types'\n\nconst store = new Vuex.Store({\n  state: { ... },\n  mutations: {\n    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名\n    [SOME_MUTATION] (state) {\n      // mutate state\n    }\n  }\n})\n```\n\n用不用常量取决于实际情况——在需要多人协作的大型项目中，这会很有帮助。你果然如果不想用，也完全可以不用。\n\n### Action\n\nAction 类似于 mutation，不同在于：\n\n- Action 是提交 mutation，而不是直接变更状态。\n- Action 可以包含任意异步操作。\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      // 变更状态\n      state.count++\n    }\n  },\n  actions: {\n    // 接受一个与 store 实例具有相同方法和属性的 context 对象\n    increment (context) {\n      // 提交mutation\n      context.commit('increment')\n    }\n  }\n})\n```\n\n实践中，我们可以使用 ES2015 的 **参数解构** 来简化代码（特别是我们需要调用 `commit` 很多次的时候）：\n\n```js\nactions: {\n  increment ({ commit }) {\n    commit('increment')\n  }\n}\n```\n\n#### 进行异步操作\n\n因为action是提交mutation而不是直接变更状态，因此我们就可以在action内部执行异步操作了：\n\n```js\nactions: {\n  incrementAsync ({ commit }) {\n    setTimeout(() => {\n      commit('increment')\n    }, 1000)\n  }\n}\n```\n\n#### 分发Action\n\nAction 通过 `store.dispatch` 方法触发：\n\n```js\nstore.dispatch('increment')\n```\n\nActions 支持Mutation同样的载荷方式和对象方式进行分发：\n\n```js\n// 以载荷形式分发\nstore.dispatch('incrementAsync', {\n  amount: 10\n})\n\n// 以对象形式分发\nstore.dispatch({\n  type: 'incrementAsync',\n  amount: 10\n})\n```\n\n也可以在组件中使用 `this.$store.dispatch('xxx')` 分发 action，或者使用 `mapActions` 辅助函数将组件的 methods 映射为 `store.dispatch` 调用（需要先在根节点注入 `store`）：\n\n```js\nimport { mapActions } from 'vuex'\n\nexport default {\n  // ...\n  methods: {\n    ...mapActions([\n      'increment', // 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`\n\n      // `mapActions` 也支持载荷：\n      'incrementBy' // 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`\n    ]),\n    ...mapActions({\n      add: 'increment' // 将 `this.add()` 映射为 `this.$store.dispatch('increment')`\n    })\n  }\n}\n```\n\n#### 组合 Action\n\nAction 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？\n\n##### 使用promise\n\n`store.dispatch` 可以处理被触发的 action 的处理函数返回的 Promise，\n\n然后返回这个 Promise：\n\n```js\nactions: {\n  actionA ({ commit }) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        commit('someMutation')\n        resolve()\n      }, 1000)\n    })\n  }\n}\n```\n\n现在我们就可以：\n\n```js\nstore.dispatch('actionA').then(() => {\n  // ...\n})\n```\n\n在另外一个 action 中也可以：\n\n```js\nactions: {\n  // ...\n  actionB ({ dispatch, commit }) {\n    return dispatch('actionA').then(() => {\n      commit('someOtherMutation')\n    })\n  }\n}\n```\n\n##### 使用async / await\n\n如果我们可以利用 **async / await**，我们还可以如下组合 action：\n\n```js\n// 假设 gotData() 和 gotOtherData() 返回的是 Promise\n\nactions: {\n  async actionA ({ commit }) {\n    commit('gotData', await getData())\n  },\n  async actionB ({ dispatch, commit }) {\n    await dispatch('actionA') // 等待 actionA 完成\n    commit('gotOtherData', await getOtherData())\n  }\n}\n```\n\n> 一个 `store.dispatch` 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。\n\n### Module\n\n由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。\n\n为了解决以上问题，Vuex 允许我们将 store 分割成**模块（module）**。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：\n\n```js\nconst moduleA = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n```\n\n#### 模块的局部状态\n\n对于模块内部的 mutation 和 getter，接收的第一个参数是**模块的局部状态对象**。\n\n```js\nconst moduleA = {\n  state: { count: 0 },\n  mutations: {\n    increment (state) {\n      // 这里的 `state` 对象是模块的局部状态\n      state.count++\n    }\n  },\n\n  getters: {\n    doubleCount (state) {\n      return state.count * 2\n    }\n  }\n}\n```\n\n同样，对于模块内部的 action，局部状态通过 `context.state` 暴露出来，根节点状态则为 `context.rootState`：\n\n```js\nconst moduleA = {\n  // ...\n  actions: {\n    incrementIfOddOnRootSum ({ state, commit, rootState }) {\n      if ((state.count + rootState.count) % 2 === 1) {\n        commit('increment')\n      }\n    }\n  }\n}\n```\n\n对于模块内部的 getter，根节点状态也会作为第三个参数暴露出来：\n\n```js\nconst moduleA = {\n  // ...\n  getters: {\n    sumWithRootCount (state, getters, rootState) {\n      return state.count + rootState.count\n    }\n  }\n}\n```\n\n## 项目结构\n\nVuex 并不限制我们的代码结构。但是，它规定了一些需要遵守的规则：\n\n1. 应用层级的状态应该集中到单个 store 对象中。\n2. 提交 **mutation** 是更改状态的唯一方法，并且这个过程是同步的。\n3. 异步逻辑都应该封装到 **action** 里面。\n\n如果 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。\n\n对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：\n\n```bash\n├── index.html\n├── main.js\n├── api\n│   └── ... # 抽取出API请求\n├── components\n│   ├── App.vue\n│   └── ...\n└── store\n    ├── index.js          # 我们组装模块并导出 store 的地方\n    ├── actions.js        # 根级别的 action\n    ├── mutations.js      # 根级别的 mutation\n    └── modules\n        ├── cart.js       # 购物车模块\n        └── products.js   # 产品模块\n```\n\n\n\n\n\n---\n\n有时候看不进去[文档](https://vuex.vuejs.org/zh/)，一边总结一边看就能看进去了 :)","slug":"Vuex入门","published":1,"updated":"2018-09-24T03:31:51.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0n001kcrag2r0n43zp","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>比较常用的两种：</p>\n<h3 id=\"直接下载或CDN引用\"><a href=\"#直接下载或CDN引用\" class=\"headerlink\" title=\"直接下载或CDN引用\"></a>直接下载或CDN引用</h3><p>从<a href=\"https://unpkg.com/vuex\" target=\"_blank\" rel=\"noopener\">https://unpkg.com/vuex</a>下载后利用script标签在vue后引入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/vuex.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vuex@3.0.1/dist/vuex.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用npm\"><a href=\"#使用npm\" class=\"headerlink\" title=\"使用npm\"></a>使用npm</h3><p>在项目目录下运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vuex --save</span><br></pre></td></tr></table></figure>\n<p>在模块化的打包系统中利用这种方法时，必须显式地利用<code>Vue.use()</code>来安装Vuex（而script标签引入后是自动安装的）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>功能：把组件的共享状态抽取出来，用一个全局单例模式管理。</p>\n<p>核心：store（仓库），它包含了应用中的大部分state（状态，驱动应用的数据源）。</p>\n<p>这种全局单例模式管理和单纯的全局变量的区别：</p>\n<ul>\n<li><strong>Vuex 的状态存储是响应式的</strong>。若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>\n<li><strong>不能直接改变store中的state</strong>。改变 store 中的state的唯一途径就是显式地<strong>commit (提交) mutation（变化）</strong>。这样我们可以方便地跟踪每一个状态的变化。</li>\n</ul>\n<p>一个栗子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果在模块化构建系统中，请确保在开头调用了 Vue.use(Vuex)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发状态变更</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(store.state.count) <span class=\"comment\">// -&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p><strong>再次强调，使用提交 mutation ，而不是直接改变 <code>store.state.count</code>，</strong></p>\n<p><strong>是因为我们想要更明确地追踪到状态的变化。</strong></p>\n<p>当然，使用 Vuex 并<strong>不意味着</strong>需要将<strong>所有的</strong>状态放入 Vuex。</p>\n<p>虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。</p>\n<p>如果有些状态严格属于单个组件，最好还是作为组件的局部状态。</p>\n<p>你应该根据你的应用开发需要进行权衡和确定。</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><p>每个应用只包含一个 store 实例，它包含了所有需要vuex管理的状态。</p>\n<h4 id=\"利用计算属性读取state\"><a href=\"#利用计算属性读取state\" class=\"headerlink\" title=\"利用计算属性读取state\"></a>利用计算属性读取state</h4><p>从 store 实例中读取状态最简单的方法就是在<a href=\"https://cn.vuejs.org/guide/computed.html\" target=\"_blank\" rel=\"noopener\">计算属性</a>中返回某个状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个 Counter 组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Counter = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    count () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> store.state.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但这种模式导致组件依赖全局状态单例。</p>\n<h4 id=\"注册-store-选项\"><a href=\"#注册-store-选项\" class=\"headerlink\" title=\"注册 store 选项\"></a>注册 <code>store</code> 选项</h4><p>为了解决上述模式导致的组件依赖全局状态单例的问题，</p>\n<p>我们可以通过在<strong>根实例</strong>中注册 <code>store</code> 选项——</p>\n<p>这样 store 实例会注入到根组件下的所有子组件中，</p>\n<p>且子组件能通过 <code>this.$store</code> 访问到：（需调用 <code>Vue.use(Vuex)</code>）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class=\"line\">  store,</span><br><span class=\"line\">  components: &#123; Counter &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"app\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;counter&gt;&lt;/counter&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Counter = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    count () &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过 this.$store 访问store</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mapState辅助函数\"><a href=\"#mapState辅助函数\" class=\"headerlink\" title=\"mapState辅助函数\"></a><code>mapState</code>辅助函数</h4><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。</p>\n<p>为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性，让你少按几次键：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数可使代码更简练</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 `this.count` 映射为 `this.$store.state.count</span></span><br><span class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class=\"line\">    countPlusLocalState (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 <code>mapState</code> 传一个字符串数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.count 为 store.state.count</span></span><br><span class=\"line\">  <span class=\"string\">'count'</span></span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象展开操作符\"><a href=\"#对象展开操作符\" class=\"headerlink\" title=\"对象展开操作符\"></a>对象展开操作符</h4><p>ES6引入的新语法，由名字就可以看出来这个操作符的含义：把对象展开，</p>\n<p>来个栗子更容易理解：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">&#123;...a,<span class=\"string\">'d'</span>:<span class=\"number\">4</span>&#125; <span class=\"comment\">// &#123;a: 1, b: 2, c: 3, d: 4&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">[...b,<span class=\"number\">4</span>] <span class=\"comment\">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>有了这个操作符，我们就可以把<code>mapState</code>函数和局部计算属性混合使用了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 局部计算属性</span></span><br><span class=\"line\">  localComputed () &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 使用对象展开运算符将此对象展开混入到外部对象中</span></span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h3><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。</p>\n<p>就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p>\n<p>Getter 会暴露为 <code>store.getters</code> 对象，你可以以属性的形式访问这些值；getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。</p>\n<p>Getter 接受 state 作为其第一个参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    todos: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">'...'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">'...'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doneTodos: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.done)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.getters.doneTodos <span class=\"comment\">// -&gt; [&#123; id: 1, text: '...', done: true &#125;]</span></span><br></pre></td></tr></table></figure>\n<p>Getter 也可以接受其他 getter 作为第二个参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  doneTodosCount: <span class=\"function\">(<span class=\"params\">state, getters</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getters.doneTodos.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">store.getters.doneTodosCount <span class=\"comment\">// -&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>你也可以通过让 getter 返回一个函数，来实现给 getter 传参。在你对 store 里的数组<strong>进行查询</strong>时非常有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。</span></span><br><span class=\"line\">  getTodoById: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> (id) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.todos.find(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.id === id)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">store.getters.getTodoById(<span class=\"number\">2</span>) <span class=\"comment\">// -&gt; &#123; id: 2, text: '...', done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<p>我们可以很容易地在任何组件中使用getter：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  doneTodosCount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.doneTodosCount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们也可以使用<code>mapGetters</code> 辅助函数将 store 中的 getter 映射到局部计算属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      <span class=\"string\">'doneTodosCount'</span>,</span><br><span class=\"line\">      <span class=\"string\">'anotherGetter'</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class=\"line\">      doneCount: <span class=\"string\">'doneTodosCount'</span>,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h3><p><strong>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。</strong></p>\n<p>Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。</p>\n<p>这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里的事件类型为 'increment' </span></span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 变更状态</span></span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>但我们不能直接调用一个 mutation 回调函数，就像前面说的，我们只能提交 mutation。</p>\n<p>就像是事件注册：“当触发一个类型为 <code>increment</code> 的 mutation 时，调用此函数。”</p>\n<p>要唤醒一个 mutation handler，你需要以相应的 type 调用 <strong>store.commit</strong> 方法（即提交mutation）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"提交载荷Payload\"><a href=\"#提交载荷Payload\" class=\"headerlink\" title=\"提交载荷Payload\"></a>提交载荷Payload</h4><p>我们还可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state, n) &#123;</span><br><span class=\"line\">    state.count += n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段，并且记录的 mutation 会更易读：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state, payload) &#123;</span><br><span class=\"line\">    state.count += payload.amount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, &#123;</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>我们可以使用对象风格的提交方式，将一个直接包含 <code>type</code> 属性的对象作为载荷传给 mutations ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'increment'</span>,</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>并且handler 无需改变：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state, payload) &#123;</span><br><span class=\"line\">    state.count += payload.amount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Mutation-需遵守-Vue-的响应规则\"><a href=\"#Mutation-需遵守-Vue-的响应规则\" class=\"headerlink\" title=\"Mutation 需遵守 Vue 的响应规则\"></a>Mutation 需遵守 Vue 的响应规则</h4><p>因为 Vuex 的 store 中的状态是响应式的，那么当我们使用Mutation变更状态时，监视状态的 Vue 组件也会自动更新。</p>\n<p>因此使用 Vuex 中的 mutation 也需要像使用Vue 一样遵守一些注意事项：</p>\n<ol>\n<li><p>提前在 store 中初始化好所有所需属性。</p>\n</li>\n<li><p>当需要在对象上添加新属性时，你应该</p>\n<ul>\n<li><p>使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code>, 或者</p>\n</li>\n<li><p>以新对象替换老对象。例如利用ES6的对象展开运算符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state.obj = &#123; ...state.obj, <span class=\"attr\">newProp</span>: <span class=\"number\">123</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Mutation-必须是同步函数\"><a href=\"#Mutation-必须是同步函数\" class=\"headerlink\" title=\"Mutation 必须是同步函数\"></a>Mutation 必须是同步函数</h4><p> <strong>mutation 必须是同步函数</strong>。为什么？请参考下面的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  someMutation (state) &#123;</span><br><span class=\"line\">    api.callAsyncMethod(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志：</p>\n<p>每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。</p>\n<p>然而，在上面的例子中 mutation 中的<strong>异步函数</strong>中的回调让这不可能完成：</p>\n<p>当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——</p>\n<p>实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p>\n<h4 id=\"在组件中提交-Mutation\"><a href=\"#在组件中提交-Mutation\" class=\"headerlink\" title=\"在组件中提交 Mutation\"></a>在组件中提交 Mutation</h4><p>我们可以在组件中使用 <code>this.$store.commit(&#39;xxx&#39;)</code> 提交 mutation，</p>\n<p>或者使用 <code>mapMutations</code> 辅助函数将组件中的 methods 映射为 <code>store.commit</code> 调用（需要在根节点注入 <code>store</code>）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapMutations([</span><br><span class=\"line\">      <span class=\"string\">'increment'</span>, <span class=\"comment\">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// `mapMutations` 也支持载荷：</span></span><br><span class=\"line\">      <span class=\"string\">'incrementBy'</span> <span class=\"comment\">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapMutations(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'increment'</span> <span class=\"comment\">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用常量替代-Mutation-事件类型\"><a href=\"#使用常量替代-Mutation-事件类型\" class=\"headerlink\" title=\"使用常量替代 Mutation 事件类型\"></a>使用常量替代 Mutation 事件类型</h4><p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mutation-types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SOME_MUTATION = <span class=\"string\">'SOME_MUTATION'</span></span><br><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SOME_MUTATION &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./mutation-types'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class=\"line\">    [SOME_MUTATION] (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// mutate state</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>用不用常量取决于实际情况——在需要多人协作的大型项目中，这会很有帮助。你果然如果不想用，也完全可以不用。</p>\n<h3 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h3><p>Action 类似于 mutation，不同在于：</p>\n<ul>\n<li>Action 是提交 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 变更状态</span></span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接受一个与 store 实例具有相同方法和属性的 context 对象</span></span><br><span class=\"line\">    increment (context) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 提交mutation</span></span><br><span class=\"line\">      context.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>实践中，我们可以使用 ES2015 的 <strong>参数解构</strong> 来简化代码（特别是我们需要调用 <code>commit</code> 很多次的时候）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  increment (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"进行异步操作\"><a href=\"#进行异步操作\" class=\"headerlink\" title=\"进行异步操作\"></a>进行异步操作</h4><p>因为action是提交mutation而不是直接变更状态，因此我们就可以在action内部执行异步操作了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  incrementAsync (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"分发Action\"><a href=\"#分发Action\" class=\"headerlink\" title=\"分发Action\"></a>分发Action</h4><p>Action 通过 <code>store.dispatch</code> 方法触发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'increment'</span>)</span><br></pre></td></tr></table></figure>\n<p>Actions 支持Mutation同样的载荷方式和对象方式进行分发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以载荷形式分发</span></span><br><span class=\"line\">store.dispatch(<span class=\"string\">'incrementAsync'</span>, &#123;</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以对象形式分发</span></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'incrementAsync'</span>,</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>也可以在组件中使用 <code>this.$store.dispatch(&#39;xxx&#39;)</code> 分发 action，或者使用 <code>mapActions</code> 辅助函数将组件的 methods 映射为 <code>store.dispatch</code> 调用（需要先在根节点注入 <code>store</code>）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapActions([</span><br><span class=\"line\">      <span class=\"string\">'increment'</span>, <span class=\"comment\">// 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// `mapActions` 也支持载荷：</span></span><br><span class=\"line\">      <span class=\"string\">'incrementBy'</span> <span class=\"comment\">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapActions(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'increment'</span> <span class=\"comment\">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"组合-Action\"><a href=\"#组合-Action\" class=\"headerlink\" title=\"组合 Action\"></a>组合 Action</h4><p>Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？</p>\n<h5 id=\"使用promise\"><a href=\"#使用promise\" class=\"headerlink\" title=\"使用promise\"></a>使用promise</h5><p><code>store.dispatch</code> 可以处理被触发的 action 的处理函数返回的 Promise，</p>\n<p>然后返回这个 Promise：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'someMutation'</span>)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们就可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'actionA'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在另外一个 action 中也可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatch(<span class=\"string\">'actionA'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'someOtherMutation'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用async-await\"><a href=\"#使用async-await\" class=\"headerlink\" title=\"使用async / await\"></a>使用async / await</h5><p>如果我们可以利用 <strong>async / await</strong>，我们还可以如下组合 action：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设 gotData() 和 gotOtherData() 返回的是 Promise</span></span><br><span class=\"line\"></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'gotData'</span>, <span class=\"keyword\">await</span> getData())</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> dispatch(<span class=\"string\">'actionA'</span>) <span class=\"comment\">// 等待 actionA 完成</span></span><br><span class=\"line\">    commit(<span class=\"string\">'gotOtherData'</span>, <span class=\"keyword\">await</span> getOtherData())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个 <code>store.dispatch</code> 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。</p>\n</blockquote>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>\n<p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"模块的局部状态\"><a href=\"#模块的局部状态\" class=\"headerlink\" title=\"模块的局部状态\"></a>模块的局部状态</h4><p>对于模块内部的 mutation 和 getter，接收的第一个参数是<strong>模块的局部状态对象</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，对于模块内部的 action，局部状态通过 <code>context.state</code> 暴露出来，根节点状态则为 <code>context.rootState</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((state.count + rootState.count) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于模块内部的 getter，根节点状态也会作为第三个参数暴露出来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + rootState.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p>Vuex 并不限制我们的代码结构。但是，它规定了一些需要遵守的规则：</p>\n<ol>\n<li>应用层级的状态应该集中到单个 store 对象中。</li>\n<li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li>\n<li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li>\n</ol>\n<p>如果 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。</p>\n<p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── index.html</span><br><span class=\"line\">├── main.js</span><br><span class=\"line\">├── api</span><br><span class=\"line\">│   └── ... <span class=\"comment\"># 抽取出API请求</span></span><br><span class=\"line\">├── components</span><br><span class=\"line\">│   ├── App.vue</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">└── store</span><br><span class=\"line\">    ├── index.js          <span class=\"comment\"># 我们组装模块并导出 store 的地方</span></span><br><span class=\"line\">    ├── actions.js        <span class=\"comment\"># 根级别的 action</span></span><br><span class=\"line\">    ├── mutations.js      <span class=\"comment\"># 根级别的 mutation</span></span><br><span class=\"line\">    └── modules</span><br><span class=\"line\">        ├── cart.js       <span class=\"comment\"># 购物车模块</span></span><br><span class=\"line\">        └── products.js   <span class=\"comment\"># 产品模块</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>有时候看不进去<a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">文档</a>，一边总结一边看就能看进去了 :)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>比较常用的两种：</p>\n<h3 id=\"直接下载或CDN引用\"><a href=\"#直接下载或CDN引用\" class=\"headerlink\" title=\"直接下载或CDN引用\"></a>直接下载或CDN引用</h3><p>从<a href=\"https://unpkg.com/vuex\" target=\"_blank\" rel=\"noopener\">https://unpkg.com/vuex</a>下载后利用script标签在vue后引入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/vuex.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vuex@3.0.1/dist/vuex.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用npm\"><a href=\"#使用npm\" class=\"headerlink\" title=\"使用npm\"></a>使用npm</h3><p>在项目目录下运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vuex --save</span><br></pre></td></tr></table></figure>\n<p>在模块化的打包系统中利用这种方法时，必须显式地利用<code>Vue.use()</code>来安装Vuex（而script标签引入后是自动安装的）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>功能：把组件的共享状态抽取出来，用一个全局单例模式管理。</p>\n<p>核心：store（仓库），它包含了应用中的大部分state（状态，驱动应用的数据源）。</p>\n<p>这种全局单例模式管理和单纯的全局变量的区别：</p>\n<ul>\n<li><strong>Vuex 的状态存储是响应式的</strong>。若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>\n<li><strong>不能直接改变store中的state</strong>。改变 store 中的state的唯一途径就是显式地<strong>commit (提交) mutation（变化）</strong>。这样我们可以方便地跟踪每一个状态的变化。</li>\n</ul>\n<p>一个栗子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果在模块化构建系统中，请确保在开头调用了 Vue.use(Vuex)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发状态变更</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(store.state.count) <span class=\"comment\">// -&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p><strong>再次强调，使用提交 mutation ，而不是直接改变 <code>store.state.count</code>，</strong></p>\n<p><strong>是因为我们想要更明确地追踪到状态的变化。</strong></p>\n<p>当然，使用 Vuex 并<strong>不意味着</strong>需要将<strong>所有的</strong>状态放入 Vuex。</p>\n<p>虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。</p>\n<p>如果有些状态严格属于单个组件，最好还是作为组件的局部状态。</p>\n<p>你应该根据你的应用开发需要进行权衡和确定。</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><p>每个应用只包含一个 store 实例，它包含了所有需要vuex管理的状态。</p>\n<h4 id=\"利用计算属性读取state\"><a href=\"#利用计算属性读取state\" class=\"headerlink\" title=\"利用计算属性读取state\"></a>利用计算属性读取state</h4><p>从 store 实例中读取状态最简单的方法就是在<a href=\"https://cn.vuejs.org/guide/computed.html\" target=\"_blank\" rel=\"noopener\">计算属性</a>中返回某个状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个 Counter 组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Counter = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    count () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> store.state.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但这种模式导致组件依赖全局状态单例。</p>\n<h4 id=\"注册-store-选项\"><a href=\"#注册-store-选项\" class=\"headerlink\" title=\"注册 store 选项\"></a>注册 <code>store</code> 选项</h4><p>为了解决上述模式导致的组件依赖全局状态单例的问题，</p>\n<p>我们可以通过在<strong>根实例</strong>中注册 <code>store</code> 选项——</p>\n<p>这样 store 实例会注入到根组件下的所有子组件中，</p>\n<p>且子组件能通过 <code>this.$store</code> 访问到：（需调用 <code>Vue.use(Vuex)</code>）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class=\"line\">  store,</span><br><span class=\"line\">  components: &#123; Counter &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"app\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;counter&gt;&lt;/counter&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Counter = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    count () &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过 this.$store 访问store</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mapState辅助函数\"><a href=\"#mapState辅助函数\" class=\"headerlink\" title=\"mapState辅助函数\"></a><code>mapState</code>辅助函数</h4><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。</p>\n<p>为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性，让你少按几次键：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数可使代码更简练</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 `this.count` 映射为 `this.$store.state.count</span></span><br><span class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class=\"line\">    countPlusLocalState (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 <code>mapState</code> 传一个字符串数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.count 为 store.state.count</span></span><br><span class=\"line\">  <span class=\"string\">'count'</span></span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象展开操作符\"><a href=\"#对象展开操作符\" class=\"headerlink\" title=\"对象展开操作符\"></a>对象展开操作符</h4><p>ES6引入的新语法，由名字就可以看出来这个操作符的含义：把对象展开，</p>\n<p>来个栗子更容易理解：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">&#123;...a,<span class=\"string\">'d'</span>:<span class=\"number\">4</span>&#125; <span class=\"comment\">// &#123;a: 1, b: 2, c: 3, d: 4&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">[...b,<span class=\"number\">4</span>] <span class=\"comment\">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>有了这个操作符，我们就可以把<code>mapState</code>函数和局部计算属性混合使用了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 局部计算属性</span></span><br><span class=\"line\">  localComputed () &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 使用对象展开运算符将此对象展开混入到外部对象中</span></span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h3><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。</p>\n<p>就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p>\n<p>Getter 会暴露为 <code>store.getters</code> 对象，你可以以属性的形式访问这些值；getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。</p>\n<p>Getter 接受 state 作为其第一个参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    todos: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">'...'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">'...'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doneTodos: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.done)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.getters.doneTodos <span class=\"comment\">// -&gt; [&#123; id: 1, text: '...', done: true &#125;]</span></span><br></pre></td></tr></table></figure>\n<p>Getter 也可以接受其他 getter 作为第二个参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  doneTodosCount: <span class=\"function\">(<span class=\"params\">state, getters</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getters.doneTodos.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">store.getters.doneTodosCount <span class=\"comment\">// -&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>你也可以通过让 getter 返回一个函数，来实现给 getter 传参。在你对 store 里的数组<strong>进行查询</strong>时非常有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。</span></span><br><span class=\"line\">  getTodoById: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> (id) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.todos.find(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.id === id)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">store.getters.getTodoById(<span class=\"number\">2</span>) <span class=\"comment\">// -&gt; &#123; id: 2, text: '...', done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<p>我们可以很容易地在任何组件中使用getter：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  doneTodosCount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.doneTodosCount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们也可以使用<code>mapGetters</code> 辅助函数将 store 中的 getter 映射到局部计算属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      <span class=\"string\">'doneTodosCount'</span>,</span><br><span class=\"line\">      <span class=\"string\">'anotherGetter'</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class=\"line\">      doneCount: <span class=\"string\">'doneTodosCount'</span>,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h3><p><strong>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。</strong></p>\n<p>Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。</p>\n<p>这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里的事件类型为 'increment' </span></span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 变更状态</span></span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>但我们不能直接调用一个 mutation 回调函数，就像前面说的，我们只能提交 mutation。</p>\n<p>就像是事件注册：“当触发一个类型为 <code>increment</code> 的 mutation 时，调用此函数。”</p>\n<p>要唤醒一个 mutation handler，你需要以相应的 type 调用 <strong>store.commit</strong> 方法（即提交mutation）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"提交载荷Payload\"><a href=\"#提交载荷Payload\" class=\"headerlink\" title=\"提交载荷Payload\"></a>提交载荷Payload</h4><p>我们还可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state, n) &#123;</span><br><span class=\"line\">    state.count += n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段，并且记录的 mutation 会更易读：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state, payload) &#123;</span><br><span class=\"line\">    state.count += payload.amount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, &#123;</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>我们可以使用对象风格的提交方式，将一个直接包含 <code>type</code> 属性的对象作为载荷传给 mutations ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'increment'</span>,</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>并且handler 无需改变：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state, payload) &#123;</span><br><span class=\"line\">    state.count += payload.amount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Mutation-需遵守-Vue-的响应规则\"><a href=\"#Mutation-需遵守-Vue-的响应规则\" class=\"headerlink\" title=\"Mutation 需遵守 Vue 的响应规则\"></a>Mutation 需遵守 Vue 的响应规则</h4><p>因为 Vuex 的 store 中的状态是响应式的，那么当我们使用Mutation变更状态时，监视状态的 Vue 组件也会自动更新。</p>\n<p>因此使用 Vuex 中的 mutation 也需要像使用Vue 一样遵守一些注意事项：</p>\n<ol>\n<li><p>提前在 store 中初始化好所有所需属性。</p>\n</li>\n<li><p>当需要在对象上添加新属性时，你应该</p>\n<ul>\n<li><p>使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code>, 或者</p>\n</li>\n<li><p>以新对象替换老对象。例如利用ES6的对象展开运算符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state.obj = &#123; ...state.obj, <span class=\"attr\">newProp</span>: <span class=\"number\">123</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Mutation-必须是同步函数\"><a href=\"#Mutation-必须是同步函数\" class=\"headerlink\" title=\"Mutation 必须是同步函数\"></a>Mutation 必须是同步函数</h4><p> <strong>mutation 必须是同步函数</strong>。为什么？请参考下面的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  someMutation (state) &#123;</span><br><span class=\"line\">    api.callAsyncMethod(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志：</p>\n<p>每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。</p>\n<p>然而，在上面的例子中 mutation 中的<strong>异步函数</strong>中的回调让这不可能完成：</p>\n<p>当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——</p>\n<p>实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p>\n<h4 id=\"在组件中提交-Mutation\"><a href=\"#在组件中提交-Mutation\" class=\"headerlink\" title=\"在组件中提交 Mutation\"></a>在组件中提交 Mutation</h4><p>我们可以在组件中使用 <code>this.$store.commit(&#39;xxx&#39;)</code> 提交 mutation，</p>\n<p>或者使用 <code>mapMutations</code> 辅助函数将组件中的 methods 映射为 <code>store.commit</code> 调用（需要在根节点注入 <code>store</code>）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapMutations([</span><br><span class=\"line\">      <span class=\"string\">'increment'</span>, <span class=\"comment\">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// `mapMutations` 也支持载荷：</span></span><br><span class=\"line\">      <span class=\"string\">'incrementBy'</span> <span class=\"comment\">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapMutations(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'increment'</span> <span class=\"comment\">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用常量替代-Mutation-事件类型\"><a href=\"#使用常量替代-Mutation-事件类型\" class=\"headerlink\" title=\"使用常量替代 Mutation 事件类型\"></a>使用常量替代 Mutation 事件类型</h4><p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mutation-types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SOME_MUTATION = <span class=\"string\">'SOME_MUTATION'</span></span><br><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SOME_MUTATION &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./mutation-types'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class=\"line\">    [SOME_MUTATION] (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// mutate state</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>用不用常量取决于实际情况——在需要多人协作的大型项目中，这会很有帮助。你果然如果不想用，也完全可以不用。</p>\n<h3 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h3><p>Action 类似于 mutation，不同在于：</p>\n<ul>\n<li>Action 是提交 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 变更状态</span></span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接受一个与 store 实例具有相同方法和属性的 context 对象</span></span><br><span class=\"line\">    increment (context) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 提交mutation</span></span><br><span class=\"line\">      context.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>实践中，我们可以使用 ES2015 的 <strong>参数解构</strong> 来简化代码（特别是我们需要调用 <code>commit</code> 很多次的时候）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  increment (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"进行异步操作\"><a href=\"#进行异步操作\" class=\"headerlink\" title=\"进行异步操作\"></a>进行异步操作</h4><p>因为action是提交mutation而不是直接变更状态，因此我们就可以在action内部执行异步操作了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  incrementAsync (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"分发Action\"><a href=\"#分发Action\" class=\"headerlink\" title=\"分发Action\"></a>分发Action</h4><p>Action 通过 <code>store.dispatch</code> 方法触发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'increment'</span>)</span><br></pre></td></tr></table></figure>\n<p>Actions 支持Mutation同样的载荷方式和对象方式进行分发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以载荷形式分发</span></span><br><span class=\"line\">store.dispatch(<span class=\"string\">'incrementAsync'</span>, &#123;</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以对象形式分发</span></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'incrementAsync'</span>,</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>也可以在组件中使用 <code>this.$store.dispatch(&#39;xxx&#39;)</code> 分发 action，或者使用 <code>mapActions</code> 辅助函数将组件的 methods 映射为 <code>store.dispatch</code> 调用（需要先在根节点注入 <code>store</code>）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapActions([</span><br><span class=\"line\">      <span class=\"string\">'increment'</span>, <span class=\"comment\">// 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// `mapActions` 也支持载荷：</span></span><br><span class=\"line\">      <span class=\"string\">'incrementBy'</span> <span class=\"comment\">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapActions(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'increment'</span> <span class=\"comment\">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"组合-Action\"><a href=\"#组合-Action\" class=\"headerlink\" title=\"组合 Action\"></a>组合 Action</h4><p>Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？</p>\n<h5 id=\"使用promise\"><a href=\"#使用promise\" class=\"headerlink\" title=\"使用promise\"></a>使用promise</h5><p><code>store.dispatch</code> 可以处理被触发的 action 的处理函数返回的 Promise，</p>\n<p>然后返回这个 Promise：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'someMutation'</span>)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们就可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'actionA'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在另外一个 action 中也可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatch(<span class=\"string\">'actionA'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'someOtherMutation'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用async-await\"><a href=\"#使用async-await\" class=\"headerlink\" title=\"使用async / await\"></a>使用async / await</h5><p>如果我们可以利用 <strong>async / await</strong>，我们还可以如下组合 action：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设 gotData() 和 gotOtherData() 返回的是 Promise</span></span><br><span class=\"line\"></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'gotData'</span>, <span class=\"keyword\">await</span> getData())</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> dispatch(<span class=\"string\">'actionA'</span>) <span class=\"comment\">// 等待 actionA 完成</span></span><br><span class=\"line\">    commit(<span class=\"string\">'gotOtherData'</span>, <span class=\"keyword\">await</span> getOtherData())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个 <code>store.dispatch</code> 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。</p>\n</blockquote>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>\n<p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"模块的局部状态\"><a href=\"#模块的局部状态\" class=\"headerlink\" title=\"模块的局部状态\"></a>模块的局部状态</h4><p>对于模块内部的 mutation 和 getter，接收的第一个参数是<strong>模块的局部状态对象</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，对于模块内部的 action，局部状态通过 <code>context.state</code> 暴露出来，根节点状态则为 <code>context.rootState</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((state.count + rootState.count) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于模块内部的 getter，根节点状态也会作为第三个参数暴露出来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + rootState.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p>Vuex 并不限制我们的代码结构。但是，它规定了一些需要遵守的规则：</p>\n<ol>\n<li>应用层级的状态应该集中到单个 store 对象中。</li>\n<li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li>\n<li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li>\n</ol>\n<p>如果 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。</p>\n<p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── index.html</span><br><span class=\"line\">├── main.js</span><br><span class=\"line\">├── api</span><br><span class=\"line\">│   └── ... <span class=\"comment\"># 抽取出API请求</span></span><br><span class=\"line\">├── components</span><br><span class=\"line\">│   ├── App.vue</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">└── store</span><br><span class=\"line\">    ├── index.js          <span class=\"comment\"># 我们组装模块并导出 store 的地方</span></span><br><span class=\"line\">    ├── actions.js        <span class=\"comment\"># 根级别的 action</span></span><br><span class=\"line\">    ├── mutations.js      <span class=\"comment\"># 根级别的 mutation</span></span><br><span class=\"line\">    └── modules</span><br><span class=\"line\">        ├── cart.js       <span class=\"comment\"># 购物车模块</span></span><br><span class=\"line\">        └── products.js   <span class=\"comment\"># 产品模块</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>有时候看不进去<a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">文档</a>，一边总结一边看就能看进去了 :)</p>\n"},{"title":"Web前端错题模糊题记录","toc":true,"date":"2018-09-20T02:04:36.000Z","_content":"\n## HTML\n\n<u>**元素的alt和title有什么异同？**</u>\n\nalt和title同时设置的时候，alt作为图片的替代文字出现，title是图片的解释文字。\n\n**<u>关于html5标签？</u>**\n\n\\<audio\\> 标签定义声音，比如音乐或其他音频流。\n\\<canvas\\> 标签定义图形，比如图表和其他图像。\\<canvas\\> 标签只是图形容器，必须使用脚本来绘制图形。\n\\<article\\>标签定义外部的内容。比如来自一个外部的新闻提供者的一篇新的文章，或者来自 blog 的文本，或者是来自论坛的文本。亦或是来自其他外部源内容。\n\\<menu\\> 标签定义命令的列表或菜单。\\<menu\\> 标签用于上下文菜单、工具栏以及用于列出表单控件和命令。command 元素表示用户能够调用的命令。\\<command\\> 标签可以定义命令按钮，比如单选按钮、复选框或按钮。只有当 command 元素位于 menu 元素内时，该元素才是可见的。否则不会显示这个元素，但是可以用它规定键盘快捷键。 \n\n**<u>有关HTML的Doctype和严格模式与混杂模式？</u>**\n\n> **文档类型**\n>\n>  DTD（文档类型定义）是一组机器可读的规则，他们定义 XML 或 HTML 的特定版本中允许有什么，不允许有什么。在解析网页时，浏览器将使用这些规则检查页面的有效性并且采取相应的措施。浏览器通过分析页面的 DOCTYPE 声明来了解要使用哪个 DTD ，由此知道要使用 HTML 的哪个版本。\n>\n>  DOCTYPE 当前有两种风格，严格（ strict ）和过渡（ transitional ）。过渡 DOCTYPE 的目的是帮助开发人员从老版本迁移到新版本。\n>\n> 如果发送具有正确的 MIME 类型的 XHTML 文档，理解 XML 的浏览器将不显示无效的页面。\n>\n>  **浏览器模式**\n>\n>     浏览器有两种呈现模式：标准模式和混杂模式（quirks mode，也叫兼容模式）。在标准模式中，浏览器根据规范呈现页面；在混杂模式中，页面以一种比较宽松的向后兼容的方式显示。\n>\n> ** DOCTYPE 切换 **\n>\n> 对于 HTML 4.01 文档，\n>\n> - 包含严格 DTD 的 DOCTYPE 常常导致页面以标准模式呈现。\n> - 包含过度 DTD 和 URI 的 DOCTYPE 也导致页面以标准模式呈现。\n> - 但是有过度 DTD 而没有 URI 会导致页面以混杂模式呈现。\n> - DOCTYPE 不存在或形式不正确会导致 HTML 和 XHTML 文档以混杂模式呈现。\n> \n\n**<u>NOSCRIPT标签是做什么用的？</u>**\n\nnoscript 元素用来定义在脚本未被执行时的替代内容（文本）。\n\n## CSS\n\n**<u>关于CSS的position属性？</u>**\n\nstatic没有定位，元素出现在正常的流中。\n\nfixed是相对于窗口的固定定位。\n\n**<u>关于border:none以及border:0?</u>**\n\n当定义border:none时，表示无边框样式，浏览器并不会对边框进行渲染，也就没有实际的宽度；\n\n定义边框时，除了设置宽度外，还必须设置边框的样式才能显示出来。\n\n**<u>关于CSS sprites图片字节？</u>**\n\nCSS Sprites能减少图片的字节，曾经比较过多次，3张图片合并成1张图片的字节总是小于这3张图片的字节总和。\n\n**<u>关于浏览器引擎？</u>**\n\nWekbit是一个开源的Web浏览器引擎，也就是浏览器的内核。Apple的Safari, Google的Chrome, Nokia S60平台的默认浏览器，Apple手机的默认浏览器，Android手机的默认浏览器均采用的Webkit作为器浏览器内核。Webkit的采用程度由 此可见一斑，理所当然的成为了当今主流的三大浏览器内核之一。\n\n另外两个分别是Gecko和Trident，大名鼎鼎的Firefox便是使用的Gecko 内核，而微软的IE系列则使用的是Trident内核。\n\n还有Presto: Opera的内核，但由于市场选择问题，主要应用在手机平台--Opera mini。\n\n另外，搜狗浏览器是双核的，双核并不是指一个页面由2个内核同时处理,而是所有网页（通常是标准通用标记语言的应用超文本标记语言）由webkit内核处理,只有银行网站用IE内核。\n\n## JavaScript\n\n<u>**flash和js通过什么类如何交互?**</u>\n\nExternalInterface。Flash提供了ExternalInterface接口与JavaScript通信，ExternalInterface有两个方法，call和addCallback，call的作用是让Flash调用js里的方法，addCallback是用来注册flash函数让js调用。\n\n**<u>有关浏览器中使用js跨域获取数据？</u>**\n\n只要<u>协议 、 域名 、 端口</u>有任何一个不同, 都被当作是 **不同** 的域。\n\n> **1.CORS**\n>\n> CORS（Cross-Origin Resource Sharing，跨资源共享），基本思想是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应的成功或失败。即给请求附加一个额外的Origin头部，其中包含请求页面的源信息（协议、域名和端口），以便服务器根据这个头部决定是否给予响应。\n>\n> **2.document.domain**\n>\n> 将页面的document.domain设置为相同的值，页面间可以互相访问对方的JavaScript对象。\n>\n> 注意：\n>\n> 不能将值设置为URL中不包含的域；\n>\n> 松散的域名不能再设置为紧绷的域名。\n>\n> **3.图像Ping**\n>\n> var img=new Image();\n>\n> img.onload=img.onerror=function(){\n>\n> ... ...\n>\n> }\n>\n> img.src=\"url?name=value\";\n>\n> 请求数据通过查询字符串的形式发送，响应可以是任意内容，通常是像素图或204响应。\n>\n> 图像Ping最常用于跟踪用户点击页面或动态广告曝光次数。\n>\n> 缺点：\n>\n> 只能发送GET请求；\n>\n> 无法访问服务器的响应文本，只能用于浏览器与服务器间的单向通信。\n>\n> **4.Jsonp**\n>\n> var script=document.createElement(\"script\");\n>\n> script.src=\"url?callback=handleResponse\";\n>\n> document.body.insertBefore(script,document.body.firstChild);\n>\n> JSONP由两部分组成：回调函数和数据\n>\n> 回调函数是接收到响应时应该在页面中调用的函数，其名字一般在请求中指定。\n>\n> 数据是传入回调函数中的JSON数据。\n>\n> 优点：\n>\n> 能够直接访问响应文本，可用于浏览器与服务器间的双向通信。\n>\n> 缺点：\n>\n> JSONP从其他域中加载代码执行，其他域可能不安全；\n>\n> 难以确定JSONP请求是否失败。\n>\n> **5.Comet**\n>\n> Comet可实现服务器向浏览器推送数据。\n>\n> Comet是实现方式：长轮询和流\n>\n> 短轮询即浏览器定时向服务器发送请求，看有没有数据更新。\n>\n> 长轮询即浏览器向服务器发送一个请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据后，浏览器关闭连接，随即又向服务器发起一个新请求。其优点是所有浏览器都支持，使用XHR对象和setTimeout()即可实现。\n>\n> 流即浏览器向服务器发送一个请求，而服务器保持连接打开，然后周期性地向浏览器发送数据，页面的整个生命周期内只使用一个HTTP连接。\n>\n> **6.WebSocket**\n>\n> WebSocket可在一个单独的持久连接上提供全双工、双向通信。\n>\n> WebSocket使用自定义协议，未加密的连接时ws://；加密的链接是wss://。\n>\n> var webSocket=new WebSocket(\"ws://\");\n>\n> webSocket.send(message);\n>\n> webSocket.onmessage=function(event){\n>\n> var data=event.data;\n>\n> ... ....\n>\n> }\n>\n> 注意：\n>\n> 必须给WebSocket构造函数传入绝对URL；\n>\n> WebSocket可以打开任何站点的连接，是否会与某个域中的页面通信，完全取决于服务器；\n>\n> WebSocket只能发送纯文本数据，对于复杂的数据结构，在发送之前必须进行序列化JSON.stringify(message))。\n>\n> 优点：\n>\n> 在客户端和服务器之间发送非常少的数据，减少字节开销。\n\n**<u>如何获取一个元素节点（id 为 test）的父元素，找到之后如何删除这个元素节点（id 为 test）？</u>**\n\n```js\nvar testNode = document.getElementById('test');\nvar parentNode = testNode.parentNode;\nparentNode.removeChild(testNode);\t\n```\n\n**<u>!编写一个 js 函数 jsonp 的处理函数:</u>**\n\n[讲解链接](https://blog.csdn.net/u013830811/article/details/52718664)\n\n```js\n// 手写jsonp\nfunction myCallback(data) {\n    console.log(data)\n}\n \nfunction jsonp(url, data, callback) {\n    // data是否是字符串，是的话证明data值就是函数名\n    if (typeof data == 'string') {\n        callback = data\n        data = {}\n    }\n    // 拼接data\n    url += url.indexOf('?') === -1 ? '?' : '&'\n    url += 'callback=' + callback\n    var params = \"\"\n    for (var i in data) {\n        params += '&' + i + '=' + data[i]\n    }\n    url += params\n    // 在页面插入script标签\n    var script = document.createElement('script')\n    script.setAttribute('src', url)\n    document.querySelector('head').appendChild(script)\n \n}\n \njsonp('http://baidu.com/index.html', { id: 34 }, 'myCallback')\njsonp('http://baidu.com/index.html?name=\"zjn\"', { id: 34 }, 'myCallback')\n```\n\n**<u>编写一个函数判断参数是否是数组类型，如果是返回 true</u>**\n\n```js\n// 方法一：\nfunction isArray(arg){\n  return (arg instanceof Array);\n}\n// 方法二：\nfunction isArray(arg){\n  return Object.prototype.toString.call(arg) == '[object Array]' ? true : false;\n}\n// 方法三：\nfunction isArray(arg){\n  return arg.__proto__.constructor.name == 'Array' ？true : false;\n}\n```\n\n**<u>关于对象的length属性：</u>**\n\nWindow.length //返回在当前窗口中frames的数量（包括IFRAMES）\n\nString.length //返回字符串中的字符数目\n\nFunction.length //获取一个函数定义的参数数目\n\nArray.length //返回数组中元素的数目\n\n**如何获取 url 中的 query 字段对应的值，比如：[https://m.mobike.com?source=part1](https://m.mobike.com/?source=part1)，编写一个函数获取 source 对应的值 part1**\n\n```js\nlet query = (url) => {\n  let p = url.split('?')[1];\n  let sourcePos = p.indexOf('source');\n  if (sourcePos > -1) {\n    if (p.indexOf('&', sourcePos+7) > -1) {\n      return p.substring(sourcePos+7,p.indexOf('&', sourcePos+7));\n    } else {\n      return p.substring(sourcePos+7);\n    }\n  }\n};\n```\n\n**<u>关于IE的event对象支持的方法：</u>**\n\nIE的所有事件对象都支持的方法和属性：\n\n- cancelBubble 默认为false，设置为true就可以取消事件冒泡\n- returnValue 默认为true，设置为false可以取消事件的默认行为\n- srcElement 对于生成事件的 Window 对象、Document 对象或 Element 对象的引用\n- type 被触发事件的类型\n\nDOM事件的方法（IE的事件模型不支持）：\n\n- initEvent() 初始化新创建的 Event 对象的属性\n- preventDefault() 通知浏览器不要执行与事件关联的默认动作\n- stopPropagation() 不再派发事件\n\n<u>**JavaScript的函数调用有哪几种方式？请举例说明，并分析其不同之处。**</u>\n\n![img](https://uploadfiles.nowcoder.com/images/20180906/5405985_1536239169184_7CB0EB2AC29A9E988352087AAD2B0C2F)\n\n**<u>以下 javascript 代码，在浏览器中运行的结果是</u>**\n\n![img](https://uploadfiles.nowcoder.net/images/20161128/5918115_1480305918764_CF08B543645A55F242CA55EB20727AE6)\n\n先全部输出first，然后全部输出second。\n\njs 是运行于单线程环境中，定时器作用是在规定时间内将事件加入执行队列，而加入的前提是当前事件队列没有任何东西。\n\n## 其他\n\n**<u>和后端 API 服务通信的方式有哪些</u>**\n\n1. ajax\n2. websocket\n3. SSE\n4. 服务器端渲染\n\n**<u>POST 提交的时候，content-type 有哪几种？</u>**\n\n常见的有四种\n\n1. application/x-www-form-urlencoded\n2. application/json \n3. multipart/form-data\n4. text/xml \n\n**<u>对前端工程化的理解，以及任意构建工具(webpack、gulp、grunt、rollup)的某一个使用的一些描述</u>**\n\n**前端工程化**\n\nhttps://blog.csdn.net/mayfla/article/details/78697020\n\n**webpack**\n\nwebpack是一个前端模块化方案，更侧重模块打包，我们可以把开发中的所有资源（图片、js文件、css文件等）都看成模块，通过loader（加载器）和plugins（插件）对资源进行处理，打包成符合生产环境部署的前端资源。\n\n**<u>Node.js 的核心模块</u>**\n\nHTTP模块、URL模块、Query Strings模块、File System模块、Path模块、Global模块。\n\n**<u>ajax事件有哪些</u>**\n\n![img](https://uploadfiles.nowcoder.net/images/20170311/6901516_1489199810009_E2168FD8E97D4BF6646E2043D52753FD)\n\n\n\n","source":"_posts/Web前端错题模糊题记录.md","raw":"---\ntitle: Web前端错题模糊题记录\ntoc: true\ndate: 2018-09-20 10:04:36\ncategories:\n- Web\ntags:\n- HTML\n- CSS\n- JavaScript\n---\n\n## HTML\n\n<u>**元素的alt和title有什么异同？**</u>\n\nalt和title同时设置的时候，alt作为图片的替代文字出现，title是图片的解释文字。\n\n**<u>关于html5标签？</u>**\n\n\\<audio\\> 标签定义声音，比如音乐或其他音频流。\n\\<canvas\\> 标签定义图形，比如图表和其他图像。\\<canvas\\> 标签只是图形容器，必须使用脚本来绘制图形。\n\\<article\\>标签定义外部的内容。比如来自一个外部的新闻提供者的一篇新的文章，或者来自 blog 的文本，或者是来自论坛的文本。亦或是来自其他外部源内容。\n\\<menu\\> 标签定义命令的列表或菜单。\\<menu\\> 标签用于上下文菜单、工具栏以及用于列出表单控件和命令。command 元素表示用户能够调用的命令。\\<command\\> 标签可以定义命令按钮，比如单选按钮、复选框或按钮。只有当 command 元素位于 menu 元素内时，该元素才是可见的。否则不会显示这个元素，但是可以用它规定键盘快捷键。 \n\n**<u>有关HTML的Doctype和严格模式与混杂模式？</u>**\n\n> **文档类型**\n>\n>  DTD（文档类型定义）是一组机器可读的规则，他们定义 XML 或 HTML 的特定版本中允许有什么，不允许有什么。在解析网页时，浏览器将使用这些规则检查页面的有效性并且采取相应的措施。浏览器通过分析页面的 DOCTYPE 声明来了解要使用哪个 DTD ，由此知道要使用 HTML 的哪个版本。\n>\n>  DOCTYPE 当前有两种风格，严格（ strict ）和过渡（ transitional ）。过渡 DOCTYPE 的目的是帮助开发人员从老版本迁移到新版本。\n>\n> 如果发送具有正确的 MIME 类型的 XHTML 文档，理解 XML 的浏览器将不显示无效的页面。\n>\n>  **浏览器模式**\n>\n>     浏览器有两种呈现模式：标准模式和混杂模式（quirks mode，也叫兼容模式）。在标准模式中，浏览器根据规范呈现页面；在混杂模式中，页面以一种比较宽松的向后兼容的方式显示。\n>\n> ** DOCTYPE 切换 **\n>\n> 对于 HTML 4.01 文档，\n>\n> - 包含严格 DTD 的 DOCTYPE 常常导致页面以标准模式呈现。\n> - 包含过度 DTD 和 URI 的 DOCTYPE 也导致页面以标准模式呈现。\n> - 但是有过度 DTD 而没有 URI 会导致页面以混杂模式呈现。\n> - DOCTYPE 不存在或形式不正确会导致 HTML 和 XHTML 文档以混杂模式呈现。\n> \n\n**<u>NOSCRIPT标签是做什么用的？</u>**\n\nnoscript 元素用来定义在脚本未被执行时的替代内容（文本）。\n\n## CSS\n\n**<u>关于CSS的position属性？</u>**\n\nstatic没有定位，元素出现在正常的流中。\n\nfixed是相对于窗口的固定定位。\n\n**<u>关于border:none以及border:0?</u>**\n\n当定义border:none时，表示无边框样式，浏览器并不会对边框进行渲染，也就没有实际的宽度；\n\n定义边框时，除了设置宽度外，还必须设置边框的样式才能显示出来。\n\n**<u>关于CSS sprites图片字节？</u>**\n\nCSS Sprites能减少图片的字节，曾经比较过多次，3张图片合并成1张图片的字节总是小于这3张图片的字节总和。\n\n**<u>关于浏览器引擎？</u>**\n\nWekbit是一个开源的Web浏览器引擎，也就是浏览器的内核。Apple的Safari, Google的Chrome, Nokia S60平台的默认浏览器，Apple手机的默认浏览器，Android手机的默认浏览器均采用的Webkit作为器浏览器内核。Webkit的采用程度由 此可见一斑，理所当然的成为了当今主流的三大浏览器内核之一。\n\n另外两个分别是Gecko和Trident，大名鼎鼎的Firefox便是使用的Gecko 内核，而微软的IE系列则使用的是Trident内核。\n\n还有Presto: Opera的内核，但由于市场选择问题，主要应用在手机平台--Opera mini。\n\n另外，搜狗浏览器是双核的，双核并不是指一个页面由2个内核同时处理,而是所有网页（通常是标准通用标记语言的应用超文本标记语言）由webkit内核处理,只有银行网站用IE内核。\n\n## JavaScript\n\n<u>**flash和js通过什么类如何交互?**</u>\n\nExternalInterface。Flash提供了ExternalInterface接口与JavaScript通信，ExternalInterface有两个方法，call和addCallback，call的作用是让Flash调用js里的方法，addCallback是用来注册flash函数让js调用。\n\n**<u>有关浏览器中使用js跨域获取数据？</u>**\n\n只要<u>协议 、 域名 、 端口</u>有任何一个不同, 都被当作是 **不同** 的域。\n\n> **1.CORS**\n>\n> CORS（Cross-Origin Resource Sharing，跨资源共享），基本思想是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应的成功或失败。即给请求附加一个额外的Origin头部，其中包含请求页面的源信息（协议、域名和端口），以便服务器根据这个头部决定是否给予响应。\n>\n> **2.document.domain**\n>\n> 将页面的document.domain设置为相同的值，页面间可以互相访问对方的JavaScript对象。\n>\n> 注意：\n>\n> 不能将值设置为URL中不包含的域；\n>\n> 松散的域名不能再设置为紧绷的域名。\n>\n> **3.图像Ping**\n>\n> var img=new Image();\n>\n> img.onload=img.onerror=function(){\n>\n> ... ...\n>\n> }\n>\n> img.src=\"url?name=value\";\n>\n> 请求数据通过查询字符串的形式发送，响应可以是任意内容，通常是像素图或204响应。\n>\n> 图像Ping最常用于跟踪用户点击页面或动态广告曝光次数。\n>\n> 缺点：\n>\n> 只能发送GET请求；\n>\n> 无法访问服务器的响应文本，只能用于浏览器与服务器间的单向通信。\n>\n> **4.Jsonp**\n>\n> var script=document.createElement(\"script\");\n>\n> script.src=\"url?callback=handleResponse\";\n>\n> document.body.insertBefore(script,document.body.firstChild);\n>\n> JSONP由两部分组成：回调函数和数据\n>\n> 回调函数是接收到响应时应该在页面中调用的函数，其名字一般在请求中指定。\n>\n> 数据是传入回调函数中的JSON数据。\n>\n> 优点：\n>\n> 能够直接访问响应文本，可用于浏览器与服务器间的双向通信。\n>\n> 缺点：\n>\n> JSONP从其他域中加载代码执行，其他域可能不安全；\n>\n> 难以确定JSONP请求是否失败。\n>\n> **5.Comet**\n>\n> Comet可实现服务器向浏览器推送数据。\n>\n> Comet是实现方式：长轮询和流\n>\n> 短轮询即浏览器定时向服务器发送请求，看有没有数据更新。\n>\n> 长轮询即浏览器向服务器发送一个请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据后，浏览器关闭连接，随即又向服务器发起一个新请求。其优点是所有浏览器都支持，使用XHR对象和setTimeout()即可实现。\n>\n> 流即浏览器向服务器发送一个请求，而服务器保持连接打开，然后周期性地向浏览器发送数据，页面的整个生命周期内只使用一个HTTP连接。\n>\n> **6.WebSocket**\n>\n> WebSocket可在一个单独的持久连接上提供全双工、双向通信。\n>\n> WebSocket使用自定义协议，未加密的连接时ws://；加密的链接是wss://。\n>\n> var webSocket=new WebSocket(\"ws://\");\n>\n> webSocket.send(message);\n>\n> webSocket.onmessage=function(event){\n>\n> var data=event.data;\n>\n> ... ....\n>\n> }\n>\n> 注意：\n>\n> 必须给WebSocket构造函数传入绝对URL；\n>\n> WebSocket可以打开任何站点的连接，是否会与某个域中的页面通信，完全取决于服务器；\n>\n> WebSocket只能发送纯文本数据，对于复杂的数据结构，在发送之前必须进行序列化JSON.stringify(message))。\n>\n> 优点：\n>\n> 在客户端和服务器之间发送非常少的数据，减少字节开销。\n\n**<u>如何获取一个元素节点（id 为 test）的父元素，找到之后如何删除这个元素节点（id 为 test）？</u>**\n\n```js\nvar testNode = document.getElementById('test');\nvar parentNode = testNode.parentNode;\nparentNode.removeChild(testNode);\t\n```\n\n**<u>!编写一个 js 函数 jsonp 的处理函数:</u>**\n\n[讲解链接](https://blog.csdn.net/u013830811/article/details/52718664)\n\n```js\n// 手写jsonp\nfunction myCallback(data) {\n    console.log(data)\n}\n \nfunction jsonp(url, data, callback) {\n    // data是否是字符串，是的话证明data值就是函数名\n    if (typeof data == 'string') {\n        callback = data\n        data = {}\n    }\n    // 拼接data\n    url += url.indexOf('?') === -1 ? '?' : '&'\n    url += 'callback=' + callback\n    var params = \"\"\n    for (var i in data) {\n        params += '&' + i + '=' + data[i]\n    }\n    url += params\n    // 在页面插入script标签\n    var script = document.createElement('script')\n    script.setAttribute('src', url)\n    document.querySelector('head').appendChild(script)\n \n}\n \njsonp('http://baidu.com/index.html', { id: 34 }, 'myCallback')\njsonp('http://baidu.com/index.html?name=\"zjn\"', { id: 34 }, 'myCallback')\n```\n\n**<u>编写一个函数判断参数是否是数组类型，如果是返回 true</u>**\n\n```js\n// 方法一：\nfunction isArray(arg){\n  return (arg instanceof Array);\n}\n// 方法二：\nfunction isArray(arg){\n  return Object.prototype.toString.call(arg) == '[object Array]' ? true : false;\n}\n// 方法三：\nfunction isArray(arg){\n  return arg.__proto__.constructor.name == 'Array' ？true : false;\n}\n```\n\n**<u>关于对象的length属性：</u>**\n\nWindow.length //返回在当前窗口中frames的数量（包括IFRAMES）\n\nString.length //返回字符串中的字符数目\n\nFunction.length //获取一个函数定义的参数数目\n\nArray.length //返回数组中元素的数目\n\n**如何获取 url 中的 query 字段对应的值，比如：[https://m.mobike.com?source=part1](https://m.mobike.com/?source=part1)，编写一个函数获取 source 对应的值 part1**\n\n```js\nlet query = (url) => {\n  let p = url.split('?')[1];\n  let sourcePos = p.indexOf('source');\n  if (sourcePos > -1) {\n    if (p.indexOf('&', sourcePos+7) > -1) {\n      return p.substring(sourcePos+7,p.indexOf('&', sourcePos+7));\n    } else {\n      return p.substring(sourcePos+7);\n    }\n  }\n};\n```\n\n**<u>关于IE的event对象支持的方法：</u>**\n\nIE的所有事件对象都支持的方法和属性：\n\n- cancelBubble 默认为false，设置为true就可以取消事件冒泡\n- returnValue 默认为true，设置为false可以取消事件的默认行为\n- srcElement 对于生成事件的 Window 对象、Document 对象或 Element 对象的引用\n- type 被触发事件的类型\n\nDOM事件的方法（IE的事件模型不支持）：\n\n- initEvent() 初始化新创建的 Event 对象的属性\n- preventDefault() 通知浏览器不要执行与事件关联的默认动作\n- stopPropagation() 不再派发事件\n\n<u>**JavaScript的函数调用有哪几种方式？请举例说明，并分析其不同之处。**</u>\n\n![img](https://uploadfiles.nowcoder.com/images/20180906/5405985_1536239169184_7CB0EB2AC29A9E988352087AAD2B0C2F)\n\n**<u>以下 javascript 代码，在浏览器中运行的结果是</u>**\n\n![img](https://uploadfiles.nowcoder.net/images/20161128/5918115_1480305918764_CF08B543645A55F242CA55EB20727AE6)\n\n先全部输出first，然后全部输出second。\n\njs 是运行于单线程环境中，定时器作用是在规定时间内将事件加入执行队列，而加入的前提是当前事件队列没有任何东西。\n\n## 其他\n\n**<u>和后端 API 服务通信的方式有哪些</u>**\n\n1. ajax\n2. websocket\n3. SSE\n4. 服务器端渲染\n\n**<u>POST 提交的时候，content-type 有哪几种？</u>**\n\n常见的有四种\n\n1. application/x-www-form-urlencoded\n2. application/json \n3. multipart/form-data\n4. text/xml \n\n**<u>对前端工程化的理解，以及任意构建工具(webpack、gulp、grunt、rollup)的某一个使用的一些描述</u>**\n\n**前端工程化**\n\nhttps://blog.csdn.net/mayfla/article/details/78697020\n\n**webpack**\n\nwebpack是一个前端模块化方案，更侧重模块打包，我们可以把开发中的所有资源（图片、js文件、css文件等）都看成模块，通过loader（加载器）和plugins（插件）对资源进行处理，打包成符合生产环境部署的前端资源。\n\n**<u>Node.js 的核心模块</u>**\n\nHTTP模块、URL模块、Query Strings模块、File System模块、Path模块、Global模块。\n\n**<u>ajax事件有哪些</u>**\n\n![img](https://uploadfiles.nowcoder.net/images/20170311/6901516_1489199810009_E2168FD8E97D4BF6646E2043D52753FD)\n\n\n\n","slug":"Web前端错题模糊题记录","published":1,"updated":"2018-09-23T02:32:10.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0p001ncragu99op1ks","content":"<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p><u><strong>元素的alt和title有什么异同？</strong></u></p>\n<p>alt和title同时设置的时候，alt作为图片的替代文字出现，title是图片的解释文字。</p>\n<p><strong><u>关于html5标签？</u></strong></p>\n<p>\\&lt;audio> 标签定义声音，比如音乐或其他音频流。<br>\\&lt;canvas> 标签定义图形，比如图表和其他图像。\\&lt;canvas> 标签只是图形容器，必须使用脚本来绘制图形。<br>\\&lt;article>标签定义外部的内容。比如来自一个外部的新闻提供者的一篇新的文章，或者来自 blog 的文本，或者是来自论坛的文本。亦或是来自其他外部源内容。<br>\\&lt;menu> 标签定义命令的列表或菜单。\\&lt;menu> 标签用于上下文菜单、工具栏以及用于列出表单控件和命令。command 元素表示用户能够调用的命令。\\&lt;command> 标签可以定义命令按钮，比如单选按钮、复选框或按钮。只有当 command 元素位于 menu 元素内时，该元素才是可见的。否则不会显示这个元素，但是可以用它规定键盘快捷键。 </p>\n<p><strong><u>有关HTML的Doctype和严格模式与混杂模式？</u></strong></p>\n<blockquote>\n<p><strong>文档类型</strong></p>\n<p> DTD（文档类型定义）是一组机器可读的规则，他们定义 XML 或 HTML 的特定版本中允许有什么，不允许有什么。在解析网页时，浏览器将使用这些规则检查页面的有效性并且采取相应的措施。浏览器通过分析页面的 DOCTYPE 声明来了解要使用哪个 DTD ，由此知道要使用 HTML 的哪个版本。</p>\n<p> DOCTYPE 当前有两种风格，严格（ strict ）和过渡（ transitional ）。过渡 DOCTYPE 的目的是帮助开发人员从老版本迁移到新版本。</p>\n<p>如果发送具有正确的 MIME 类型的 XHTML 文档，理解 XML 的浏览器将不显示无效的页面。</p>\n<p> <strong>浏览器模式</strong></p>\n<pre><code>浏览器有两种呈现模式：标准模式和混杂模式（quirks mode，也叫兼容模式）。在标准模式中，浏览器根据规范呈现页面；在混杂模式中，页面以一种比较宽松的向后兼容的方式显示。\n</code></pre><p><strong> DOCTYPE 切换 </strong></p>\n<p>对于 HTML 4.01 文档，</p>\n<ul>\n<li>包含严格 DTD 的 DOCTYPE 常常导致页面以标准模式呈现。</li>\n<li>包含过度 DTD 和 URI 的 DOCTYPE 也导致页面以标准模式呈现。</li>\n<li>但是有过度 DTD 而没有 URI 会导致页面以混杂模式呈现。</li>\n<li>DOCTYPE 不存在或形式不正确会导致 HTML 和 XHTML 文档以混杂模式呈现。</li>\n</ul>\n</blockquote>\n<p><strong><u>NOSCRIPT标签是做什么用的？</u></strong></p>\n<p>noscript 元素用来定义在脚本未被执行时的替代内容（文本）。</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p><strong><u>关于CSS的position属性？</u></strong></p>\n<p>static没有定位，元素出现在正常的流中。</p>\n<p>fixed是相对于窗口的固定定位。</p>\n<p><strong><u>关于border:none以及border:0?</u></strong></p>\n<p>当定义border:none时，表示无边框样式，浏览器并不会对边框进行渲染，也就没有实际的宽度；</p>\n<p>定义边框时，除了设置宽度外，还必须设置边框的样式才能显示出来。</p>\n<p><strong><u>关于CSS sprites图片字节？</u></strong></p>\n<p>CSS Sprites能减少图片的字节，曾经比较过多次，3张图片合并成1张图片的字节总是小于这3张图片的字节总和。</p>\n<p><strong><u>关于浏览器引擎？</u></strong></p>\n<p>Wekbit是一个开源的Web浏览器引擎，也就是浏览器的内核。Apple的Safari, Google的Chrome, Nokia S60平台的默认浏览器，Apple手机的默认浏览器，Android手机的默认浏览器均采用的Webkit作为器浏览器内核。Webkit的采用程度由 此可见一斑，理所当然的成为了当今主流的三大浏览器内核之一。</p>\n<p>另外两个分别是Gecko和Trident，大名鼎鼎的Firefox便是使用的Gecko 内核，而微软的IE系列则使用的是Trident内核。</p>\n<p>还有Presto: Opera的内核，但由于市场选择问题，主要应用在手机平台–Opera mini。</p>\n<p>另外，搜狗浏览器是双核的，双核并不是指一个页面由2个内核同时处理,而是所有网页（通常是标准通用标记语言的应用超文本标记语言）由webkit内核处理,只有银行网站用IE内核。</p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p><u><strong>flash和js通过什么类如何交互?</strong></u></p>\n<p>ExternalInterface。Flash提供了ExternalInterface接口与JavaScript通信，ExternalInterface有两个方法，call和addCallback，call的作用是让Flash调用js里的方法，addCallback是用来注册flash函数让js调用。</p>\n<p><strong><u>有关浏览器中使用js跨域获取数据？</u></strong></p>\n<p>只要<u>协议 、 域名 、 端口</u>有任何一个不同, 都被当作是 <strong>不同</strong> 的域。</p>\n<blockquote>\n<p><strong>1.CORS</strong></p>\n<p>CORS（Cross-Origin Resource Sharing，跨资源共享），基本思想是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应的成功或失败。即给请求附加一个额外的Origin头部，其中包含请求页面的源信息（协议、域名和端口），以便服务器根据这个头部决定是否给予响应。</p>\n<p><strong>2.document.domain</strong></p>\n<p>将页面的document.domain设置为相同的值，页面间可以互相访问对方的JavaScript对象。</p>\n<p>注意：</p>\n<p>不能将值设置为URL中不包含的域；</p>\n<p>松散的域名不能再设置为紧绷的域名。</p>\n<p><strong>3.图像Ping</strong></p>\n<p>var img=new Image();</p>\n<p>img.onload=img.onerror=function(){</p>\n<p>… …</p>\n<p>}</p>\n<p>img.src=”url?name=value”;</p>\n<p>请求数据通过查询字符串的形式发送，响应可以是任意内容，通常是像素图或204响应。</p>\n<p>图像Ping最常用于跟踪用户点击页面或动态广告曝光次数。</p>\n<p>缺点：</p>\n<p>只能发送GET请求；</p>\n<p>无法访问服务器的响应文本，只能用于浏览器与服务器间的单向通信。</p>\n<p><strong>4.Jsonp</strong></p>\n<p>var script=document.createElement(“script”);</p>\n<p>script.src=”url?callback=handleResponse”;</p>\n<p>document.body.insertBefore(script,document.body.firstChild);</p>\n<p>JSONP由两部分组成：回调函数和数据</p>\n<p>回调函数是接收到响应时应该在页面中调用的函数，其名字一般在请求中指定。</p>\n<p>数据是传入回调函数中的JSON数据。</p>\n<p>优点：</p>\n<p>能够直接访问响应文本，可用于浏览器与服务器间的双向通信。</p>\n<p>缺点：</p>\n<p>JSONP从其他域中加载代码执行，其他域可能不安全；</p>\n<p>难以确定JSONP请求是否失败。</p>\n<p><strong>5.Comet</strong></p>\n<p>Comet可实现服务器向浏览器推送数据。</p>\n<p>Comet是实现方式：长轮询和流</p>\n<p>短轮询即浏览器定时向服务器发送请求，看有没有数据更新。</p>\n<p>长轮询即浏览器向服务器发送一个请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据后，浏览器关闭连接，随即又向服务器发起一个新请求。其优点是所有浏览器都支持，使用XHR对象和setTimeout()即可实现。</p>\n<p>流即浏览器向服务器发送一个请求，而服务器保持连接打开，然后周期性地向浏览器发送数据，页面的整个生命周期内只使用一个HTTP连接。</p>\n<p><strong>6.WebSocket</strong></p>\n<p>WebSocket可在一个单独的持久连接上提供全双工、双向通信。</p>\n<p>WebSocket使用自定义协议，未加密的连接时ws://；加密的链接是wss://。</p>\n<p>var webSocket=new WebSocket(“ws://“);</p>\n<p>webSocket.send(message);</p>\n<p>webSocket.onmessage=function(event){</p>\n<p>var data=event.data;</p>\n<p>… ….</p>\n<p>}</p>\n<p>注意：</p>\n<p>必须给WebSocket构造函数传入绝对URL；</p>\n<p>WebSocket可以打开任何站点的连接，是否会与某个域中的页面通信，完全取决于服务器；</p>\n<p>WebSocket只能发送纯文本数据，对于复杂的数据结构，在发送之前必须进行序列化JSON.stringify(message))。</p>\n<p>优点：</p>\n<p>在客户端和服务器之间发送非常少的数据，减少字节开销。</p>\n</blockquote>\n<p><strong><u>如何获取一个元素节点（id 为 test）的父元素，找到之后如何删除这个元素节点（id 为 test）？</u></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testNode = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> parentNode = testNode.parentNode;</span><br><span class=\"line\">parentNode.removeChild(testNode);</span><br></pre></td></tr></table></figure>\n<p><strong><u>!编写一个 js 函数 jsonp 的处理函数:</u></strong></p>\n<p><a href=\"https://blog.csdn.net/u013830811/article/details/52718664\" target=\"_blank\" rel=\"noopener\">讲解链接</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 手写jsonp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCallback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url, data, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// data是否是字符串，是的话证明data值就是函数名</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">        callback = data</span><br><span class=\"line\">        data = &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拼接data</span></span><br><span class=\"line\">    url += url.indexOf(<span class=\"string\">'?'</span>) === <span class=\"number\">-1</span> ? <span class=\"string\">'?'</span> : <span class=\"string\">'&amp;'</span></span><br><span class=\"line\">    url += <span class=\"string\">'callback='</span> + callback</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">        params += <span class=\"string\">'&amp;'</span> + i + <span class=\"string\">'='</span> + data[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    url += params</span><br><span class=\"line\">    <span class=\"comment\">// 在页面插入script标签</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</span><br><span class=\"line\">    script.setAttribute(<span class=\"string\">'src'</span>, url)</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'head'</span>).appendChild(script)</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">jsonp(<span class=\"string\">'http://baidu.com/index.html'</span>, &#123; <span class=\"attr\">id</span>: <span class=\"number\">34</span> &#125;, <span class=\"string\">'myCallback'</span>)</span><br><span class=\"line\">jsonp(<span class=\"string\">'http://baidu.com/index.html?name=\"zjn\"'</span>, &#123; <span class=\"attr\">id</span>: <span class=\"number\">34</span> &#125;, <span class=\"string\">'myCallback'</span>)</span><br></pre></td></tr></table></figure>\n<p><strong><u>编写一个函数判断参数是否是数组类型，如果是返回 true</u></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">arg</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (arg <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方法二：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">arg</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(arg) == <span class=\"string\">'[object Array]'</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方法三：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">arg</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg.__proto__.constructor.name == <span class=\"string\">'Array'</span> ？<span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><u>关于对象的length属性：</u></strong></p>\n<p>Window.length //返回在当前窗口中frames的数量（包括IFRAMES）</p>\n<p>String.length //返回字符串中的字符数目</p>\n<p>Function.length //获取一个函数定义的参数数目</p>\n<p>Array.length //返回数组中元素的数目</p>\n<p><strong>如何获取 url 中的 query 字段对应的值，比如：<a href=\"https://m.mobike.com/?source=part1\" target=\"_blank\" rel=\"noopener\">https://m.mobike.com?source=part1</a>，编写一个函数获取 source 对应的值 part1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> query = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> p = url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sourcePos = p.indexOf(<span class=\"string\">'source'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sourcePos &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.indexOf(<span class=\"string\">'&amp;'</span>, sourcePos+<span class=\"number\">7</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> p.substring(sourcePos+<span class=\"number\">7</span>,p.indexOf(<span class=\"string\">'&amp;'</span>, sourcePos+<span class=\"number\">7</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> p.substring(sourcePos+<span class=\"number\">7</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong><u>关于IE的event对象支持的方法：</u></strong></p>\n<p>IE的所有事件对象都支持的方法和属性：</p>\n<ul>\n<li>cancelBubble 默认为false，设置为true就可以取消事件冒泡</li>\n<li>returnValue 默认为true，设置为false可以取消事件的默认行为</li>\n<li>srcElement 对于生成事件的 Window 对象、Document 对象或 Element 对象的引用</li>\n<li>type 被触发事件的类型</li>\n</ul>\n<p>DOM事件的方法（IE的事件模型不支持）：</p>\n<ul>\n<li>initEvent() 初始化新创建的 Event 对象的属性</li>\n<li>preventDefault() 通知浏览器不要执行与事件关联的默认动作</li>\n<li>stopPropagation() 不再派发事件</li>\n</ul>\n<p><u><strong>JavaScript的函数调用有哪几种方式？请举例说明，并分析其不同之处。</strong></u></p>\n<p><img src=\"https://uploadfiles.nowcoder.com/images/20180906/5405985_1536239169184_7CB0EB2AC29A9E988352087AAD2B0C2F\" alt=\"img\"></p>\n<p><strong><u>以下 javascript 代码，在浏览器中运行的结果是</u></strong></p>\n<p><img src=\"https://uploadfiles.nowcoder.net/images/20161128/5918115_1480305918764_CF08B543645A55F242CA55EB20727AE6\" alt=\"img\"></p>\n<p>先全部输出first，然后全部输出second。</p>\n<p>js 是运行于单线程环境中，定时器作用是在规定时间内将事件加入执行队列，而加入的前提是当前事件队列没有任何东西。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><strong><u>和后端 API 服务通信的方式有哪些</u></strong></p>\n<ol>\n<li>ajax</li>\n<li>websocket</li>\n<li>SSE</li>\n<li>服务器端渲染</li>\n</ol>\n<p><strong><u>POST 提交的时候，content-type 有哪几种？</u></strong></p>\n<p>常见的有四种</p>\n<ol>\n<li>application/x-www-form-urlencoded</li>\n<li>application/json </li>\n<li>multipart/form-data</li>\n<li>text/xml </li>\n</ol>\n<p><strong><u>对前端工程化的理解，以及任意构建工具(webpack、gulp、grunt、rollup)的某一个使用的一些描述</u></strong></p>\n<p><strong>前端工程化</strong></p>\n<p><a href=\"https://blog.csdn.net/mayfla/article/details/78697020\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mayfla/article/details/78697020</a></p>\n<p><strong>webpack</strong></p>\n<p>webpack是一个前端模块化方案，更侧重模块打包，我们可以把开发中的所有资源（图片、js文件、css文件等）都看成模块，通过loader（加载器）和plugins（插件）对资源进行处理，打包成符合生产环境部署的前端资源。</p>\n<p><strong><u>Node.js 的核心模块</u></strong></p>\n<p>HTTP模块、URL模块、Query Strings模块、File System模块、Path模块、Global模块。</p>\n<p><strong><u>ajax事件有哪些</u></strong></p>\n<p><img src=\"https://uploadfiles.nowcoder.net/images/20170311/6901516_1489199810009_E2168FD8E97D4BF6646E2043D52753FD\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p><u><strong>元素的alt和title有什么异同？</strong></u></p>\n<p>alt和title同时设置的时候，alt作为图片的替代文字出现，title是图片的解释文字。</p>\n<p><strong><u>关于html5标签？</u></strong></p>\n<p>\\&lt;audio> 标签定义声音，比如音乐或其他音频流。<br>\\&lt;canvas> 标签定义图形，比如图表和其他图像。\\&lt;canvas> 标签只是图形容器，必须使用脚本来绘制图形。<br>\\&lt;article>标签定义外部的内容。比如来自一个外部的新闻提供者的一篇新的文章，或者来自 blog 的文本，或者是来自论坛的文本。亦或是来自其他外部源内容。<br>\\&lt;menu> 标签定义命令的列表或菜单。\\&lt;menu> 标签用于上下文菜单、工具栏以及用于列出表单控件和命令。command 元素表示用户能够调用的命令。\\&lt;command> 标签可以定义命令按钮，比如单选按钮、复选框或按钮。只有当 command 元素位于 menu 元素内时，该元素才是可见的。否则不会显示这个元素，但是可以用它规定键盘快捷键。 </p>\n<p><strong><u>有关HTML的Doctype和严格模式与混杂模式？</u></strong></p>\n<blockquote>\n<p><strong>文档类型</strong></p>\n<p> DTD（文档类型定义）是一组机器可读的规则，他们定义 XML 或 HTML 的特定版本中允许有什么，不允许有什么。在解析网页时，浏览器将使用这些规则检查页面的有效性并且采取相应的措施。浏览器通过分析页面的 DOCTYPE 声明来了解要使用哪个 DTD ，由此知道要使用 HTML 的哪个版本。</p>\n<p> DOCTYPE 当前有两种风格，严格（ strict ）和过渡（ transitional ）。过渡 DOCTYPE 的目的是帮助开发人员从老版本迁移到新版本。</p>\n<p>如果发送具有正确的 MIME 类型的 XHTML 文档，理解 XML 的浏览器将不显示无效的页面。</p>\n<p> <strong>浏览器模式</strong></p>\n<pre><code>浏览器有两种呈现模式：标准模式和混杂模式（quirks mode，也叫兼容模式）。在标准模式中，浏览器根据规范呈现页面；在混杂模式中，页面以一种比较宽松的向后兼容的方式显示。\n</code></pre><p><strong> DOCTYPE 切换 </strong></p>\n<p>对于 HTML 4.01 文档，</p>\n<ul>\n<li>包含严格 DTD 的 DOCTYPE 常常导致页面以标准模式呈现。</li>\n<li>包含过度 DTD 和 URI 的 DOCTYPE 也导致页面以标准模式呈现。</li>\n<li>但是有过度 DTD 而没有 URI 会导致页面以混杂模式呈现。</li>\n<li>DOCTYPE 不存在或形式不正确会导致 HTML 和 XHTML 文档以混杂模式呈现。</li>\n</ul>\n</blockquote>\n<p><strong><u>NOSCRIPT标签是做什么用的？</u></strong></p>\n<p>noscript 元素用来定义在脚本未被执行时的替代内容（文本）。</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p><strong><u>关于CSS的position属性？</u></strong></p>\n<p>static没有定位，元素出现在正常的流中。</p>\n<p>fixed是相对于窗口的固定定位。</p>\n<p><strong><u>关于border:none以及border:0?</u></strong></p>\n<p>当定义border:none时，表示无边框样式，浏览器并不会对边框进行渲染，也就没有实际的宽度；</p>\n<p>定义边框时，除了设置宽度外，还必须设置边框的样式才能显示出来。</p>\n<p><strong><u>关于CSS sprites图片字节？</u></strong></p>\n<p>CSS Sprites能减少图片的字节，曾经比较过多次，3张图片合并成1张图片的字节总是小于这3张图片的字节总和。</p>\n<p><strong><u>关于浏览器引擎？</u></strong></p>\n<p>Wekbit是一个开源的Web浏览器引擎，也就是浏览器的内核。Apple的Safari, Google的Chrome, Nokia S60平台的默认浏览器，Apple手机的默认浏览器，Android手机的默认浏览器均采用的Webkit作为器浏览器内核。Webkit的采用程度由 此可见一斑，理所当然的成为了当今主流的三大浏览器内核之一。</p>\n<p>另外两个分别是Gecko和Trident，大名鼎鼎的Firefox便是使用的Gecko 内核，而微软的IE系列则使用的是Trident内核。</p>\n<p>还有Presto: Opera的内核，但由于市场选择问题，主要应用在手机平台–Opera mini。</p>\n<p>另外，搜狗浏览器是双核的，双核并不是指一个页面由2个内核同时处理,而是所有网页（通常是标准通用标记语言的应用超文本标记语言）由webkit内核处理,只有银行网站用IE内核。</p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p><u><strong>flash和js通过什么类如何交互?</strong></u></p>\n<p>ExternalInterface。Flash提供了ExternalInterface接口与JavaScript通信，ExternalInterface有两个方法，call和addCallback，call的作用是让Flash调用js里的方法，addCallback是用来注册flash函数让js调用。</p>\n<p><strong><u>有关浏览器中使用js跨域获取数据？</u></strong></p>\n<p>只要<u>协议 、 域名 、 端口</u>有任何一个不同, 都被当作是 <strong>不同</strong> 的域。</p>\n<blockquote>\n<p><strong>1.CORS</strong></p>\n<p>CORS（Cross-Origin Resource Sharing，跨资源共享），基本思想是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应的成功或失败。即给请求附加一个额外的Origin头部，其中包含请求页面的源信息（协议、域名和端口），以便服务器根据这个头部决定是否给予响应。</p>\n<p><strong>2.document.domain</strong></p>\n<p>将页面的document.domain设置为相同的值，页面间可以互相访问对方的JavaScript对象。</p>\n<p>注意：</p>\n<p>不能将值设置为URL中不包含的域；</p>\n<p>松散的域名不能再设置为紧绷的域名。</p>\n<p><strong>3.图像Ping</strong></p>\n<p>var img=new Image();</p>\n<p>img.onload=img.onerror=function(){</p>\n<p>… …</p>\n<p>}</p>\n<p>img.src=”url?name=value”;</p>\n<p>请求数据通过查询字符串的形式发送，响应可以是任意内容，通常是像素图或204响应。</p>\n<p>图像Ping最常用于跟踪用户点击页面或动态广告曝光次数。</p>\n<p>缺点：</p>\n<p>只能发送GET请求；</p>\n<p>无法访问服务器的响应文本，只能用于浏览器与服务器间的单向通信。</p>\n<p><strong>4.Jsonp</strong></p>\n<p>var script=document.createElement(“script”);</p>\n<p>script.src=”url?callback=handleResponse”;</p>\n<p>document.body.insertBefore(script,document.body.firstChild);</p>\n<p>JSONP由两部分组成：回调函数和数据</p>\n<p>回调函数是接收到响应时应该在页面中调用的函数，其名字一般在请求中指定。</p>\n<p>数据是传入回调函数中的JSON数据。</p>\n<p>优点：</p>\n<p>能够直接访问响应文本，可用于浏览器与服务器间的双向通信。</p>\n<p>缺点：</p>\n<p>JSONP从其他域中加载代码执行，其他域可能不安全；</p>\n<p>难以确定JSONP请求是否失败。</p>\n<p><strong>5.Comet</strong></p>\n<p>Comet可实现服务器向浏览器推送数据。</p>\n<p>Comet是实现方式：长轮询和流</p>\n<p>短轮询即浏览器定时向服务器发送请求，看有没有数据更新。</p>\n<p>长轮询即浏览器向服务器发送一个请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据后，浏览器关闭连接，随即又向服务器发起一个新请求。其优点是所有浏览器都支持，使用XHR对象和setTimeout()即可实现。</p>\n<p>流即浏览器向服务器发送一个请求，而服务器保持连接打开，然后周期性地向浏览器发送数据，页面的整个生命周期内只使用一个HTTP连接。</p>\n<p><strong>6.WebSocket</strong></p>\n<p>WebSocket可在一个单独的持久连接上提供全双工、双向通信。</p>\n<p>WebSocket使用自定义协议，未加密的连接时ws://；加密的链接是wss://。</p>\n<p>var webSocket=new WebSocket(“ws://“);</p>\n<p>webSocket.send(message);</p>\n<p>webSocket.onmessage=function(event){</p>\n<p>var data=event.data;</p>\n<p>… ….</p>\n<p>}</p>\n<p>注意：</p>\n<p>必须给WebSocket构造函数传入绝对URL；</p>\n<p>WebSocket可以打开任何站点的连接，是否会与某个域中的页面通信，完全取决于服务器；</p>\n<p>WebSocket只能发送纯文本数据，对于复杂的数据结构，在发送之前必须进行序列化JSON.stringify(message))。</p>\n<p>优点：</p>\n<p>在客户端和服务器之间发送非常少的数据，减少字节开销。</p>\n</blockquote>\n<p><strong><u>如何获取一个元素节点（id 为 test）的父元素，找到之后如何删除这个元素节点（id 为 test）？</u></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testNode = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> parentNode = testNode.parentNode;</span><br><span class=\"line\">parentNode.removeChild(testNode);</span><br></pre></td></tr></table></figure>\n<p><strong><u>!编写一个 js 函数 jsonp 的处理函数:</u></strong></p>\n<p><a href=\"https://blog.csdn.net/u013830811/article/details/52718664\" target=\"_blank\" rel=\"noopener\">讲解链接</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 手写jsonp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCallback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url, data, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// data是否是字符串，是的话证明data值就是函数名</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">        callback = data</span><br><span class=\"line\">        data = &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拼接data</span></span><br><span class=\"line\">    url += url.indexOf(<span class=\"string\">'?'</span>) === <span class=\"number\">-1</span> ? <span class=\"string\">'?'</span> : <span class=\"string\">'&amp;'</span></span><br><span class=\"line\">    url += <span class=\"string\">'callback='</span> + callback</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">        params += <span class=\"string\">'&amp;'</span> + i + <span class=\"string\">'='</span> + data[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    url += params</span><br><span class=\"line\">    <span class=\"comment\">// 在页面插入script标签</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</span><br><span class=\"line\">    script.setAttribute(<span class=\"string\">'src'</span>, url)</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'head'</span>).appendChild(script)</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">jsonp(<span class=\"string\">'http://baidu.com/index.html'</span>, &#123; <span class=\"attr\">id</span>: <span class=\"number\">34</span> &#125;, <span class=\"string\">'myCallback'</span>)</span><br><span class=\"line\">jsonp(<span class=\"string\">'http://baidu.com/index.html?name=\"zjn\"'</span>, &#123; <span class=\"attr\">id</span>: <span class=\"number\">34</span> &#125;, <span class=\"string\">'myCallback'</span>)</span><br></pre></td></tr></table></figure>\n<p><strong><u>编写一个函数判断参数是否是数组类型，如果是返回 true</u></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">arg</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (arg <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方法二：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">arg</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(arg) == <span class=\"string\">'[object Array]'</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方法三：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">arg</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg.__proto__.constructor.name == <span class=\"string\">'Array'</span> ？<span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><u>关于对象的length属性：</u></strong></p>\n<p>Window.length //返回在当前窗口中frames的数量（包括IFRAMES）</p>\n<p>String.length //返回字符串中的字符数目</p>\n<p>Function.length //获取一个函数定义的参数数目</p>\n<p>Array.length //返回数组中元素的数目</p>\n<p><strong>如何获取 url 中的 query 字段对应的值，比如：<a href=\"https://m.mobike.com/?source=part1\" target=\"_blank\" rel=\"noopener\">https://m.mobike.com?source=part1</a>，编写一个函数获取 source 对应的值 part1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> query = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> p = url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sourcePos = p.indexOf(<span class=\"string\">'source'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sourcePos &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.indexOf(<span class=\"string\">'&amp;'</span>, sourcePos+<span class=\"number\">7</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> p.substring(sourcePos+<span class=\"number\">7</span>,p.indexOf(<span class=\"string\">'&amp;'</span>, sourcePos+<span class=\"number\">7</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> p.substring(sourcePos+<span class=\"number\">7</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong><u>关于IE的event对象支持的方法：</u></strong></p>\n<p>IE的所有事件对象都支持的方法和属性：</p>\n<ul>\n<li>cancelBubble 默认为false，设置为true就可以取消事件冒泡</li>\n<li>returnValue 默认为true，设置为false可以取消事件的默认行为</li>\n<li>srcElement 对于生成事件的 Window 对象、Document 对象或 Element 对象的引用</li>\n<li>type 被触发事件的类型</li>\n</ul>\n<p>DOM事件的方法（IE的事件模型不支持）：</p>\n<ul>\n<li>initEvent() 初始化新创建的 Event 对象的属性</li>\n<li>preventDefault() 通知浏览器不要执行与事件关联的默认动作</li>\n<li>stopPropagation() 不再派发事件</li>\n</ul>\n<p><u><strong>JavaScript的函数调用有哪几种方式？请举例说明，并分析其不同之处。</strong></u></p>\n<p><img src=\"https://uploadfiles.nowcoder.com/images/20180906/5405985_1536239169184_7CB0EB2AC29A9E988352087AAD2B0C2F\" alt=\"img\"></p>\n<p><strong><u>以下 javascript 代码，在浏览器中运行的结果是</u></strong></p>\n<p><img src=\"https://uploadfiles.nowcoder.net/images/20161128/5918115_1480305918764_CF08B543645A55F242CA55EB20727AE6\" alt=\"img\"></p>\n<p>先全部输出first，然后全部输出second。</p>\n<p>js 是运行于单线程环境中，定时器作用是在规定时间内将事件加入执行队列，而加入的前提是当前事件队列没有任何东西。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><strong><u>和后端 API 服务通信的方式有哪些</u></strong></p>\n<ol>\n<li>ajax</li>\n<li>websocket</li>\n<li>SSE</li>\n<li>服务器端渲染</li>\n</ol>\n<p><strong><u>POST 提交的时候，content-type 有哪几种？</u></strong></p>\n<p>常见的有四种</p>\n<ol>\n<li>application/x-www-form-urlencoded</li>\n<li>application/json </li>\n<li>multipart/form-data</li>\n<li>text/xml </li>\n</ol>\n<p><strong><u>对前端工程化的理解，以及任意构建工具(webpack、gulp、grunt、rollup)的某一个使用的一些描述</u></strong></p>\n<p><strong>前端工程化</strong></p>\n<p><a href=\"https://blog.csdn.net/mayfla/article/details/78697020\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mayfla/article/details/78697020</a></p>\n<p><strong>webpack</strong></p>\n<p>webpack是一个前端模块化方案，更侧重模块打包，我们可以把开发中的所有资源（图片、js文件、css文件等）都看成模块，通过loader（加载器）和plugins（插件）对资源进行处理，打包成符合生产环境部署的前端资源。</p>\n<p><strong><u>Node.js 的核心模块</u></strong></p>\n<p>HTTP模块、URL模块、Query Strings模块、File System模块、Path模块、Global模块。</p>\n<p><strong><u>ajax事件有哪些</u></strong></p>\n<p><img src=\"https://uploadfiles.nowcoder.net/images/20170311/6901516_1489199810009_E2168FD8E97D4BF6646E2043D52753FD\" alt=\"img\"></p>\n"},{"title":"ubuntu18.04开机慢的解决办法","toc":false,"date":"2018-09-24T04:49:31.000Z","_content":"\n在终端中输入：\n\n```powershell\nsudo gedit /etc/default/grub \n```\n\n将打开的文件中的`GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"`\n\n修改为`GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash noresume\"`\n\n保存退出后在终端中运行下面的命令来让修改生效：\n\n```powershell\nsudo update-grub\n```\n\n重启电脑感受一下吧！","source":"_posts/ubuntu18-04开机慢的解决办法.md","raw":"---\ntitle: ubuntu18.04开机慢的解决办法\ntoc: false\ndate: 2018-09-24 12:49:31\ncategories:\n- methods\ntags:\n- ubuntu\n---\n\n在终端中输入：\n\n```powershell\nsudo gedit /etc/default/grub \n```\n\n将打开的文件中的`GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"`\n\n修改为`GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash noresume\"`\n\n保存退出后在终端中运行下面的命令来让修改生效：\n\n```powershell\nsudo update-grub\n```\n\n重启电脑感受一下吧！","slug":"ubuntu18-04开机慢的解决办法","published":1,"updated":"2018-09-24T05:19:39.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0q001qcragcim0ytgm","content":"<p>在终端中输入：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure>\n<p>将打开的文件中的<code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;</code></p>\n<p>修改为<code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash noresume&quot;</code></p>\n<p>保存退出后在终端中运行下面的命令来让修改生效：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>重启电脑感受一下吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在终端中输入：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure>\n<p>将打开的文件中的<code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;</code></p>\n<p>修改为<code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash noresume&quot;</code></p>\n<p>保存退出后在终端中运行下面的命令来让修改生效：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>重启电脑感受一下吧！</p>\n"},{"title":"ubuntu下创建文件夹快捷方式","toc":false,"date":"2018-09-01T09:22:28.000Z","_content":"\n\n\n```powershell\nsudo ln -sT [srcDir] [dstDir/name]\n```\n\n例如创建`hexo`文件夹的桌面快捷方式：\n\n```powershell\nsudo ln -sT '/media/zmj/本地磁盘/hexo' '/home/zmj/Desktop/hexo'\n```\n\n\n\n[参考链接](https://www.cnblogs.com/tergeldev/p/6336836.html)","source":"_posts/ubuntu下创建文件夹快捷方式.md","raw":"---\ntitle: ubuntu下创建文件夹快捷方式\ntoc: false\ndate: 2018-09-01 17:22:28\ncategories:\n- methods\ntags:\n- ubuntu\n- 快捷方式\n---\n\n\n\n```powershell\nsudo ln -sT [srcDir] [dstDir/name]\n```\n\n例如创建`hexo`文件夹的桌面快捷方式：\n\n```powershell\nsudo ln -sT '/media/zmj/本地磁盘/hexo' '/home/zmj/Desktop/hexo'\n```\n\n\n\n[参考链接](https://www.cnblogs.com/tergeldev/p/6336836.html)","slug":"ubuntu下创建文件夹快捷方式","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0r001scragx8s7x95v","content":"<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sT [srcDir] [dstDir/name]</span><br></pre></td></tr></table></figure>\n<p>例如创建<code>hexo</code>文件夹的桌面快捷方式：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sT <span class=\"string\">'/media/zmj/本地磁盘/hexo'</span> <span class=\"string\">'/home/zmj/Desktop/hexo'</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/tergeldev/p/6336836.html\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sT [srcDir] [dstDir/name]</span><br></pre></td></tr></table></figure>\n<p>例如创建<code>hexo</code>文件夹的桌面快捷方式：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -sT <span class=\"string\">'/media/zmj/本地磁盘/hexo'</span> <span class=\"string\">'/home/zmj/Desktop/hexo'</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/tergeldev/p/6336836.html\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n"},{"title":"ubuntu下无法将iNode绑定到侧边栏的解决办法","toc":false,"date":"2018-09-01T09:43:52.000Z","_content":"\n\n\n\n\n将`iNodeClient.desktop`添加到`/usr/share/applications`中（`cp`命令）后，右键侧边栏上打开的iNode的图标即可`Add to Favorites`。","source":"_posts/ubuntu下无法将iNode绑定到侧边栏的解决办法.md","raw":"---\ntitle: ubuntu下无法将iNode绑定到侧边栏的解决办法\ntoc: false\ndate: 2018-09-01 17:43:52\ncategories:\n- methods\ntags:\n- ubuntu\n- iNode\n---\n\n\n\n\n\n将`iNodeClient.desktop`添加到`/usr/share/applications`中（`cp`命令）后，右键侧边栏上打开的iNode的图标即可`Add to Favorites`。","slug":"ubuntu下无法将iNode绑定到侧边栏的解决办法","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0u001wcragc5jbeycg","content":"<p>将<code>iNodeClient.desktop</code>添加到<code>/usr/share/applications</code>中（<code>cp</code>命令）后，右键侧边栏上打开的iNode的图标即可<code>Add to Favorites</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>将<code>iNodeClient.desktop</code>添加到<code>/usr/share/applications</code>中（<code>cp</code>命令）后，右键侧边栏上打开的iNode的图标即可<code>Add to Favorites</code>。</p>\n"},{"title":"关于hexo markdown添加的图片在github page中无法显示的问题","date":"2018-03-30T16:21:18.000Z","_content":"\n**云端**\n\n试了很多网站的图片，发现主要是CSDN和博客园的图片无法显示。\n\n推荐用Bing或者Google搜索外网图片添加。\n\n**本地**\n\n在source目录下新建images目录，将要添加的图片存放在这个目录下，md引用时使用/images/...","source":"_posts/关于hexo-markdown添加的图片在github-page中无法显示的问题.md","raw":"---\ntitle: 关于hexo markdown添加的图片在github page中无法显示的问题\ndate: 2018-03-31 00:21:18\ncategories: \n- methods\ntags:\n- hexo\n- markdown\n---\n\n**云端**\n\n试了很多网站的图片，发现主要是CSDN和博客园的图片无法显示。\n\n推荐用Bing或者Google搜索外网图片添加。\n\n**本地**\n\n在source目录下新建images目录，将要添加的图片存放在这个目录下，md引用时使用/images/...","slug":"关于hexo-markdown添加的图片在github-page中无法显示的问题","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0x001zcrag9y5xq2wg","content":"<p><strong>云端</strong></p>\n<p>试了很多网站的图片，发现主要是CSDN和博客园的图片无法显示。</p>\n<p>推荐用Bing或者Google搜索外网图片添加。</p>\n<p><strong>本地</strong></p>\n<p>在source目录下新建images目录，将要添加的图片存放在这个目录下，md引用时使用/images/…</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>云端</strong></p>\n<p>试了很多网站的图片，发现主要是CSDN和博客园的图片无法显示。</p>\n<p>推荐用Bing或者Google搜索外网图片添加。</p>\n<p><strong>本地</strong></p>\n<p>在source目录下新建images目录，将要添加的图片存放在这个目录下，md引用时使用/images/…</p>\n"},{"title":"使用TensorBoard可视化工具","date":"2018-04-01T05:04:00.000Z","_content":"\n图表可视化在理解和调试时显得非常有帮助。\n\n# 安装：\n\n```shell\npip3 install --upgrade tensorboard\n```\n\n# 名称域（Name scoping）和节点（Node）\n\n典型的TensorFlow有数以千计的节点，为了简单起见，我们可以为变量名（节点）划分范围。\n\n这个范围称为名称域，即`tf.name_scope('xxx')`，其中xxx是这个名称域的名字。\n\n在定义好名称域后，TensorBoard的显示界面里这个名称域内的变量并不会显示，而是只显示一个xxx节点，这个点是可展开的，展开后才会显示这个名称域内的节点。\n\nTensorFlow 图表有两种连接关系：数据依赖和控制依赖。数据依赖显示两个操作之间的tensor流程，用实心箭头表示，控制依赖用虚线表示。\n\n具体的符号表：\n\n| 符号                                       | 意义                                 |\n| ---------------------------------------- | ---------------------------------- |\n| ![名称域](http://www.tensorfly.cn/tfdoc/images/namespace_node.png) | *High-level*节点代表一个名称域，双击则展开一个高层节点。 |\n| ![断线节点序列](http://www.tensorfly.cn/tfdoc/images/horizontal_stack.png) | 彼此之间不连接的有限个节点序列。                   |\n| ![相连节点序列](http://www.tensorfly.cn/tfdoc/images/vertical_stack.png) | 彼此之间相连的有限个节点序列。                    |\n| ![操作节点](http://www.tensorfly.cn/tfdoc/images/op_node.png) | 一个单独的操作节点。                         |\n| ![常量节点](http://www.tensorfly.cn/tfdoc/images/constant.png) | 一个常量结点。                            |\n| ![摘要节点](http://www.tensorfly.cn/tfdoc/images/summary.png) | 一个摘要节点。                            |\n| ![数据流边](http://www.tensorfly.cn/tfdoc/images/dataflow_edge.png) | 显示各操作间的数据流边。                       |\n| ![控制依赖边](http://www.tensorfly.cn/tfdoc/images/control_edge.png) | 显示各操作间的控制依赖边。                      |\n| ![引用边](http://www.tensorfly.cn/tfdoc/images/reference_edge.png) | 引用边，表示出度操作节点可以使入度tensor发生变化。       |\n\n# Scalar\n\n使用summary scalar（标量统计）:\n\n```python\nxentropy = ... # xentropy的定义\ntf.summary.scalar('xentropy_mean', xentropy)\t# xentropy_mean为定义的xentropy的标签名\n```\n\n![MNIST TensorBoard](http://www.tensorfly.cn/tfdoc/images/mnist_tensorboard.png)\n\n# Histogram\n\n使用summary histogram统计某个Tensor的取值分布:\n\n```python\n with tf.name_scope('layer1'):\n          with tf.name_scope('biases'):\n              biases = ... # 具体声明这里不再给出\n              tf.summary.histogram('layer1' + '/biases', biases)\n\n          with tf.name_scope('weights'):\n              weights= ...\n              tf.summary.histogram('layer1' + '/weights', weights)\n        \n          with tf.name_scope('outputs'):\n              outputs= ...\n              tf.summary.histogram('layer1' + '/weights', outputs)\n```\n\n\n\n[![Tensorboard 可视化好帮手 2](https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png)](https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png)\n\n# 合并Summary\n\n```python\n\n# 将各个summary操作合并为一个操作merged_summary_op\nmerged_summary_op = tf.summary.merge_all()\n# 数据写入器，'/logs'为训练日志的存储路径\nsummary_writer = tf.summary.FileWriter('./logs', sess.graph) \n\ntotal_step = 0\nwhile training:\n  total_step += 1\n  session.run(training_op)\n  if total_step % 100 == 0:\n    ...\n    summary_str = sess.run(merged_summary_op, feed_dict{...}) # 注意这里必须加feed_dict否则会报错\n    summary_writer.add_summary(summary_str, total_step) # 使用summary_writer将数据写入磁盘\n```\n\n# 生成TensorBoard界面\n\n运行添加了各种summary的操作的代码后，打开cmd，进入代码所在文件夹，输入：\n\n```shell\ntensorboard --logdir=logs\n```\n\n按照运行后的提示：\n\n```shell\nTensorBoard 1.7.0 at http://MengjieZhang:6006 (Press CTRL+C to quit)\n```\n\n打开浏览器，输入地址 `http://MengjieZhang:6006` 即可以看到TensorBoard界面。\n\n\n\n# 具体代码：\n\n[input_data下载链接](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/mnist/input_data.py)\n\n```python\nimport input_data\nimport tensorflow as tf\n\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\n\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nmnistGraph = tf.Graph()\nwith mnistGraph.as_default():\n    with tf.name_scope('input'):\n        x = tf.placeholder(\"float\", shape=[None, 784])\n        y_ = tf.placeholder(\"float\", shape=[None, 10])\n        W = tf.Variable(tf.zeros([784,10]))\n        b = tf.Variable(tf.zeros([10]))\n\n    with tf.name_scope('hidden1'):\n        W_conv1 = weight_variable([5, 5, 1, 32])\n        b_conv1 = bias_variable([32])\n        x_image = tf.reshape(x, [-1,28,28,1])\n        h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\n        h_pool1 = max_pool_2x2(h_conv1)\n        tf.summary.histogram('W_conv1', W_conv1)\n        tf.summary.histogram('b_conv1', b_conv1)\n\n    with tf.name_scope('hidden2'):\n        W_conv2 = weight_variable([5, 5, 32, 64])\n        b_conv2 = bias_variable([64])\n        h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n        h_pool2 = max_pool_2x2(h_conv2)\n        tf.summary.histogram('W_conv2', W_conv2)\n        tf.summary.histogram('b_conv2', b_conv2)\n\n    with tf.name_scope('fc1'):\n        W_fc1 = weight_variable([7 * 7 * 64, 1024])\n        b_fc1 = bias_variable([1024])\n        h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\n        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n        keep_prob = tf.placeholder(\"float\")\n        h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n        tf.summary.histogram('W_fc1', W_fc1)\n        tf.summary.histogram('b_fc1', b_fc1)\n\n    with tf.name_scope('fc2'):\n        W_fc2 = weight_variable([1024, 10])\n        b_fc2 = bias_variable([10])\n        y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n        tf.summary.histogram('W_fc2', W_fc2)\n        tf.summary.histogram('b_fc2', b_fc2)\n\n    with tf.name_scope('train'):\n        cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))\n        train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n        correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n        tf.summary.scalar('loss', cross_entropy)\n        tf.summary.scalar('accuracy', accuracy)      \n\nwith tf.Session(graph=mnistGraph) as sess:\n    sess.run(tf.initialize_all_variables())\n    merged_summary_op = tf.summary.merge_all() \n    summary_writer = tf.summary.FileWriter('./logs', sess.graph) \n    for i in range(3000):\n      batch = mnist.train.next_batch(50)\n      if i%100 == 0:\n        train_accuracy = accuracy.eval(feed_dict={\n            x:batch[0], y_: batch[1], keep_prob: 1.0})\n        print (\"step %d, training accuracy %g\" % (i, train_accuracy))\n        summary_str = sess.run(merged_summary_op, feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n        summary_writer.add_summary(summary_str, i) \n      train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n\n    accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))\n    good = 0\n    total = 0\n    for i in range(10):\n        testSet = mnist.test.next_batch(50)\n        good += accuracy_sum.eval(feed_dict={ x: testSet[0], y_: testSet[1], keep_prob: 1.0})\n        total += testSet[0].shape[0]\n    print (\"test accuracy %g\"%(good/total))\n```\n\n运行后的TensorBoard界面：\n\n![运行后的TensorBoard界面](http://chuantu.biz/t6/270/1522570657x1822611335.png)","source":"_posts/使用TensorBoard可视化工具.md","raw":"---\ntitle: 使用TensorBoard可视化工具\ndate: 2018-04-01 13:04:00\ncategories: \n- deep learning\ntags:\n- TensorFlow\n- TensorBoard\n---\n\n图表可视化在理解和调试时显得非常有帮助。\n\n# 安装：\n\n```shell\npip3 install --upgrade tensorboard\n```\n\n# 名称域（Name scoping）和节点（Node）\n\n典型的TensorFlow有数以千计的节点，为了简单起见，我们可以为变量名（节点）划分范围。\n\n这个范围称为名称域，即`tf.name_scope('xxx')`，其中xxx是这个名称域的名字。\n\n在定义好名称域后，TensorBoard的显示界面里这个名称域内的变量并不会显示，而是只显示一个xxx节点，这个点是可展开的，展开后才会显示这个名称域内的节点。\n\nTensorFlow 图表有两种连接关系：数据依赖和控制依赖。数据依赖显示两个操作之间的tensor流程，用实心箭头表示，控制依赖用虚线表示。\n\n具体的符号表：\n\n| 符号                                       | 意义                                 |\n| ---------------------------------------- | ---------------------------------- |\n| ![名称域](http://www.tensorfly.cn/tfdoc/images/namespace_node.png) | *High-level*节点代表一个名称域，双击则展开一个高层节点。 |\n| ![断线节点序列](http://www.tensorfly.cn/tfdoc/images/horizontal_stack.png) | 彼此之间不连接的有限个节点序列。                   |\n| ![相连节点序列](http://www.tensorfly.cn/tfdoc/images/vertical_stack.png) | 彼此之间相连的有限个节点序列。                    |\n| ![操作节点](http://www.tensorfly.cn/tfdoc/images/op_node.png) | 一个单独的操作节点。                         |\n| ![常量节点](http://www.tensorfly.cn/tfdoc/images/constant.png) | 一个常量结点。                            |\n| ![摘要节点](http://www.tensorfly.cn/tfdoc/images/summary.png) | 一个摘要节点。                            |\n| ![数据流边](http://www.tensorfly.cn/tfdoc/images/dataflow_edge.png) | 显示各操作间的数据流边。                       |\n| ![控制依赖边](http://www.tensorfly.cn/tfdoc/images/control_edge.png) | 显示各操作间的控制依赖边。                      |\n| ![引用边](http://www.tensorfly.cn/tfdoc/images/reference_edge.png) | 引用边，表示出度操作节点可以使入度tensor发生变化。       |\n\n# Scalar\n\n使用summary scalar（标量统计）:\n\n```python\nxentropy = ... # xentropy的定义\ntf.summary.scalar('xentropy_mean', xentropy)\t# xentropy_mean为定义的xentropy的标签名\n```\n\n![MNIST TensorBoard](http://www.tensorfly.cn/tfdoc/images/mnist_tensorboard.png)\n\n# Histogram\n\n使用summary histogram统计某个Tensor的取值分布:\n\n```python\n with tf.name_scope('layer1'):\n          with tf.name_scope('biases'):\n              biases = ... # 具体声明这里不再给出\n              tf.summary.histogram('layer1' + '/biases', biases)\n\n          with tf.name_scope('weights'):\n              weights= ...\n              tf.summary.histogram('layer1' + '/weights', weights)\n        \n          with tf.name_scope('outputs'):\n              outputs= ...\n              tf.summary.histogram('layer1' + '/weights', outputs)\n```\n\n\n\n[![Tensorboard 可视化好帮手 2](https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png)](https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png)\n\n# 合并Summary\n\n```python\n\n# 将各个summary操作合并为一个操作merged_summary_op\nmerged_summary_op = tf.summary.merge_all()\n# 数据写入器，'/logs'为训练日志的存储路径\nsummary_writer = tf.summary.FileWriter('./logs', sess.graph) \n\ntotal_step = 0\nwhile training:\n  total_step += 1\n  session.run(training_op)\n  if total_step % 100 == 0:\n    ...\n    summary_str = sess.run(merged_summary_op, feed_dict{...}) # 注意这里必须加feed_dict否则会报错\n    summary_writer.add_summary(summary_str, total_step) # 使用summary_writer将数据写入磁盘\n```\n\n# 生成TensorBoard界面\n\n运行添加了各种summary的操作的代码后，打开cmd，进入代码所在文件夹，输入：\n\n```shell\ntensorboard --logdir=logs\n```\n\n按照运行后的提示：\n\n```shell\nTensorBoard 1.7.0 at http://MengjieZhang:6006 (Press CTRL+C to quit)\n```\n\n打开浏览器，输入地址 `http://MengjieZhang:6006` 即可以看到TensorBoard界面。\n\n\n\n# 具体代码：\n\n[input_data下载链接](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/mnist/input_data.py)\n\n```python\nimport input_data\nimport tensorflow as tf\n\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\n\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nmnistGraph = tf.Graph()\nwith mnistGraph.as_default():\n    with tf.name_scope('input'):\n        x = tf.placeholder(\"float\", shape=[None, 784])\n        y_ = tf.placeholder(\"float\", shape=[None, 10])\n        W = tf.Variable(tf.zeros([784,10]))\n        b = tf.Variable(tf.zeros([10]))\n\n    with tf.name_scope('hidden1'):\n        W_conv1 = weight_variable([5, 5, 1, 32])\n        b_conv1 = bias_variable([32])\n        x_image = tf.reshape(x, [-1,28,28,1])\n        h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\n        h_pool1 = max_pool_2x2(h_conv1)\n        tf.summary.histogram('W_conv1', W_conv1)\n        tf.summary.histogram('b_conv1', b_conv1)\n\n    with tf.name_scope('hidden2'):\n        W_conv2 = weight_variable([5, 5, 32, 64])\n        b_conv2 = bias_variable([64])\n        h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n        h_pool2 = max_pool_2x2(h_conv2)\n        tf.summary.histogram('W_conv2', W_conv2)\n        tf.summary.histogram('b_conv2', b_conv2)\n\n    with tf.name_scope('fc1'):\n        W_fc1 = weight_variable([7 * 7 * 64, 1024])\n        b_fc1 = bias_variable([1024])\n        h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\n        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n        keep_prob = tf.placeholder(\"float\")\n        h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n        tf.summary.histogram('W_fc1', W_fc1)\n        tf.summary.histogram('b_fc1', b_fc1)\n\n    with tf.name_scope('fc2'):\n        W_fc2 = weight_variable([1024, 10])\n        b_fc2 = bias_variable([10])\n        y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n        tf.summary.histogram('W_fc2', W_fc2)\n        tf.summary.histogram('b_fc2', b_fc2)\n\n    with tf.name_scope('train'):\n        cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))\n        train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n        correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n        tf.summary.scalar('loss', cross_entropy)\n        tf.summary.scalar('accuracy', accuracy)      \n\nwith tf.Session(graph=mnistGraph) as sess:\n    sess.run(tf.initialize_all_variables())\n    merged_summary_op = tf.summary.merge_all() \n    summary_writer = tf.summary.FileWriter('./logs', sess.graph) \n    for i in range(3000):\n      batch = mnist.train.next_batch(50)\n      if i%100 == 0:\n        train_accuracy = accuracy.eval(feed_dict={\n            x:batch[0], y_: batch[1], keep_prob: 1.0})\n        print (\"step %d, training accuracy %g\" % (i, train_accuracy))\n        summary_str = sess.run(merged_summary_op, feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n        summary_writer.add_summary(summary_str, i) \n      train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n\n    accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))\n    good = 0\n    total = 0\n    for i in range(10):\n        testSet = mnist.test.next_batch(50)\n        good += accuracy_sum.eval(feed_dict={ x: testSet[0], y_: testSet[1], keep_prob: 1.0})\n        total += testSet[0].shape[0]\n    print (\"test accuracy %g\"%(good/total))\n```\n\n运行后的TensorBoard界面：\n\n![运行后的TensorBoard界面](http://chuantu.biz/t6/270/1522570657x1822611335.png)","slug":"使用TensorBoard可视化工具","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b0z0024cragpfrs01g0","content":"<p>图表可视化在理解和调试时显得非常有帮助。</p>\n<h1 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install --upgrade tensorboard</span><br></pre></td></tr></table></figure>\n<h1 id=\"名称域（Name-scoping）和节点（Node）\"><a href=\"#名称域（Name-scoping）和节点（Node）\" class=\"headerlink\" title=\"名称域（Name scoping）和节点（Node）\"></a>名称域（Name scoping）和节点（Node）</h1><p>典型的TensorFlow有数以千计的节点，为了简单起见，我们可以为变量名（节点）划分范围。</p>\n<p>这个范围称为名称域，即<code>tf.name_scope(&#39;xxx&#39;)</code>，其中xxx是这个名称域的名字。</p>\n<p>在定义好名称域后，TensorBoard的显示界面里这个名称域内的变量并不会显示，而是只显示一个xxx节点，这个点是可展开的，展开后才会显示这个名称域内的节点。</p>\n<p>TensorFlow 图表有两种连接关系：数据依赖和控制依赖。数据依赖显示两个操作之间的tensor流程，用实心箭头表示，控制依赖用虚线表示。</p>\n<p>具体的符号表：</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/namespace_node.png\" alt=\"名称域\"></td>\n<td><em>High-level</em>节点代表一个名称域，双击则展开一个高层节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/horizontal_stack.png\" alt=\"断线节点序列\"></td>\n<td>彼此之间不连接的有限个节点序列。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/vertical_stack.png\" alt=\"相连节点序列\"></td>\n<td>彼此之间相连的有限个节点序列。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/op_node.png\" alt=\"操作节点\"></td>\n<td>一个单独的操作节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/constant.png\" alt=\"常量节点\"></td>\n<td>一个常量结点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/summary.png\" alt=\"摘要节点\"></td>\n<td>一个摘要节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/dataflow_edge.png\" alt=\"数据流边\"></td>\n<td>显示各操作间的数据流边。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/control_edge.png\" alt=\"控制依赖边\"></td>\n<td>显示各操作间的控制依赖边。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/reference_edge.png\" alt=\"引用边\"></td>\n<td>引用边，表示出度操作节点可以使入度tensor发生变化。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Scalar\"><a href=\"#Scalar\" class=\"headerlink\" title=\"Scalar\"></a>Scalar</h1><p>使用summary scalar（标量统计）:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xentropy = ... <span class=\"comment\"># xentropy的定义</span></span><br><span class=\"line\">tf.summary.scalar(<span class=\"string\">'xentropy_mean'</span>, xentropy)\t<span class=\"comment\"># xentropy_mean为定义的xentropy的标签名</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.tensorfly.cn/tfdoc/images/mnist_tensorboard.png\" alt=\"MNIST TensorBoard\"></p>\n<h1 id=\"Histogram\"><a href=\"#Histogram\" class=\"headerlink\" title=\"Histogram\"></a>Histogram</h1><p>使用summary histogram统计某个Tensor的取值分布:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'layer1'</span>):</span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'biases'</span>):</span><br><span class=\"line\">             biases = ... <span class=\"comment\"># 具体声明这里不再给出</span></span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/biases'</span>, biases)</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'weights'</span>):</span><br><span class=\"line\">             weights= ...</span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/weights'</span>, weights)</span><br><span class=\"line\">       </span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'outputs'</span>):</span><br><span class=\"line\">             outputs= ...</span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/weights'</span>, outputs)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png\" alt=\"Tensorboard 可视化好帮手 2\"></a></p>\n<h1 id=\"合并Summary\"><a href=\"#合并Summary\" class=\"headerlink\" title=\"合并Summary\"></a>合并Summary</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将各个summary操作合并为一个操作merged_summary_op</span></span><br><span class=\"line\">merged_summary_op = tf.summary.merge_all()</span><br><span class=\"line\"><span class=\"comment\"># 数据写入器，'/logs'为训练日志的存储路径</span></span><br><span class=\"line\">summary_writer = tf.summary.FileWriter(<span class=\"string\">'./logs'</span>, sess.graph) </span><br><span class=\"line\"></span><br><span class=\"line\">total_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> training:</span><br><span class=\"line\">  total_step += <span class=\"number\">1</span></span><br><span class=\"line\">  session.run(training_op)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> total_step % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    summary_str = sess.run(merged_summary_op, feed_dict&#123;...&#125;) <span class=\"comment\"># 注意这里必须加feed_dict否则会报错</span></span><br><span class=\"line\">    summary_writer.add_summary(summary_str, total_step) <span class=\"comment\"># 使用summary_writer将数据写入磁盘</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"生成TensorBoard界面\"><a href=\"#生成TensorBoard界面\" class=\"headerlink\" title=\"生成TensorBoard界面\"></a>生成TensorBoard界面</h1><p>运行添加了各种summary的操作的代码后，打开cmd，进入代码所在文件夹，输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensorboard --logdir=logs</span><br></pre></td></tr></table></figure>\n<p>按照运行后的提示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TensorBoard 1.7.0 at http://MengjieZhang:6006 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>\n<p>打开浏览器，输入地址 <code>http://MengjieZhang:6006</code> 即可以看到TensorBoard界面。</p>\n<h1 id=\"具体代码：\"><a href=\"#具体代码：\" class=\"headerlink\" title=\"具体代码：\"></a>具体代码：</h1><p><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/mnist/input_data.py\" target=\"_blank\" rel=\"noopener\">input_data下载链接</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> input_data</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">weight_variable</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">  initial = tf.truncated_normal(shape, stddev=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.Variable(initial)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bias_variable</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">  initial = tf.constant(<span class=\"number\">0.1</span>, shape=shape)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.Variable(initial)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">conv2d</span><span class=\"params\">(x, W)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.nn.conv2d(x, W, strides=[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], padding=<span class=\"string\">'SAME'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_pool_2x2</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.nn.max_pool(x, ksize=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">                        strides=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], padding=<span class=\"string\">'SAME'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mnist = input_data.read_data_sets(<span class=\"string\">'data'</span>, one_hot=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mnistGraph = tf.Graph()</span><br><span class=\"line\"><span class=\"keyword\">with</span> mnistGraph.as_default():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'input'</span>):</span><br><span class=\"line\">        x = tf.placeholder(<span class=\"string\">\"float\"</span>, shape=[<span class=\"keyword\">None</span>, <span class=\"number\">784</span>])</span><br><span class=\"line\">        y_ = tf.placeholder(<span class=\"string\">\"float\"</span>, shape=[<span class=\"keyword\">None</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">        W = tf.Variable(tf.zeros([<span class=\"number\">784</span>,<span class=\"number\">10</span>]))</span><br><span class=\"line\">        b = tf.Variable(tf.zeros([<span class=\"number\">10</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'hidden1'</span>):</span><br><span class=\"line\">        W_conv1 = weight_variable([<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">32</span>])</span><br><span class=\"line\">        b_conv1 = bias_variable([<span class=\"number\">32</span>])</span><br><span class=\"line\">        x_image = tf.reshape(x, [<span class=\"number\">-1</span>,<span class=\"number\">28</span>,<span class=\"number\">28</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\">        h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</span><br><span class=\"line\">        h_pool1 = max_pool_2x2(h_conv1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_conv1'</span>, W_conv1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_conv1'</span>, b_conv1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'hidden2'</span>):</span><br><span class=\"line\">        W_conv2 = weight_variable([<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">64</span>])</span><br><span class=\"line\">        b_conv2 = bias_variable([<span class=\"number\">64</span>])</span><br><span class=\"line\">        h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</span><br><span class=\"line\">        h_pool2 = max_pool_2x2(h_conv2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_conv2'</span>, W_conv2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_conv2'</span>, b_conv2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc1'</span>):</span><br><span class=\"line\">        W_fc1 = weight_variable([<span class=\"number\">7</span> * <span class=\"number\">7</span> * <span class=\"number\">64</span>, <span class=\"number\">1024</span>])</span><br><span class=\"line\">        b_fc1 = bias_variable([<span class=\"number\">1024</span>])</span><br><span class=\"line\">        h_pool2_flat = tf.reshape(h_pool2, [<span class=\"number\">-1</span>, <span class=\"number\">7</span>*<span class=\"number\">7</span>*<span class=\"number\">64</span>])</span><br><span class=\"line\">        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class=\"line\">        keep_prob = tf.placeholder(<span class=\"string\">\"float\"</span>)</span><br><span class=\"line\">        h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_fc1'</span>, W_fc1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_fc1'</span>, b_fc1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc2'</span>):</span><br><span class=\"line\">        W_fc2 = weight_variable([<span class=\"number\">1024</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">        b_fc2 = bias_variable([<span class=\"number\">10</span>])</span><br><span class=\"line\">        y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_fc2'</span>, W_fc2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_fc2'</span>, b_fc2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'train'</span>):</span><br><span class=\"line\">        cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))</span><br><span class=\"line\">        train_step = tf.train.AdamOptimizer(<span class=\"number\">1e-4</span>).minimize(cross_entropy)</span><br><span class=\"line\">        correct_prediction = tf.equal(tf.argmax(y_conv,<span class=\"number\">1</span>), tf.argmax(y_,<span class=\"number\">1</span>))</span><br><span class=\"line\">        accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class=\"string\">\"float\"</span>))</span><br><span class=\"line\">        tf.summary.scalar(<span class=\"string\">'loss'</span>, cross_entropy)</span><br><span class=\"line\">        tf.summary.scalar(<span class=\"string\">'accuracy'</span>, accuracy)      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session(graph=mnistGraph) <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(tf.initialize_all_variables())</span><br><span class=\"line\">    merged_summary_op = tf.summary.merge_all() </span><br><span class=\"line\">    summary_writer = tf.summary.FileWriter(<span class=\"string\">'./logs'</span>, sess.graph) </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3000</span>):</span><br><span class=\"line\">      batch = mnist.train.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> i%<span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        train_accuracy = accuracy.eval(feed_dict=&#123;</span><br><span class=\"line\">            x:batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">\"step %d, training accuracy %g\"</span> % (i, train_accuracy))</span><br><span class=\"line\">        summary_str = sess.run(merged_summary_op, feed_dict=&#123;x: batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">0.5</span>&#125;)</span><br><span class=\"line\">        summary_writer.add_summary(summary_str, i) </span><br><span class=\"line\">      train_step.run(feed_dict=&#123;x: batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">0.5</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))</span><br><span class=\"line\">    good = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        testSet = mnist.test.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">        good += accuracy_sum.eval(feed_dict=&#123; x: testSet[<span class=\"number\">0</span>], y_: testSet[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">        total += testSet[<span class=\"number\">0</span>].shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"test accuracy %g\"</span>%(good/total))</span><br></pre></td></tr></table></figure>\n<p>运行后的TensorBoard界面：</p>\n<p><img src=\"http://chuantu.biz/t6/270/1522570657x1822611335.png\" alt=\"运行后的TensorBoard界面\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>图表可视化在理解和调试时显得非常有帮助。</p>\n<h1 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install --upgrade tensorboard</span><br></pre></td></tr></table></figure>\n<h1 id=\"名称域（Name-scoping）和节点（Node）\"><a href=\"#名称域（Name-scoping）和节点（Node）\" class=\"headerlink\" title=\"名称域（Name scoping）和节点（Node）\"></a>名称域（Name scoping）和节点（Node）</h1><p>典型的TensorFlow有数以千计的节点，为了简单起见，我们可以为变量名（节点）划分范围。</p>\n<p>这个范围称为名称域，即<code>tf.name_scope(&#39;xxx&#39;)</code>，其中xxx是这个名称域的名字。</p>\n<p>在定义好名称域后，TensorBoard的显示界面里这个名称域内的变量并不会显示，而是只显示一个xxx节点，这个点是可展开的，展开后才会显示这个名称域内的节点。</p>\n<p>TensorFlow 图表有两种连接关系：数据依赖和控制依赖。数据依赖显示两个操作之间的tensor流程，用实心箭头表示，控制依赖用虚线表示。</p>\n<p>具体的符号表：</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/namespace_node.png\" alt=\"名称域\"></td>\n<td><em>High-level</em>节点代表一个名称域，双击则展开一个高层节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/horizontal_stack.png\" alt=\"断线节点序列\"></td>\n<td>彼此之间不连接的有限个节点序列。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/vertical_stack.png\" alt=\"相连节点序列\"></td>\n<td>彼此之间相连的有限个节点序列。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/op_node.png\" alt=\"操作节点\"></td>\n<td>一个单独的操作节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/constant.png\" alt=\"常量节点\"></td>\n<td>一个常量结点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/summary.png\" alt=\"摘要节点\"></td>\n<td>一个摘要节点。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/dataflow_edge.png\" alt=\"数据流边\"></td>\n<td>显示各操作间的数据流边。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/control_edge.png\" alt=\"控制依赖边\"></td>\n<td>显示各操作间的控制依赖边。</td>\n</tr>\n<tr>\n<td><img src=\"http://www.tensorfly.cn/tfdoc/images/reference_edge.png\" alt=\"引用边\"></td>\n<td>引用边，表示出度操作节点可以使入度tensor发生变化。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Scalar\"><a href=\"#Scalar\" class=\"headerlink\" title=\"Scalar\"></a>Scalar</h1><p>使用summary scalar（标量统计）:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xentropy = ... <span class=\"comment\"># xentropy的定义</span></span><br><span class=\"line\">tf.summary.scalar(<span class=\"string\">'xentropy_mean'</span>, xentropy)\t<span class=\"comment\"># xentropy_mean为定义的xentropy的标签名</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.tensorfly.cn/tfdoc/images/mnist_tensorboard.png\" alt=\"MNIST TensorBoard\"></p>\n<h1 id=\"Histogram\"><a href=\"#Histogram\" class=\"headerlink\" title=\"Histogram\"></a>Histogram</h1><p>使用summary histogram统计某个Tensor的取值分布:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'layer1'</span>):</span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'biases'</span>):</span><br><span class=\"line\">             biases = ... <span class=\"comment\"># 具体声明这里不再给出</span></span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/biases'</span>, biases)</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'weights'</span>):</span><br><span class=\"line\">             weights= ...</span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/weights'</span>, weights)</span><br><span class=\"line\">       </span><br><span class=\"line\">         <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'outputs'</span>):</span><br><span class=\"line\">             outputs= ...</span><br><span class=\"line\">             tf.summary.histogram(<span class=\"string\">'layer1'</span> + <span class=\"string\">'/weights'</span>, outputs)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://morvanzhou.github.io/static/results/tensorflow/4_2_2.png\" alt=\"Tensorboard 可视化好帮手 2\"></a></p>\n<h1 id=\"合并Summary\"><a href=\"#合并Summary\" class=\"headerlink\" title=\"合并Summary\"></a>合并Summary</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将各个summary操作合并为一个操作merged_summary_op</span></span><br><span class=\"line\">merged_summary_op = tf.summary.merge_all()</span><br><span class=\"line\"><span class=\"comment\"># 数据写入器，'/logs'为训练日志的存储路径</span></span><br><span class=\"line\">summary_writer = tf.summary.FileWriter(<span class=\"string\">'./logs'</span>, sess.graph) </span><br><span class=\"line\"></span><br><span class=\"line\">total_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> training:</span><br><span class=\"line\">  total_step += <span class=\"number\">1</span></span><br><span class=\"line\">  session.run(training_op)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> total_step % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    summary_str = sess.run(merged_summary_op, feed_dict&#123;...&#125;) <span class=\"comment\"># 注意这里必须加feed_dict否则会报错</span></span><br><span class=\"line\">    summary_writer.add_summary(summary_str, total_step) <span class=\"comment\"># 使用summary_writer将数据写入磁盘</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"生成TensorBoard界面\"><a href=\"#生成TensorBoard界面\" class=\"headerlink\" title=\"生成TensorBoard界面\"></a>生成TensorBoard界面</h1><p>运行添加了各种summary的操作的代码后，打开cmd，进入代码所在文件夹，输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensorboard --logdir=logs</span><br></pre></td></tr></table></figure>\n<p>按照运行后的提示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TensorBoard 1.7.0 at http://MengjieZhang:6006 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>\n<p>打开浏览器，输入地址 <code>http://MengjieZhang:6006</code> 即可以看到TensorBoard界面。</p>\n<h1 id=\"具体代码：\"><a href=\"#具体代码：\" class=\"headerlink\" title=\"具体代码：\"></a>具体代码：</h1><p><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/mnist/input_data.py\" target=\"_blank\" rel=\"noopener\">input_data下载链接</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> input_data</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">weight_variable</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">  initial = tf.truncated_normal(shape, stddev=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.Variable(initial)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bias_variable</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">  initial = tf.constant(<span class=\"number\">0.1</span>, shape=shape)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.Variable(initial)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">conv2d</span><span class=\"params\">(x, W)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.nn.conv2d(x, W, strides=[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], padding=<span class=\"string\">'SAME'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_pool_2x2</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.nn.max_pool(x, ksize=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">                        strides=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], padding=<span class=\"string\">'SAME'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mnist = input_data.read_data_sets(<span class=\"string\">'data'</span>, one_hot=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mnistGraph = tf.Graph()</span><br><span class=\"line\"><span class=\"keyword\">with</span> mnistGraph.as_default():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'input'</span>):</span><br><span class=\"line\">        x = tf.placeholder(<span class=\"string\">\"float\"</span>, shape=[<span class=\"keyword\">None</span>, <span class=\"number\">784</span>])</span><br><span class=\"line\">        y_ = tf.placeholder(<span class=\"string\">\"float\"</span>, shape=[<span class=\"keyword\">None</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">        W = tf.Variable(tf.zeros([<span class=\"number\">784</span>,<span class=\"number\">10</span>]))</span><br><span class=\"line\">        b = tf.Variable(tf.zeros([<span class=\"number\">10</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'hidden1'</span>):</span><br><span class=\"line\">        W_conv1 = weight_variable([<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">32</span>])</span><br><span class=\"line\">        b_conv1 = bias_variable([<span class=\"number\">32</span>])</span><br><span class=\"line\">        x_image = tf.reshape(x, [<span class=\"number\">-1</span>,<span class=\"number\">28</span>,<span class=\"number\">28</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\">        h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</span><br><span class=\"line\">        h_pool1 = max_pool_2x2(h_conv1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_conv1'</span>, W_conv1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_conv1'</span>, b_conv1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'hidden2'</span>):</span><br><span class=\"line\">        W_conv2 = weight_variable([<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">64</span>])</span><br><span class=\"line\">        b_conv2 = bias_variable([<span class=\"number\">64</span>])</span><br><span class=\"line\">        h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</span><br><span class=\"line\">        h_pool2 = max_pool_2x2(h_conv2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_conv2'</span>, W_conv2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_conv2'</span>, b_conv2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc1'</span>):</span><br><span class=\"line\">        W_fc1 = weight_variable([<span class=\"number\">7</span> * <span class=\"number\">7</span> * <span class=\"number\">64</span>, <span class=\"number\">1024</span>])</span><br><span class=\"line\">        b_fc1 = bias_variable([<span class=\"number\">1024</span>])</span><br><span class=\"line\">        h_pool2_flat = tf.reshape(h_pool2, [<span class=\"number\">-1</span>, <span class=\"number\">7</span>*<span class=\"number\">7</span>*<span class=\"number\">64</span>])</span><br><span class=\"line\">        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class=\"line\">        keep_prob = tf.placeholder(<span class=\"string\">\"float\"</span>)</span><br><span class=\"line\">        h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_fc1'</span>, W_fc1)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_fc1'</span>, b_fc1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc2'</span>):</span><br><span class=\"line\">        W_fc2 = weight_variable([<span class=\"number\">1024</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">        b_fc2 = bias_variable([<span class=\"number\">10</span>])</span><br><span class=\"line\">        y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'W_fc2'</span>, W_fc2)</span><br><span class=\"line\">        tf.summary.histogram(<span class=\"string\">'b_fc2'</span>, b_fc2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'train'</span>):</span><br><span class=\"line\">        cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))</span><br><span class=\"line\">        train_step = tf.train.AdamOptimizer(<span class=\"number\">1e-4</span>).minimize(cross_entropy)</span><br><span class=\"line\">        correct_prediction = tf.equal(tf.argmax(y_conv,<span class=\"number\">1</span>), tf.argmax(y_,<span class=\"number\">1</span>))</span><br><span class=\"line\">        accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class=\"string\">\"float\"</span>))</span><br><span class=\"line\">        tf.summary.scalar(<span class=\"string\">'loss'</span>, cross_entropy)</span><br><span class=\"line\">        tf.summary.scalar(<span class=\"string\">'accuracy'</span>, accuracy)      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session(graph=mnistGraph) <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(tf.initialize_all_variables())</span><br><span class=\"line\">    merged_summary_op = tf.summary.merge_all() </span><br><span class=\"line\">    summary_writer = tf.summary.FileWriter(<span class=\"string\">'./logs'</span>, sess.graph) </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3000</span>):</span><br><span class=\"line\">      batch = mnist.train.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> i%<span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        train_accuracy = accuracy.eval(feed_dict=&#123;</span><br><span class=\"line\">            x:batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">\"step %d, training accuracy %g\"</span> % (i, train_accuracy))</span><br><span class=\"line\">        summary_str = sess.run(merged_summary_op, feed_dict=&#123;x: batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">0.5</span>&#125;)</span><br><span class=\"line\">        summary_writer.add_summary(summary_str, i) </span><br><span class=\"line\">      train_step.run(feed_dict=&#123;x: batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">0.5</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    accuracy_sum = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))</span><br><span class=\"line\">    good = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        testSet = mnist.test.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">        good += accuracy_sum.eval(feed_dict=&#123; x: testSet[<span class=\"number\">0</span>], y_: testSet[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">        total += testSet[<span class=\"number\">0</span>].shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"test accuracy %g\"</span>%(good/total))</span><br></pre></td></tr></table></figure>\n<p>运行后的TensorBoard界面：</p>\n<p><img src=\"http://chuantu.biz/t6/270/1522570657x1822611335.png\" alt=\"运行后的TensorBoard界面\"></p>\n"},{"title":"关于hexo博客自定义域名后gitment评论系统登陆出现redirect error返回主页的解决办法","toc":false,"date":"2018-04-16T14:57:50.000Z","_content":"\n>  背景：\n>\n> 原地址：`https://mikqueenge.github.io`\n>\n> 新域名：`http://blog.zmj97.top`(这里一定要注意！从阿里云买的域名使用的协议是http！)\n\n今天下午兴致勃勃地买了个域名绑定到这个博客上后，发现昨天好不容易跳了各种坑才实现的**评论功能无法登陆**了！\n\n每一次点击评论里的登陆都会回到index页面，地址栏显示地地址为`https://blog.zmj97.top/?error=redirect_uri_mismatch&error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&error_uri=https%3A%2F%2Fdeveloper.github.com%2Fv3%2Foauth%2F%23redirect-uri-mismatch`\n\n一看这个提示，`redirect error` 让人不禁想到OAuth应用注册时填写的`Authorization callback URL`回调URL，\n\n各种百度谷歌了一下，如果自定义了域名的话<u>回调URL要填写自定义域名</u>，而且**一个字符都不能出错**！否则就会出现上述无法登陆的情况...\n\n试了一晚上，回调URL可能出现的字符错误有以下几个：\n\n- 多加空格\n- 协议错误，区分http和https\n- 多加/\n\n最后终于成功时我的OAuth应用信息的究极形态如下：\n\n![](/images/Capture5.PNG)\n\n心好累...","source":"_posts/关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法.md","raw":"---\ntitle: 关于hexo博客自定义域名后gitment评论系统登陆出现redirect error返回主页的解决办法\ntoc: false\ndate: 2018-04-16 22:57:50\ncategories:\n- methods\ntags:\n- hexo\n- gitment\n- OAuth\n- 阿里云\n---\n\n>  背景：\n>\n> 原地址：`https://mikqueenge.github.io`\n>\n> 新域名：`http://blog.zmj97.top`(这里一定要注意！从阿里云买的域名使用的协议是http！)\n\n今天下午兴致勃勃地买了个域名绑定到这个博客上后，发现昨天好不容易跳了各种坑才实现的**评论功能无法登陆**了！\n\n每一次点击评论里的登陆都会回到index页面，地址栏显示地地址为`https://blog.zmj97.top/?error=redirect_uri_mismatch&error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&error_uri=https%3A%2F%2Fdeveloper.github.com%2Fv3%2Foauth%2F%23redirect-uri-mismatch`\n\n一看这个提示，`redirect error` 让人不禁想到OAuth应用注册时填写的`Authorization callback URL`回调URL，\n\n各种百度谷歌了一下，如果自定义了域名的话<u>回调URL要填写自定义域名</u>，而且**一个字符都不能出错**！否则就会出现上述无法登陆的情况...\n\n试了一晚上，回调URL可能出现的字符错误有以下几个：\n\n- 多加空格\n- 协议错误，区分http和https\n- 多加/\n\n最后终于成功时我的OAuth应用信息的究极形态如下：\n\n![](/images/Capture5.PNG)\n\n心好累...","slug":"关于hexo博客自定义域名后gitment评论系统登陆出现redirect-error返回主页的解决办法","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b110027cragkkdarumo","content":"<blockquote>\n<p> 背景：</p>\n<p>原地址：<code>https://mikqueenge.github.io</code></p>\n<p>新域名：<code>http://blog.zmj97.top</code>(这里一定要注意！从阿里云买的域名使用的协议是http！)</p>\n</blockquote>\n<p>今天下午兴致勃勃地买了个域名绑定到这个博客上后，发现昨天好不容易跳了各种坑才实现的<strong>评论功能无法登陆</strong>了！</p>\n<p>每一次点击评论里的登陆都会回到index页面，地址栏显示地地址为<code>https://blog.zmj97.top/?error=redirect_uri_mismatch&amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;error_uri=https%3A%2F%2Fdeveloper.github.com%2Fv3%2Foauth%2F%23redirect-uri-mismatch</code></p>\n<p>一看这个提示，<code>redirect error</code> 让人不禁想到OAuth应用注册时填写的<code>Authorization callback URL</code>回调URL，</p>\n<p>各种百度谷歌了一下，如果自定义了域名的话<u>回调URL要填写自定义域名</u>，而且<strong>一个字符都不能出错</strong>！否则就会出现上述无法登陆的情况…</p>\n<p>试了一晚上，回调URL可能出现的字符错误有以下几个：</p>\n<ul>\n<li>多加空格</li>\n<li>协议错误，区分http和https</li>\n<li>多加/</li>\n</ul>\n<p>最后终于成功时我的OAuth应用信息的究极形态如下：</p>\n<p><img src=\"/images/Capture5.PNG\" alt=\"\"></p>\n<p>心好累…</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p> 背景：</p>\n<p>原地址：<code>https://mikqueenge.github.io</code></p>\n<p>新域名：<code>http://blog.zmj97.top</code>(这里一定要注意！从阿里云买的域名使用的协议是http！)</p>\n</blockquote>\n<p>今天下午兴致勃勃地买了个域名绑定到这个博客上后，发现昨天好不容易跳了各种坑才实现的<strong>评论功能无法登陆</strong>了！</p>\n<p>每一次点击评论里的登陆都会回到index页面，地址栏显示地地址为<code>https://blog.zmj97.top/?error=redirect_uri_mismatch&amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;error_uri=https%3A%2F%2Fdeveloper.github.com%2Fv3%2Foauth%2F%23redirect-uri-mismatch</code></p>\n<p>一看这个提示，<code>redirect error</code> 让人不禁想到OAuth应用注册时填写的<code>Authorization callback URL</code>回调URL，</p>\n<p>各种百度谷歌了一下，如果自定义了域名的话<u>回调URL要填写自定义域名</u>，而且<strong>一个字符都不能出错</strong>！否则就会出现上述无法登陆的情况…</p>\n<p>试了一晚上，回调URL可能出现的字符错误有以下几个：</p>\n<ul>\n<li>多加空格</li>\n<li>协议错误，区分http和https</li>\n<li>多加/</li>\n</ul>\n<p>最后终于成功时我的OAuth应用信息的究极形态如下：</p>\n<p><img src=\"/images/Capture5.PNG\" alt=\"\"></p>\n<p>心好累…</p>\n"},{"title":"在ubuntu中安装Markdown神器Typora","toc":false,"date":"2018-09-01T09:48:15.000Z","_content":"\n\n\n在终端中执行以下命令即可：\n\n```powershell\n# optional, but recommended\n\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\n\n# add Typora's repository\n\nsudo add-apt-repository 'deb http://typora.io linux/'\n\nsudo apt-get update\n\n# install typora\n\nsudo apt-get install typora\n```\n\n\n\n[参考链接](https://blog.csdn.net/caoyangyang123/article/details/79484697)","source":"_posts/在ubuntu中安装Markdown神器Typora.md","raw":"---\ntitle: 在ubuntu中安装Markdown神器Typora\ntoc: false\ndate: 2018-09-01 17:48:15\ncategories:\n- methods\ntags:\n- ubuntu\n- Typora\n- Markdown\n---\n\n\n\n在终端中执行以下命令即可：\n\n```powershell\n# optional, but recommended\n\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\n\n# add Typora's repository\n\nsudo add-apt-repository 'deb http://typora.io linux/'\n\nsudo apt-get update\n\n# install typora\n\nsudo apt-get install typora\n```\n\n\n\n[参考链接](https://blog.csdn.net/caoyangyang123/article/details/79484697)","slug":"在ubuntu中安装Markdown神器Typora","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b13002bcragqqwpcs3n","content":"<p>在终端中执行以下命令即可：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># optional, but recommended</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add Typora's repository</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo add-apt-repository <span class=\"string\">'deb http://typora.io linux/'</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install typora</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install typora</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/caoyangyang123/article/details/79484697\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在终端中执行以下命令即可：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># optional, but recommended</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add Typora's repository</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo add-apt-repository <span class=\"string\">'deb http://typora.io linux/'</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install typora</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install typora</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/caoyangyang123/article/details/79484697\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n"},{"title":"堆和栈的区别","date":"2018-03-30T03:48:51.000Z","_content":"\n参考：\n\n[链接1](https://blog.csdn.net/u013321328/article/details/44172689) [链接2](https://blog.csdn.net/shanshanhi/article/details/50904706)\n\n# 一个由C/C++编译的程序占用的内存分为以下几个部分：\n## 1、栈区（stack）\n由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n## 2、堆区（heap）\n一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。分配方式倒是类似于数据结构中的链表。\n## 3、全局区/静态区（static）\n全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。\n## 4、文字常量区\n存放常量字符串。程序结束后由系统释放。\n## 5、程序代码区\n存放函数体的二进制代码。\n# 堆和栈的区别：\n## 1、申请方式\n### 栈区：\n由编译器自动分配释放，存放函数的参数值，局部变量值等。\n### 堆区：\n一般由程序员分配释放（使用new/delete或malloc/free），若程序员不释放，程序结束时可能由OS回收。\n## 2、操作方式\n### 栈区：\n操作方式类似于数据结构中的栈。\n### 堆区：\n不同于数据结构中的堆，分配方式类似于链表。\n## 3、申请后系统的响应 \n### 栈区：\n只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出（overflow）。\n### 堆区：\n操作系统有一个记录空闲内存地址的链表，\n当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，\n对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，从而代码中的delete语句才能正确的释放本内存空间，\n由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。 \n## 4、申请大小的限制\n### 栈区：\n在Windows下,栈是是一块确定的连续内存区域。栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。\n### 堆区：\n堆是向高地址扩展的数据结构，由于系统是用链表来存储的空闲内存地址的，它是不连续的，链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。\n## 5、申请效率的比较\n### 栈区：\n系统自动分配，速度较快。但程序员是无法控制的。\n### 堆区：\n由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便. \n注意：在WINDOWS下，最好的方式是用VirtualAlloc分配内存，它不在堆也不在栈，而是直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。\n## 6、堆和栈中的存储内容\n### 栈区：\n在函数调用时，第一个进栈的是函数调用语句的下一条可执行语句的地址，接着是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。\n### 堆区：\n一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。","source":"_posts/堆和栈的区别.md","raw":"---\ntitle: 堆和栈的区别\ndate: 2018-03-30 11:48:51\ntags: \n- 内存\ncategories:\n- C/C++\n---\n\n参考：\n\n[链接1](https://blog.csdn.net/u013321328/article/details/44172689) [链接2](https://blog.csdn.net/shanshanhi/article/details/50904706)\n\n# 一个由C/C++编译的程序占用的内存分为以下几个部分：\n## 1、栈区（stack）\n由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n## 2、堆区（heap）\n一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。分配方式倒是类似于数据结构中的链表。\n## 3、全局区/静态区（static）\n全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。\n## 4、文字常量区\n存放常量字符串。程序结束后由系统释放。\n## 5、程序代码区\n存放函数体的二进制代码。\n# 堆和栈的区别：\n## 1、申请方式\n### 栈区：\n由编译器自动分配释放，存放函数的参数值，局部变量值等。\n### 堆区：\n一般由程序员分配释放（使用new/delete或malloc/free），若程序员不释放，程序结束时可能由OS回收。\n## 2、操作方式\n### 栈区：\n操作方式类似于数据结构中的栈。\n### 堆区：\n不同于数据结构中的堆，分配方式类似于链表。\n## 3、申请后系统的响应 \n### 栈区：\n只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出（overflow）。\n### 堆区：\n操作系统有一个记录空闲内存地址的链表，\n当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，\n对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，从而代码中的delete语句才能正确的释放本内存空间，\n由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。 \n## 4、申请大小的限制\n### 栈区：\n在Windows下,栈是是一块确定的连续内存区域。栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。\n### 堆区：\n堆是向高地址扩展的数据结构，由于系统是用链表来存储的空闲内存地址的，它是不连续的，链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。\n## 5、申请效率的比较\n### 栈区：\n系统自动分配，速度较快。但程序员是无法控制的。\n### 堆区：\n由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便. \n注意：在WINDOWS下，最好的方式是用VirtualAlloc分配内存，它不在堆也不在栈，而是直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。\n## 6、堆和栈中的存储内容\n### 栈区：\n在函数调用时，第一个进栈的是函数调用语句的下一条可执行语句的地址，接着是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。\n### 堆区：\n一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。","slug":"堆和栈的区别","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b14002dcrag5upeut3f","content":"<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/u013321328/article/details/44172689\" target=\"_blank\" rel=\"noopener\">链接1</a> <a href=\"https://blog.csdn.net/shanshanhi/article/details/50904706\" target=\"_blank\" rel=\"noopener\">链接2</a></p>\n<h1 id=\"一个由C-C-编译的程序占用的内存分为以下几个部分：\"><a href=\"#一个由C-C-编译的程序占用的内存分为以下几个部分：\" class=\"headerlink\" title=\"一个由C/C++编译的程序占用的内存分为以下几个部分：\"></a>一个由C/C++编译的程序占用的内存分为以下几个部分：</h1><h2 id=\"1、栈区（stack）\"><a href=\"#1、栈区（stack）\" class=\"headerlink\" title=\"1、栈区（stack）\"></a>1、栈区（stack）</h2><p>由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</p>\n<h2 id=\"2、堆区（heap）\"><a href=\"#2、堆区（heap）\" class=\"headerlink\" title=\"2、堆区（heap）\"></a>2、堆区（heap）</h2><p>一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。分配方式倒是类似于数据结构中的链表。</p>\n<h2 id=\"3、全局区-静态区（static）\"><a href=\"#3、全局区-静态区（static）\" class=\"headerlink\" title=\"3、全局区/静态区（static）\"></a>3、全局区/静态区（static）</h2><p>全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</p>\n<h2 id=\"4、文字常量区\"><a href=\"#4、文字常量区\" class=\"headerlink\" title=\"4、文字常量区\"></a>4、文字常量区</h2><p>存放常量字符串。程序结束后由系统释放。</p>\n<h2 id=\"5、程序代码区\"><a href=\"#5、程序代码区\" class=\"headerlink\" title=\"5、程序代码区\"></a>5、程序代码区</h2><p>存放函数体的二进制代码。</p>\n<h1 id=\"堆和栈的区别：\"><a href=\"#堆和栈的区别：\" class=\"headerlink\" title=\"堆和栈的区别：\"></a>堆和栈的区别：</h1><h2 id=\"1、申请方式\"><a href=\"#1、申请方式\" class=\"headerlink\" title=\"1、申请方式\"></a>1、申请方式</h2><h3 id=\"栈区：\"><a href=\"#栈区：\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>由编译器自动分配释放，存放函数的参数值，局部变量值等。</p>\n<h3 id=\"堆区：\"><a href=\"#堆区：\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>一般由程序员分配释放（使用new/delete或malloc/free），若程序员不释放，程序结束时可能由OS回收。</p>\n<h2 id=\"2、操作方式\"><a href=\"#2、操作方式\" class=\"headerlink\" title=\"2、操作方式\"></a>2、操作方式</h2><h3 id=\"栈区：-1\"><a href=\"#栈区：-1\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>操作方式类似于数据结构中的栈。</p>\n<h3 id=\"堆区：-1\"><a href=\"#堆区：-1\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>不同于数据结构中的堆，分配方式类似于链表。</p>\n<h2 id=\"3、申请后系统的响应\"><a href=\"#3、申请后系统的响应\" class=\"headerlink\" title=\"3、申请后系统的响应\"></a>3、申请后系统的响应</h2><h3 id=\"栈区：-2\"><a href=\"#栈区：-2\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出（overflow）。</p>\n<h3 id=\"堆区：-2\"><a href=\"#堆区：-2\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>操作系统有一个记录空闲内存地址的链表，<br>当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，<br>对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，从而代码中的delete语句才能正确的释放本内存空间，<br>由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。 </p>\n<h2 id=\"4、申请大小的限制\"><a href=\"#4、申请大小的限制\" class=\"headerlink\" title=\"4、申请大小的限制\"></a>4、申请大小的限制</h2><h3 id=\"栈区：-3\"><a href=\"#栈区：-3\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>在Windows下,栈是是一块确定的连续内存区域。栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。</p>\n<h3 id=\"堆区：-3\"><a href=\"#堆区：-3\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>堆是向高地址扩展的数据结构，由于系统是用链表来存储的空闲内存地址的，它是不连续的，链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</p>\n<h2 id=\"5、申请效率的比较\"><a href=\"#5、申请效率的比较\" class=\"headerlink\" title=\"5、申请效率的比较\"></a>5、申请效率的比较</h2><h3 id=\"栈区：-4\"><a href=\"#栈区：-4\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>系统自动分配，速度较快。但程序员是无法控制的。</p>\n<h3 id=\"堆区：-4\"><a href=\"#堆区：-4\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便.<br>注意：在WINDOWS下，最好的方式是用VirtualAlloc分配内存，它不在堆也不在栈，而是直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。</p>\n<h2 id=\"6、堆和栈中的存储内容\"><a href=\"#6、堆和栈中的存储内容\" class=\"headerlink\" title=\"6、堆和栈中的存储内容\"></a>6、堆和栈中的存储内容</h2><h3 id=\"栈区：-5\"><a href=\"#栈区：-5\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>在函数调用时，第一个进栈的是函数调用语句的下一条可执行语句的地址，接着是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。</p>\n<h3 id=\"堆区：-5\"><a href=\"#堆区：-5\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/u013321328/article/details/44172689\" target=\"_blank\" rel=\"noopener\">链接1</a> <a href=\"https://blog.csdn.net/shanshanhi/article/details/50904706\" target=\"_blank\" rel=\"noopener\">链接2</a></p>\n<h1 id=\"一个由C-C-编译的程序占用的内存分为以下几个部分：\"><a href=\"#一个由C-C-编译的程序占用的内存分为以下几个部分：\" class=\"headerlink\" title=\"一个由C/C++编译的程序占用的内存分为以下几个部分：\"></a>一个由C/C++编译的程序占用的内存分为以下几个部分：</h1><h2 id=\"1、栈区（stack）\"><a href=\"#1、栈区（stack）\" class=\"headerlink\" title=\"1、栈区（stack）\"></a>1、栈区（stack）</h2><p>由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</p>\n<h2 id=\"2、堆区（heap）\"><a href=\"#2、堆区（heap）\" class=\"headerlink\" title=\"2、堆区（heap）\"></a>2、堆区（heap）</h2><p>一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。分配方式倒是类似于数据结构中的链表。</p>\n<h2 id=\"3、全局区-静态区（static）\"><a href=\"#3、全局区-静态区（static）\" class=\"headerlink\" title=\"3、全局区/静态区（static）\"></a>3、全局区/静态区（static）</h2><p>全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</p>\n<h2 id=\"4、文字常量区\"><a href=\"#4、文字常量区\" class=\"headerlink\" title=\"4、文字常量区\"></a>4、文字常量区</h2><p>存放常量字符串。程序结束后由系统释放。</p>\n<h2 id=\"5、程序代码区\"><a href=\"#5、程序代码区\" class=\"headerlink\" title=\"5、程序代码区\"></a>5、程序代码区</h2><p>存放函数体的二进制代码。</p>\n<h1 id=\"堆和栈的区别：\"><a href=\"#堆和栈的区别：\" class=\"headerlink\" title=\"堆和栈的区别：\"></a>堆和栈的区别：</h1><h2 id=\"1、申请方式\"><a href=\"#1、申请方式\" class=\"headerlink\" title=\"1、申请方式\"></a>1、申请方式</h2><h3 id=\"栈区：\"><a href=\"#栈区：\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>由编译器自动分配释放，存放函数的参数值，局部变量值等。</p>\n<h3 id=\"堆区：\"><a href=\"#堆区：\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>一般由程序员分配释放（使用new/delete或malloc/free），若程序员不释放，程序结束时可能由OS回收。</p>\n<h2 id=\"2、操作方式\"><a href=\"#2、操作方式\" class=\"headerlink\" title=\"2、操作方式\"></a>2、操作方式</h2><h3 id=\"栈区：-1\"><a href=\"#栈区：-1\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>操作方式类似于数据结构中的栈。</p>\n<h3 id=\"堆区：-1\"><a href=\"#堆区：-1\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>不同于数据结构中的堆，分配方式类似于链表。</p>\n<h2 id=\"3、申请后系统的响应\"><a href=\"#3、申请后系统的响应\" class=\"headerlink\" title=\"3、申请后系统的响应\"></a>3、申请后系统的响应</h2><h3 id=\"栈区：-2\"><a href=\"#栈区：-2\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出（overflow）。</p>\n<h3 id=\"堆区：-2\"><a href=\"#堆区：-2\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>操作系统有一个记录空闲内存地址的链表，<br>当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，<br>对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，从而代码中的delete语句才能正确的释放本内存空间，<br>由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。 </p>\n<h2 id=\"4、申请大小的限制\"><a href=\"#4、申请大小的限制\" class=\"headerlink\" title=\"4、申请大小的限制\"></a>4、申请大小的限制</h2><h3 id=\"栈区：-3\"><a href=\"#栈区：-3\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>在Windows下,栈是是一块确定的连续内存区域。栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。</p>\n<h3 id=\"堆区：-3\"><a href=\"#堆区：-3\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>堆是向高地址扩展的数据结构，由于系统是用链表来存储的空闲内存地址的，它是不连续的，链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</p>\n<h2 id=\"5、申请效率的比较\"><a href=\"#5、申请效率的比较\" class=\"headerlink\" title=\"5、申请效率的比较\"></a>5、申请效率的比较</h2><h3 id=\"栈区：-4\"><a href=\"#栈区：-4\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>系统自动分配，速度较快。但程序员是无法控制的。</p>\n<h3 id=\"堆区：-4\"><a href=\"#堆区：-4\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便.<br>注意：在WINDOWS下，最好的方式是用VirtualAlloc分配内存，它不在堆也不在栈，而是直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。</p>\n<h2 id=\"6、堆和栈中的存储内容\"><a href=\"#6、堆和栈中的存储内容\" class=\"headerlink\" title=\"6、堆和栈中的存储内容\"></a>6、堆和栈中的存储内容</h2><h3 id=\"栈区：-5\"><a href=\"#栈区：-5\" class=\"headerlink\" title=\"栈区：\"></a>栈区：</h3><p>在函数调用时，第一个进栈的是函数调用语句的下一条可执行语句的地址，接着是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。</p>\n<h3 id=\"堆区：-5\"><a href=\"#堆区：-5\" class=\"headerlink\" title=\"堆区：\"></a>堆区：</h3><p>一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。</p>\n"},{"title":"接入gitment为hexo添加评论功能","toc":false,"date":"2018-04-16T02:59:56.000Z","_content":"\n## 注册一个OAuth application \n\n[注册链接](https://github.com/settings/applications/new)\n\n![](/images/Capture3.PNG)\n\n其中：\n\nApplication name 为应用名，取一个跟自己博客相关的名字即可；\n\nHomepage URL 为博客地址，例如我的为：https://mikqueenge.github.io；\n\nApplication description 为应用描述，可不填；\n\nAuthorization callback URL 为回调URL，可不填；\n\n\n\n点击 Register application 祝成功后会得到这个应用的 **client ID** 和 **client secret**，等下配置文件时会用到。\n\n\n\n## 配置文件 \n\n主题：landscape\n\n### 创建git.ejs\n\n在`themes/landscape/layout/_partial/post`文件夹中创建文件`git.ejs`，写入下面的代码：\n\n```ejs\n<!-- Gitment评论插件通用代码 -->\n<div id=\"git\"></div>\n<!-- 汉化版 -->\n<link rel=\"stylesheet\" href=\"https://billts.site/extra_css/gitment.css\">\n<script src=\"https://billts.site/js/gitment.js\"></script>\n<script>\nvar gitment = new Gitment({\n  id: '{{ page.date }}', //添加此句解决Error：validation failed的问题\n  owner: \"%%%%%%%\",//github用户名，例如MIKQUEENGE\n  repo: \"%%%%%%%\",//用户存储评论的github项目名称，例如MIKQUEENGE.github.io\n  oauth: {\n    client_id: \"%%%%%%%%%%%%\",//注册OAuth Application时生产的ClinetID\n    client_secret:\"%%%%%%%%%%\",//注册OAuth Application时生成的Client Secret\n  },\n})\ngitment.render('git')\n</script>\n<!-- Gitment代码结束 -->\n```\n\n### 配置article.ejs\n\n在`themes/landscape/layout/_partial/article.ejs`文件的结尾添加：\n\n```ejs\n<% if (!index){ %>\n  <% if (post.comments){ %>\n  <%- partial('post/git') %>\n  <% } else { %>\n    <div class=\"git\"></div>\n  <% } %>\n<% } %>\n```\n\n## 登陆与添加评论\n\n完成上述配置后部署并打开某篇文章，拉到最底部可以看到评论区：\n\n![](/images/Capture4.PNG)\n\n点击登陆后就可以添加评论啦！\n\n## 遇到问题Error：validation failed\n\nmd文件名太长导致id出现问题，使用上述代码是不会出现这个问题的。\n\n如果出现这个问题，解决方案为在gitment配置文件（如上述的`git.ejs`）中的`var gitment = new Gitment({})`内添加`id: '{{ page.date }}',`（不要忘记这个逗号）\n\n\n\n---\n\n参考链接：\n\n[Hexo博客yelee主题添加Gitment评论系统 ](https://blog.csdn.net/stven_king/article/details/78357753)\n\n[Gitment评论功能接入踩坑教程](http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment评论功能接入踩坑教程/)","source":"_posts/接入gitment为hexo添加评论功能.md","raw":"---\ntitle: 接入gitment为hexo添加评论功能\ntoc: false\ndate: 2018-04-16 10:59:56\ncategories:\n- methods\ntags:\n- hexo\n- gitment\n---\n\n## 注册一个OAuth application \n\n[注册链接](https://github.com/settings/applications/new)\n\n![](/images/Capture3.PNG)\n\n其中：\n\nApplication name 为应用名，取一个跟自己博客相关的名字即可；\n\nHomepage URL 为博客地址，例如我的为：https://mikqueenge.github.io；\n\nApplication description 为应用描述，可不填；\n\nAuthorization callback URL 为回调URL，可不填；\n\n\n\n点击 Register application 祝成功后会得到这个应用的 **client ID** 和 **client secret**，等下配置文件时会用到。\n\n\n\n## 配置文件 \n\n主题：landscape\n\n### 创建git.ejs\n\n在`themes/landscape/layout/_partial/post`文件夹中创建文件`git.ejs`，写入下面的代码：\n\n```ejs\n<!-- Gitment评论插件通用代码 -->\n<div id=\"git\"></div>\n<!-- 汉化版 -->\n<link rel=\"stylesheet\" href=\"https://billts.site/extra_css/gitment.css\">\n<script src=\"https://billts.site/js/gitment.js\"></script>\n<script>\nvar gitment = new Gitment({\n  id: '{{ page.date }}', //添加此句解决Error：validation failed的问题\n  owner: \"%%%%%%%\",//github用户名，例如MIKQUEENGE\n  repo: \"%%%%%%%\",//用户存储评论的github项目名称，例如MIKQUEENGE.github.io\n  oauth: {\n    client_id: \"%%%%%%%%%%%%\",//注册OAuth Application时生产的ClinetID\n    client_secret:\"%%%%%%%%%%\",//注册OAuth Application时生成的Client Secret\n  },\n})\ngitment.render('git')\n</script>\n<!-- Gitment代码结束 -->\n```\n\n### 配置article.ejs\n\n在`themes/landscape/layout/_partial/article.ejs`文件的结尾添加：\n\n```ejs\n<% if (!index){ %>\n  <% if (post.comments){ %>\n  <%- partial('post/git') %>\n  <% } else { %>\n    <div class=\"git\"></div>\n  <% } %>\n<% } %>\n```\n\n## 登陆与添加评论\n\n完成上述配置后部署并打开某篇文章，拉到最底部可以看到评论区：\n\n![](/images/Capture4.PNG)\n\n点击登陆后就可以添加评论啦！\n\n## 遇到问题Error：validation failed\n\nmd文件名太长导致id出现问题，使用上述代码是不会出现这个问题的。\n\n如果出现这个问题，解决方案为在gitment配置文件（如上述的`git.ejs`）中的`var gitment = new Gitment({})`内添加`id: '{{ page.date }}',`（不要忘记这个逗号）\n\n\n\n---\n\n参考链接：\n\n[Hexo博客yelee主题添加Gitment评论系统 ](https://blog.csdn.net/stven_king/article/details/78357753)\n\n[Gitment评论功能接入踩坑教程](http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment评论功能接入踩坑教程/)","slug":"接入gitment为hexo添加评论功能","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b16002gcragvlrvvwx3","content":"<h2 id=\"注册一个OAuth-application\"><a href=\"#注册一个OAuth-application\" class=\"headerlink\" title=\"注册一个OAuth application\"></a>注册一个OAuth application</h2><p><a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">注册链接</a></p>\n<p><img src=\"/images/Capture3.PNG\" alt=\"\"></p>\n<p>其中：</p>\n<p>Application name 为应用名，取一个跟自己博客相关的名字即可；</p>\n<p>Homepage URL 为博客地址，例如我的为：<a href=\"https://mikqueenge.github.io；\" target=\"_blank\" rel=\"noopener\">https://mikqueenge.github.io；</a></p>\n<p>Application description 为应用描述，可不填；</p>\n<p>Authorization callback URL 为回调URL，可不填；</p>\n<p>点击 Register application 祝成功后会得到这个应用的 <strong>client ID</strong> 和 <strong>client secret</strong>，等下配置文件时会用到。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>主题：landscape</p>\n<h3 id=\"创建git-ejs\"><a href=\"#创建git-ejs\" class=\"headerlink\" title=\"创建git.ejs\"></a>创建git.ejs</h3><p>在<code>themes/landscape/layout/_partial/post</code>文件夹中创建文件<code>git.ejs</code>，写入下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Gitment评论插件通用代码 --&gt;</span><br><span class=\"line\">&lt;div id=&quot;git&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 汉化版 --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://billts.site/extra_css/gitment.css&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://billts.site/js/gitment.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var gitment = new Gitment(&#123;</span><br><span class=\"line\">  id: &apos;&#123;&#123; page.date &#125;&#125;&apos;, //添加此句解决Error：validation failed的问题</span><br><span class=\"line\">  owner: &quot;%%%%%%%&quot;,//github用户名，例如MIKQUEENGE</span><br><span class=\"line\">  repo: &quot;%%%%%%%&quot;,//用户存储评论的github项目名称，例如MIKQUEENGE.github.io</span><br><span class=\"line\">  oauth: &#123;</span><br><span class=\"line\">    client_id: &quot;%%%%%%%%%%%%&quot;,//注册OAuth Application时生产的ClinetID</span><br><span class=\"line\">    client_secret:&quot;%%%%%%%%%%&quot;,//注册OAuth Application时生成的Client Secret</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gitment.render(&apos;git&apos;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- Gitment代码结束 --&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置article-ejs\"><a href=\"#配置article-ejs\" class=\"headerlink\" title=\"配置article.ejs\"></a>配置article.ejs</h3><p>在<code>themes/landscape/layout/_partial/article.ejs</code>文件的结尾添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index)&#123; %&gt;</span><br><span class=\"line\">  &lt;% if (post.comments)&#123; %&gt;</span><br><span class=\"line\">  &lt;%- partial(&apos;post/git&apos;) %&gt;</span><br><span class=\"line\">  &lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;git&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登陆与添加评论\"><a href=\"#登陆与添加评论\" class=\"headerlink\" title=\"登陆与添加评论\"></a>登陆与添加评论</h2><p>完成上述配置后部署并打开某篇文章，拉到最底部可以看到评论区：</p>\n<p><img src=\"/images/Capture4.PNG\" alt=\"\"></p>\n<p>点击登陆后就可以添加评论啦！</p>\n<h2 id=\"遇到问题Error：validation-failed\"><a href=\"#遇到问题Error：validation-failed\" class=\"headerlink\" title=\"遇到问题Error：validation failed\"></a>遇到问题Error：validation failed</h2><p>md文件名太长导致id出现问题，使用上述代码是不会出现这个问题的。</p>\n<p>如果出现这个问题，解决方案为在gitment配置文件（如上述的<code>git.ejs</code>）中的<code>var gitment = new Gitment({})</code>内添加<code>id: &#39;&#39;,</code>（不要忘记这个逗号）</p>\n<hr>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/stven_king/article/details/78357753\" target=\"_blank\" rel=\"noopener\">Hexo博客yelee主题添加Gitment评论系统 </a></p>\n<p><a href=\"http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment评论功能接入踩坑教程/\" target=\"_blank\" rel=\"noopener\">Gitment评论功能接入踩坑教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"注册一个OAuth-application\"><a href=\"#注册一个OAuth-application\" class=\"headerlink\" title=\"注册一个OAuth application\"></a>注册一个OAuth application</h2><p><a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">注册链接</a></p>\n<p><img src=\"/images/Capture3.PNG\" alt=\"\"></p>\n<p>其中：</p>\n<p>Application name 为应用名，取一个跟自己博客相关的名字即可；</p>\n<p>Homepage URL 为博客地址，例如我的为：<a href=\"https://mikqueenge.github.io；\" target=\"_blank\" rel=\"noopener\">https://mikqueenge.github.io；</a></p>\n<p>Application description 为应用描述，可不填；</p>\n<p>Authorization callback URL 为回调URL，可不填；</p>\n<p>点击 Register application 祝成功后会得到这个应用的 <strong>client ID</strong> 和 <strong>client secret</strong>，等下配置文件时会用到。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>主题：landscape</p>\n<h3 id=\"创建git-ejs\"><a href=\"#创建git-ejs\" class=\"headerlink\" title=\"创建git.ejs\"></a>创建git.ejs</h3><p>在<code>themes/landscape/layout/_partial/post</code>文件夹中创建文件<code>git.ejs</code>，写入下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Gitment评论插件通用代码 --&gt;</span><br><span class=\"line\">&lt;div id=&quot;git&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 汉化版 --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://billts.site/extra_css/gitment.css&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://billts.site/js/gitment.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var gitment = new Gitment(&#123;</span><br><span class=\"line\">  id: &apos;&#123;&#123; page.date &#125;&#125;&apos;, //添加此句解决Error：validation failed的问题</span><br><span class=\"line\">  owner: &quot;%%%%%%%&quot;,//github用户名，例如MIKQUEENGE</span><br><span class=\"line\">  repo: &quot;%%%%%%%&quot;,//用户存储评论的github项目名称，例如MIKQUEENGE.github.io</span><br><span class=\"line\">  oauth: &#123;</span><br><span class=\"line\">    client_id: &quot;%%%%%%%%%%%%&quot;,//注册OAuth Application时生产的ClinetID</span><br><span class=\"line\">    client_secret:&quot;%%%%%%%%%%&quot;,//注册OAuth Application时生成的Client Secret</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gitment.render(&apos;git&apos;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- Gitment代码结束 --&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置article-ejs\"><a href=\"#配置article-ejs\" class=\"headerlink\" title=\"配置article.ejs\"></a>配置article.ejs</h3><p>在<code>themes/landscape/layout/_partial/article.ejs</code>文件的结尾添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index)&#123; %&gt;</span><br><span class=\"line\">  &lt;% if (post.comments)&#123; %&gt;</span><br><span class=\"line\">  &lt;%- partial(&apos;post/git&apos;) %&gt;</span><br><span class=\"line\">  &lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;git&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"登陆与添加评论\"><a href=\"#登陆与添加评论\" class=\"headerlink\" title=\"登陆与添加评论\"></a>登陆与添加评论</h2><p>完成上述配置后部署并打开某篇文章，拉到最底部可以看到评论区：</p>\n<p><img src=\"/images/Capture4.PNG\" alt=\"\"></p>\n<p>点击登陆后就可以添加评论啦！</p>\n<h2 id=\"遇到问题Error：validation-failed\"><a href=\"#遇到问题Error：validation-failed\" class=\"headerlink\" title=\"遇到问题Error：validation failed\"></a>遇到问题Error：validation failed</h2><p>md文件名太长导致id出现问题，使用上述代码是不会出现这个问题的。</p>\n<p>如果出现这个问题，解决方案为在gitment配置文件（如上述的<code>git.ejs</code>）中的<code>var gitment = new Gitment({})</code>内添加<code>id: &#39;&#39;,</code>（不要忘记这个逗号）</p>\n<hr>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/stven_king/article/details/78357753\" target=\"_blank\" rel=\"noopener\">Hexo博客yelee主题添加Gitment评论系统 </a></p>\n<p><a href=\"http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment评论功能接入踩坑教程/\" target=\"_blank\" rel=\"noopener\">Gitment评论功能接入踩坑教程</a></p>\n"},{"title":"将hexo的评论系统由gitment改为Valine","toc":false,"date":"2018-09-13T07:10:56.000Z","_content":"\n首先注册[LeanCloud](https://leancloud.cn/)，注册后添加应用，然后选择`应用>设置>应用key`就可以看到自己的AppID和AppKey了。\n\n然后进入自己的主题目录（比如我的主题是默认的`landscape`）：\n\n删除配置gitment时`/themes/landscape/layout/_partial/post`目录下添加的`git.ejs`文件，\n\n然后编辑`/themes/landscape/layout/_partial/`目录下的`article.ejs`，将原本配置gitment时添加在最后的那段代码删掉，添加：\n\n```ejs\n<% if (!index){ %>\n  <% if (post.comments){ %>\n    <div id=\"vcomments\"></div>\n    <script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n    <script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n    <script>\n        new Valine({\n            el: '#vcomments',\n            appId: '你的appid',\n            appKey: '你的appkey',\n            notify:true, \n            verify:true, \n            visitor:true,\n            avatar:'mm', \n            placeholder: '嘻嘻嘻' \n        })\n    </script>\n  <% } else { %>\n    <div class=\"vcomments\"></div>\n  <% } %>\n<% } %>\n```\n\n其中notify为邮件提醒功能是否开启，verify为验证码功能，visitor为文章访问量统计功能，[avatar](https://valine.js.org/avatar.html)为`Gravatar` 头像展示方式。\n\n然后即OK啦！！\n\n有其他问题可以访问[Valine官方文档](https://valine.js.org/quickstart.html)查看。\n\n\n\n关于出现`Code 403: 访问被api域名白名单拒绝，请检查你的安全域名设置.`的问题：\n\n我的问题是同时在github和coding上部署了，但是在leancloud的`应用>设置>安全中心>Web安全域名`中只添加了github的域名，因此在coding的那个域名访问时就会出现上述问题，添加域名即可解决问题。","source":"_posts/将hexo的评论系统由gitment改为Valine.md","raw":"---\ntitle: 将hexo的评论系统由gitment改为Valine\ntoc: false\ndate: 2018-09-13 15:10:56\ncategories:\n- methods\ntags:\n- hexo\n- gitment\n- Valine\n---\n\n首先注册[LeanCloud](https://leancloud.cn/)，注册后添加应用，然后选择`应用>设置>应用key`就可以看到自己的AppID和AppKey了。\n\n然后进入自己的主题目录（比如我的主题是默认的`landscape`）：\n\n删除配置gitment时`/themes/landscape/layout/_partial/post`目录下添加的`git.ejs`文件，\n\n然后编辑`/themes/landscape/layout/_partial/`目录下的`article.ejs`，将原本配置gitment时添加在最后的那段代码删掉，添加：\n\n```ejs\n<% if (!index){ %>\n  <% if (post.comments){ %>\n    <div id=\"vcomments\"></div>\n    <script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n    <script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n    <script>\n        new Valine({\n            el: '#vcomments',\n            appId: '你的appid',\n            appKey: '你的appkey',\n            notify:true, \n            verify:true, \n            visitor:true,\n            avatar:'mm', \n            placeholder: '嘻嘻嘻' \n        })\n    </script>\n  <% } else { %>\n    <div class=\"vcomments\"></div>\n  <% } %>\n<% } %>\n```\n\n其中notify为邮件提醒功能是否开启，verify为验证码功能，visitor为文章访问量统计功能，[avatar](https://valine.js.org/avatar.html)为`Gravatar` 头像展示方式。\n\n然后即OK啦！！\n\n有其他问题可以访问[Valine官方文档](https://valine.js.org/quickstart.html)查看。\n\n\n\n关于出现`Code 403: 访问被api域名白名单拒绝，请检查你的安全域名设置.`的问题：\n\n我的问题是同时在github和coding上部署了，但是在leancloud的`应用>设置>安全中心>Web安全域名`中只添加了github的域名，因此在coding的那个域名访问时就会出现上述问题，添加域名即可解决问题。","slug":"将hexo的评论系统由gitment改为Valine","published":1,"updated":"2018-09-14T03:35:52.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b17002kcragiv5jbgxb","content":"<p>首先注册<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>，注册后添加应用，然后选择<code>应用&gt;设置&gt;应用key</code>就可以看到自己的AppID和AppKey了。</p>\n<p>然后进入自己的主题目录（比如我的主题是默认的<code>landscape</code>）：</p>\n<p>删除配置gitment时<code>/themes/landscape/layout/_partial/post</code>目录下添加的<code>git.ejs</code>文件，</p>\n<p>然后编辑<code>/themes/landscape/layout/_partial/</code>目录下的<code>article.ejs</code>，将原本配置gitment时添加在最后的那段代码删掉，添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index)&#123; %&gt;</span><br><span class=\"line\">  &lt;% if (post.comments)&#123; %&gt;</span><br><span class=\"line\">    &lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&apos;//unpkg.com/valine/dist/Valine.min.js&apos;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        new Valine(&#123;</span><br><span class=\"line\">            el: &apos;#vcomments&apos;,</span><br><span class=\"line\">            appId: &apos;你的appid&apos;,</span><br><span class=\"line\">            appKey: &apos;你的appkey&apos;,</span><br><span class=\"line\">            notify:true, </span><br><span class=\"line\">            verify:true, </span><br><span class=\"line\">            visitor:true,</span><br><span class=\"line\">            avatar:&apos;mm&apos;, </span><br><span class=\"line\">            placeholder: &apos;嘻嘻嘻&apos; </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>其中notify为邮件提醒功能是否开启，verify为验证码功能，visitor为文章访问量统计功能，<a href=\"https://valine.js.org/avatar.html\" target=\"_blank\" rel=\"noopener\">avatar</a>为<code>Gravatar</code> 头像展示方式。</p>\n<p>然后即OK啦！！</p>\n<p>有其他问题可以访问<a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">Valine官方文档</a>查看。</p>\n<p>关于出现<code>Code 403: 访问被api域名白名单拒绝，请检查你的安全域名设置.</code>的问题：</p>\n<p>我的问题是同时在github和coding上部署了，但是在leancloud的<code>应用&gt;设置&gt;安全中心&gt;Web安全域名</code>中只添加了github的域名，因此在coding的那个域名访问时就会出现上述问题，添加域名即可解决问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先注册<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>，注册后添加应用，然后选择<code>应用&gt;设置&gt;应用key</code>就可以看到自己的AppID和AppKey了。</p>\n<p>然后进入自己的主题目录（比如我的主题是默认的<code>landscape</code>）：</p>\n<p>删除配置gitment时<code>/themes/landscape/layout/_partial/post</code>目录下添加的<code>git.ejs</code>文件，</p>\n<p>然后编辑<code>/themes/landscape/layout/_partial/</code>目录下的<code>article.ejs</code>，将原本配置gitment时添加在最后的那段代码删掉，添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index)&#123; %&gt;</span><br><span class=\"line\">  &lt;% if (post.comments)&#123; %&gt;</span><br><span class=\"line\">    &lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&apos;//unpkg.com/valine/dist/Valine.min.js&apos;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        new Valine(&#123;</span><br><span class=\"line\">            el: &apos;#vcomments&apos;,</span><br><span class=\"line\">            appId: &apos;你的appid&apos;,</span><br><span class=\"line\">            appKey: &apos;你的appkey&apos;,</span><br><span class=\"line\">            notify:true, </span><br><span class=\"line\">            verify:true, </span><br><span class=\"line\">            visitor:true,</span><br><span class=\"line\">            avatar:&apos;mm&apos;, </span><br><span class=\"line\">            placeholder: &apos;嘻嘻嘻&apos; </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>其中notify为邮件提醒功能是否开启，verify为验证码功能，visitor为文章访问量统计功能，<a href=\"https://valine.js.org/avatar.html\" target=\"_blank\" rel=\"noopener\">avatar</a>为<code>Gravatar</code> 头像展示方式。</p>\n<p>然后即OK啦！！</p>\n<p>有其他问题可以访问<a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">Valine官方文档</a>查看。</p>\n<p>关于出现<code>Code 403: 访问被api域名白名单拒绝，请检查你的安全域名设置.</code>的问题：</p>\n<p>我的问题是同时在github和coding上部署了，但是在leancloud的<code>应用&gt;设置&gt;安全中心&gt;Web安全域名</code>中只添加了github的域名，因此在coding的那个域名访问时就会出现上述问题，添加域名即可解决问题。</p>\n"},{"title":"智能指针","date":"2018-04-02T07:21:32.000Z","_content":"\n\n\n## 为什么使用动态指针？\n\n在C++中，动态内存的管理是通过一对运算符来完成的：\n\n- new: 在动态内存中为对象分配空间并返回一个指向该对象的指针，同时可以对这个对象初始化。\n- delete: 接受一个动态对象的指针，销毁该对象并释放与之关联的内存。\n\n这样动态内存的使用就很容易出现问题：\n\n- 忘记释放内存（delete）就会产生内存泄漏的问题。\n- 过早释放内存（在还有指针引用该内存的时候就释放了它）就会产生引用非法内存的指针。\n\n为了防止出现这种情况，更容易更安全地使用动态内存， 自C++11开始提供了两种智能指针类型来管理动态对象。\n\n## 什么是智能指针？\n\n智能指针是存储指向动态分配（堆）对象指针的类。智能指针的行为类似常规指针，重要的区别是它负责自动释放所指向的对象。\n\n## 智能指针的原理是什么？\n\n资源分配即初始化RAII（Resource Acquisition Is Initialization）：RAII 的做法是使用一个对象，在其构造时获取资源，在对象生命期控制对资源的访问使之始终保持有效，最后在对象析构的时候释放资源。\n\n定义一个类来封装资源的分配和释放，在构造函数完成资源的分配\n和初始化，在析构函数完成资源的清理，可以保证资源的正确初始化和释放。\n\n在类中采用引用计数的方法。在智能指针的内部有一个计数器，记录了当前内存资源到底有多少指针在引用，当新增加一个这个资源的引用时，计数器就会+1，否则-1，当计数器的值变为0时，这个智能指针就会自动释放它管理的 这个资源。\n\n## 常见的智能指针？\n\nC++11提供的两个智能指针为**shared_ptr**和**unique_ptr**，还定义了一个伴随类**weak_ptr**，这三个类都定义在**memory**头文件中。以及C++98引入的使用起来到处是坑的**auto_ptr**。\n\n### shared_ptr（[官方文档](http://en.cppreference.com/w/cpp/memory/shared_ptr)）\n\n>  shared_ptr允许多个指针指向相同的对象。shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。\n>\n> 每多一个指针指向它，内部的引用计数加1，每析构一次，内部的引用计数减1，减为0时，自动删除所指向的堆内存。\n>\n> shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁。\n>\n> 不要用一个原始指针初始化多个shared_ptr，否则会造成二次释放同一内存。\n\n### unique_ptr\n\n> unique_ptr“唯一”拥有其所指对象，同一时刻只能有一个unique_ptr指向给定对象（通过禁止拷贝语义、只有移动语义来实现）。\n>\n> 相比于原始指针，unique_ptr用其RAII的特性，使得在出现异常的情况下，动态资源能得到释放。\n>\n> unique_ptr指针本身的生命周期：\n>\n> - 从unique_ptr指针创建时开始，直到离开作用域。\n> - 离开作用域时，若其指向对象，则将其所指对象销毁(默认使用delete操作符，用户可指定其他操作)。\n>\n> unique_ptr指针与其所指对象的关系：\n>\n> 在智能指针生命周期内，可以改变智能指针所指对象，如创建智能指针时通过构造函数指定、通过reset方法重新指定、通过release方法释放所有权、通过移动语义转移所有权。\n\n### weak_ptr\n\n> weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为它**不具有普通指针的行为，没有重载operator*和->**,它的最大作用在于协助shared_ptr工作，**像旁观者那样观测资源的使用情况**。\n>\n> weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。\n>\n> 使用weak_ptr的成员函数use_count()可以观测资源的引用计数，另一个成员函数expired()的功能等价于use_count()==0,但更快，表示被观测的资源(也就是shared_ptr的管理的资源)已经不复存在。\n>\n> weak_ptr可以使用一个非常重要的成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象，从而操作资源。但当expired()==true的时候，lock()函数将返回一个存储空指针的shared_ptr。\n\n## 循环引用问题\n\n首先看下面的代码理解什么是循环引用：\n\n```c++\nclass B;\nclass A\n{\npublic:\n　　shared_ptr<B> m_b;\n};\n \nclass B\n{\npublic:\n　　shared_ptr<A> m_a;\n};\n \nvoid test()\n{\n　　shared_ptr<A> a(new A); //new出来的A的引用计数此时为1\n　　shared_ptr<B> b(new B); //new出来的B的引用计数此时为1\n　　a->m_b = b; //B的引用计数增加为2\n　　b->m_a = a; //A的引用计数增加为2\n \n　　//b先出作用域，B的引用计数减少为1，不为0，所以堆上的B空间没有被释放\n　　//a后出作用域，同理A的引用计数减少为1，不为0，所以堆上A的空间也没有被释放\n}\n```\n\n因为weak_ptr的构造和析构不会引起引用计数的增加或减少，所以可以用weak_ptr解决这个问题（weak_ptr必须与shared_ptr配合使用,不能单独使用）：\n\n```c++\nclass B;\nclass A\n{\npublic:\n　　weak_ptr<B> m_b;\n};\n \nclass B\n{\npublic:\n　　weak_ptr<A> m_a;\n};\n \nvoid test()\n{\n　　shared_ptr<A> a(new A);\n　　shared_ptr<B> b(new B);\n　　a->m_b = b;\n　　b->m_a = a;\n}\n```\n\n### auto_ptr\n\n缺陷：（[参考链接](https://www.zhihu.com/question/37351146/answer/83379043)，来源：知乎，作者：Sen Zhang）\n\n> auto_ptr采用可以采用copy语义来转移指针资源的所有权的同时将原指针置为NULL，这跟通常理解的copy行为是不一致的，而这样的行为要有些场合下不是我们希望看到的。\n>\n> 例如参考《Effective STL》第8条，sort的快排实现中有将元素复制到某个局部临时对象中，但对于auto_ptr，却将原元素置为null，这就导致最后的排序结果中可能有大量的null。\n>\n> 而现在C++11的对move语义的支持，使得这样的资源转移**通常**只会在**必要的场合**发生，例如转移一个临时变量（右值）给某个named variable（左值）\n>\n> 这也就是用unique_ptr代替auto_ptr的原因，\n>\n> 本质上来说，就是unique_ptr禁用了copy，而用move替代。\n\n```c++\nstd::unique_ptr<bar> b0(new bar());\nstd::unique_ptr<bar> b1(std::move(b0));\n```\n\n## 智能指针的实现\n\n```c++\ntemplate <typename T>\nclass SmartPointer {\npublic:\n    //构造函数\n    SmartPointer(T* p=0): _ptr(p), _reference_count(new size_t){\n        if(p)\n            *_reference_count = 1; \n        else\n            *_reference_count = 0; \n    }\n    //拷贝构造函数\n    SmartPointer(const SmartPointer& src) {\n        if(this!=&src) {\n            _ptr = src._ptr;\n            _reference_count = src._reference_count;\n            (*_reference_count)++;\n        }\n    }\n    //重载赋值操作符\n    SmartPointer& operator=(const SmartPointer& src) {\n        if(_ptr==src._ptr) {\n            return *this;\n        }\n        releaseCount();\n        _ptr = src._ptr;\n        _reference_count = src._reference_count;\n        (*_reference_count)++;\n        return *this;\n    }\n\n    //重载操作符\n    T& operator*() {\n        if(ptr) {\n            return *_ptr;\n        }\n        //throw exception\n    }\n    //重载操作符\n    T* operator->() {\n        if(_ptr) {\n            return _ptr;\n        }\n        //throw exception\n    }\n    //析构函数\n    ~SmartPointer() {\n        if (--(*_reference_count) == 0) {\n            delete _ptr;\n            delete _reference_count;\n        }\n    }\nprivate:\n    T *_ptr;\n    size_t *_reference_count;\n    void releaseCount() {\n        if(_ptr) {\n            (*_reference_count)--;\n            if((*_reference_count)==0) {\n                delete _ptr;\n                delete _reference_count;\n            }    \n        }\n    }\n};\n\nint main() \n{\n    SmartPointer<char> cp1(new char('a'));\n    SmartPointer<char> cp2(cp1);\n    SmartPointer<char> cp3;\n    cp3 = cp2;\n    cp3 = cp1;\n    cp3 = cp3;\n    SmartPointer<char> cp4(new char('b'));\n    cp3 = cp4;\n}\n```\n\n","source":"_posts/智能指针.md","raw":"---\ntitle: 智能指针\ndate: 2018-04-02 15:21:32\ncategories: \n- C/C++\ntags:\n- 指针\n---\n\n\n\n## 为什么使用动态指针？\n\n在C++中，动态内存的管理是通过一对运算符来完成的：\n\n- new: 在动态内存中为对象分配空间并返回一个指向该对象的指针，同时可以对这个对象初始化。\n- delete: 接受一个动态对象的指针，销毁该对象并释放与之关联的内存。\n\n这样动态内存的使用就很容易出现问题：\n\n- 忘记释放内存（delete）就会产生内存泄漏的问题。\n- 过早释放内存（在还有指针引用该内存的时候就释放了它）就会产生引用非法内存的指针。\n\n为了防止出现这种情况，更容易更安全地使用动态内存， 自C++11开始提供了两种智能指针类型来管理动态对象。\n\n## 什么是智能指针？\n\n智能指针是存储指向动态分配（堆）对象指针的类。智能指针的行为类似常规指针，重要的区别是它负责自动释放所指向的对象。\n\n## 智能指针的原理是什么？\n\n资源分配即初始化RAII（Resource Acquisition Is Initialization）：RAII 的做法是使用一个对象，在其构造时获取资源，在对象生命期控制对资源的访问使之始终保持有效，最后在对象析构的时候释放资源。\n\n定义一个类来封装资源的分配和释放，在构造函数完成资源的分配\n和初始化，在析构函数完成资源的清理，可以保证资源的正确初始化和释放。\n\n在类中采用引用计数的方法。在智能指针的内部有一个计数器，记录了当前内存资源到底有多少指针在引用，当新增加一个这个资源的引用时，计数器就会+1，否则-1，当计数器的值变为0时，这个智能指针就会自动释放它管理的 这个资源。\n\n## 常见的智能指针？\n\nC++11提供的两个智能指针为**shared_ptr**和**unique_ptr**，还定义了一个伴随类**weak_ptr**，这三个类都定义在**memory**头文件中。以及C++98引入的使用起来到处是坑的**auto_ptr**。\n\n### shared_ptr（[官方文档](http://en.cppreference.com/w/cpp/memory/shared_ptr)）\n\n>  shared_ptr允许多个指针指向相同的对象。shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。\n>\n> 每多一个指针指向它，内部的引用计数加1，每析构一次，内部的引用计数减1，减为0时，自动删除所指向的堆内存。\n>\n> shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁。\n>\n> 不要用一个原始指针初始化多个shared_ptr，否则会造成二次释放同一内存。\n\n### unique_ptr\n\n> unique_ptr“唯一”拥有其所指对象，同一时刻只能有一个unique_ptr指向给定对象（通过禁止拷贝语义、只有移动语义来实现）。\n>\n> 相比于原始指针，unique_ptr用其RAII的特性，使得在出现异常的情况下，动态资源能得到释放。\n>\n> unique_ptr指针本身的生命周期：\n>\n> - 从unique_ptr指针创建时开始，直到离开作用域。\n> - 离开作用域时，若其指向对象，则将其所指对象销毁(默认使用delete操作符，用户可指定其他操作)。\n>\n> unique_ptr指针与其所指对象的关系：\n>\n> 在智能指针生命周期内，可以改变智能指针所指对象，如创建智能指针时通过构造函数指定、通过reset方法重新指定、通过release方法释放所有权、通过移动语义转移所有权。\n\n### weak_ptr\n\n> weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为它**不具有普通指针的行为，没有重载operator*和->**,它的最大作用在于协助shared_ptr工作，**像旁观者那样观测资源的使用情况**。\n>\n> weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。\n>\n> 使用weak_ptr的成员函数use_count()可以观测资源的引用计数，另一个成员函数expired()的功能等价于use_count()==0,但更快，表示被观测的资源(也就是shared_ptr的管理的资源)已经不复存在。\n>\n> weak_ptr可以使用一个非常重要的成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象，从而操作资源。但当expired()==true的时候，lock()函数将返回一个存储空指针的shared_ptr。\n\n## 循环引用问题\n\n首先看下面的代码理解什么是循环引用：\n\n```c++\nclass B;\nclass A\n{\npublic:\n　　shared_ptr<B> m_b;\n};\n \nclass B\n{\npublic:\n　　shared_ptr<A> m_a;\n};\n \nvoid test()\n{\n　　shared_ptr<A> a(new A); //new出来的A的引用计数此时为1\n　　shared_ptr<B> b(new B); //new出来的B的引用计数此时为1\n　　a->m_b = b; //B的引用计数增加为2\n　　b->m_a = a; //A的引用计数增加为2\n \n　　//b先出作用域，B的引用计数减少为1，不为0，所以堆上的B空间没有被释放\n　　//a后出作用域，同理A的引用计数减少为1，不为0，所以堆上A的空间也没有被释放\n}\n```\n\n因为weak_ptr的构造和析构不会引起引用计数的增加或减少，所以可以用weak_ptr解决这个问题（weak_ptr必须与shared_ptr配合使用,不能单独使用）：\n\n```c++\nclass B;\nclass A\n{\npublic:\n　　weak_ptr<B> m_b;\n};\n \nclass B\n{\npublic:\n　　weak_ptr<A> m_a;\n};\n \nvoid test()\n{\n　　shared_ptr<A> a(new A);\n　　shared_ptr<B> b(new B);\n　　a->m_b = b;\n　　b->m_a = a;\n}\n```\n\n### auto_ptr\n\n缺陷：（[参考链接](https://www.zhihu.com/question/37351146/answer/83379043)，来源：知乎，作者：Sen Zhang）\n\n> auto_ptr采用可以采用copy语义来转移指针资源的所有权的同时将原指针置为NULL，这跟通常理解的copy行为是不一致的，而这样的行为要有些场合下不是我们希望看到的。\n>\n> 例如参考《Effective STL》第8条，sort的快排实现中有将元素复制到某个局部临时对象中，但对于auto_ptr，却将原元素置为null，这就导致最后的排序结果中可能有大量的null。\n>\n> 而现在C++11的对move语义的支持，使得这样的资源转移**通常**只会在**必要的场合**发生，例如转移一个临时变量（右值）给某个named variable（左值）\n>\n> 这也就是用unique_ptr代替auto_ptr的原因，\n>\n> 本质上来说，就是unique_ptr禁用了copy，而用move替代。\n\n```c++\nstd::unique_ptr<bar> b0(new bar());\nstd::unique_ptr<bar> b1(std::move(b0));\n```\n\n## 智能指针的实现\n\n```c++\ntemplate <typename T>\nclass SmartPointer {\npublic:\n    //构造函数\n    SmartPointer(T* p=0): _ptr(p), _reference_count(new size_t){\n        if(p)\n            *_reference_count = 1; \n        else\n            *_reference_count = 0; \n    }\n    //拷贝构造函数\n    SmartPointer(const SmartPointer& src) {\n        if(this!=&src) {\n            _ptr = src._ptr;\n            _reference_count = src._reference_count;\n            (*_reference_count)++;\n        }\n    }\n    //重载赋值操作符\n    SmartPointer& operator=(const SmartPointer& src) {\n        if(_ptr==src._ptr) {\n            return *this;\n        }\n        releaseCount();\n        _ptr = src._ptr;\n        _reference_count = src._reference_count;\n        (*_reference_count)++;\n        return *this;\n    }\n\n    //重载操作符\n    T& operator*() {\n        if(ptr) {\n            return *_ptr;\n        }\n        //throw exception\n    }\n    //重载操作符\n    T* operator->() {\n        if(_ptr) {\n            return _ptr;\n        }\n        //throw exception\n    }\n    //析构函数\n    ~SmartPointer() {\n        if (--(*_reference_count) == 0) {\n            delete _ptr;\n            delete _reference_count;\n        }\n    }\nprivate:\n    T *_ptr;\n    size_t *_reference_count;\n    void releaseCount() {\n        if(_ptr) {\n            (*_reference_count)--;\n            if((*_reference_count)==0) {\n                delete _ptr;\n                delete _reference_count;\n            }    \n        }\n    }\n};\n\nint main() \n{\n    SmartPointer<char> cp1(new char('a'));\n    SmartPointer<char> cp2(cp1);\n    SmartPointer<char> cp3;\n    cp3 = cp2;\n    cp3 = cp1;\n    cp3 = cp3;\n    SmartPointer<char> cp4(new char('b'));\n    cp3 = cp4;\n}\n```\n\n","slug":"智能指针","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b19002ncrag3v2fwmxa","content":"<h2 id=\"为什么使用动态指针？\"><a href=\"#为什么使用动态指针？\" class=\"headerlink\" title=\"为什么使用动态指针？\"></a>为什么使用动态指针？</h2><p>在C++中，动态内存的管理是通过一对运算符来完成的：</p>\n<ul>\n<li>new: 在动态内存中为对象分配空间并返回一个指向该对象的指针，同时可以对这个对象初始化。</li>\n<li>delete: 接受一个动态对象的指针，销毁该对象并释放与之关联的内存。</li>\n</ul>\n<p>这样动态内存的使用就很容易出现问题：</p>\n<ul>\n<li>忘记释放内存（delete）就会产生内存泄漏的问题。</li>\n<li>过早释放内存（在还有指针引用该内存的时候就释放了它）就会产生引用非法内存的指针。</li>\n</ul>\n<p>为了防止出现这种情况，更容易更安全地使用动态内存， 自C++11开始提供了两种智能指针类型来管理动态对象。</p>\n<h2 id=\"什么是智能指针？\"><a href=\"#什么是智能指针？\" class=\"headerlink\" title=\"什么是智能指针？\"></a>什么是智能指针？</h2><p>智能指针是存储指向动态分配（堆）对象指针的类。智能指针的行为类似常规指针，重要的区别是它负责自动释放所指向的对象。</p>\n<h2 id=\"智能指针的原理是什么？\"><a href=\"#智能指针的原理是什么？\" class=\"headerlink\" title=\"智能指针的原理是什么？\"></a>智能指针的原理是什么？</h2><p>资源分配即初始化RAII（Resource Acquisition Is Initialization）：RAII 的做法是使用一个对象，在其构造时获取资源，在对象生命期控制对资源的访问使之始终保持有效，最后在对象析构的时候释放资源。</p>\n<p>定义一个类来封装资源的分配和释放，在构造函数完成资源的分配<br>和初始化，在析构函数完成资源的清理，可以保证资源的正确初始化和释放。</p>\n<p>在类中采用引用计数的方法。在智能指针的内部有一个计数器，记录了当前内存资源到底有多少指针在引用，当新增加一个这个资源的引用时，计数器就会+1，否则-1，当计数器的值变为0时，这个智能指针就会自动释放它管理的 这个资源。</p>\n<h2 id=\"常见的智能指针？\"><a href=\"#常见的智能指针？\" class=\"headerlink\" title=\"常见的智能指针？\"></a>常见的智能指针？</h2><p>C++11提供的两个智能指针为<strong>shared_ptr</strong>和<strong>unique_ptr</strong>，还定义了一个伴随类<strong>weak_ptr</strong>，这三个类都定义在<strong>memory</strong>头文件中。以及C++98引入的使用起来到处是坑的<strong>auto_ptr</strong>。</p>\n<h3 id=\"shared-ptr（官方文档）\"><a href=\"#shared-ptr（官方文档）\" class=\"headerlink\" title=\"shared_ptr（官方文档）\"></a>shared_ptr（<a href=\"http://en.cppreference.com/w/cpp/memory/shared_ptr\" target=\"_blank\" rel=\"noopener\">官方文档</a>）</h3><blockquote>\n<p> shared_ptr允许多个指针指向相同的对象。shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。</p>\n<p>每多一个指针指向它，内部的引用计数加1，每析构一次，内部的引用计数减1，减为0时，自动删除所指向的堆内存。</p>\n<p>shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁。</p>\n<p>不要用一个原始指针初始化多个shared_ptr，否则会造成二次释放同一内存。</p>\n</blockquote>\n<h3 id=\"unique-ptr\"><a href=\"#unique-ptr\" class=\"headerlink\" title=\"unique_ptr\"></a>unique_ptr</h3><blockquote>\n<p>unique_ptr“唯一”拥有其所指对象，同一时刻只能有一个unique_ptr指向给定对象（通过禁止拷贝语义、只有移动语义来实现）。</p>\n<p>相比于原始指针，unique_ptr用其RAII的特性，使得在出现异常的情况下，动态资源能得到释放。</p>\n<p>unique_ptr指针本身的生命周期：</p>\n<ul>\n<li>从unique_ptr指针创建时开始，直到离开作用域。</li>\n<li>离开作用域时，若其指向对象，则将其所指对象销毁(默认使用delete操作符，用户可指定其他操作)。</li>\n</ul>\n<p>unique_ptr指针与其所指对象的关系：</p>\n<p>在智能指针生命周期内，可以改变智能指针所指对象，如创建智能指针时通过构造函数指定、通过reset方法重新指定、通过release方法释放所有权、通过移动语义转移所有权。</p>\n</blockquote>\n<h3 id=\"weak-ptr\"><a href=\"#weak-ptr\" class=\"headerlink\" title=\"weak_ptr\"></a>weak_ptr</h3><blockquote>\n<p>weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为它<strong>不具有普通指针的行为，没有重载operator*和-&gt;</strong>,它的最大作用在于协助shared_ptr工作，<strong>像旁观者那样观测资源的使用情况</strong>。</p>\n<p>weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。</p>\n<p>使用weak_ptr的成员函数use_count()可以观测资源的引用计数，另一个成员函数expired()的功能等价于use_count()==0,但更快，表示被观测的资源(也就是shared_ptr的管理的资源)已经不复存在。</p>\n<p>weak_ptr可以使用一个非常重要的成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象，从而操作资源。但当expired()==true的时候，lock()函数将返回一个存储空指针的shared_ptr。</p>\n</blockquote>\n<h2 id=\"循环引用问题\"><a href=\"#循环引用问题\" class=\"headerlink\" title=\"循环引用问题\"></a>循环引用问题</h2><p>首先看下面的代码理解什么是循环引用：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; m_b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; m_a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; a(<span class=\"keyword\">new</span> A); <span class=\"comment\">//new出来的A的引用计数此时为1</span></span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; b(<span class=\"keyword\">new</span> B); <span class=\"comment\">//new出来的B的引用计数此时为1</span></span><br><span class=\"line\">　　a-&gt;m_b = b; <span class=\"comment\">//B的引用计数增加为2</span></span><br><span class=\"line\">　　b-&gt;m_a = a; <span class=\"comment\">//A的引用计数增加为2</span></span><br><span class=\"line\"> </span><br><span class=\"line\">　　<span class=\"comment\">//b先出作用域，B的引用计数减少为1，不为0，所以堆上的B空间没有被释放</span></span><br><span class=\"line\">　　<span class=\"comment\">//a后出作用域，同理A的引用计数减少为1，不为0，所以堆上A的空间也没有被释放</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为weak_ptr的构造和析构不会引起引用计数的增加或减少，所以可以用weak_ptr解决这个问题（weak_ptr必须与shared_ptr配合使用,不能单独使用）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　weak_ptr&lt;B&gt; m_b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　weak_ptr&lt;A&gt; m_a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; a(<span class=\"keyword\">new</span> A);</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; b(<span class=\"keyword\">new</span> B);</span><br><span class=\"line\">　　a-&gt;m_b = b;</span><br><span class=\"line\">　　b-&gt;m_a = a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"auto-ptr\"><a href=\"#auto-ptr\" class=\"headerlink\" title=\"auto_ptr\"></a>auto_ptr</h3><p>缺陷：（<a href=\"https://www.zhihu.com/question/37351146/answer/83379043\" target=\"_blank\" rel=\"noopener\">参考链接</a>，来源：知乎，作者：Sen Zhang）</p>\n<blockquote>\n<p>auto_ptr采用可以采用copy语义来转移指针资源的所有权的同时将原指针置为NULL，这跟通常理解的copy行为是不一致的，而这样的行为要有些场合下不是我们希望看到的。</p>\n<p>例如参考《Effective STL》第8条，sort的快排实现中有将元素复制到某个局部临时对象中，但对于auto_ptr，却将原元素置为null，这就导致最后的排序结果中可能有大量的null。</p>\n<p>而现在C++11的对move语义的支持，使得这样的资源转移<strong>通常</strong>只会在<strong>必要的场合</strong>发生，例如转移一个临时变量（右值）给某个named variable（左值）</p>\n<p>这也就是用unique_ptr代替auto_ptr的原因，</p>\n<p>本质上来说，就是unique_ptr禁用了copy，而用move替代。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;bar&gt; b0(<span class=\"keyword\">new</span> bar());</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;bar&gt; b1(<span class=\"built_in\">std</span>::move(b0));</span><br></pre></td></tr></table></figure>\n<h2 id=\"智能指针的实现\"><a href=\"#智能指针的实现\" class=\"headerlink\" title=\"智能指针的实现\"></a>智能指针的实现</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmartPointer</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    SmartPointer(T* p=<span class=\"number\">0</span>): _ptr(p), _reference_count(<span class=\"keyword\">new</span> <span class=\"keyword\">size_t</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p)</span><br><span class=\"line\">            *_reference_count = <span class=\"number\">1</span>; </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            *_reference_count = <span class=\"number\">0</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">    SmartPointer(<span class=\"keyword\">const</span> SmartPointer&amp; src) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>!=&amp;src) &#123;</span><br><span class=\"line\">            _ptr = src._ptr;</span><br><span class=\"line\">            _reference_count = src._reference_count;</span><br><span class=\"line\">            (*_reference_count)++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重载赋值操作符</span></span><br><span class=\"line\">    SmartPointer&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> SmartPointer&amp; src) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr==src._ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        releaseCount();</span><br><span class=\"line\">        _ptr = src._ptr;</span><br><span class=\"line\">        _reference_count = src._reference_count;</span><br><span class=\"line\">        (*_reference_count)++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重载操作符</span></span><br><span class=\"line\">    T&amp; <span class=\"keyword\">operator</span>*() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *_ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//throw exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重载操作符</span></span><br><span class=\"line\">    T* <span class=\"keyword\">operator</span>-&gt;() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//throw exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    ~SmartPointer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--(*_reference_count) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _ptr;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _reference_count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T *_ptr;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> *_reference_count;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">releaseCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr) &#123;</span><br><span class=\"line\">            (*_reference_count)--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((*_reference_count)==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _ptr;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _reference_count;</span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp1(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>(<span class=\"string\">'a'</span>));</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp2(cp1);</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp3;</span><br><span class=\"line\">    cp3 = cp2;</span><br><span class=\"line\">    cp3 = cp1;</span><br><span class=\"line\">    cp3 = cp3;</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp4(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>(<span class=\"string\">'b'</span>));</span><br><span class=\"line\">    cp3 = cp4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么使用动态指针？\"><a href=\"#为什么使用动态指针？\" class=\"headerlink\" title=\"为什么使用动态指针？\"></a>为什么使用动态指针？</h2><p>在C++中，动态内存的管理是通过一对运算符来完成的：</p>\n<ul>\n<li>new: 在动态内存中为对象分配空间并返回一个指向该对象的指针，同时可以对这个对象初始化。</li>\n<li>delete: 接受一个动态对象的指针，销毁该对象并释放与之关联的内存。</li>\n</ul>\n<p>这样动态内存的使用就很容易出现问题：</p>\n<ul>\n<li>忘记释放内存（delete）就会产生内存泄漏的问题。</li>\n<li>过早释放内存（在还有指针引用该内存的时候就释放了它）就会产生引用非法内存的指针。</li>\n</ul>\n<p>为了防止出现这种情况，更容易更安全地使用动态内存， 自C++11开始提供了两种智能指针类型来管理动态对象。</p>\n<h2 id=\"什么是智能指针？\"><a href=\"#什么是智能指针？\" class=\"headerlink\" title=\"什么是智能指针？\"></a>什么是智能指针？</h2><p>智能指针是存储指向动态分配（堆）对象指针的类。智能指针的行为类似常规指针，重要的区别是它负责自动释放所指向的对象。</p>\n<h2 id=\"智能指针的原理是什么？\"><a href=\"#智能指针的原理是什么？\" class=\"headerlink\" title=\"智能指针的原理是什么？\"></a>智能指针的原理是什么？</h2><p>资源分配即初始化RAII（Resource Acquisition Is Initialization）：RAII 的做法是使用一个对象，在其构造时获取资源，在对象生命期控制对资源的访问使之始终保持有效，最后在对象析构的时候释放资源。</p>\n<p>定义一个类来封装资源的分配和释放，在构造函数完成资源的分配<br>和初始化，在析构函数完成资源的清理，可以保证资源的正确初始化和释放。</p>\n<p>在类中采用引用计数的方法。在智能指针的内部有一个计数器，记录了当前内存资源到底有多少指针在引用，当新增加一个这个资源的引用时，计数器就会+1，否则-1，当计数器的值变为0时，这个智能指针就会自动释放它管理的 这个资源。</p>\n<h2 id=\"常见的智能指针？\"><a href=\"#常见的智能指针？\" class=\"headerlink\" title=\"常见的智能指针？\"></a>常见的智能指针？</h2><p>C++11提供的两个智能指针为<strong>shared_ptr</strong>和<strong>unique_ptr</strong>，还定义了一个伴随类<strong>weak_ptr</strong>，这三个类都定义在<strong>memory</strong>头文件中。以及C++98引入的使用起来到处是坑的<strong>auto_ptr</strong>。</p>\n<h3 id=\"shared-ptr（官方文档）\"><a href=\"#shared-ptr（官方文档）\" class=\"headerlink\" title=\"shared_ptr（官方文档）\"></a>shared_ptr（<a href=\"http://en.cppreference.com/w/cpp/memory/shared_ptr\" target=\"_blank\" rel=\"noopener\">官方文档</a>）</h3><blockquote>\n<p> shared_ptr允许多个指针指向相同的对象。shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。</p>\n<p>每多一个指针指向它，内部的引用计数加1，每析构一次，内部的引用计数减1，减为0时，自动删除所指向的堆内存。</p>\n<p>shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁。</p>\n<p>不要用一个原始指针初始化多个shared_ptr，否则会造成二次释放同一内存。</p>\n</blockquote>\n<h3 id=\"unique-ptr\"><a href=\"#unique-ptr\" class=\"headerlink\" title=\"unique_ptr\"></a>unique_ptr</h3><blockquote>\n<p>unique_ptr“唯一”拥有其所指对象，同一时刻只能有一个unique_ptr指向给定对象（通过禁止拷贝语义、只有移动语义来实现）。</p>\n<p>相比于原始指针，unique_ptr用其RAII的特性，使得在出现异常的情况下，动态资源能得到释放。</p>\n<p>unique_ptr指针本身的生命周期：</p>\n<ul>\n<li>从unique_ptr指针创建时开始，直到离开作用域。</li>\n<li>离开作用域时，若其指向对象，则将其所指对象销毁(默认使用delete操作符，用户可指定其他操作)。</li>\n</ul>\n<p>unique_ptr指针与其所指对象的关系：</p>\n<p>在智能指针生命周期内，可以改变智能指针所指对象，如创建智能指针时通过构造函数指定、通过reset方法重新指定、通过release方法释放所有权、通过移动语义转移所有权。</p>\n</blockquote>\n<h3 id=\"weak-ptr\"><a href=\"#weak-ptr\" class=\"headerlink\" title=\"weak_ptr\"></a>weak_ptr</h3><blockquote>\n<p>weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为它<strong>不具有普通指针的行为，没有重载operator*和-&gt;</strong>,它的最大作用在于协助shared_ptr工作，<strong>像旁观者那样观测资源的使用情况</strong>。</p>\n<p>weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。</p>\n<p>使用weak_ptr的成员函数use_count()可以观测资源的引用计数，另一个成员函数expired()的功能等价于use_count()==0,但更快，表示被观测的资源(也就是shared_ptr的管理的资源)已经不复存在。</p>\n<p>weak_ptr可以使用一个非常重要的成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象，从而操作资源。但当expired()==true的时候，lock()函数将返回一个存储空指针的shared_ptr。</p>\n</blockquote>\n<h2 id=\"循环引用问题\"><a href=\"#循环引用问题\" class=\"headerlink\" title=\"循环引用问题\"></a>循环引用问题</h2><p>首先看下面的代码理解什么是循环引用：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; m_b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; m_a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; a(<span class=\"keyword\">new</span> A); <span class=\"comment\">//new出来的A的引用计数此时为1</span></span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; b(<span class=\"keyword\">new</span> B); <span class=\"comment\">//new出来的B的引用计数此时为1</span></span><br><span class=\"line\">　　a-&gt;m_b = b; <span class=\"comment\">//B的引用计数增加为2</span></span><br><span class=\"line\">　　b-&gt;m_a = a; <span class=\"comment\">//A的引用计数增加为2</span></span><br><span class=\"line\"> </span><br><span class=\"line\">　　<span class=\"comment\">//b先出作用域，B的引用计数减少为1，不为0，所以堆上的B空间没有被释放</span></span><br><span class=\"line\">　　<span class=\"comment\">//a后出作用域，同理A的引用计数减少为1，不为0，所以堆上A的空间也没有被释放</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为weak_ptr的构造和析构不会引起引用计数的增加或减少，所以可以用weak_ptr解决这个问题（weak_ptr必须与shared_ptr配合使用,不能单独使用）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　weak_ptr&lt;B&gt; m_b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">　　weak_ptr&lt;A&gt; m_a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;A&gt; a(<span class=\"keyword\">new</span> A);</span><br><span class=\"line\">　　<span class=\"built_in\">shared_ptr</span>&lt;B&gt; b(<span class=\"keyword\">new</span> B);</span><br><span class=\"line\">　　a-&gt;m_b = b;</span><br><span class=\"line\">　　b-&gt;m_a = a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"auto-ptr\"><a href=\"#auto-ptr\" class=\"headerlink\" title=\"auto_ptr\"></a>auto_ptr</h3><p>缺陷：（<a href=\"https://www.zhihu.com/question/37351146/answer/83379043\" target=\"_blank\" rel=\"noopener\">参考链接</a>，来源：知乎，作者：Sen Zhang）</p>\n<blockquote>\n<p>auto_ptr采用可以采用copy语义来转移指针资源的所有权的同时将原指针置为NULL，这跟通常理解的copy行为是不一致的，而这样的行为要有些场合下不是我们希望看到的。</p>\n<p>例如参考《Effective STL》第8条，sort的快排实现中有将元素复制到某个局部临时对象中，但对于auto_ptr，却将原元素置为null，这就导致最后的排序结果中可能有大量的null。</p>\n<p>而现在C++11的对move语义的支持，使得这样的资源转移<strong>通常</strong>只会在<strong>必要的场合</strong>发生，例如转移一个临时变量（右值）给某个named variable（左值）</p>\n<p>这也就是用unique_ptr代替auto_ptr的原因，</p>\n<p>本质上来说，就是unique_ptr禁用了copy，而用move替代。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;bar&gt; b0(<span class=\"keyword\">new</span> bar());</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;bar&gt; b1(<span class=\"built_in\">std</span>::move(b0));</span><br></pre></td></tr></table></figure>\n<h2 id=\"智能指针的实现\"><a href=\"#智能指针的实现\" class=\"headerlink\" title=\"智能指针的实现\"></a>智能指针的实现</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmartPointer</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    SmartPointer(T* p=<span class=\"number\">0</span>): _ptr(p), _reference_count(<span class=\"keyword\">new</span> <span class=\"keyword\">size_t</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p)</span><br><span class=\"line\">            *_reference_count = <span class=\"number\">1</span>; </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            *_reference_count = <span class=\"number\">0</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">    SmartPointer(<span class=\"keyword\">const</span> SmartPointer&amp; src) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>!=&amp;src) &#123;</span><br><span class=\"line\">            _ptr = src._ptr;</span><br><span class=\"line\">            _reference_count = src._reference_count;</span><br><span class=\"line\">            (*_reference_count)++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重载赋值操作符</span></span><br><span class=\"line\">    SmartPointer&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> SmartPointer&amp; src) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr==src._ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        releaseCount();</span><br><span class=\"line\">        _ptr = src._ptr;</span><br><span class=\"line\">        _reference_count = src._reference_count;</span><br><span class=\"line\">        (*_reference_count)++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重载操作符</span></span><br><span class=\"line\">    T&amp; <span class=\"keyword\">operator</span>*() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *_ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//throw exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重载操作符</span></span><br><span class=\"line\">    T* <span class=\"keyword\">operator</span>-&gt;() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//throw exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    ~SmartPointer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--(*_reference_count) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _ptr;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _reference_count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T *_ptr;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> *_reference_count;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">releaseCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_ptr) &#123;</span><br><span class=\"line\">            (*_reference_count)--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((*_reference_count)==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _ptr;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> _reference_count;</span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp1(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>(<span class=\"string\">'a'</span>));</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp2(cp1);</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp3;</span><br><span class=\"line\">    cp3 = cp2;</span><br><span class=\"line\">    cp3 = cp1;</span><br><span class=\"line\">    cp3 = cp3;</span><br><span class=\"line\">    SmartPointer&lt;<span class=\"keyword\">char</span>&gt; cp4(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>(<span class=\"string\">'b'</span>));</span><br><span class=\"line\">    cp3 = cp4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"深度学习周报week01&week02","date":"2018-03-30T14:16:12.000Z","toc":true,"_content":"\n\n\n# Week1\n\n## 配置Cuda、Cudnn和Tensorflow\n\n要注意**版本对应**\n\n## 学习基础知识\n\n### [神经网络基本原理](http://www.ruanyifeng.com/blog/2017/07/neural-network.html)\n\n#### 感知器\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071202.png)\n一个圆圈表示一个感知器，x1、x2、x3...为输入，output为对应的输出。为了简化问题，output只取0或1.\n\n#### 权重和阈值\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071203.png)\nthreshold为阈值，xi为输入，wi为对应的权重，表示输入的重要性。\n\n#### 矢量化\n\n- 将输入x1,x2,x3,...写为矢量**x**: < x1,x2,x3,... >\n- 将权重w1,w2,w3,...写为矢量**w**: < w1,w2,w3,... >\n- 则 **w·x** = ∑ wx\n- 设 b 等于负的阈值 b = -threshold\n  ![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071206.png)\n\n#### 实际的决策模型\n\n多个感知器组成的多层网络：\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071205.png)\n\n#### 神经网络的运作过程\n\n- 确定输入和输出\n- 找到一种或多种算法，可以从输入得到输出（决定决策模型）\n- 找到一组已知答案的数据集，用来训练模型，估算w和b\n  **估算w和b：试错法**\n  首先获取一组随机的**w**和**x**，将**w**（或**b**）进行微小变动，记作**Δw**（或**Δb**），然后观察输出有什么变化。不断重复这个过程，直至得到对应最精确输出的那组**w**和**b**，就是我们要的值。这个过程称为**模型的训练**。\n- 一旦新的数据产生，输入模型，就可以得到结果，同时对w和b进行校正\n\n#### 输出的连续性\n\n为了保证能观察到**w**和**b**的微小变化对结果造成的影响，必须将\"输出\"改造成一个连续性函数。一般使用**sigmoid**函数。\n\n- 将output记为z：`z = wx + b` \n- 则结果的sigmoid函数为σ(z)：`σ(z) = 1 / (1 + e^(-z))`\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071209.png)\n实际上，Δσ满足下面的公式：\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071210.png)\n即Δσ和Δw和Δb之间是线性关系，变化率是偏导数。这就有利于精确推算出w和b的值了。\n\n### 反向传播（BP）\n\n- 即估算**w**和**b**的**试错法**的具体实现。\n- 反向传播算法主要由两个过程（**激励传播、权重更新**）反复循环迭代，直到结果误差在可容忍的限度结束。\n\n#### 激励传播\n\n每次迭代中的传播环节包含两步：\n\n1. 前向传播阶段——按照当前**w**和**b**计算**output（激励响应）**；\n2. 反向传播阶段——将**output**和目标输出求差，从而获得隐层和输出层的**响应误差**。\n\n#### 权重更新\n\n对于每个权重 **wi **，按照以下步骤进行更新：\n\n1. 将**输入激励**和**响应误差**相乘，从而获得权重的**梯度**；\n2. 将这个梯度乘上一个比例并取反后加到权重上。\n3. 这个比例将会影响到训练过程的速度和效果，因此称为“**训练因子**”。梯度的方向指明了误差扩大的方向，因此在更新权重的时候需要对其取反，从而减小权重引起的误差。\n\n<u>关于算法推导（**梯度下降+链式求导**），网上的博客质量良莠不齐，因此打算等买的书到了之后再研究一下，这里就不再列出。</u>\n\n### 卷积神经网络（CNN）\n\n- **卷积神经网络**由三部分构成：\n  - 第一部分是输入层。\n  - 第二部分由n个卷积层和池化层的组合组成。\n  - 第三部分由一个全连结的多层感知机分类器构成。\n- **卷积神经网络**与**普通神经网络**的区别在于，卷积神经网络包含了一个特征抽取器（即第二部分）。\n- **卷积神经网络**的卷积层中，一个神经元只和部分邻层神经元连接。\n- 在每一个**卷积层**中，通常包含若干个**特征平面(feature map)，**每个特征平面由一些**矩形排列**的的神经元组成，同一特征平面的神经元共享权值，这里共享的权值就是**卷积核**。\n- **卷积核**一般以随机小数矩阵的形式初始化，在网络的训练过程中卷积核将通过学习得到合理的权值（**反向传播**）。共享权值（卷积核）带来的直接好处是减少网络各层之间的连接（**减少参数**），同时又降低了**过拟合**（参数过多导致）的风险。\n- **子采样**也叫做池化（pooling），也可以认为是下采样，通常有均值子采样（mean pooling）和最大值子采样（max pooling）两种形式。\n\n<u>与**普通的神经网络**相比，包含**卷积和子采样**的**卷积神经网络**大大**简化了模型复杂度，减少了模型的参数**。</u>\n\n#### **局部连接**\n\n假设一张图大小为n1\\*n2，一个卷积核的大小为m1\\*m2，对于卷积后生成的每一个数据xi，它都是原图中对应位置的m1\\*m2矩阵和这个卷积核对应点相乘求和得到的。\n\n也就是说xi只和原图中对应的m1\\*m2的那个矩阵中的元素连接，而不是和整张图的n1\\*n2个元素连接。\n\n因此局部连接使得参数数量变为全连接的（m1\\*m2）/（n1\\*n2）。\n\n#### 权值共享\n\n即对于一个卷积核遍历原数据矩阵，生成的一个新的数据矩阵的每一个元素来说，它们的权值都为这个卷积核。\n\n这样就导致了权值数几乎变为了不权值共享时的数据量分之一。\n\n#### 多卷积核\n\n用一个卷积核对整张图卷积可以看作是提取了原图的一个特征。\n\n使用一个卷积核只提取了一个特征，因此为了充分的提取特征，要使用多个卷积核，得到多个特征平面。\n\n#### 下采样（池化）\n\n当输入数据过多时，参数的量就不可避免的变得很多，为了防止参数过多导致过拟合，需要下采样。\n\n## 常见网络结构了解\n\n### LeNet\n\n\n![LeNet](https://upload-images.jianshu.io/upload_images/3352522-2ef0a2bbb096ced0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n1. **Input Layer**：1\\*32\\*32图像\n2. **Conv1 Layer**：包含6个卷积核，kernal size：5\\*5，parameters:（5\\*5+1）\\*6=156个\n3. **Subsampling Layer**：average pooling，size：2\\*2, Activation Function：sigmoid\n4. **Conv3 Layer**：包含16个卷积核，kernal size：5\\*5\n5. **Subsampling Layer**：average pooling，size：2\\*2\n6. **Conv5 Layer**：包含120个卷积核，kernal size：5\\*5\n7. **Fully Connected Layer**：Activation Function：sigmoid\n8. **Output Layer**：Gaussian connection\n\n### AlexNet\n\n#### AlexNet结构图\n\n![ImageNet](https://www.52ml.net/wp-content/uploads/2016/08/alexnet.png)\n\n#### AlexNet结构精简版\n\n![ImageNet](https://www.52ml.net/wp-content/uploads/2016/08/alexnet2.png)\n\n对比一下即可理解精简版中**符号的含义**（以第一层为例）：\n\n卷积核大小为11\\*11，共有96个卷积核，步长为4，下采样矩阵大小为2\\*2。\n\nfc：full connect，全连接。\n\n激活函数变为ReLU：斜坡函数 f(x) = max(0, x)及其变种。\n\n### VGG\n\n#### VGG结构图\n\n![VGG](https://www.52ml.net/wp-content/uploads/2016/08/vgg.png)\n\n#### VGG-19网络结构精简版\n\n![VGG-19](https://www.52ml.net/wp-content/uploads/2016/08/vgg19.png)\n\n### GoogLeNet\n\n[讲解链接](https://blog.csdn.net/shuzfan/article/details/50738394)\n\n主要特征是**重新启用全连接**以及提出了**网中网**的结构。\n\n网上的博客写的都比较粗略，有时间看一下相关资料或者论文。\n\n### ResNet\n\n#### 残差网络模型\n\n主要的创新为残差网络，本质上是要解决层次比较深时无法训练的问题：\n\n![residual](https://www.52ml.net/wp-content/uploads/2016/08/residual.png)\n\n#### ResNet网络结构\n\n![resnet](https://www.52ml.net/wp-content/uploads/2016/08/resnet.png)\n\n### DenseNet\n\n#### DenseNet网络结构\n\n![DenseNet](https://tse4.mm.bing.net/th?id=OIP.m8LpfrnNS-bVUC8gil9eVwHaBD&pid=Api)\n\n#### Dense Block结构\n\n![Dense Block](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1522436431455&di=3f3b62ddecf7accdb6b2b756f942cf89&imgtype=0&src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201802%2F20180217134048130090.png)\n\n还是只看懂了大概，需要后续学习。\n\n## 利用LeNet5网络模型实现MNIST手写数字识别\n\n主要的关键点是熟悉TensorFlow相关变量和含义\n\n完成TensorFlow官方MINIST识别教程。\n\n使用[国内网站](http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_pros.html)来更方便的浏览。\n\n------\n\n# Week2\n\n## 利用VGG16实现CIFAR-10动物分类\n\n[教程页链接](http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/deep_cnn.html)\n\n## 学习使用[TensorBoard](https://github.com/jikexueyuanwiki/tensorflow-zh/blob/master/SOURCE/how_tos/summaries_and_tensorboard/index.md)\n\n## 了解Batch Normalization(BN)批标准化\n\n文献链接：[Batch Normalization: Accelerating Deep Network Training by Reducing  Internal Covariate Shift](https://arxiv.org/pdf/1502.03167.pdf)\n\n\n\n> 在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。不过文献归一化层，可不像我们想象的那么简单，它是一个可学习、有参数的网络层。\n\n","source":"_posts/深度学习周报week01-week02.md","raw":"---\ntitle: 深度学习周报week01&week02\ndate: 2018-03-30 22:16:12\ncategories:\n- deep learning\ntags:\n- TensorFlow\ntoc: true\n---\n\n\n\n# Week1\n\n## 配置Cuda、Cudnn和Tensorflow\n\n要注意**版本对应**\n\n## 学习基础知识\n\n### [神经网络基本原理](http://www.ruanyifeng.com/blog/2017/07/neural-network.html)\n\n#### 感知器\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071202.png)\n一个圆圈表示一个感知器，x1、x2、x3...为输入，output为对应的输出。为了简化问题，output只取0或1.\n\n#### 权重和阈值\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071203.png)\nthreshold为阈值，xi为输入，wi为对应的权重，表示输入的重要性。\n\n#### 矢量化\n\n- 将输入x1,x2,x3,...写为矢量**x**: < x1,x2,x3,... >\n- 将权重w1,w2,w3,...写为矢量**w**: < w1,w2,w3,... >\n- 则 **w·x** = ∑ wx\n- 设 b 等于负的阈值 b = -threshold\n  ![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071206.png)\n\n#### 实际的决策模型\n\n多个感知器组成的多层网络：\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071205.png)\n\n#### 神经网络的运作过程\n\n- 确定输入和输出\n- 找到一种或多种算法，可以从输入得到输出（决定决策模型）\n- 找到一组已知答案的数据集，用来训练模型，估算w和b\n  **估算w和b：试错法**\n  首先获取一组随机的**w**和**x**，将**w**（或**b**）进行微小变动，记作**Δw**（或**Δb**），然后观察输出有什么变化。不断重复这个过程，直至得到对应最精确输出的那组**w**和**b**，就是我们要的值。这个过程称为**模型的训练**。\n- 一旦新的数据产生，输入模型，就可以得到结果，同时对w和b进行校正\n\n#### 输出的连续性\n\n为了保证能观察到**w**和**b**的微小变化对结果造成的影响，必须将\"输出\"改造成一个连续性函数。一般使用**sigmoid**函数。\n\n- 将output记为z：`z = wx + b` \n- 则结果的sigmoid函数为σ(z)：`σ(z) = 1 / (1 + e^(-z))`\n\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071209.png)\n实际上，Δσ满足下面的公式：\n![](http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071210.png)\n即Δσ和Δw和Δb之间是线性关系，变化率是偏导数。这就有利于精确推算出w和b的值了。\n\n### 反向传播（BP）\n\n- 即估算**w**和**b**的**试错法**的具体实现。\n- 反向传播算法主要由两个过程（**激励传播、权重更新**）反复循环迭代，直到结果误差在可容忍的限度结束。\n\n#### 激励传播\n\n每次迭代中的传播环节包含两步：\n\n1. 前向传播阶段——按照当前**w**和**b**计算**output（激励响应）**；\n2. 反向传播阶段——将**output**和目标输出求差，从而获得隐层和输出层的**响应误差**。\n\n#### 权重更新\n\n对于每个权重 **wi **，按照以下步骤进行更新：\n\n1. 将**输入激励**和**响应误差**相乘，从而获得权重的**梯度**；\n2. 将这个梯度乘上一个比例并取反后加到权重上。\n3. 这个比例将会影响到训练过程的速度和效果，因此称为“**训练因子**”。梯度的方向指明了误差扩大的方向，因此在更新权重的时候需要对其取反，从而减小权重引起的误差。\n\n<u>关于算法推导（**梯度下降+链式求导**），网上的博客质量良莠不齐，因此打算等买的书到了之后再研究一下，这里就不再列出。</u>\n\n### 卷积神经网络（CNN）\n\n- **卷积神经网络**由三部分构成：\n  - 第一部分是输入层。\n  - 第二部分由n个卷积层和池化层的组合组成。\n  - 第三部分由一个全连结的多层感知机分类器构成。\n- **卷积神经网络**与**普通神经网络**的区别在于，卷积神经网络包含了一个特征抽取器（即第二部分）。\n- **卷积神经网络**的卷积层中，一个神经元只和部分邻层神经元连接。\n- 在每一个**卷积层**中，通常包含若干个**特征平面(feature map)，**每个特征平面由一些**矩形排列**的的神经元组成，同一特征平面的神经元共享权值，这里共享的权值就是**卷积核**。\n- **卷积核**一般以随机小数矩阵的形式初始化，在网络的训练过程中卷积核将通过学习得到合理的权值（**反向传播**）。共享权值（卷积核）带来的直接好处是减少网络各层之间的连接（**减少参数**），同时又降低了**过拟合**（参数过多导致）的风险。\n- **子采样**也叫做池化（pooling），也可以认为是下采样，通常有均值子采样（mean pooling）和最大值子采样（max pooling）两种形式。\n\n<u>与**普通的神经网络**相比，包含**卷积和子采样**的**卷积神经网络**大大**简化了模型复杂度，减少了模型的参数**。</u>\n\n#### **局部连接**\n\n假设一张图大小为n1\\*n2，一个卷积核的大小为m1\\*m2，对于卷积后生成的每一个数据xi，它都是原图中对应位置的m1\\*m2矩阵和这个卷积核对应点相乘求和得到的。\n\n也就是说xi只和原图中对应的m1\\*m2的那个矩阵中的元素连接，而不是和整张图的n1\\*n2个元素连接。\n\n因此局部连接使得参数数量变为全连接的（m1\\*m2）/（n1\\*n2）。\n\n#### 权值共享\n\n即对于一个卷积核遍历原数据矩阵，生成的一个新的数据矩阵的每一个元素来说，它们的权值都为这个卷积核。\n\n这样就导致了权值数几乎变为了不权值共享时的数据量分之一。\n\n#### 多卷积核\n\n用一个卷积核对整张图卷积可以看作是提取了原图的一个特征。\n\n使用一个卷积核只提取了一个特征，因此为了充分的提取特征，要使用多个卷积核，得到多个特征平面。\n\n#### 下采样（池化）\n\n当输入数据过多时，参数的量就不可避免的变得很多，为了防止参数过多导致过拟合，需要下采样。\n\n## 常见网络结构了解\n\n### LeNet\n\n\n![LeNet](https://upload-images.jianshu.io/upload_images/3352522-2ef0a2bbb096ced0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n1. **Input Layer**：1\\*32\\*32图像\n2. **Conv1 Layer**：包含6个卷积核，kernal size：5\\*5，parameters:（5\\*5+1）\\*6=156个\n3. **Subsampling Layer**：average pooling，size：2\\*2, Activation Function：sigmoid\n4. **Conv3 Layer**：包含16个卷积核，kernal size：5\\*5\n5. **Subsampling Layer**：average pooling，size：2\\*2\n6. **Conv5 Layer**：包含120个卷积核，kernal size：5\\*5\n7. **Fully Connected Layer**：Activation Function：sigmoid\n8. **Output Layer**：Gaussian connection\n\n### AlexNet\n\n#### AlexNet结构图\n\n![ImageNet](https://www.52ml.net/wp-content/uploads/2016/08/alexnet.png)\n\n#### AlexNet结构精简版\n\n![ImageNet](https://www.52ml.net/wp-content/uploads/2016/08/alexnet2.png)\n\n对比一下即可理解精简版中**符号的含义**（以第一层为例）：\n\n卷积核大小为11\\*11，共有96个卷积核，步长为4，下采样矩阵大小为2\\*2。\n\nfc：full connect，全连接。\n\n激活函数变为ReLU：斜坡函数 f(x) = max(0, x)及其变种。\n\n### VGG\n\n#### VGG结构图\n\n![VGG](https://www.52ml.net/wp-content/uploads/2016/08/vgg.png)\n\n#### VGG-19网络结构精简版\n\n![VGG-19](https://www.52ml.net/wp-content/uploads/2016/08/vgg19.png)\n\n### GoogLeNet\n\n[讲解链接](https://blog.csdn.net/shuzfan/article/details/50738394)\n\n主要特征是**重新启用全连接**以及提出了**网中网**的结构。\n\n网上的博客写的都比较粗略，有时间看一下相关资料或者论文。\n\n### ResNet\n\n#### 残差网络模型\n\n主要的创新为残差网络，本质上是要解决层次比较深时无法训练的问题：\n\n![residual](https://www.52ml.net/wp-content/uploads/2016/08/residual.png)\n\n#### ResNet网络结构\n\n![resnet](https://www.52ml.net/wp-content/uploads/2016/08/resnet.png)\n\n### DenseNet\n\n#### DenseNet网络结构\n\n![DenseNet](https://tse4.mm.bing.net/th?id=OIP.m8LpfrnNS-bVUC8gil9eVwHaBD&pid=Api)\n\n#### Dense Block结构\n\n![Dense Block](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1522436431455&di=3f3b62ddecf7accdb6b2b756f942cf89&imgtype=0&src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201802%2F20180217134048130090.png)\n\n还是只看懂了大概，需要后续学习。\n\n## 利用LeNet5网络模型实现MNIST手写数字识别\n\n主要的关键点是熟悉TensorFlow相关变量和含义\n\n完成TensorFlow官方MINIST识别教程。\n\n使用[国内网站](http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_pros.html)来更方便的浏览。\n\n------\n\n# Week2\n\n## 利用VGG16实现CIFAR-10动物分类\n\n[教程页链接](http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/deep_cnn.html)\n\n## 学习使用[TensorBoard](https://github.com/jikexueyuanwiki/tensorflow-zh/blob/master/SOURCE/how_tos/summaries_and_tensorboard/index.md)\n\n## 了解Batch Normalization(BN)批标准化\n\n文献链接：[Batch Normalization: Accelerating Deep Network Training by Reducing  Internal Covariate Shift](https://arxiv.org/pdf/1502.03167.pdf)\n\n\n\n> 在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。不过文献归一化层，可不像我们想象的那么简单，它是一个可学习、有参数的网络层。\n\n","slug":"深度学习周报week01-week02","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1b002qcragantht8x3","content":"<h1 id=\"Week1\"><a href=\"#Week1\" class=\"headerlink\" title=\"Week1\"></a>Week1</h1><h2 id=\"配置Cuda、Cudnn和Tensorflow\"><a href=\"#配置Cuda、Cudnn和Tensorflow\" class=\"headerlink\" title=\"配置Cuda、Cudnn和Tensorflow\"></a>配置Cuda、Cudnn和Tensorflow</h2><p>要注意<strong>版本对应</strong></p>\n<h2 id=\"学习基础知识\"><a href=\"#学习基础知识\" class=\"headerlink\" title=\"学习基础知识\"></a>学习基础知识</h2><h3 id=\"神经网络基本原理\"><a href=\"#神经网络基本原理\" class=\"headerlink\" title=\"神经网络基本原理\"></a><a href=\"http://www.ruanyifeng.com/blog/2017/07/neural-network.html\" target=\"_blank\" rel=\"noopener\">神经网络基本原理</a></h3><h4 id=\"感知器\"><a href=\"#感知器\" class=\"headerlink\" title=\"感知器\"></a>感知器</h4><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071202.png\" alt=\"\"><br>一个圆圈表示一个感知器，x1、x2、x3…为输入，output为对应的输出。为了简化问题，output只取0或1.</p>\n<h4 id=\"权重和阈值\"><a href=\"#权重和阈值\" class=\"headerlink\" title=\"权重和阈值\"></a>权重和阈值</h4><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071203.png\" alt=\"\"><br>threshold为阈值，xi为输入，wi为对应的权重，表示输入的重要性。</p>\n<h4 id=\"矢量化\"><a href=\"#矢量化\" class=\"headerlink\" title=\"矢量化\"></a>矢量化</h4><ul>\n<li>将输入x1,x2,x3,…写为矢量<strong>x</strong>: &lt; x1,x2,x3,… &gt;</li>\n<li>将权重w1,w2,w3,…写为矢量<strong>w</strong>: &lt; w1,w2,w3,… &gt;</li>\n<li>则 <strong>w·x</strong> = ∑ wx</li>\n<li>设 b 等于负的阈值 b = -threshold<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071206.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"实际的决策模型\"><a href=\"#实际的决策模型\" class=\"headerlink\" title=\"实际的决策模型\"></a>实际的决策模型</h4><p>多个感知器组成的多层网络：<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071205.png\" alt=\"\"></p>\n<h4 id=\"神经网络的运作过程\"><a href=\"#神经网络的运作过程\" class=\"headerlink\" title=\"神经网络的运作过程\"></a>神经网络的运作过程</h4><ul>\n<li>确定输入和输出</li>\n<li>找到一种或多种算法，可以从输入得到输出（决定决策模型）</li>\n<li>找到一组已知答案的数据集，用来训练模型，估算w和b<br><strong>估算w和b：试错法</strong><br>首先获取一组随机的<strong>w</strong>和<strong>x</strong>，将<strong>w</strong>（或<strong>b</strong>）进行微小变动，记作<strong>Δw</strong>（或<strong>Δb</strong>），然后观察输出有什么变化。不断重复这个过程，直至得到对应最精确输出的那组<strong>w</strong>和<strong>b</strong>，就是我们要的值。这个过程称为<strong>模型的训练</strong>。</li>\n<li>一旦新的数据产生，输入模型，就可以得到结果，同时对w和b进行校正</li>\n</ul>\n<h4 id=\"输出的连续性\"><a href=\"#输出的连续性\" class=\"headerlink\" title=\"输出的连续性\"></a>输出的连续性</h4><p>为了保证能观察到<strong>w</strong>和<strong>b</strong>的微小变化对结果造成的影响，必须将”输出”改造成一个连续性函数。一般使用<strong>sigmoid</strong>函数。</p>\n<ul>\n<li>将output记为z：<code>z = wx + b</code> </li>\n<li>则结果的sigmoid函数为σ(z)：<code>σ(z) = 1 / (1 + e^(-z))</code></li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071209.png\" alt=\"\"><br>实际上，Δσ满足下面的公式：<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071210.png\" alt=\"\"><br>即Δσ和Δw和Δb之间是线性关系，变化率是偏导数。这就有利于精确推算出w和b的值了。</p>\n<h3 id=\"反向传播（BP）\"><a href=\"#反向传播（BP）\" class=\"headerlink\" title=\"反向传播（BP）\"></a>反向传播（BP）</h3><ul>\n<li>即估算<strong>w</strong>和<strong>b</strong>的<strong>试错法</strong>的具体实现。</li>\n<li>反向传播算法主要由两个过程（<strong>激励传播、权重更新</strong>）反复循环迭代，直到结果误差在可容忍的限度结束。</li>\n</ul>\n<h4 id=\"激励传播\"><a href=\"#激励传播\" class=\"headerlink\" title=\"激励传播\"></a>激励传播</h4><p>每次迭代中的传播环节包含两步：</p>\n<ol>\n<li>前向传播阶段——按照当前<strong>w</strong>和<strong>b</strong>计算<strong>output（激励响应）</strong>；</li>\n<li>反向传播阶段——将<strong>output</strong>和目标输出求差，从而获得隐层和输出层的<strong>响应误差</strong>。</li>\n</ol>\n<h4 id=\"权重更新\"><a href=\"#权重更新\" class=\"headerlink\" title=\"权重更新\"></a>权重更新</h4><p>对于每个权重 <strong>wi </strong>，按照以下步骤进行更新：</p>\n<ol>\n<li>将<strong>输入激励</strong>和<strong>响应误差</strong>相乘，从而获得权重的<strong>梯度</strong>；</li>\n<li>将这个梯度乘上一个比例并取反后加到权重上。</li>\n<li>这个比例将会影响到训练过程的速度和效果，因此称为“<strong>训练因子</strong>”。梯度的方向指明了误差扩大的方向，因此在更新权重的时候需要对其取反，从而减小权重引起的误差。</li>\n</ol>\n<p><u>关于算法推导（<strong>梯度下降+链式求导</strong>），网上的博客质量良莠不齐，因此打算等买的书到了之后再研究一下，这里就不再列出。</u></p>\n<h3 id=\"卷积神经网络（CNN）\"><a href=\"#卷积神经网络（CNN）\" class=\"headerlink\" title=\"卷积神经网络（CNN）\"></a>卷积神经网络（CNN）</h3><ul>\n<li><strong>卷积神经网络</strong>由三部分构成：<ul>\n<li>第一部分是输入层。</li>\n<li>第二部分由n个卷积层和池化层的组合组成。</li>\n<li>第三部分由一个全连结的多层感知机分类器构成。</li>\n</ul>\n</li>\n<li><strong>卷积神经网络</strong>与<strong>普通神经网络</strong>的区别在于，卷积神经网络包含了一个特征抽取器（即第二部分）。</li>\n<li><strong>卷积神经网络</strong>的卷积层中，一个神经元只和部分邻层神经元连接。</li>\n<li>在每一个<strong>卷积层</strong>中，通常包含若干个<strong>特征平面(feature map)，</strong>每个特征平面由一些<strong>矩形排列</strong>的的神经元组成，同一特征平面的神经元共享权值，这里共享的权值就是<strong>卷积核</strong>。</li>\n<li><strong>卷积核</strong>一般以随机小数矩阵的形式初始化，在网络的训练过程中卷积核将通过学习得到合理的权值（<strong>反向传播</strong>）。共享权值（卷积核）带来的直接好处是减少网络各层之间的连接（<strong>减少参数</strong>），同时又降低了<strong>过拟合</strong>（参数过多导致）的风险。</li>\n<li><strong>子采样</strong>也叫做池化（pooling），也可以认为是下采样，通常有均值子采样（mean pooling）和最大值子采样（max pooling）两种形式。</li>\n</ul>\n<p><u>与<strong>普通的神经网络</strong>相比，包含<strong>卷积和子采样</strong>的<strong>卷积神经网络</strong>大大<strong>简化了模型复杂度，减少了模型的参数</strong>。</u></p>\n<h4 id=\"局部连接\"><a href=\"#局部连接\" class=\"headerlink\" title=\"局部连接\"></a><strong>局部连接</strong></h4><p>假设一张图大小为n1*n2，一个卷积核的大小为m1*m2，对于卷积后生成的每一个数据xi，它都是原图中对应位置的m1*m2矩阵和这个卷积核对应点相乘求和得到的。</p>\n<p>也就是说xi只和原图中对应的m1*m2的那个矩阵中的元素连接，而不是和整张图的n1*n2个元素连接。</p>\n<p>因此局部连接使得参数数量变为全连接的（m1*m2）/（n1*n2）。</p>\n<h4 id=\"权值共享\"><a href=\"#权值共享\" class=\"headerlink\" title=\"权值共享\"></a>权值共享</h4><p>即对于一个卷积核遍历原数据矩阵，生成的一个新的数据矩阵的每一个元素来说，它们的权值都为这个卷积核。</p>\n<p>这样就导致了权值数几乎变为了不权值共享时的数据量分之一。</p>\n<h4 id=\"多卷积核\"><a href=\"#多卷积核\" class=\"headerlink\" title=\"多卷积核\"></a>多卷积核</h4><p>用一个卷积核对整张图卷积可以看作是提取了原图的一个特征。</p>\n<p>使用一个卷积核只提取了一个特征，因此为了充分的提取特征，要使用多个卷积核，得到多个特征平面。</p>\n<h4 id=\"下采样（池化）\"><a href=\"#下采样（池化）\" class=\"headerlink\" title=\"下采样（池化）\"></a>下采样（池化）</h4><p>当输入数据过多时，参数的量就不可避免的变得很多，为了防止参数过多导致过拟合，需要下采样。</p>\n<h2 id=\"常见网络结构了解\"><a href=\"#常见网络结构了解\" class=\"headerlink\" title=\"常见网络结构了解\"></a>常见网络结构了解</h2><h3 id=\"LeNet\"><a href=\"#LeNet\" class=\"headerlink\" title=\"LeNet\"></a>LeNet</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/3352522-2ef0a2bbb096ced0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"LeNet\"></p>\n<ol>\n<li><strong>Input Layer</strong>：1*32*32图像</li>\n<li><strong>Conv1 Layer</strong>：包含6个卷积核，kernal size：5*5，parameters:（5*5+1）*6=156个</li>\n<li><strong>Subsampling Layer</strong>：average pooling，size：2*2, Activation Function：sigmoid</li>\n<li><strong>Conv3 Layer</strong>：包含16个卷积核，kernal size：5*5</li>\n<li><strong>Subsampling Layer</strong>：average pooling，size：2*2</li>\n<li><strong>Conv5 Layer</strong>：包含120个卷积核，kernal size：5*5</li>\n<li><strong>Fully Connected Layer</strong>：Activation Function：sigmoid</li>\n<li><strong>Output Layer</strong>：Gaussian connection</li>\n</ol>\n<h3 id=\"AlexNet\"><a href=\"#AlexNet\" class=\"headerlink\" title=\"AlexNet\"></a>AlexNet</h3><h4 id=\"AlexNet结构图\"><a href=\"#AlexNet结构图\" class=\"headerlink\" title=\"AlexNet结构图\"></a>AlexNet结构图</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/alexnet.png\" alt=\"ImageNet\"></p>\n<h4 id=\"AlexNet结构精简版\"><a href=\"#AlexNet结构精简版\" class=\"headerlink\" title=\"AlexNet结构精简版\"></a>AlexNet结构精简版</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/alexnet2.png\" alt=\"ImageNet\"></p>\n<p>对比一下即可理解精简版中<strong>符号的含义</strong>（以第一层为例）：</p>\n<p>卷积核大小为11*11，共有96个卷积核，步长为4，下采样矩阵大小为2*2。</p>\n<p>fc：full connect，全连接。</p>\n<p>激活函数变为ReLU：斜坡函数 f(x) = max(0, x)及其变种。</p>\n<h3 id=\"VGG\"><a href=\"#VGG\" class=\"headerlink\" title=\"VGG\"></a>VGG</h3><h4 id=\"VGG结构图\"><a href=\"#VGG结构图\" class=\"headerlink\" title=\"VGG结构图\"></a>VGG结构图</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/vgg.png\" alt=\"VGG\"></p>\n<h4 id=\"VGG-19网络结构精简版\"><a href=\"#VGG-19网络结构精简版\" class=\"headerlink\" title=\"VGG-19网络结构精简版\"></a>VGG-19网络结构精简版</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/vgg19.png\" alt=\"VGG-19\"></p>\n<h3 id=\"GoogLeNet\"><a href=\"#GoogLeNet\" class=\"headerlink\" title=\"GoogLeNet\"></a>GoogLeNet</h3><p><a href=\"https://blog.csdn.net/shuzfan/article/details/50738394\" target=\"_blank\" rel=\"noopener\">讲解链接</a></p>\n<p>主要特征是<strong>重新启用全连接</strong>以及提出了<strong>网中网</strong>的结构。</p>\n<p>网上的博客写的都比较粗略，有时间看一下相关资料或者论文。</p>\n<h3 id=\"ResNet\"><a href=\"#ResNet\" class=\"headerlink\" title=\"ResNet\"></a>ResNet</h3><h4 id=\"残差网络模型\"><a href=\"#残差网络模型\" class=\"headerlink\" title=\"残差网络模型\"></a>残差网络模型</h4><p>主要的创新为残差网络，本质上是要解决层次比较深时无法训练的问题：</p>\n<p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/residual.png\" alt=\"residual\"></p>\n<h4 id=\"ResNet网络结构\"><a href=\"#ResNet网络结构\" class=\"headerlink\" title=\"ResNet网络结构\"></a>ResNet网络结构</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/resnet.png\" alt=\"resnet\"></p>\n<h3 id=\"DenseNet\"><a href=\"#DenseNet\" class=\"headerlink\" title=\"DenseNet\"></a>DenseNet</h3><h4 id=\"DenseNet网络结构\"><a href=\"#DenseNet网络结构\" class=\"headerlink\" title=\"DenseNet网络结构\"></a>DenseNet网络结构</h4><p><img src=\"https://tse4.mm.bing.net/th?id=OIP.m8LpfrnNS-bVUC8gil9eVwHaBD&amp;pid=Api\" alt=\"DenseNet\"></p>\n<h4 id=\"Dense-Block结构\"><a href=\"#Dense-Block结构\" class=\"headerlink\" title=\"Dense Block结构\"></a>Dense Block结构</h4><p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522436431455&amp;di=3f3b62ddecf7accdb6b2b756f942cf89&amp;imgtype=0&amp;src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201802%2F20180217134048130090.png\" alt=\"Dense Block\"></p>\n<p>还是只看懂了大概，需要后续学习。</p>\n<h2 id=\"利用LeNet5网络模型实现MNIST手写数字识别\"><a href=\"#利用LeNet5网络模型实现MNIST手写数字识别\" class=\"headerlink\" title=\"利用LeNet5网络模型实现MNIST手写数字识别\"></a>利用LeNet5网络模型实现MNIST手写数字识别</h2><p>主要的关键点是熟悉TensorFlow相关变量和含义</p>\n<p>完成TensorFlow官方MINIST识别教程。</p>\n<p>使用<a href=\"http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_pros.html\" target=\"_blank\" rel=\"noopener\">国内网站</a>来更方便的浏览。</p>\n<hr>\n<h1 id=\"Week2\"><a href=\"#Week2\" class=\"headerlink\" title=\"Week2\"></a>Week2</h1><h2 id=\"利用VGG16实现CIFAR-10动物分类\"><a href=\"#利用VGG16实现CIFAR-10动物分类\" class=\"headerlink\" title=\"利用VGG16实现CIFAR-10动物分类\"></a>利用VGG16实现CIFAR-10动物分类</h2><p><a href=\"http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/deep_cnn.html\" target=\"_blank\" rel=\"noopener\">教程页链接</a></p>\n<h2 id=\"学习使用TensorBoard\"><a href=\"#学习使用TensorBoard\" class=\"headerlink\" title=\"学习使用TensorBoard\"></a>学习使用<a href=\"https://github.com/jikexueyuanwiki/tensorflow-zh/blob/master/SOURCE/how_tos/summaries_and_tensorboard/index.md\" target=\"_blank\" rel=\"noopener\">TensorBoard</a></h2><h2 id=\"了解Batch-Normalization-BN-批标准化\"><a href=\"#了解Batch-Normalization-BN-批标准化\" class=\"headerlink\" title=\"了解Batch Normalization(BN)批标准化\"></a>了解Batch Normalization(BN)批标准化</h2><p>文献链接：<a href=\"https://arxiv.org/pdf/1502.03167.pdf\" target=\"_blank\" rel=\"noopener\">Batch Normalization: Accelerating Deep Network Training by Reducing  Internal Covariate Shift</a></p>\n<blockquote>\n<p>在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。不过文献归一化层，可不像我们想象的那么简单，它是一个可学习、有参数的网络层。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Week1\"><a href=\"#Week1\" class=\"headerlink\" title=\"Week1\"></a>Week1</h1><h2 id=\"配置Cuda、Cudnn和Tensorflow\"><a href=\"#配置Cuda、Cudnn和Tensorflow\" class=\"headerlink\" title=\"配置Cuda、Cudnn和Tensorflow\"></a>配置Cuda、Cudnn和Tensorflow</h2><p>要注意<strong>版本对应</strong></p>\n<h2 id=\"学习基础知识\"><a href=\"#学习基础知识\" class=\"headerlink\" title=\"学习基础知识\"></a>学习基础知识</h2><h3 id=\"神经网络基本原理\"><a href=\"#神经网络基本原理\" class=\"headerlink\" title=\"神经网络基本原理\"></a><a href=\"http://www.ruanyifeng.com/blog/2017/07/neural-network.html\" target=\"_blank\" rel=\"noopener\">神经网络基本原理</a></h3><h4 id=\"感知器\"><a href=\"#感知器\" class=\"headerlink\" title=\"感知器\"></a>感知器</h4><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071202.png\" alt=\"\"><br>一个圆圈表示一个感知器，x1、x2、x3…为输入，output为对应的输出。为了简化问题，output只取0或1.</p>\n<h4 id=\"权重和阈值\"><a href=\"#权重和阈值\" class=\"headerlink\" title=\"权重和阈值\"></a>权重和阈值</h4><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071203.png\" alt=\"\"><br>threshold为阈值，xi为输入，wi为对应的权重，表示输入的重要性。</p>\n<h4 id=\"矢量化\"><a href=\"#矢量化\" class=\"headerlink\" title=\"矢量化\"></a>矢量化</h4><ul>\n<li>将输入x1,x2,x3,…写为矢量<strong>x</strong>: &lt; x1,x2,x3,… &gt;</li>\n<li>将权重w1,w2,w3,…写为矢量<strong>w</strong>: &lt; w1,w2,w3,… &gt;</li>\n<li>则 <strong>w·x</strong> = ∑ wx</li>\n<li>设 b 等于负的阈值 b = -threshold<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071206.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"实际的决策模型\"><a href=\"#实际的决策模型\" class=\"headerlink\" title=\"实际的决策模型\"></a>实际的决策模型</h4><p>多个感知器组成的多层网络：<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071205.png\" alt=\"\"></p>\n<h4 id=\"神经网络的运作过程\"><a href=\"#神经网络的运作过程\" class=\"headerlink\" title=\"神经网络的运作过程\"></a>神经网络的运作过程</h4><ul>\n<li>确定输入和输出</li>\n<li>找到一种或多种算法，可以从输入得到输出（决定决策模型）</li>\n<li>找到一组已知答案的数据集，用来训练模型，估算w和b<br><strong>估算w和b：试错法</strong><br>首先获取一组随机的<strong>w</strong>和<strong>x</strong>，将<strong>w</strong>（或<strong>b</strong>）进行微小变动，记作<strong>Δw</strong>（或<strong>Δb</strong>），然后观察输出有什么变化。不断重复这个过程，直至得到对应最精确输出的那组<strong>w</strong>和<strong>b</strong>，就是我们要的值。这个过程称为<strong>模型的训练</strong>。</li>\n<li>一旦新的数据产生，输入模型，就可以得到结果，同时对w和b进行校正</li>\n</ul>\n<h4 id=\"输出的连续性\"><a href=\"#输出的连续性\" class=\"headerlink\" title=\"输出的连续性\"></a>输出的连续性</h4><p>为了保证能观察到<strong>w</strong>和<strong>b</strong>的微小变化对结果造成的影响，必须将”输出”改造成一个连续性函数。一般使用<strong>sigmoid</strong>函数。</p>\n<ul>\n<li>将output记为z：<code>z = wx + b</code> </li>\n<li>则结果的sigmoid函数为σ(z)：<code>σ(z) = 1 / (1 + e^(-z))</code></li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071209.png\" alt=\"\"><br>实际上，Δσ满足下面的公式：<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017071210.png\" alt=\"\"><br>即Δσ和Δw和Δb之间是线性关系，变化率是偏导数。这就有利于精确推算出w和b的值了。</p>\n<h3 id=\"反向传播（BP）\"><a href=\"#反向传播（BP）\" class=\"headerlink\" title=\"反向传播（BP）\"></a>反向传播（BP）</h3><ul>\n<li>即估算<strong>w</strong>和<strong>b</strong>的<strong>试错法</strong>的具体实现。</li>\n<li>反向传播算法主要由两个过程（<strong>激励传播、权重更新</strong>）反复循环迭代，直到结果误差在可容忍的限度结束。</li>\n</ul>\n<h4 id=\"激励传播\"><a href=\"#激励传播\" class=\"headerlink\" title=\"激励传播\"></a>激励传播</h4><p>每次迭代中的传播环节包含两步：</p>\n<ol>\n<li>前向传播阶段——按照当前<strong>w</strong>和<strong>b</strong>计算<strong>output（激励响应）</strong>；</li>\n<li>反向传播阶段——将<strong>output</strong>和目标输出求差，从而获得隐层和输出层的<strong>响应误差</strong>。</li>\n</ol>\n<h4 id=\"权重更新\"><a href=\"#权重更新\" class=\"headerlink\" title=\"权重更新\"></a>权重更新</h4><p>对于每个权重 <strong>wi </strong>，按照以下步骤进行更新：</p>\n<ol>\n<li>将<strong>输入激励</strong>和<strong>响应误差</strong>相乘，从而获得权重的<strong>梯度</strong>；</li>\n<li>将这个梯度乘上一个比例并取反后加到权重上。</li>\n<li>这个比例将会影响到训练过程的速度和效果，因此称为“<strong>训练因子</strong>”。梯度的方向指明了误差扩大的方向，因此在更新权重的时候需要对其取反，从而减小权重引起的误差。</li>\n</ol>\n<p><u>关于算法推导（<strong>梯度下降+链式求导</strong>），网上的博客质量良莠不齐，因此打算等买的书到了之后再研究一下，这里就不再列出。</u></p>\n<h3 id=\"卷积神经网络（CNN）\"><a href=\"#卷积神经网络（CNN）\" class=\"headerlink\" title=\"卷积神经网络（CNN）\"></a>卷积神经网络（CNN）</h3><ul>\n<li><strong>卷积神经网络</strong>由三部分构成：<ul>\n<li>第一部分是输入层。</li>\n<li>第二部分由n个卷积层和池化层的组合组成。</li>\n<li>第三部分由一个全连结的多层感知机分类器构成。</li>\n</ul>\n</li>\n<li><strong>卷积神经网络</strong>与<strong>普通神经网络</strong>的区别在于，卷积神经网络包含了一个特征抽取器（即第二部分）。</li>\n<li><strong>卷积神经网络</strong>的卷积层中，一个神经元只和部分邻层神经元连接。</li>\n<li>在每一个<strong>卷积层</strong>中，通常包含若干个<strong>特征平面(feature map)，</strong>每个特征平面由一些<strong>矩形排列</strong>的的神经元组成，同一特征平面的神经元共享权值，这里共享的权值就是<strong>卷积核</strong>。</li>\n<li><strong>卷积核</strong>一般以随机小数矩阵的形式初始化，在网络的训练过程中卷积核将通过学习得到合理的权值（<strong>反向传播</strong>）。共享权值（卷积核）带来的直接好处是减少网络各层之间的连接（<strong>减少参数</strong>），同时又降低了<strong>过拟合</strong>（参数过多导致）的风险。</li>\n<li><strong>子采样</strong>也叫做池化（pooling），也可以认为是下采样，通常有均值子采样（mean pooling）和最大值子采样（max pooling）两种形式。</li>\n</ul>\n<p><u>与<strong>普通的神经网络</strong>相比，包含<strong>卷积和子采样</strong>的<strong>卷积神经网络</strong>大大<strong>简化了模型复杂度，减少了模型的参数</strong>。</u></p>\n<h4 id=\"局部连接\"><a href=\"#局部连接\" class=\"headerlink\" title=\"局部连接\"></a><strong>局部连接</strong></h4><p>假设一张图大小为n1*n2，一个卷积核的大小为m1*m2，对于卷积后生成的每一个数据xi，它都是原图中对应位置的m1*m2矩阵和这个卷积核对应点相乘求和得到的。</p>\n<p>也就是说xi只和原图中对应的m1*m2的那个矩阵中的元素连接，而不是和整张图的n1*n2个元素连接。</p>\n<p>因此局部连接使得参数数量变为全连接的（m1*m2）/（n1*n2）。</p>\n<h4 id=\"权值共享\"><a href=\"#权值共享\" class=\"headerlink\" title=\"权值共享\"></a>权值共享</h4><p>即对于一个卷积核遍历原数据矩阵，生成的一个新的数据矩阵的每一个元素来说，它们的权值都为这个卷积核。</p>\n<p>这样就导致了权值数几乎变为了不权值共享时的数据量分之一。</p>\n<h4 id=\"多卷积核\"><a href=\"#多卷积核\" class=\"headerlink\" title=\"多卷积核\"></a>多卷积核</h4><p>用一个卷积核对整张图卷积可以看作是提取了原图的一个特征。</p>\n<p>使用一个卷积核只提取了一个特征，因此为了充分的提取特征，要使用多个卷积核，得到多个特征平面。</p>\n<h4 id=\"下采样（池化）\"><a href=\"#下采样（池化）\" class=\"headerlink\" title=\"下采样（池化）\"></a>下采样（池化）</h4><p>当输入数据过多时，参数的量就不可避免的变得很多，为了防止参数过多导致过拟合，需要下采样。</p>\n<h2 id=\"常见网络结构了解\"><a href=\"#常见网络结构了解\" class=\"headerlink\" title=\"常见网络结构了解\"></a>常见网络结构了解</h2><h3 id=\"LeNet\"><a href=\"#LeNet\" class=\"headerlink\" title=\"LeNet\"></a>LeNet</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/3352522-2ef0a2bbb096ced0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"LeNet\"></p>\n<ol>\n<li><strong>Input Layer</strong>：1*32*32图像</li>\n<li><strong>Conv1 Layer</strong>：包含6个卷积核，kernal size：5*5，parameters:（5*5+1）*6=156个</li>\n<li><strong>Subsampling Layer</strong>：average pooling，size：2*2, Activation Function：sigmoid</li>\n<li><strong>Conv3 Layer</strong>：包含16个卷积核，kernal size：5*5</li>\n<li><strong>Subsampling Layer</strong>：average pooling，size：2*2</li>\n<li><strong>Conv5 Layer</strong>：包含120个卷积核，kernal size：5*5</li>\n<li><strong>Fully Connected Layer</strong>：Activation Function：sigmoid</li>\n<li><strong>Output Layer</strong>：Gaussian connection</li>\n</ol>\n<h3 id=\"AlexNet\"><a href=\"#AlexNet\" class=\"headerlink\" title=\"AlexNet\"></a>AlexNet</h3><h4 id=\"AlexNet结构图\"><a href=\"#AlexNet结构图\" class=\"headerlink\" title=\"AlexNet结构图\"></a>AlexNet结构图</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/alexnet.png\" alt=\"ImageNet\"></p>\n<h4 id=\"AlexNet结构精简版\"><a href=\"#AlexNet结构精简版\" class=\"headerlink\" title=\"AlexNet结构精简版\"></a>AlexNet结构精简版</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/alexnet2.png\" alt=\"ImageNet\"></p>\n<p>对比一下即可理解精简版中<strong>符号的含义</strong>（以第一层为例）：</p>\n<p>卷积核大小为11*11，共有96个卷积核，步长为4，下采样矩阵大小为2*2。</p>\n<p>fc：full connect，全连接。</p>\n<p>激活函数变为ReLU：斜坡函数 f(x) = max(0, x)及其变种。</p>\n<h3 id=\"VGG\"><a href=\"#VGG\" class=\"headerlink\" title=\"VGG\"></a>VGG</h3><h4 id=\"VGG结构图\"><a href=\"#VGG结构图\" class=\"headerlink\" title=\"VGG结构图\"></a>VGG结构图</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/vgg.png\" alt=\"VGG\"></p>\n<h4 id=\"VGG-19网络结构精简版\"><a href=\"#VGG-19网络结构精简版\" class=\"headerlink\" title=\"VGG-19网络结构精简版\"></a>VGG-19网络结构精简版</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/vgg19.png\" alt=\"VGG-19\"></p>\n<h3 id=\"GoogLeNet\"><a href=\"#GoogLeNet\" class=\"headerlink\" title=\"GoogLeNet\"></a>GoogLeNet</h3><p><a href=\"https://blog.csdn.net/shuzfan/article/details/50738394\" target=\"_blank\" rel=\"noopener\">讲解链接</a></p>\n<p>主要特征是<strong>重新启用全连接</strong>以及提出了<strong>网中网</strong>的结构。</p>\n<p>网上的博客写的都比较粗略，有时间看一下相关资料或者论文。</p>\n<h3 id=\"ResNet\"><a href=\"#ResNet\" class=\"headerlink\" title=\"ResNet\"></a>ResNet</h3><h4 id=\"残差网络模型\"><a href=\"#残差网络模型\" class=\"headerlink\" title=\"残差网络模型\"></a>残差网络模型</h4><p>主要的创新为残差网络，本质上是要解决层次比较深时无法训练的问题：</p>\n<p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/residual.png\" alt=\"residual\"></p>\n<h4 id=\"ResNet网络结构\"><a href=\"#ResNet网络结构\" class=\"headerlink\" title=\"ResNet网络结构\"></a>ResNet网络结构</h4><p><img src=\"https://www.52ml.net/wp-content/uploads/2016/08/resnet.png\" alt=\"resnet\"></p>\n<h3 id=\"DenseNet\"><a href=\"#DenseNet\" class=\"headerlink\" title=\"DenseNet\"></a>DenseNet</h3><h4 id=\"DenseNet网络结构\"><a href=\"#DenseNet网络结构\" class=\"headerlink\" title=\"DenseNet网络结构\"></a>DenseNet网络结构</h4><p><img src=\"https://tse4.mm.bing.net/th?id=OIP.m8LpfrnNS-bVUC8gil9eVwHaBD&amp;pid=Api\" alt=\"DenseNet\"></p>\n<h4 id=\"Dense-Block结构\"><a href=\"#Dense-Block结构\" class=\"headerlink\" title=\"Dense Block结构\"></a>Dense Block结构</h4><p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522436431455&amp;di=3f3b62ddecf7accdb6b2b756f942cf89&amp;imgtype=0&amp;src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201802%2F20180217134048130090.png\" alt=\"Dense Block\"></p>\n<p>还是只看懂了大概，需要后续学习。</p>\n<h2 id=\"利用LeNet5网络模型实现MNIST手写数字识别\"><a href=\"#利用LeNet5网络模型实现MNIST手写数字识别\" class=\"headerlink\" title=\"利用LeNet5网络模型实现MNIST手写数字识别\"></a>利用LeNet5网络模型实现MNIST手写数字识别</h2><p>主要的关键点是熟悉TensorFlow相关变量和含义</p>\n<p>完成TensorFlow官方MINIST识别教程。</p>\n<p>使用<a href=\"http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_pros.html\" target=\"_blank\" rel=\"noopener\">国内网站</a>来更方便的浏览。</p>\n<hr>\n<h1 id=\"Week2\"><a href=\"#Week2\" class=\"headerlink\" title=\"Week2\"></a>Week2</h1><h2 id=\"利用VGG16实现CIFAR-10动物分类\"><a href=\"#利用VGG16实现CIFAR-10动物分类\" class=\"headerlink\" title=\"利用VGG16实现CIFAR-10动物分类\"></a>利用VGG16实现CIFAR-10动物分类</h2><p><a href=\"http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/deep_cnn.html\" target=\"_blank\" rel=\"noopener\">教程页链接</a></p>\n<h2 id=\"学习使用TensorBoard\"><a href=\"#学习使用TensorBoard\" class=\"headerlink\" title=\"学习使用TensorBoard\"></a>学习使用<a href=\"https://github.com/jikexueyuanwiki/tensorflow-zh/blob/master/SOURCE/how_tos/summaries_and_tensorboard/index.md\" target=\"_blank\" rel=\"noopener\">TensorBoard</a></h2><h2 id=\"了解Batch-Normalization-BN-批标准化\"><a href=\"#了解Batch-Normalization-BN-批标准化\" class=\"headerlink\" title=\"了解Batch Normalization(BN)批标准化\"></a>了解Batch Normalization(BN)批标准化</h2><p>文献链接：<a href=\"https://arxiv.org/pdf/1502.03167.pdf\" target=\"_blank\" rel=\"noopener\">Batch Normalization: Accelerating Deep Network Training by Reducing  Internal Covariate Shift</a></p>\n<blockquote>\n<p>在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。不过文献归一化层，可不像我们想象的那么简单，它是一个可学习、有参数的网络层。</p>\n</blockquote>\n"},{"title":"深度学习周报week03-week04","toc":true,"date":"2018-05-12T01:20:23.000Z","_content":"\n## Tmux ：终端分割\n\n> tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。\n\n### 常用快捷键\n\n`Ctrl+b ：激活控制台；此时以下按键生效`\n\n#### 系统操作\n\n| ?      | 列出所有快捷键；按q返回                                      |\n| ------ | ------------------------------------------------------------ |\n| d      | 脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话 |\n| D      | 选择要脱离的会话；在同时开启了多个会话时使用                 |\n| Ctrl+z | 挂起当前会话                                                 |\n| r      | 强制重绘未脱离的会话                                         |\n| s      | 选择并切换会话；在同时开启了多个会话时使用                   |\n| :      | 进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器 |\n| [      | 进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出          |\n| ~      | 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息       |\n\n#### 窗口操作\n\n| c      | 创建新窗口                           |\n| ------ | ------------------------------------ |\n| &      | 关闭当前窗口                         |\n| 数字键 | 切换至指定窗口                       |\n| p      | 切换至上一窗口                       |\n| n      | 切换至下一窗口                       |\n| l      | 在前后两个窗口间互相切换             |\n| w      | 通过窗口列表切换窗口                 |\n| ,      | 重命名当前窗口；这样便于识别         |\n| .      | 修改当前窗口编号；相当于窗口重新排序 |\n| f      | 在所有窗口中查找指定文本             |\n\n#### 面板操作\n\n| ”           | 将当前面板平分为上下两块                                     |\n| ----------- | ------------------------------------------------------------ |\n| %           | 将当前面板平分为左右两块                                     |\n| x           | 关闭当前面板                                                 |\n| !           | 将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板     |\n| Ctrl+方向键 | 以1个单元格为单位移动边缘以调整当前面板大小                  |\n| Alt+方向键  | 以5个单元格为单位移动边缘以调整当前面板大小                  |\n| Space       | 在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled |\n| q           | 显示面板编号                                                 |\n| o           | 在当前窗口中选择下一面板                                     |\n| 方向键      | 移动光标以选择面板                                           |\n| {           | 向前置换当前面板                                             |\n| }           | 向后置换当前面板                                             |\n| Alt+o       | 逆时针旋转当前窗口的面板                                     |\n| Ctrl+o      | 顺时针旋转当前窗口的面板                                     |\n\n> Ctrl-b s\t\t\t在 Tmux 的会话间切换\n>\n> Ctrl-b %\t\t\t上下分屏\n>\n> Ctrl-b \"\t\t\t左右分屏\n>\n> Ctrl-b +方向键\t进入对应的窗格\n>\n> Ctrl-b c\t\t\t创建窗口\n>\n> Ctrl-b +数字\t\t切换窗口 \n>\n> Ctrl-b &\t\t\t离开一个会话[exited]\n>\n> Ctrl-b d\t\t\t从一个会话中脱离[dettached]\n\n## ssh\n\n下载MobaXterm来在windows下使用ssh\n\n连接命令：\n\n```shell\nssh username@xxx.xxx.xxx.xxx\npassword\n```\n\n## 监控显卡\n\n```shell\nnvidia smi\n```\n\n[GPU使用表的具体含义](https://blog.csdn.net/bruce_0712/article/details/63683787)：\n\n> 第一张表格中： \n>\n> 第一栏的Fan：N/A是风扇转速，从0到100%之间变动，这个速度是计算机期望的风扇转速，实际情况下如果风扇堵转，可能打不到显示的转速。有的设备不会返回转速，因为它不依赖风扇冷却而是通过其他外设保持低温（比如我们实验室的服务器是常年放在空调房间里的）。\n>\n>\n> 第二栏的Temp：是温度，单位摄氏度。 \n>\n> 第三栏的Perf：是性能状态，从P0到P12，P0表示最大性能，P12表示状态最小性能。 \n>\n> 第四栏下方的Pwr：是能耗，上方的Persistence-M：是持续模式的状态，持续模式虽然耗能大，但是在新的GPU应用启动时，花费的时间更少，这里显示的是off的状态。\n>\n>\n> 第五栏的Bus-Id是涉及GPU总线的东西，domain:bus:device.function \n>\n> 第六栏的Disp.A是Display Active，表示GPU的显示是否初始化。 \n>\n> 第五第六栏下方的Memory Usage是显存使用率。 \n>\n> 第七栏是浮动的GPU利用率。 \n>\n> 第八栏上方是关于ECC的东西。 \n>\n> 第八栏下方Compute M是计算模式。 \n>\n> 第二张表示每个进程占用的显存使用情况。\n\n### 使用watch命令实时监测显卡\n\nwatch的基本用法：\n\n```shell\nwatch [options]  command\n```\n\n最常用的参数是 -n， 后面指定是每多少秒来执行一次命令。\n\n例如：设置每 10s 显示一次显存的情况\n\n```shell\nwatch -n 10 nvidia-smi\n```\n\n## cifar10\n\n继续调整网络结构和参数来增加准确率。","source":"_posts/深度学习周报week03-week04.md","raw":"---\ntitle: 深度学习周报week03-week04\ntoc: true\ndate: 2018-05-12 09:20:23\ncategories:\n- deep learning\ntags:\n- Tmux\n---\n\n## Tmux ：终端分割\n\n> tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。\n\n### 常用快捷键\n\n`Ctrl+b ：激活控制台；此时以下按键生效`\n\n#### 系统操作\n\n| ?      | 列出所有快捷键；按q返回                                      |\n| ------ | ------------------------------------------------------------ |\n| d      | 脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话 |\n| D      | 选择要脱离的会话；在同时开启了多个会话时使用                 |\n| Ctrl+z | 挂起当前会话                                                 |\n| r      | 强制重绘未脱离的会话                                         |\n| s      | 选择并切换会话；在同时开启了多个会话时使用                   |\n| :      | 进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器 |\n| [      | 进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出          |\n| ~      | 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息       |\n\n#### 窗口操作\n\n| c      | 创建新窗口                           |\n| ------ | ------------------------------------ |\n| &      | 关闭当前窗口                         |\n| 数字键 | 切换至指定窗口                       |\n| p      | 切换至上一窗口                       |\n| n      | 切换至下一窗口                       |\n| l      | 在前后两个窗口间互相切换             |\n| w      | 通过窗口列表切换窗口                 |\n| ,      | 重命名当前窗口；这样便于识别         |\n| .      | 修改当前窗口编号；相当于窗口重新排序 |\n| f      | 在所有窗口中查找指定文本             |\n\n#### 面板操作\n\n| ”           | 将当前面板平分为上下两块                                     |\n| ----------- | ------------------------------------------------------------ |\n| %           | 将当前面板平分为左右两块                                     |\n| x           | 关闭当前面板                                                 |\n| !           | 将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板     |\n| Ctrl+方向键 | 以1个单元格为单位移动边缘以调整当前面板大小                  |\n| Alt+方向键  | 以5个单元格为单位移动边缘以调整当前面板大小                  |\n| Space       | 在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled |\n| q           | 显示面板编号                                                 |\n| o           | 在当前窗口中选择下一面板                                     |\n| 方向键      | 移动光标以选择面板                                           |\n| {           | 向前置换当前面板                                             |\n| }           | 向后置换当前面板                                             |\n| Alt+o       | 逆时针旋转当前窗口的面板                                     |\n| Ctrl+o      | 顺时针旋转当前窗口的面板                                     |\n\n> Ctrl-b s\t\t\t在 Tmux 的会话间切换\n>\n> Ctrl-b %\t\t\t上下分屏\n>\n> Ctrl-b \"\t\t\t左右分屏\n>\n> Ctrl-b +方向键\t进入对应的窗格\n>\n> Ctrl-b c\t\t\t创建窗口\n>\n> Ctrl-b +数字\t\t切换窗口 \n>\n> Ctrl-b &\t\t\t离开一个会话[exited]\n>\n> Ctrl-b d\t\t\t从一个会话中脱离[dettached]\n\n## ssh\n\n下载MobaXterm来在windows下使用ssh\n\n连接命令：\n\n```shell\nssh username@xxx.xxx.xxx.xxx\npassword\n```\n\n## 监控显卡\n\n```shell\nnvidia smi\n```\n\n[GPU使用表的具体含义](https://blog.csdn.net/bruce_0712/article/details/63683787)：\n\n> 第一张表格中： \n>\n> 第一栏的Fan：N/A是风扇转速，从0到100%之间变动，这个速度是计算机期望的风扇转速，实际情况下如果风扇堵转，可能打不到显示的转速。有的设备不会返回转速，因为它不依赖风扇冷却而是通过其他外设保持低温（比如我们实验室的服务器是常年放在空调房间里的）。\n>\n>\n> 第二栏的Temp：是温度，单位摄氏度。 \n>\n> 第三栏的Perf：是性能状态，从P0到P12，P0表示最大性能，P12表示状态最小性能。 \n>\n> 第四栏下方的Pwr：是能耗，上方的Persistence-M：是持续模式的状态，持续模式虽然耗能大，但是在新的GPU应用启动时，花费的时间更少，这里显示的是off的状态。\n>\n>\n> 第五栏的Bus-Id是涉及GPU总线的东西，domain:bus:device.function \n>\n> 第六栏的Disp.A是Display Active，表示GPU的显示是否初始化。 \n>\n> 第五第六栏下方的Memory Usage是显存使用率。 \n>\n> 第七栏是浮动的GPU利用率。 \n>\n> 第八栏上方是关于ECC的东西。 \n>\n> 第八栏下方Compute M是计算模式。 \n>\n> 第二张表示每个进程占用的显存使用情况。\n\n### 使用watch命令实时监测显卡\n\nwatch的基本用法：\n\n```shell\nwatch [options]  command\n```\n\n最常用的参数是 -n， 后面指定是每多少秒来执行一次命令。\n\n例如：设置每 10s 显示一次显存的情况\n\n```shell\nwatch -n 10 nvidia-smi\n```\n\n## cifar10\n\n继续调整网络结构和参数来增加准确率。","slug":"深度学习周报week03-week04","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1d002scragbclpqmzl","content":"<h2 id=\"Tmux-：终端分割\"><a href=\"#Tmux-：终端分割\" class=\"headerlink\" title=\"Tmux ：终端分割\"></a>Tmux ：终端分割</h2><blockquote>\n<p>tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。</p>\n</blockquote>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><p><code>Ctrl+b ：激活控制台；此时以下按键生效</code></p>\n<h4 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h4><table>\n<thead>\n<tr>\n<th>?</th>\n<th>列出所有快捷键；按q返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td>脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</td>\n</tr>\n<tr>\n<td>D</td>\n<td>选择要脱离的会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td>Ctrl+z</td>\n<td>挂起当前会话</td>\n</tr>\n<tr>\n<td>r</td>\n<td>强制重绘未脱离的会话</td>\n</tr>\n<tr>\n<td>s</td>\n<td>选择并切换会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td>:</td>\n<td>进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器</td>\n</tr>\n<tr>\n<td>[</td>\n<td>进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出</td>\n</tr>\n<tr>\n<td>~</td>\n<td>列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"窗口操作\"><a href=\"#窗口操作\" class=\"headerlink\" title=\"窗口操作\"></a>窗口操作</h4><table>\n<thead>\n<tr>\n<th>c</th>\n<th>创建新窗口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>关闭当前窗口</td>\n</tr>\n<tr>\n<td>数字键</td>\n<td>切换至指定窗口</td>\n</tr>\n<tr>\n<td>p</td>\n<td>切换至上一窗口</td>\n</tr>\n<tr>\n<td>n</td>\n<td>切换至下一窗口</td>\n</tr>\n<tr>\n<td>l</td>\n<td>在前后两个窗口间互相切换</td>\n</tr>\n<tr>\n<td>w</td>\n<td>通过窗口列表切换窗口</td>\n</tr>\n<tr>\n<td>,</td>\n<td>重命名当前窗口；这样便于识别</td>\n</tr>\n<tr>\n<td>.</td>\n<td>修改当前窗口编号；相当于窗口重新排序</td>\n</tr>\n<tr>\n<td>f</td>\n<td>在所有窗口中查找指定文本</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"面板操作\"><a href=\"#面板操作\" class=\"headerlink\" title=\"面板操作\"></a>面板操作</h4><table>\n<thead>\n<tr>\n<th>”</th>\n<th>将当前面板平分为上下两块</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%</td>\n<td>将当前面板平分为左右两块</td>\n</tr>\n<tr>\n<td>x</td>\n<td>关闭当前面板</td>\n</tr>\n<tr>\n<td>!</td>\n<td>将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板</td>\n</tr>\n<tr>\n<td>Ctrl+方向键</td>\n<td>以1个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td>Alt+方向键</td>\n<td>以5个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td>Space</td>\n<td>在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled</td>\n</tr>\n<tr>\n<td>q</td>\n<td>显示面板编号</td>\n</tr>\n<tr>\n<td>o</td>\n<td>在当前窗口中选择下一面板</td>\n</tr>\n<tr>\n<td>方向键</td>\n<td>移动光标以选择面板</td>\n</tr>\n<tr>\n<td>{</td>\n<td>向前置换当前面板</td>\n</tr>\n<tr>\n<td>}</td>\n<td>向后置换当前面板</td>\n</tr>\n<tr>\n<td>Alt+o</td>\n<td>逆时针旋转当前窗口的面板</td>\n</tr>\n<tr>\n<td>Ctrl+o</td>\n<td>顺时针旋转当前窗口的面板</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Ctrl-b s            在 Tmux 的会话间切换</p>\n<p>Ctrl-b %            上下分屏</p>\n<p>Ctrl-b “            左右分屏</p>\n<p>Ctrl-b +方向键    进入对应的窗格</p>\n<p>Ctrl-b c            创建窗口</p>\n<p>Ctrl-b +数字        切换窗口 </p>\n<p>Ctrl-b &amp;            离开一个会话[exited]</p>\n<p>Ctrl-b d            从一个会话中脱离[dettached]</p>\n</blockquote>\n<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><p>下载MobaXterm来在windows下使用ssh</p>\n<p>连接命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@xxx.xxx.xxx.xxx</span><br><span class=\"line\">password</span><br></pre></td></tr></table></figure>\n<h2 id=\"监控显卡\"><a href=\"#监控显卡\" class=\"headerlink\" title=\"监控显卡\"></a>监控显卡</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia smi</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/bruce_0712/article/details/63683787\" target=\"_blank\" rel=\"noopener\">GPU使用表的具体含义</a>：</p>\n<blockquote>\n<p>第一张表格中： </p>\n<p>第一栏的Fan：N/A是风扇转速，从0到100%之间变动，这个速度是计算机期望的风扇转速，实际情况下如果风扇堵转，可能打不到显示的转速。有的设备不会返回转速，因为它不依赖风扇冷却而是通过其他外设保持低温（比如我们实验室的服务器是常年放在空调房间里的）。</p>\n<p>第二栏的Temp：是温度，单位摄氏度。 </p>\n<p>第三栏的Perf：是性能状态，从P0到P12，P0表示最大性能，P12表示状态最小性能。 </p>\n<p>第四栏下方的Pwr：是能耗，上方的Persistence-M：是持续模式的状态，持续模式虽然耗能大，但是在新的GPU应用启动时，花费的时间更少，这里显示的是off的状态。</p>\n<p>第五栏的Bus-Id是涉及GPU总线的东西，domain:bus:device.function </p>\n<p>第六栏的Disp.A是Display Active，表示GPU的显示是否初始化。 </p>\n<p>第五第六栏下方的Memory Usage是显存使用率。 </p>\n<p>第七栏是浮动的GPU利用率。 </p>\n<p>第八栏上方是关于ECC的东西。 </p>\n<p>第八栏下方Compute M是计算模式。 </p>\n<p>第二张表示每个进程占用的显存使用情况。</p>\n</blockquote>\n<h3 id=\"使用watch命令实时监测显卡\"><a href=\"#使用watch命令实时监测显卡\" class=\"headerlink\" title=\"使用watch命令实时监测显卡\"></a>使用watch命令实时监测显卡</h3><p>watch的基本用法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch [options]  command</span><br></pre></td></tr></table></figure>\n<p>最常用的参数是 -n， 后面指定是每多少秒来执行一次命令。</p>\n<p>例如：设置每 10s 显示一次显存的情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch -n 10 nvidia-smi</span><br></pre></td></tr></table></figure>\n<h2 id=\"cifar10\"><a href=\"#cifar10\" class=\"headerlink\" title=\"cifar10\"></a>cifar10</h2><p>继续调整网络结构和参数来增加准确率。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Tmux-：终端分割\"><a href=\"#Tmux-：终端分割\" class=\"headerlink\" title=\"Tmux ：终端分割\"></a>Tmux ：终端分割</h2><blockquote>\n<p>tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。</p>\n</blockquote>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><p><code>Ctrl+b ：激活控制台；此时以下按键生效</code></p>\n<h4 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h4><table>\n<thead>\n<tr>\n<th>?</th>\n<th>列出所有快捷键；按q返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td>脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</td>\n</tr>\n<tr>\n<td>D</td>\n<td>选择要脱离的会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td>Ctrl+z</td>\n<td>挂起当前会话</td>\n</tr>\n<tr>\n<td>r</td>\n<td>强制重绘未脱离的会话</td>\n</tr>\n<tr>\n<td>s</td>\n<td>选择并切换会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td>:</td>\n<td>进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器</td>\n</tr>\n<tr>\n<td>[</td>\n<td>进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出</td>\n</tr>\n<tr>\n<td>~</td>\n<td>列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"窗口操作\"><a href=\"#窗口操作\" class=\"headerlink\" title=\"窗口操作\"></a>窗口操作</h4><table>\n<thead>\n<tr>\n<th>c</th>\n<th>创建新窗口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>关闭当前窗口</td>\n</tr>\n<tr>\n<td>数字键</td>\n<td>切换至指定窗口</td>\n</tr>\n<tr>\n<td>p</td>\n<td>切换至上一窗口</td>\n</tr>\n<tr>\n<td>n</td>\n<td>切换至下一窗口</td>\n</tr>\n<tr>\n<td>l</td>\n<td>在前后两个窗口间互相切换</td>\n</tr>\n<tr>\n<td>w</td>\n<td>通过窗口列表切换窗口</td>\n</tr>\n<tr>\n<td>,</td>\n<td>重命名当前窗口；这样便于识别</td>\n</tr>\n<tr>\n<td>.</td>\n<td>修改当前窗口编号；相当于窗口重新排序</td>\n</tr>\n<tr>\n<td>f</td>\n<td>在所有窗口中查找指定文本</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"面板操作\"><a href=\"#面板操作\" class=\"headerlink\" title=\"面板操作\"></a>面板操作</h4><table>\n<thead>\n<tr>\n<th>”</th>\n<th>将当前面板平分为上下两块</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%</td>\n<td>将当前面板平分为左右两块</td>\n</tr>\n<tr>\n<td>x</td>\n<td>关闭当前面板</td>\n</tr>\n<tr>\n<td>!</td>\n<td>将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板</td>\n</tr>\n<tr>\n<td>Ctrl+方向键</td>\n<td>以1个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td>Alt+方向键</td>\n<td>以5个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td>Space</td>\n<td>在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled</td>\n</tr>\n<tr>\n<td>q</td>\n<td>显示面板编号</td>\n</tr>\n<tr>\n<td>o</td>\n<td>在当前窗口中选择下一面板</td>\n</tr>\n<tr>\n<td>方向键</td>\n<td>移动光标以选择面板</td>\n</tr>\n<tr>\n<td>{</td>\n<td>向前置换当前面板</td>\n</tr>\n<tr>\n<td>}</td>\n<td>向后置换当前面板</td>\n</tr>\n<tr>\n<td>Alt+o</td>\n<td>逆时针旋转当前窗口的面板</td>\n</tr>\n<tr>\n<td>Ctrl+o</td>\n<td>顺时针旋转当前窗口的面板</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Ctrl-b s            在 Tmux 的会话间切换</p>\n<p>Ctrl-b %            上下分屏</p>\n<p>Ctrl-b “            左右分屏</p>\n<p>Ctrl-b +方向键    进入对应的窗格</p>\n<p>Ctrl-b c            创建窗口</p>\n<p>Ctrl-b +数字        切换窗口 </p>\n<p>Ctrl-b &amp;            离开一个会话[exited]</p>\n<p>Ctrl-b d            从一个会话中脱离[dettached]</p>\n</blockquote>\n<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><p>下载MobaXterm来在windows下使用ssh</p>\n<p>连接命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@xxx.xxx.xxx.xxx</span><br><span class=\"line\">password</span><br></pre></td></tr></table></figure>\n<h2 id=\"监控显卡\"><a href=\"#监控显卡\" class=\"headerlink\" title=\"监控显卡\"></a>监控显卡</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia smi</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/bruce_0712/article/details/63683787\" target=\"_blank\" rel=\"noopener\">GPU使用表的具体含义</a>：</p>\n<blockquote>\n<p>第一张表格中： </p>\n<p>第一栏的Fan：N/A是风扇转速，从0到100%之间变动，这个速度是计算机期望的风扇转速，实际情况下如果风扇堵转，可能打不到显示的转速。有的设备不会返回转速，因为它不依赖风扇冷却而是通过其他外设保持低温（比如我们实验室的服务器是常年放在空调房间里的）。</p>\n<p>第二栏的Temp：是温度，单位摄氏度。 </p>\n<p>第三栏的Perf：是性能状态，从P0到P12，P0表示最大性能，P12表示状态最小性能。 </p>\n<p>第四栏下方的Pwr：是能耗，上方的Persistence-M：是持续模式的状态，持续模式虽然耗能大，但是在新的GPU应用启动时，花费的时间更少，这里显示的是off的状态。</p>\n<p>第五栏的Bus-Id是涉及GPU总线的东西，domain:bus:device.function </p>\n<p>第六栏的Disp.A是Display Active，表示GPU的显示是否初始化。 </p>\n<p>第五第六栏下方的Memory Usage是显存使用率。 </p>\n<p>第七栏是浮动的GPU利用率。 </p>\n<p>第八栏上方是关于ECC的东西。 </p>\n<p>第八栏下方Compute M是计算模式。 </p>\n<p>第二张表示每个进程占用的显存使用情况。</p>\n</blockquote>\n<h3 id=\"使用watch命令实时监测显卡\"><a href=\"#使用watch命令实时监测显卡\" class=\"headerlink\" title=\"使用watch命令实时监测显卡\"></a>使用watch命令实时监测显卡</h3><p>watch的基本用法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch [options]  command</span><br></pre></td></tr></table></figure>\n<p>最常用的参数是 -n， 后面指定是每多少秒来执行一次命令。</p>\n<p>例如：设置每 10s 显示一次显存的情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch -n 10 nvidia-smi</span><br></pre></td></tr></table></figure>\n<h2 id=\"cifar10\"><a href=\"#cifar10\" class=\"headerlink\" title=\"cifar10\"></a>cifar10</h2><p>继续调整网络结构和参数来增加准确率。</p>\n"},{"title":"求包含每个有序数组(共k个)至少一个元素的最小区间","toc":false,"date":"2018-09-22T13:03:22.000Z","_content":"\n> 给定k个**有序**数组, 每个数组有个N个元素，找出一个最小的闭区间，使其包含每个数组中的至少一个元素。 \n>\n> 关于最小区间——\n>\n> 给定两个区间[a,b], [c,d]： \n>\n> 如果 b-a < d-c，则认为[a, b]是更小的区间；\n>\n> 如果 b-a == d-c，且a < c，则认为[a, b]是更小的区间。\n\n不妨设k为3，分别为a,b,c数组且a1<=b1<=c1，当前最小区间长度为INT_MAX\n\n假设三个数组所有元素排序后为：\n\na1,...,b1,...,c1,.....\n\n我们考虑最小的a1，若最小区间包含的a数组的元素为a1，则若[a1,c1]的长度小于当前最小区间长度，更新最小区间长度为c1-a1，\n\n然后我们丢弃a1，因为若最小区间包含的a数组元素为a1，则最小区间一定为[a1,c1]，而我们已经更新了这个长度；若不是a1,则丢弃a1也无关紧要，不影响最后结果。\n\n那么现在我们一直的最小区间长度为c1-a1，三个数组剩下所有元素排序后可能为\n\na2,..,b1,..,c1,...或\n\nb1,..,a2,..c1,...或\n\nb1,..,c1,..a2...\n\n第一种情况就类似于上边讨论的情况，更新最小区间长度为c1-a2，然后丢弃a2。\n\n对于后两种情况，我们考虑最小的b1：\n\n若最小区间包含的b数组的元素为b1，则最小区间包含的一定为b1,c1,a2，我们更新最小区间长度，然后丢弃b1，\n\n若不是b1，则丢弃b1;\n\n这样不断循环地考虑最小值，知道丢弃完了某一个数组的所有值，这样我们的当前最小区间长度就是所求结果。\n\n下边是代码：\n\n```c++\n#include <iostream>\n#include <limits.h>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int k, n;\n    cin>>k>>n;\n    if (k <= 0 || n <= 0) return 0;\n    vector<vector<int> > nums;\n    vector<int> pos;\n    for (int i = 0; i < k; i++) {\n        vector<int> arrayI;\n        int tmp;\n        for (int j = 0; j < n; j++) {\n            cin>>tmp;\n            arrayI.push_back(tmp);\n        }\n        nums.push_back(arrayI);\n        pos.push_back(0);\n    }\n    int minLength = INT_MAX;\n    int realMin, realMax;\n    while (true) {\n        int arrayOfLeastNum = -1;\n        int tmpMin = INT_MAX;\n        int tmpMax = INT_MIN;\n        for (int i = 0; i < k; i++) {\n            if (nums[i][pos[i]] < tmpMin) {\n                tmpMin = nums[i][pos[i]];\n                arrayOfLeastNum = i;\n            }\n            if (nums[i][pos[i]] > tmpMax) {\n                tmpMax = nums[i][pos[i]];\n            }\n        }\n        if (tmpMax - tmpMin < minLength) {\n            minLength = tmpMax - tmpMin;\n            realMin = tmpMin, realMax = tmpMax;\n        }\n        if (++pos[arrayOfLeastNum] >= n) break;\n    }\n    cout<<realMin<<' '<<realMax;\n    return 0;\n}\n```\n\n但是，这个只能过90%:\n\n> 运行超时:您的程序未能在规定时间内运行结束，请检查是否循环有错或算法复杂度过大。\n> case通过率为90.00%\n\n看了一下题下的讨论，可以用一个优先队列（priority_queue，一个STL）或自己实现一个最小堆来维护“当前最小区间队列”，这样查找当前的最大值和最小值就是O(logn)而不是O(n)\n\n下边帖一下别人的代码：\n\n```c++\n链接：https://www.nowcoder.com/questionTerminal/0399d363fb594970bae7ad8a3978f86a\n来源：牛客网\n\n//思路2，用优先队列去实现多路归并\n \n#include<bits/stdc++.h>\nusing namespace std;\nstruct pt{\n    int x;\n    int pos;\n    pt(int a,int b):x(a),pos(b){}\n};\nstruct cmp{        //重写比较函数\n    bool operator()(const pt a,const pt b){\n        return a.x>b.x;\n    }\n};\nint main(){\n    int k,n;\n    while(cin>>k>>n){\n        vector<vector<pt>>all;\n        vector<int> vec;\n        for(int i = 0;i<k;i++){\n            vector<pt>temp;\n            for(int j = 0;j<n;j++){\n                int x;\n                cin>>x;\n                pt p(x,i);\n                temp.push_back(p);\n            }\n            all.push_back(temp);\n            vec.push_back(0);\n        }\n        vector<pt> sort;\n        priority_queue<pt,vector<pt>,cmp> qu; //优先队列\n        for(int i = 0;i<k;i++)\n            qu.push(all[i][0]);\n        while(!qu.empty()){\n            pt temp = qu.top();\n            qu.pop();\n            sort.push_back(temp);\n            vec[temp.pos]++;\n            if(vec[temp.pos]<=n-1){\n                qu.push(all[temp.pos][vec[temp.pos]]);\n            }\n        }\n        for(int i = 0;i<vec.size();i++)\n            vec[i] = 0;\n        int begin = 0;\n        int end = 0;\n        int start = 0;\n        int final = 0;\n        int length = INT_MAX;\n        bool flg = false;\n        vec[sort[0].pos]++;\n        while(begin<sort.size()-1||end<sort.size()-1){\n            bool flgg = true;\n            for(int i = 0;i<k;i++)\n                flgg = flgg&&(vec[i]>=1);\n            if(!flgg&&end<sort.size()){\n                if(end<sort.size()-1)\n                    end++;\n                vec[sort[end].pos]++;\n            }\n            if(!flgg&&end==sort.size()-1)\n                break;\n            if(flgg&&begin<sort.size()){\n                int x = sort[end].x-sort[begin].x;\n                if(x<length){\n                    start = sort[begin].x;\n                    final = sort[end].x;\n                    length = x;\n                }\n                vec[sort[begin].pos]--;\n                if(begin<sort.size()-1)\n                    begin++;\n            }\n            int a = 1;\n        }\n        cout<<start<<\" \"<<final<<endl;\n    }\n    system(\"pause\");\n    return 0;\n}\n```","source":"_posts/求包含每个有序数组-共k个-至少一个元素的最小区间.md","raw":"---\ntitle: 求包含每个有序数组(共k个)至少一个元素的最小区间\ntoc: false\ndate: 2018-09-22 21:03:22\ncategories:\n- OJ\ntags:\n- 归并\n---\n\n> 给定k个**有序**数组, 每个数组有个N个元素，找出一个最小的闭区间，使其包含每个数组中的至少一个元素。 \n>\n> 关于最小区间——\n>\n> 给定两个区间[a,b], [c,d]： \n>\n> 如果 b-a < d-c，则认为[a, b]是更小的区间；\n>\n> 如果 b-a == d-c，且a < c，则认为[a, b]是更小的区间。\n\n不妨设k为3，分别为a,b,c数组且a1<=b1<=c1，当前最小区间长度为INT_MAX\n\n假设三个数组所有元素排序后为：\n\na1,...,b1,...,c1,.....\n\n我们考虑最小的a1，若最小区间包含的a数组的元素为a1，则若[a1,c1]的长度小于当前最小区间长度，更新最小区间长度为c1-a1，\n\n然后我们丢弃a1，因为若最小区间包含的a数组元素为a1，则最小区间一定为[a1,c1]，而我们已经更新了这个长度；若不是a1,则丢弃a1也无关紧要，不影响最后结果。\n\n那么现在我们一直的最小区间长度为c1-a1，三个数组剩下所有元素排序后可能为\n\na2,..,b1,..,c1,...或\n\nb1,..,a2,..c1,...或\n\nb1,..,c1,..a2...\n\n第一种情况就类似于上边讨论的情况，更新最小区间长度为c1-a2，然后丢弃a2。\n\n对于后两种情况，我们考虑最小的b1：\n\n若最小区间包含的b数组的元素为b1，则最小区间包含的一定为b1,c1,a2，我们更新最小区间长度，然后丢弃b1，\n\n若不是b1，则丢弃b1;\n\n这样不断循环地考虑最小值，知道丢弃完了某一个数组的所有值，这样我们的当前最小区间长度就是所求结果。\n\n下边是代码：\n\n```c++\n#include <iostream>\n#include <limits.h>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int k, n;\n    cin>>k>>n;\n    if (k <= 0 || n <= 0) return 0;\n    vector<vector<int> > nums;\n    vector<int> pos;\n    for (int i = 0; i < k; i++) {\n        vector<int> arrayI;\n        int tmp;\n        for (int j = 0; j < n; j++) {\n            cin>>tmp;\n            arrayI.push_back(tmp);\n        }\n        nums.push_back(arrayI);\n        pos.push_back(0);\n    }\n    int minLength = INT_MAX;\n    int realMin, realMax;\n    while (true) {\n        int arrayOfLeastNum = -1;\n        int tmpMin = INT_MAX;\n        int tmpMax = INT_MIN;\n        for (int i = 0; i < k; i++) {\n            if (nums[i][pos[i]] < tmpMin) {\n                tmpMin = nums[i][pos[i]];\n                arrayOfLeastNum = i;\n            }\n            if (nums[i][pos[i]] > tmpMax) {\n                tmpMax = nums[i][pos[i]];\n            }\n        }\n        if (tmpMax - tmpMin < minLength) {\n            minLength = tmpMax - tmpMin;\n            realMin = tmpMin, realMax = tmpMax;\n        }\n        if (++pos[arrayOfLeastNum] >= n) break;\n    }\n    cout<<realMin<<' '<<realMax;\n    return 0;\n}\n```\n\n但是，这个只能过90%:\n\n> 运行超时:您的程序未能在规定时间内运行结束，请检查是否循环有错或算法复杂度过大。\n> case通过率为90.00%\n\n看了一下题下的讨论，可以用一个优先队列（priority_queue，一个STL）或自己实现一个最小堆来维护“当前最小区间队列”，这样查找当前的最大值和最小值就是O(logn)而不是O(n)\n\n下边帖一下别人的代码：\n\n```c++\n链接：https://www.nowcoder.com/questionTerminal/0399d363fb594970bae7ad8a3978f86a\n来源：牛客网\n\n//思路2，用优先队列去实现多路归并\n \n#include<bits/stdc++.h>\nusing namespace std;\nstruct pt{\n    int x;\n    int pos;\n    pt(int a,int b):x(a),pos(b){}\n};\nstruct cmp{        //重写比较函数\n    bool operator()(const pt a,const pt b){\n        return a.x>b.x;\n    }\n};\nint main(){\n    int k,n;\n    while(cin>>k>>n){\n        vector<vector<pt>>all;\n        vector<int> vec;\n        for(int i = 0;i<k;i++){\n            vector<pt>temp;\n            for(int j = 0;j<n;j++){\n                int x;\n                cin>>x;\n                pt p(x,i);\n                temp.push_back(p);\n            }\n            all.push_back(temp);\n            vec.push_back(0);\n        }\n        vector<pt> sort;\n        priority_queue<pt,vector<pt>,cmp> qu; //优先队列\n        for(int i = 0;i<k;i++)\n            qu.push(all[i][0]);\n        while(!qu.empty()){\n            pt temp = qu.top();\n            qu.pop();\n            sort.push_back(temp);\n            vec[temp.pos]++;\n            if(vec[temp.pos]<=n-1){\n                qu.push(all[temp.pos][vec[temp.pos]]);\n            }\n        }\n        for(int i = 0;i<vec.size();i++)\n            vec[i] = 0;\n        int begin = 0;\n        int end = 0;\n        int start = 0;\n        int final = 0;\n        int length = INT_MAX;\n        bool flg = false;\n        vec[sort[0].pos]++;\n        while(begin<sort.size()-1||end<sort.size()-1){\n            bool flgg = true;\n            for(int i = 0;i<k;i++)\n                flgg = flgg&&(vec[i]>=1);\n            if(!flgg&&end<sort.size()){\n                if(end<sort.size()-1)\n                    end++;\n                vec[sort[end].pos]++;\n            }\n            if(!flgg&&end==sort.size()-1)\n                break;\n            if(flgg&&begin<sort.size()){\n                int x = sort[end].x-sort[begin].x;\n                if(x<length){\n                    start = sort[begin].x;\n                    final = sort[end].x;\n                    length = x;\n                }\n                vec[sort[begin].pos]--;\n                if(begin<sort.size()-1)\n                    begin++;\n            }\n            int a = 1;\n        }\n        cout<<start<<\" \"<<final<<endl;\n    }\n    system(\"pause\");\n    return 0;\n}\n```","slug":"求包含每个有序数组-共k个-至少一个元素的最小区间","published":1,"updated":"2018-09-22T15:12:14.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1f002wcragnpned0ur","content":"<blockquote>\n<p>给定k个<strong>有序</strong>数组, 每个数组有个N个元素，找出一个最小的闭区间，使其包含每个数组中的至少一个元素。 </p>\n<p>关于最小区间——</p>\n<p>给定两个区间[a,b], [c,d]： </p>\n<p>如果 b-a &lt; d-c，则认为[a, b]是更小的区间；</p>\n<p>如果 b-a == d-c，且a &lt; c，则认为[a, b]是更小的区间。</p>\n</blockquote>\n<p>不妨设k为3，分别为a,b,c数组且a1&lt;=b1&lt;=c1，当前最小区间长度为INT_MAX</p>\n<p>假设三个数组所有元素排序后为：</p>\n<p>a1,…,b1,…,c1,…..</p>\n<p>我们考虑最小的a1，若最小区间包含的a数组的元素为a1，则若[a1,c1]的长度小于当前最小区间长度，更新最小区间长度为c1-a1，</p>\n<p>然后我们丢弃a1，因为若最小区间包含的a数组元素为a1，则最小区间一定为[a1,c1]，而我们已经更新了这个长度；若不是a1,则丢弃a1也无关紧要，不影响最后结果。</p>\n<p>那么现在我们一直的最小区间长度为c1-a1，三个数组剩下所有元素排序后可能为</p>\n<p>a2,..,b1,..,c1,…或</p>\n<p>b1,..,a2,..c1,…或</p>\n<p>b1,..,c1,..a2…</p>\n<p>第一种情况就类似于上边讨论的情况，更新最小区间长度为c1-a2，然后丢弃a2。</p>\n<p>对于后两种情况，我们考虑最小的b1：</p>\n<p>若最小区间包含的b数组的元素为b1，则最小区间包含的一定为b1,c1,a2，我们更新最小区间长度，然后丢弃b1，</p>\n<p>若不是b1，则丢弃b1;</p>\n<p>这样不断循环地考虑最小值，知道丢弃完了某一个数组的所有值，这样我们的当前最小区间长度就是所求结果。</p>\n<p>下边是代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k, n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;k&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k &lt;= <span class=\"number\">0</span> || n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; nums;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pos;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; arrayI;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">            arrayI.push_back(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums.push_back(arrayI);</span><br><span class=\"line\">        pos.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minLength = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> realMin, realMax;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayOfLeastNum = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmpMin = INT_MAX;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmpMax = INT_MIN;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i][pos[i]] &lt; tmpMin) &#123;</span><br><span class=\"line\">                tmpMin = nums[i][pos[i]];</span><br><span class=\"line\">                arrayOfLeastNum = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i][pos[i]] &gt; tmpMax) &#123;</span><br><span class=\"line\">                tmpMax = nums[i][pos[i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmpMax - tmpMin &lt; minLength) &#123;</span><br><span class=\"line\">            minLength = tmpMax - tmpMin;</span><br><span class=\"line\">            realMin = tmpMin, realMax = tmpMax;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++pos[arrayOfLeastNum] &gt;= n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;realMin&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;realMax;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是，这个只能过90%:</p>\n<blockquote>\n<p>运行超时:您的程序未能在规定时间内运行结束，请检查是否循环有错或算法复杂度过大。<br>case通过率为90.00%</p>\n</blockquote>\n<p>看了一下题下的讨论，可以用一个优先队列（priority_queue，一个STL）或自己实现一个最小堆来维护“当前最小区间队列”，这样查找当前的最大值和最小值就是O(logn)而不是O(n)</p>\n<p>下边帖一下别人的代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接：https:<span class=\"comment\">//www.nowcoder.com/questionTerminal/0399d363fb594970bae7ad8a3978f86a</span></span><br><span class=\"line\">来源：牛客网</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//思路2，用优先队列去实现多路归并</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">    pt(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b):x(a),pos(b)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span>&#123;</span>        <span class=\"comment\">//重写比较函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">const</span> pt a,<span class=\"keyword\">const</span> pt b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x&gt;b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k,n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span>&gt;&gt;k&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;pt&gt;&gt;all;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;pt&gt;temp;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">                <span class=\"built_in\">cin</span>&gt;&gt;x;</span><br><span class=\"line\">                <span class=\"function\">pt <span class=\"title\">p</span><span class=\"params\">(x,i)</span></span>;</span><br><span class=\"line\">                temp.push_back(p);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            all.push_back(temp);</span><br><span class=\"line\">            vec.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;pt&gt; sort;</span><br><span class=\"line\">        priority_queue&lt;pt,<span class=\"built_in\">vector</span>&lt;pt&gt;,cmp&gt; qu; <span class=\"comment\">//优先队列</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;k;i++)</span><br><span class=\"line\">            qu.push(all[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!qu.empty())&#123;</span><br><span class=\"line\">            pt temp = qu.top();</span><br><span class=\"line\">            qu.pop();</span><br><span class=\"line\">            sort.push_back(temp);</span><br><span class=\"line\">            vec[temp.pos]++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vec[temp.pos]&lt;=n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                qu.push(all[temp.pos][vec[temp.pos]]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;vec.size();i++)</span><br><span class=\"line\">            vec[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> final = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = INT_MAX;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> flg = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        vec[sort[<span class=\"number\">0</span>].pos]++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(begin&lt;sort.size()<span class=\"number\">-1</span>||end&lt;sort.size()<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> flgg = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;k;i++)</span><br><span class=\"line\">                flgg = flgg&amp;&amp;(vec[i]&gt;=<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flgg&amp;&amp;end&lt;sort.size())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(end&lt;sort.size()<span class=\"number\">-1</span>)</span><br><span class=\"line\">                    end++;</span><br><span class=\"line\">                vec[sort[end].pos]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flgg&amp;&amp;end==sort.size()<span class=\"number\">-1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flgg&amp;&amp;begin&lt;sort.size())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = sort[end].x-sort[begin].x;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x&lt;length)&#123;</span><br><span class=\"line\">                    start = sort[begin].x;</span><br><span class=\"line\">                    final = sort[end].x;</span><br><span class=\"line\">                    length = x;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                vec[sort[begin].pos]--;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(begin&lt;sort.size()<span class=\"number\">-1</span>)</span><br><span class=\"line\">                    begin++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;start&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;final&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>给定k个<strong>有序</strong>数组, 每个数组有个N个元素，找出一个最小的闭区间，使其包含每个数组中的至少一个元素。 </p>\n<p>关于最小区间——</p>\n<p>给定两个区间[a,b], [c,d]： </p>\n<p>如果 b-a &lt; d-c，则认为[a, b]是更小的区间；</p>\n<p>如果 b-a == d-c，且a &lt; c，则认为[a, b]是更小的区间。</p>\n</blockquote>\n<p>不妨设k为3，分别为a,b,c数组且a1&lt;=b1&lt;=c1，当前最小区间长度为INT_MAX</p>\n<p>假设三个数组所有元素排序后为：</p>\n<p>a1,…,b1,…,c1,…..</p>\n<p>我们考虑最小的a1，若最小区间包含的a数组的元素为a1，则若[a1,c1]的长度小于当前最小区间长度，更新最小区间长度为c1-a1，</p>\n<p>然后我们丢弃a1，因为若最小区间包含的a数组元素为a1，则最小区间一定为[a1,c1]，而我们已经更新了这个长度；若不是a1,则丢弃a1也无关紧要，不影响最后结果。</p>\n<p>那么现在我们一直的最小区间长度为c1-a1，三个数组剩下所有元素排序后可能为</p>\n<p>a2,..,b1,..,c1,…或</p>\n<p>b1,..,a2,..c1,…或</p>\n<p>b1,..,c1,..a2…</p>\n<p>第一种情况就类似于上边讨论的情况，更新最小区间长度为c1-a2，然后丢弃a2。</p>\n<p>对于后两种情况，我们考虑最小的b1：</p>\n<p>若最小区间包含的b数组的元素为b1，则最小区间包含的一定为b1,c1,a2，我们更新最小区间长度，然后丢弃b1，</p>\n<p>若不是b1，则丢弃b1;</p>\n<p>这样不断循环地考虑最小值，知道丢弃完了某一个数组的所有值，这样我们的当前最小区间长度就是所求结果。</p>\n<p>下边是代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k, n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;k&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k &lt;= <span class=\"number\">0</span> || n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; nums;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; pos;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; arrayI;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;tmp;</span><br><span class=\"line\">            arrayI.push_back(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums.push_back(arrayI);</span><br><span class=\"line\">        pos.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minLength = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> realMin, realMax;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayOfLeastNum = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmpMin = INT_MAX;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmpMax = INT_MIN;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i][pos[i]] &lt; tmpMin) &#123;</span><br><span class=\"line\">                tmpMin = nums[i][pos[i]];</span><br><span class=\"line\">                arrayOfLeastNum = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i][pos[i]] &gt; tmpMax) &#123;</span><br><span class=\"line\">                tmpMax = nums[i][pos[i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmpMax - tmpMin &lt; minLength) &#123;</span><br><span class=\"line\">            minLength = tmpMax - tmpMin;</span><br><span class=\"line\">            realMin = tmpMin, realMax = tmpMax;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++pos[arrayOfLeastNum] &gt;= n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;realMin&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;realMax;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是，这个只能过90%:</p>\n<blockquote>\n<p>运行超时:您的程序未能在规定时间内运行结束，请检查是否循环有错或算法复杂度过大。<br>case通过率为90.00%</p>\n</blockquote>\n<p>看了一下题下的讨论，可以用一个优先队列（priority_queue，一个STL）或自己实现一个最小堆来维护“当前最小区间队列”，这样查找当前的最大值和最小值就是O(logn)而不是O(n)</p>\n<p>下边帖一下别人的代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接：https:<span class=\"comment\">//www.nowcoder.com/questionTerminal/0399d363fb594970bae7ad8a3978f86a</span></span><br><span class=\"line\">来源：牛客网</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//思路2，用优先队列去实现多路归并</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">    pt(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b):x(a),pos(b)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span>&#123;</span>        <span class=\"comment\">//重写比较函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">const</span> pt a,<span class=\"keyword\">const</span> pt b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x&gt;b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k,n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span>&gt;&gt;k&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;pt&gt;&gt;all;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;pt&gt;temp;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">                <span class=\"built_in\">cin</span>&gt;&gt;x;</span><br><span class=\"line\">                <span class=\"function\">pt <span class=\"title\">p</span><span class=\"params\">(x,i)</span></span>;</span><br><span class=\"line\">                temp.push_back(p);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            all.push_back(temp);</span><br><span class=\"line\">            vec.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;pt&gt; sort;</span><br><span class=\"line\">        priority_queue&lt;pt,<span class=\"built_in\">vector</span>&lt;pt&gt;,cmp&gt; qu; <span class=\"comment\">//优先队列</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;k;i++)</span><br><span class=\"line\">            qu.push(all[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!qu.empty())&#123;</span><br><span class=\"line\">            pt temp = qu.top();</span><br><span class=\"line\">            qu.pop();</span><br><span class=\"line\">            sort.push_back(temp);</span><br><span class=\"line\">            vec[temp.pos]++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vec[temp.pos]&lt;=n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                qu.push(all[temp.pos][vec[temp.pos]]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;vec.size();i++)</span><br><span class=\"line\">            vec[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> final = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = INT_MAX;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> flg = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        vec[sort[<span class=\"number\">0</span>].pos]++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(begin&lt;sort.size()<span class=\"number\">-1</span>||end&lt;sort.size()<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> flgg = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;k;i++)</span><br><span class=\"line\">                flgg = flgg&amp;&amp;(vec[i]&gt;=<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flgg&amp;&amp;end&lt;sort.size())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(end&lt;sort.size()<span class=\"number\">-1</span>)</span><br><span class=\"line\">                    end++;</span><br><span class=\"line\">                vec[sort[end].pos]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flgg&amp;&amp;end==sort.size()<span class=\"number\">-1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flgg&amp;&amp;begin&lt;sort.size())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = sort[end].x-sort[begin].x;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x&lt;length)&#123;</span><br><span class=\"line\">                    start = sort[begin].x;</span><br><span class=\"line\">                    final = sort[end].x;</span><br><span class=\"line\">                    length = x;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                vec[sort[begin].pos]--;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(begin&lt;sort.size()<span class=\"number\">-1</span>)</span><br><span class=\"line\">                    begin++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;start&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;final&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"深度学习周报week07-week08","toc":true,"date":"2018-05-19T01:49:31.000Z","_content":"\n## 音频分类\n\n将1000个音频分别放入对应文件夹中：\n\n![](/images/classification.PNG)\n\n`filename.txt` 存储文件对应位置。\n\n以上所有存储在`classification`文件夹中。\n\n建立`filename.py`来生成`filename.txt`：\n\n```python\nimport os\n\ntextname = 'filename.txt'\nwith open(textname, 'w') as f:\n    for root, dirs, afiles in os.walk('./classification'):\n        for subdir in dirs:\n            for subroot, subdirs, subfiles in os.walk('./classification/'+subdir):\n                for filename in subfiles:\n                    apath = os.path.join(subdir, filename)\n                    f.write(apath)\n                    f.write('\\n')\n```\n\n生成的`filename.txt`为：\n\n![](/images/filename_txt.PNG)\n\n## MFCC\n\n[学习链接](https://blog.csdn.net/fengzhonghen/article/details/51722555)\n\n**MFCC**(Mel-frequency cepstral coefficients)：梅尔频率倒谱系数。\n\n梅尔频率是基于人耳听觉特性提出的概念， 它与Hz频率成非线性对应关系。\n\nMFCC则是利用它们之间的这种关系，计算得到的Hz频谱特征，<u>主要用于语音数据特征提取和降低运算维度</u>。\n\n<u>主要用于语音数据特征提取和降低运算维度。</u>\n\n例如：对于一帧有512维(采样点)数据，经过MFCC后可以提取出最重要的40维(一般而言)数据同时也达到了将维的目的。\n\nMFCC的步骤为：\n\n- 预加重\n- 分帧\n- 加窗\n- **快速傅里叶变换(FFT)**\n- **梅尔滤波器组**\n- 离散余弦变换(DCT)\n\n其中最重要的就是FFT和梅尔滤波器组，这两个进行了主要的降维操作。\n\n## 了解相关库和函数\n\n- scipy.io.wavfile\n- python_speech_features\n- librosa\n- pydub\n- tf.sparse_tensor_to_dense\n- tf.edit_distance\n- tf.nn.ctc_loss","source":"_posts/深度学习周报week07-week08.md","raw":"---\ntitle: 深度学习周报week07-week08\ntoc: true\ndate: 2018-05-19 09:49:31\ncategories:\n- deep learning\ntags:\n---\n\n## 音频分类\n\n将1000个音频分别放入对应文件夹中：\n\n![](/images/classification.PNG)\n\n`filename.txt` 存储文件对应位置。\n\n以上所有存储在`classification`文件夹中。\n\n建立`filename.py`来生成`filename.txt`：\n\n```python\nimport os\n\ntextname = 'filename.txt'\nwith open(textname, 'w') as f:\n    for root, dirs, afiles in os.walk('./classification'):\n        for subdir in dirs:\n            for subroot, subdirs, subfiles in os.walk('./classification/'+subdir):\n                for filename in subfiles:\n                    apath = os.path.join(subdir, filename)\n                    f.write(apath)\n                    f.write('\\n')\n```\n\n生成的`filename.txt`为：\n\n![](/images/filename_txt.PNG)\n\n## MFCC\n\n[学习链接](https://blog.csdn.net/fengzhonghen/article/details/51722555)\n\n**MFCC**(Mel-frequency cepstral coefficients)：梅尔频率倒谱系数。\n\n梅尔频率是基于人耳听觉特性提出的概念， 它与Hz频率成非线性对应关系。\n\nMFCC则是利用它们之间的这种关系，计算得到的Hz频谱特征，<u>主要用于语音数据特征提取和降低运算维度</u>。\n\n<u>主要用于语音数据特征提取和降低运算维度。</u>\n\n例如：对于一帧有512维(采样点)数据，经过MFCC后可以提取出最重要的40维(一般而言)数据同时也达到了将维的目的。\n\nMFCC的步骤为：\n\n- 预加重\n- 分帧\n- 加窗\n- **快速傅里叶变换(FFT)**\n- **梅尔滤波器组**\n- 离散余弦变换(DCT)\n\n其中最重要的就是FFT和梅尔滤波器组，这两个进行了主要的降维操作。\n\n## 了解相关库和函数\n\n- scipy.io.wavfile\n- python_speech_features\n- librosa\n- pydub\n- tf.sparse_tensor_to_dense\n- tf.edit_distance\n- tf.nn.ctc_loss","slug":"深度学习周报week07-week08","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1g002zcragc7iv4fgk","content":"<h2 id=\"音频分类\"><a href=\"#音频分类\" class=\"headerlink\" title=\"音频分类\"></a>音频分类</h2><p>将1000个音频分别放入对应文件夹中：</p>\n<p><img src=\"/images/classification.PNG\" alt=\"\"></p>\n<p><code>filename.txt</code> 存储文件对应位置。</p>\n<p>以上所有存储在<code>classification</code>文件夹中。</p>\n<p>建立<code>filename.py</code>来生成<code>filename.txt</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">textname = <span class=\"string\">'filename.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(textname, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, afiles <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'./classification'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> subdir <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> subroot, subdirs, subfiles <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'./classification/'</span>+subdir):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> subfiles:</span><br><span class=\"line\">                    apath = os.path.join(subdir, filename)</span><br><span class=\"line\">                    f.write(apath)</span><br><span class=\"line\">                    f.write(<span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure>\n<p>生成的<code>filename.txt</code>为：</p>\n<p><img src=\"/images/filename_txt.PNG\" alt=\"\"></p>\n<h2 id=\"MFCC\"><a href=\"#MFCC\" class=\"headerlink\" title=\"MFCC\"></a>MFCC</h2><p><a href=\"https://blog.csdn.net/fengzhonghen/article/details/51722555\" target=\"_blank\" rel=\"noopener\">学习链接</a></p>\n<p><strong>MFCC</strong>(Mel-frequency cepstral coefficients)：梅尔频率倒谱系数。</p>\n<p>梅尔频率是基于人耳听觉特性提出的概念， 它与Hz频率成非线性对应关系。</p>\n<p>MFCC则是利用它们之间的这种关系，计算得到的Hz频谱特征，<u>主要用于语音数据特征提取和降低运算维度</u>。</p>\n<p><u>主要用于语音数据特征提取和降低运算维度。</u></p>\n<p>例如：对于一帧有512维(采样点)数据，经过MFCC后可以提取出最重要的40维(一般而言)数据同时也达到了将维的目的。</p>\n<p>MFCC的步骤为：</p>\n<ul>\n<li>预加重</li>\n<li>分帧</li>\n<li>加窗</li>\n<li><strong>快速傅里叶变换(FFT)</strong></li>\n<li><strong>梅尔滤波器组</strong></li>\n<li>离散余弦变换(DCT)</li>\n</ul>\n<p>其中最重要的就是FFT和梅尔滤波器组，这两个进行了主要的降维操作。</p>\n<h2 id=\"了解相关库和函数\"><a href=\"#了解相关库和函数\" class=\"headerlink\" title=\"了解相关库和函数\"></a>了解相关库和函数</h2><ul>\n<li>scipy.io.wavfile</li>\n<li>python_speech_features</li>\n<li>librosa</li>\n<li>pydub</li>\n<li>tf.sparse_tensor_to_dense</li>\n<li>tf.edit_distance</li>\n<li>tf.nn.ctc_loss</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"音频分类\"><a href=\"#音频分类\" class=\"headerlink\" title=\"音频分类\"></a>音频分类</h2><p>将1000个音频分别放入对应文件夹中：</p>\n<p><img src=\"/images/classification.PNG\" alt=\"\"></p>\n<p><code>filename.txt</code> 存储文件对应位置。</p>\n<p>以上所有存储在<code>classification</code>文件夹中。</p>\n<p>建立<code>filename.py</code>来生成<code>filename.txt</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">textname = <span class=\"string\">'filename.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(textname, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, afiles <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'./classification'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> subdir <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> subroot, subdirs, subfiles <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'./classification/'</span>+subdir):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> subfiles:</span><br><span class=\"line\">                    apath = os.path.join(subdir, filename)</span><br><span class=\"line\">                    f.write(apath)</span><br><span class=\"line\">                    f.write(<span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure>\n<p>生成的<code>filename.txt</code>为：</p>\n<p><img src=\"/images/filename_txt.PNG\" alt=\"\"></p>\n<h2 id=\"MFCC\"><a href=\"#MFCC\" class=\"headerlink\" title=\"MFCC\"></a>MFCC</h2><p><a href=\"https://blog.csdn.net/fengzhonghen/article/details/51722555\" target=\"_blank\" rel=\"noopener\">学习链接</a></p>\n<p><strong>MFCC</strong>(Mel-frequency cepstral coefficients)：梅尔频率倒谱系数。</p>\n<p>梅尔频率是基于人耳听觉特性提出的概念， 它与Hz频率成非线性对应关系。</p>\n<p>MFCC则是利用它们之间的这种关系，计算得到的Hz频谱特征，<u>主要用于语音数据特征提取和降低运算维度</u>。</p>\n<p><u>主要用于语音数据特征提取和降低运算维度。</u></p>\n<p>例如：对于一帧有512维(采样点)数据，经过MFCC后可以提取出最重要的40维(一般而言)数据同时也达到了将维的目的。</p>\n<p>MFCC的步骤为：</p>\n<ul>\n<li>预加重</li>\n<li>分帧</li>\n<li>加窗</li>\n<li><strong>快速傅里叶变换(FFT)</strong></li>\n<li><strong>梅尔滤波器组</strong></li>\n<li>离散余弦变换(DCT)</li>\n</ul>\n<p>其中最重要的就是FFT和梅尔滤波器组，这两个进行了主要的降维操作。</p>\n<h2 id=\"了解相关库和函数\"><a href=\"#了解相关库和函数\" class=\"headerlink\" title=\"了解相关库和函数\"></a>了解相关库和函数</h2><ul>\n<li>scipy.io.wavfile</li>\n<li>python_speech_features</li>\n<li>librosa</li>\n<li>pydub</li>\n<li>tf.sparse_tensor_to_dense</li>\n<li>tf.edit_distance</li>\n<li>tf.nn.ctc_loss</li>\n</ul>\n"},{"title":"深度学习周报week09-week10","toc":true,"date":"2018-06-27T12:06:00.000Z","_content":"\n## 项目实现\n\n- 分类后的音频作为训练集\n\n\n- 读入训练集后对语音进行初始化和特征提取\n- 定义参数\n- 实现网络结构（七层卷积三次下采样）\n- 训练模型并进行检验（对单词识别）\n\n\n## 优化\n\n根据准确率和Tensor flow Board不断调整参数和网络结构。","source":"_posts/深度学习周报week09-week10.md","raw":"---\ntitle: 深度学习周报week09-week10\ntoc: true\ndate: 2018-06-27 20:06:00\ncategories:\n- deep learning\ntags:\n---\n\n## 项目实现\n\n- 分类后的音频作为训练集\n\n\n- 读入训练集后对语音进行初始化和特征提取\n- 定义参数\n- 实现网络结构（七层卷积三次下采样）\n- 训练模型并进行检验（对单词识别）\n\n\n## 优化\n\n根据准确率和Tensor flow Board不断调整参数和网络结构。","slug":"深度学习周报week09-week10","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1i0033cragflbf0hyu","content":"<h2 id=\"项目实现\"><a href=\"#项目实现\" class=\"headerlink\" title=\"项目实现\"></a>项目实现</h2><ul>\n<li>分类后的音频作为训练集</li>\n</ul>\n<ul>\n<li>读入训练集后对语音进行初始化和特征提取</li>\n<li>定义参数</li>\n<li>实现网络结构（七层卷积三次下采样）</li>\n<li>训练模型并进行检验（对单词识别）</li>\n</ul>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>根据准确率和Tensor flow Board不断调整参数和网络结构。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目实现\"><a href=\"#项目实现\" class=\"headerlink\" title=\"项目实现\"></a>项目实现</h2><ul>\n<li>分类后的音频作为训练集</li>\n</ul>\n<ul>\n<li>读入训练集后对语音进行初始化和特征提取</li>\n<li>定义参数</li>\n<li>实现网络结构（七层卷积三次下采样）</li>\n<li>训练模型并进行检验（对单词识别）</li>\n</ul>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>根据准确率和Tensor flow Board不断调整参数和网络结构。</p>\n"},{"title":"深度学习周报week05-week06","toc":true,"date":"2018-05-12T02:22:12.000Z","_content":"\n## 过拟合\n\n过拟合，就是拟合函数由于顾忌每一个点，最终形成的拟合函数波动很大。在某些很小的区间里，函数值的变化很剧烈。这就意味着函数在某些小区间里的导数值（绝对值）非常大，由于自变量值可大可小，所以只有系数足够大，才能保证导数值很大。\n\n## 正则化\n\n[参考链接](https://blog.csdn.net/u012162613/article/details/44261657)\n\n当训练数据不够多或训练过度时，常常会导致过拟合。正则化就是避免过拟合的一个办法。\n\n<u>正则化是通过约束参数的范数使其不要太大，所以可以在一定程度上减少过拟合情况。</u>\n\n### L2正则化（权重衰减）\n\nL2正则化就是在代价函数后面再加上一个正则化项：\n\n![](/images/L2.jpg)\n\n### L1正则化\n\nL1正则化就是在原始的代价函数后面加上一个L1正则化项，即所有权重w的绝对值的和，乘以λ/n：\n\n![](/images/L1.jpg)\n\n## Batch Normalization(BN)\n\n在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。\n\n![](/images/BN.png)\n\n训练过程中采用batch 随机梯度下降，其中E(xk)指的是每一批训练数据神经元xk的平均值；分母指的是每一批数据神经元xk激活度的一个标准差。\n\n引入了可学习参数γ、β：\n\n![](/images/BN_y.png)\n\n因此Batch Normalization网络层的前向传导过程公式为：\n\n![](/images/BN_back.png)\n\n其中m为mini-batch size。\n\n### 在CNN中的使用\n\n由于BN是对单个神经元的运算，因此为了避免参数过多的情况，使用类似权值共享的策略，把一整张特征图当作一个神经元处理。\n\n## cifar 10\n\n继续调整网络结构和参数。\n\n## 项目准备\n\n了解频谱图以及音频采样。\n\n","source":"_posts/深度学习周报week05-week06.md","raw":"---\ntitle: 深度学习周报week05-week06\ntoc: true\ndate: 2018-05-12 10:22:12\ncategories:\n- deep learning\ntags:\n- BN\n---\n\n## 过拟合\n\n过拟合，就是拟合函数由于顾忌每一个点，最终形成的拟合函数波动很大。在某些很小的区间里，函数值的变化很剧烈。这就意味着函数在某些小区间里的导数值（绝对值）非常大，由于自变量值可大可小，所以只有系数足够大，才能保证导数值很大。\n\n## 正则化\n\n[参考链接](https://blog.csdn.net/u012162613/article/details/44261657)\n\n当训练数据不够多或训练过度时，常常会导致过拟合。正则化就是避免过拟合的一个办法。\n\n<u>正则化是通过约束参数的范数使其不要太大，所以可以在一定程度上减少过拟合情况。</u>\n\n### L2正则化（权重衰减）\n\nL2正则化就是在代价函数后面再加上一个正则化项：\n\n![](/images/L2.jpg)\n\n### L1正则化\n\nL1正则化就是在原始的代价函数后面加上一个L1正则化项，即所有权重w的绝对值的和，乘以λ/n：\n\n![](/images/L1.jpg)\n\n## Batch Normalization(BN)\n\n在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。\n\n![](/images/BN.png)\n\n训练过程中采用batch 随机梯度下降，其中E(xk)指的是每一批训练数据神经元xk的平均值；分母指的是每一批数据神经元xk激活度的一个标准差。\n\n引入了可学习参数γ、β：\n\n![](/images/BN_y.png)\n\n因此Batch Normalization网络层的前向传导过程公式为：\n\n![](/images/BN_back.png)\n\n其中m为mini-batch size。\n\n### 在CNN中的使用\n\n由于BN是对单个神经元的运算，因此为了避免参数过多的情况，使用类似权值共享的策略，把一整张特征图当作一个神经元处理。\n\n## cifar 10\n\n继续调整网络结构和参数。\n\n## 项目准备\n\n了解频谱图以及音频采样。\n\n","slug":"深度学习周报week05-week06","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1j0036crag4prs3vv0","content":"<h2 id=\"过拟合\"><a href=\"#过拟合\" class=\"headerlink\" title=\"过拟合\"></a>过拟合</h2><p>过拟合，就是拟合函数由于顾忌每一个点，最终形成的拟合函数波动很大。在某些很小的区间里，函数值的变化很剧烈。这就意味着函数在某些小区间里的导数值（绝对值）非常大，由于自变量值可大可小，所以只有系数足够大，才能保证导数值很大。</p>\n<h2 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h2><p><a href=\"https://blog.csdn.net/u012162613/article/details/44261657\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>当训练数据不够多或训练过度时，常常会导致过拟合。正则化就是避免过拟合的一个办法。</p>\n<p><u>正则化是通过约束参数的范数使其不要太大，所以可以在一定程度上减少过拟合情况。</u></p>\n<h3 id=\"L2正则化（权重衰减）\"><a href=\"#L2正则化（权重衰减）\" class=\"headerlink\" title=\"L2正则化（权重衰减）\"></a>L2正则化（权重衰减）</h3><p>L2正则化就是在代价函数后面再加上一个正则化项：</p>\n<p><img src=\"/images/L2.jpg\" alt=\"\"></p>\n<h3 id=\"L1正则化\"><a href=\"#L1正则化\" class=\"headerlink\" title=\"L1正则化\"></a>L1正则化</h3><p>L1正则化就是在原始的代价函数后面加上一个L1正则化项，即所有权重w的绝对值的和，乘以λ/n：</p>\n<p><img src=\"/images/L1.jpg\" alt=\"\"></p>\n<h2 id=\"Batch-Normalization-BN\"><a href=\"#Batch-Normalization-BN\" class=\"headerlink\" title=\"Batch Normalization(BN)\"></a>Batch Normalization(BN)</h2><p>在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。</p>\n<p><img src=\"/images/BN.png\" alt=\"\"></p>\n<p>训练过程中采用batch 随机梯度下降，其中E(xk)指的是每一批训练数据神经元xk的平均值；分母指的是每一批数据神经元xk激活度的一个标准差。</p>\n<p>引入了可学习参数γ、β：</p>\n<p><img src=\"/images/BN_y.png\" alt=\"\"></p>\n<p>因此Batch Normalization网络层的前向传导过程公式为：</p>\n<p><img src=\"/images/BN_back.png\" alt=\"\"></p>\n<p>其中m为mini-batch size。</p>\n<h3 id=\"在CNN中的使用\"><a href=\"#在CNN中的使用\" class=\"headerlink\" title=\"在CNN中的使用\"></a>在CNN中的使用</h3><p>由于BN是对单个神经元的运算，因此为了避免参数过多的情况，使用类似权值共享的策略，把一整张特征图当作一个神经元处理。</p>\n<h2 id=\"cifar-10\"><a href=\"#cifar-10\" class=\"headerlink\" title=\"cifar 10\"></a>cifar 10</h2><p>继续调整网络结构和参数。</p>\n<h2 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h2><p>了解频谱图以及音频采样。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"过拟合\"><a href=\"#过拟合\" class=\"headerlink\" title=\"过拟合\"></a>过拟合</h2><p>过拟合，就是拟合函数由于顾忌每一个点，最终形成的拟合函数波动很大。在某些很小的区间里，函数值的变化很剧烈。这就意味着函数在某些小区间里的导数值（绝对值）非常大，由于自变量值可大可小，所以只有系数足够大，才能保证导数值很大。</p>\n<h2 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h2><p><a href=\"https://blog.csdn.net/u012162613/article/details/44261657\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>当训练数据不够多或训练过度时，常常会导致过拟合。正则化就是避免过拟合的一个办法。</p>\n<p><u>正则化是通过约束参数的范数使其不要太大，所以可以在一定程度上减少过拟合情况。</u></p>\n<h3 id=\"L2正则化（权重衰减）\"><a href=\"#L2正则化（权重衰减）\" class=\"headerlink\" title=\"L2正则化（权重衰减）\"></a>L2正则化（权重衰减）</h3><p>L2正则化就是在代价函数后面再加上一个正则化项：</p>\n<p><img src=\"/images/L2.jpg\" alt=\"\"></p>\n<h3 id=\"L1正则化\"><a href=\"#L1正则化\" class=\"headerlink\" title=\"L1正则化\"></a>L1正则化</h3><p>L1正则化就是在原始的代价函数后面加上一个L1正则化项，即所有权重w的绝对值的和，乘以λ/n：</p>\n<p><img src=\"/images/L1.jpg\" alt=\"\"></p>\n<h2 id=\"Batch-Normalization-BN\"><a href=\"#Batch-Normalization-BN\" class=\"headerlink\" title=\"Batch Normalization(BN)\"></a>Batch Normalization(BN)</h2><p>在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。</p>\n<p><img src=\"/images/BN.png\" alt=\"\"></p>\n<p>训练过程中采用batch 随机梯度下降，其中E(xk)指的是每一批训练数据神经元xk的平均值；分母指的是每一批数据神经元xk激活度的一个标准差。</p>\n<p>引入了可学习参数γ、β：</p>\n<p><img src=\"/images/BN_y.png\" alt=\"\"></p>\n<p>因此Batch Normalization网络层的前向传导过程公式为：</p>\n<p><img src=\"/images/BN_back.png\" alt=\"\"></p>\n<p>其中m为mini-batch size。</p>\n<h3 id=\"在CNN中的使用\"><a href=\"#在CNN中的使用\" class=\"headerlink\" title=\"在CNN中的使用\"></a>在CNN中的使用</h3><p>由于BN是对单个神经元的运算，因此为了避免参数过多的情况，使用类似权值共享的策略，把一整张特征图当作一个神经元处理。</p>\n<h2 id=\"cifar-10\"><a href=\"#cifar-10\" class=\"headerlink\" title=\"cifar 10\"></a>cifar 10</h2><p>继续调整网络结构和参数。</p>\n<h2 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h2><p>了解频谱图以及音频采样。</p>\n"},{"title":"深度学习周报week11-week12","toc":true,"date":"2018-06-27T12:22:11.000Z","_content":"\n## 实现本地服务器\n\n## Tornado\n\n利用tornado框架搭建本地服务器。\n\n主要学习以下内容：\n\n- define\n- Future\n- RequestHandler\n- 协程装饰器\n- http相关\n- json相关\n- 正则表达式匹配url\n\n\n## 优化\n\n继续调整参数和网络进行优化\n\n## 整合\n\n将训练模型单独整合为一个函数，server单独为一个文件，运行server，在开启本地服务器时，调用此函数训练模型，选定一个测试数据后直接进行预测。","source":"_posts/深度学习周报week11-week12.md","raw":"---\ntitle: 深度学习周报week11-week12\ntoc: true\ndate: 2018-06-27 20:22:11\ncategories:\n- deep learning\ntags:\n---\n\n## 实现本地服务器\n\n## Tornado\n\n利用tornado框架搭建本地服务器。\n\n主要学习以下内容：\n\n- define\n- Future\n- RequestHandler\n- 协程装饰器\n- http相关\n- json相关\n- 正则表达式匹配url\n\n\n## 优化\n\n继续调整参数和网络进行优化\n\n## 整合\n\n将训练模型单独整合为一个函数，server单独为一个文件，运行server，在开启本地服务器时，调用此函数训练模型，选定一个测试数据后直接进行预测。","slug":"深度学习周报week11-week12","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1l0039cragzmglmemy","content":"<h2 id=\"实现本地服务器\"><a href=\"#实现本地服务器\" class=\"headerlink\" title=\"实现本地服务器\"></a>实现本地服务器</h2><h2 id=\"Tornado\"><a href=\"#Tornado\" class=\"headerlink\" title=\"Tornado\"></a>Tornado</h2><p>利用tornado框架搭建本地服务器。</p>\n<p>主要学习以下内容：</p>\n<ul>\n<li>define</li>\n<li>Future</li>\n<li>RequestHandler</li>\n<li>协程装饰器</li>\n<li>http相关</li>\n<li>json相关</li>\n<li>正则表达式匹配url</li>\n</ul>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>继续调整参数和网络进行优化</p>\n<h2 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h2><p>将训练模型单独整合为一个函数，server单独为一个文件，运行server，在开启本地服务器时，调用此函数训练模型，选定一个测试数据后直接进行预测。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实现本地服务器\"><a href=\"#实现本地服务器\" class=\"headerlink\" title=\"实现本地服务器\"></a>实现本地服务器</h2><h2 id=\"Tornado\"><a href=\"#Tornado\" class=\"headerlink\" title=\"Tornado\"></a>Tornado</h2><p>利用tornado框架搭建本地服务器。</p>\n<p>主要学习以下内容：</p>\n<ul>\n<li>define</li>\n<li>Future</li>\n<li>RequestHandler</li>\n<li>协程装饰器</li>\n<li>http相关</li>\n<li>json相关</li>\n<li>正则表达式匹配url</li>\n</ul>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>继续调整参数和网络进行优化</p>\n<h2 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h2><p>将训练模型单独整合为一个函数，server单独为一个文件，运行server，在开启本地服务器时，调用此函数训练模型，选定一个测试数据后直接进行预测。</p>\n"},{"title":"猫眼电影加密数字破解（爬取评分票房票价）","toc":true,"date":"2018-07-01T14:05:27.000Z","_content":"\n## 背景\n\n在爬取猫眼电影相关数据时发现爬取下来的评分、票房、票价不是具体的数字而是一串类似于`\\uf5fb`的码，需要解密。\n\n而这些密码是每次访问时随机生成的，和0-9的映射关系也是随机的。\n\n## 解密办法\n\n下载动态字体文件，解析映射关系。\n\n## 解密思路\n\n首先找到动态字体文件的地址（head标签内的style标签内）：\n\n```html\n<style>\n    @font-face {\n      font-family: stonefont;\n      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot');\n      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot?#iefix') format('embedded-opentype'),\n           url('//vfile.meituan.net/colorstone/8f497cdb4e39d1f3dcbafa28a486aea42076.woff') format('woff');\n    }\n\n    .stonefont {\n      font-family: stonefont;\n    }\n  </style>\n```\n\n其中的.woff文件是我们需要的。\n\n爬取代码如下（利用**scrapy**）：\n\n```python\n#下载字体文件\nfont_url = sel.xpath('/html/head/style/text()').extract()[0]\nfont_url = 'http:'+font_url[font_url.rfind('url')+5:font_url.find('woff')+4]\nprint(font_url)\nwoff_path = 'tmp.woff'\nf = urllib.request.urlopen(font_url)\ndata = f.read()\nwith open(woff_path, \"wb\") as code:\n    code.write(data)\n```\n\n利用`TTFont`将`woff`文件转换为`xml`文件：\n\n```python\nfont1 = TTFont('tmp.woff')\nfont1.saveXML('tmp.xml')\n```\n\n查看xml文件会发现一个映射关系：\n\n```xml\n<GlyphOrder>\n    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->\n    <GlyphID id=\"0\" name=\"glyph00000\"/>\n    <GlyphID id=\"1\" name=\"x\"/>\n    <GlyphID id=\"2\" name=\"uniF753\"/>\n    <GlyphID id=\"3\" name=\"uniEA72\"/>\n    <GlyphID id=\"4\" name=\"uniEE4E\"/>\n    <GlyphID id=\"5\" name=\"uniECE6\"/>\n    <GlyphID id=\"6\" name=\"uniE140\"/>\n    <GlyphID id=\"7\" name=\"uniF4B0\"/>\n    <GlyphID id=\"8\" name=\"uniE1B7\"/>\n    <GlyphID id=\"9\" name=\"uniF245\"/>\n    <GlyphID id=\"10\" name=\"uniE488\"/>\n    <GlyphID id=\"11\" name=\"uniE6DA\"/>\n</GlyphOrder>\n```\n\n但是使用这个映射关系解码发现解密出来的数字不对，因此GlyphOrder并不是我们需要的映射关系。\n\nxml文件往下翻，发现了字体数据：\n\n```xml\n<TTGlyph name=\"uniF245\" xMin=\"0\" yMin=\"0\" xMax=\"508\" yMax=\"716\">\n  <contour>\n    <pt x=\"323\" y=\"0\" on=\"1\"/>\n    <pt x=\"323\" y=\"171\" on=\"1\"/>\n    <pt x=\"13\" y=\"171\" on=\"1\"/>\n    <pt x=\"13\" y=\"252\" on=\"1\"/>\n    <pt x=\"339\" y=\"716\" on=\"1\"/>\n    <pt x=\"411\" y=\"716\" on=\"1\"/>\n    <pt x=\"411\" y=\"252\" on=\"1\"/>\n    <pt x=\"508\" y=\"252\" on=\"1\"/>\n    <pt x=\"508\" y=\"171\" on=\"1\"/>\n    <pt x=\"411\" y=\"171\" on=\"1\"/>\n    <pt x=\"411\" y=\"0\" on=\"1\"/>\n  </contour>\n  <contour>\n    <pt x=\"323\" y=\"252\" on=\"1\"/>\n    <pt x=\"323\" y=\"575\" on=\"1\"/>\n    <pt x=\"99\" y=\"252\" on=\"1\"/>\n  </contour>\n  <instructions/>\n</TTGlyph>\n```\n\n看到这里突然想到，无论unicode码怎么变，数字渲染出来的样子是不会变的，因此可以从字体数据入手：\n\n**0-9每一个数字都有对应的一个`TTGlyph`数据，首先对一个已知映射关系的字体文件进行分析，获取0-9的字体数据，然后对于每次下载的动态字体文件，将其字体信息与0-9的字体数据进行对比就可以知道其映射关系了。**\n\n首先需要一份已知映射关系的xml文件作为映射关系对比文件，将其命名为`data.xml`，然后使用[百度字体编辑器](http://fontstore.baidu.com/static/editor/index.html)分析其对应的`woff`获取其映射关系(由于我的`data.xml`对应的`woff`文件删掉了，因此这里截图的是一个随机的`woff`文件对应的映射关系，可能与后边的代码内的映射关系不同，特此说明)：\n\n![](/images/woff_decode.PNG)\n\n创建`data.xml`对应的映射关系的字典：\n\n```python\ndata_dict = {\"uniE184\":\"4\",\"uniE80B\":\"3\",\"uniF22E\":\"8\",\"uniE14C\":\"0\",\n\t\t\"uniF5FB\":\"6\",\"uniEE59\":\"5\",\"uniEBD3\":\"1\",\"uniED85\":\"7\",\"uniECB8\":\"2\",\"uniE96A\":\"9\"}\n```\n\n要对比字体数据就要对xml文件进行分析，因此创建相关xml分析函数：\n\n获取某节点指定属性的值：\n\n```python\ndef getValue(node, attribute):\n\treturn node.attributes[attribute].value\n```\n\n字体数据的标签为`TTGlyph`，创建获取一个`xml`文件中所有的文字信息节点的函数：\n\n```python\ndef getTTGlyphList(xml_path):\n\tdataXmlfilepath = os.path.abspath(xml_path)\n\tdataDomObj = xmldom.parse(dataXmlfilepath)\n\tdataElementObj = dataDomObj.documentElement\n\tdataTTGlyphList = dataElementObj.getElementsByTagName('TTGlyph')\n\treturn dataTTGlyphList\n```\n\n判断两个`TTGlyph`节点数据是否相同的函数：\n\n```python\ndef isEqual(ttglyph_a, ttglyph_b):\n\ta_pt_list = ttglyph_a.getElementsByTagName('pt')\n\tb_pt_list = ttglyph_b.getElementsByTagName('pt')\n\ta_len = len(a_pt_list)\n\tb_len = len(b_pt_list)\n\tif a_len != b_len:\n\t\treturn False\n\tfor i in range(a_len):\n\t\tif getValue(a_pt_list[i], 'x') != getValue(b_pt_list[i], 'x')  or getValue(a_pt_list[i], 'y') != getValue(b_pt_list[i], 'y') or getValue(a_pt_list[i], 'on') != getValue(b_pt_list[i], 'on'):\n\t\t\treturn False\n\treturn True\n```\n\n===============================================\n\n相关函数建好后可以继续分析：\n\n由于每次的unicode码是随机生成的，因此还需要知道新的0-9对应的unicode码是多少，为了方便直接使用函数获取了上边提到过的映射关系不对的`GlyphOrder`，是一个`key`为unicode，`value`为数字的字典：\n\n```python\ndecode_dict = dict(enumerate(font1.getGlyphOrder()[2:]))\ndecode_dict = dict(zip(decode_dict.values(),decode_dict.keys()))\t\n```\n\n获取已知映射关系的`data.xml`的字体数据节点和新的动态字体文件的数据节点：\n\n```python\ndataTTGlyphList = getTTGlyphList(\"data.xml\")\ntmpTTGlyphList = getTTGlyphList(\"tmp.xml\")\n```\n\n利用字体数据更新映射字典：\n\n```python\ndecode_dict = refresh(decode_dict,tmpTTGlyphList,dataTTGlyphList)\n```\n\n更新函数的具体实现如下：\n\n```python\ndef refresh(dict, ttGlyphList_a, ttGlyphList_data):\n\tdata_dict = {\"uniE184\":\"4\",\"uniE80B\":\"3\",\"uniF22E\":\"8\",\"uniE14C\":\"0\",\n\t\t\"uniF5FB\":\"6\",\"uniEE59\":\"5\",\"uniEBD3\":\"1\",\"uniED85\":\"7\",\"uniECB8\":\"2\",\"uniE96A\":\"9\"}\n\tdata_keys = data_dict.keys()\n\tfor ttglyph_data in ttGlyphList_data:\n\t\tif \tgetValue(ttglyph_data,'name') in data_keys:\n\t\t\tfor ttglyph_a in ttGlyphList_a:\n\t\t\t\tif isEqual(ttglyph_a, ttglyph_data):\n\t\t\t\t\tdict[getValue(ttglyph_a,'name')] = data_dict[getValue(ttglyph_data,'name')]\n\t\t\t\t\tbreak\n\treturn dict\n```\n\n考虑到小数的情况，加入小数点映射：\n\n```python\ndecode_dict['.'] = '.'\n```\n\n实现解码函数（输入映射字典和一个需要解密的数值，输出解密后的结果如15.6）：\n\n```python\ndef decode(decode_dict, code):\n\t_lst_uincode = []\n\tfor item in code.__repr__().split(\"\\\\u\"):\n\t\t_lst_uincode.append(\"uni\" + item[:4].upper())\n\t\tif item[4:]:\n\t\t\t_lst_uincode.append(item[4:])\n\t_lst_uincode = _lst_uincode[1:-1]\n\tresult = \"\".join([str(decode_dict[i]) for i in _lst_uincode])\n\treturn result\n```\n\n\n\n==================================================\n\n[具体代码链接](https://github.com/SoftwareSAD/Spider/blob/master/rowpiece/rowpiece/spiders/RowpieceSpider.py)","source":"_posts/猫眼电影加密数字破解（爬取评分票房票价）.md","raw":"---\ntitle: 猫眼电影加密数字破解（爬取评分票房票价）\ntoc: true\ndate: 2018-07-01 22:05:27\ncategories:\n- methods\ntags:\n- 爬虫\n- Python\n---\n\n## 背景\n\n在爬取猫眼电影相关数据时发现爬取下来的评分、票房、票价不是具体的数字而是一串类似于`\\uf5fb`的码，需要解密。\n\n而这些密码是每次访问时随机生成的，和0-9的映射关系也是随机的。\n\n## 解密办法\n\n下载动态字体文件，解析映射关系。\n\n## 解密思路\n\n首先找到动态字体文件的地址（head标签内的style标签内）：\n\n```html\n<style>\n    @font-face {\n      font-family: stonefont;\n      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot');\n      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot?#iefix') format('embedded-opentype'),\n           url('//vfile.meituan.net/colorstone/8f497cdb4e39d1f3dcbafa28a486aea42076.woff') format('woff');\n    }\n\n    .stonefont {\n      font-family: stonefont;\n    }\n  </style>\n```\n\n其中的.woff文件是我们需要的。\n\n爬取代码如下（利用**scrapy**）：\n\n```python\n#下载字体文件\nfont_url = sel.xpath('/html/head/style/text()').extract()[0]\nfont_url = 'http:'+font_url[font_url.rfind('url')+5:font_url.find('woff')+4]\nprint(font_url)\nwoff_path = 'tmp.woff'\nf = urllib.request.urlopen(font_url)\ndata = f.read()\nwith open(woff_path, \"wb\") as code:\n    code.write(data)\n```\n\n利用`TTFont`将`woff`文件转换为`xml`文件：\n\n```python\nfont1 = TTFont('tmp.woff')\nfont1.saveXML('tmp.xml')\n```\n\n查看xml文件会发现一个映射关系：\n\n```xml\n<GlyphOrder>\n    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->\n    <GlyphID id=\"0\" name=\"glyph00000\"/>\n    <GlyphID id=\"1\" name=\"x\"/>\n    <GlyphID id=\"2\" name=\"uniF753\"/>\n    <GlyphID id=\"3\" name=\"uniEA72\"/>\n    <GlyphID id=\"4\" name=\"uniEE4E\"/>\n    <GlyphID id=\"5\" name=\"uniECE6\"/>\n    <GlyphID id=\"6\" name=\"uniE140\"/>\n    <GlyphID id=\"7\" name=\"uniF4B0\"/>\n    <GlyphID id=\"8\" name=\"uniE1B7\"/>\n    <GlyphID id=\"9\" name=\"uniF245\"/>\n    <GlyphID id=\"10\" name=\"uniE488\"/>\n    <GlyphID id=\"11\" name=\"uniE6DA\"/>\n</GlyphOrder>\n```\n\n但是使用这个映射关系解码发现解密出来的数字不对，因此GlyphOrder并不是我们需要的映射关系。\n\nxml文件往下翻，发现了字体数据：\n\n```xml\n<TTGlyph name=\"uniF245\" xMin=\"0\" yMin=\"0\" xMax=\"508\" yMax=\"716\">\n  <contour>\n    <pt x=\"323\" y=\"0\" on=\"1\"/>\n    <pt x=\"323\" y=\"171\" on=\"1\"/>\n    <pt x=\"13\" y=\"171\" on=\"1\"/>\n    <pt x=\"13\" y=\"252\" on=\"1\"/>\n    <pt x=\"339\" y=\"716\" on=\"1\"/>\n    <pt x=\"411\" y=\"716\" on=\"1\"/>\n    <pt x=\"411\" y=\"252\" on=\"1\"/>\n    <pt x=\"508\" y=\"252\" on=\"1\"/>\n    <pt x=\"508\" y=\"171\" on=\"1\"/>\n    <pt x=\"411\" y=\"171\" on=\"1\"/>\n    <pt x=\"411\" y=\"0\" on=\"1\"/>\n  </contour>\n  <contour>\n    <pt x=\"323\" y=\"252\" on=\"1\"/>\n    <pt x=\"323\" y=\"575\" on=\"1\"/>\n    <pt x=\"99\" y=\"252\" on=\"1\"/>\n  </contour>\n  <instructions/>\n</TTGlyph>\n```\n\n看到这里突然想到，无论unicode码怎么变，数字渲染出来的样子是不会变的，因此可以从字体数据入手：\n\n**0-9每一个数字都有对应的一个`TTGlyph`数据，首先对一个已知映射关系的字体文件进行分析，获取0-9的字体数据，然后对于每次下载的动态字体文件，将其字体信息与0-9的字体数据进行对比就可以知道其映射关系了。**\n\n首先需要一份已知映射关系的xml文件作为映射关系对比文件，将其命名为`data.xml`，然后使用[百度字体编辑器](http://fontstore.baidu.com/static/editor/index.html)分析其对应的`woff`获取其映射关系(由于我的`data.xml`对应的`woff`文件删掉了，因此这里截图的是一个随机的`woff`文件对应的映射关系，可能与后边的代码内的映射关系不同，特此说明)：\n\n![](/images/woff_decode.PNG)\n\n创建`data.xml`对应的映射关系的字典：\n\n```python\ndata_dict = {\"uniE184\":\"4\",\"uniE80B\":\"3\",\"uniF22E\":\"8\",\"uniE14C\":\"0\",\n\t\t\"uniF5FB\":\"6\",\"uniEE59\":\"5\",\"uniEBD3\":\"1\",\"uniED85\":\"7\",\"uniECB8\":\"2\",\"uniE96A\":\"9\"}\n```\n\n要对比字体数据就要对xml文件进行分析，因此创建相关xml分析函数：\n\n获取某节点指定属性的值：\n\n```python\ndef getValue(node, attribute):\n\treturn node.attributes[attribute].value\n```\n\n字体数据的标签为`TTGlyph`，创建获取一个`xml`文件中所有的文字信息节点的函数：\n\n```python\ndef getTTGlyphList(xml_path):\n\tdataXmlfilepath = os.path.abspath(xml_path)\n\tdataDomObj = xmldom.parse(dataXmlfilepath)\n\tdataElementObj = dataDomObj.documentElement\n\tdataTTGlyphList = dataElementObj.getElementsByTagName('TTGlyph')\n\treturn dataTTGlyphList\n```\n\n判断两个`TTGlyph`节点数据是否相同的函数：\n\n```python\ndef isEqual(ttglyph_a, ttglyph_b):\n\ta_pt_list = ttglyph_a.getElementsByTagName('pt')\n\tb_pt_list = ttglyph_b.getElementsByTagName('pt')\n\ta_len = len(a_pt_list)\n\tb_len = len(b_pt_list)\n\tif a_len != b_len:\n\t\treturn False\n\tfor i in range(a_len):\n\t\tif getValue(a_pt_list[i], 'x') != getValue(b_pt_list[i], 'x')  or getValue(a_pt_list[i], 'y') != getValue(b_pt_list[i], 'y') or getValue(a_pt_list[i], 'on') != getValue(b_pt_list[i], 'on'):\n\t\t\treturn False\n\treturn True\n```\n\n===============================================\n\n相关函数建好后可以继续分析：\n\n由于每次的unicode码是随机生成的，因此还需要知道新的0-9对应的unicode码是多少，为了方便直接使用函数获取了上边提到过的映射关系不对的`GlyphOrder`，是一个`key`为unicode，`value`为数字的字典：\n\n```python\ndecode_dict = dict(enumerate(font1.getGlyphOrder()[2:]))\ndecode_dict = dict(zip(decode_dict.values(),decode_dict.keys()))\t\n```\n\n获取已知映射关系的`data.xml`的字体数据节点和新的动态字体文件的数据节点：\n\n```python\ndataTTGlyphList = getTTGlyphList(\"data.xml\")\ntmpTTGlyphList = getTTGlyphList(\"tmp.xml\")\n```\n\n利用字体数据更新映射字典：\n\n```python\ndecode_dict = refresh(decode_dict,tmpTTGlyphList,dataTTGlyphList)\n```\n\n更新函数的具体实现如下：\n\n```python\ndef refresh(dict, ttGlyphList_a, ttGlyphList_data):\n\tdata_dict = {\"uniE184\":\"4\",\"uniE80B\":\"3\",\"uniF22E\":\"8\",\"uniE14C\":\"0\",\n\t\t\"uniF5FB\":\"6\",\"uniEE59\":\"5\",\"uniEBD3\":\"1\",\"uniED85\":\"7\",\"uniECB8\":\"2\",\"uniE96A\":\"9\"}\n\tdata_keys = data_dict.keys()\n\tfor ttglyph_data in ttGlyphList_data:\n\t\tif \tgetValue(ttglyph_data,'name') in data_keys:\n\t\t\tfor ttglyph_a in ttGlyphList_a:\n\t\t\t\tif isEqual(ttglyph_a, ttglyph_data):\n\t\t\t\t\tdict[getValue(ttglyph_a,'name')] = data_dict[getValue(ttglyph_data,'name')]\n\t\t\t\t\tbreak\n\treturn dict\n```\n\n考虑到小数的情况，加入小数点映射：\n\n```python\ndecode_dict['.'] = '.'\n```\n\n实现解码函数（输入映射字典和一个需要解密的数值，输出解密后的结果如15.6）：\n\n```python\ndef decode(decode_dict, code):\n\t_lst_uincode = []\n\tfor item in code.__repr__().split(\"\\\\u\"):\n\t\t_lst_uincode.append(\"uni\" + item[:4].upper())\n\t\tif item[4:]:\n\t\t\t_lst_uincode.append(item[4:])\n\t_lst_uincode = _lst_uincode[1:-1]\n\tresult = \"\".join([str(decode_dict[i]) for i in _lst_uincode])\n\treturn result\n```\n\n\n\n==================================================\n\n[具体代码链接](https://github.com/SoftwareSAD/Spider/blob/master/rowpiece/rowpiece/spiders/RowpieceSpider.py)","slug":"猫眼电影加密数字破解（爬取评分票房票价）","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1m003ccrag5p2afs4o","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在爬取猫眼电影相关数据时发现爬取下来的评分、票房、票价不是具体的数字而是一串类似于<code>\\uf5fb</code>的码，需要解密。</p>\n<p>而这些密码是每次访问时随机生成的，和0-9的映射关系也是随机的。</p>\n<h2 id=\"解密办法\"><a href=\"#解密办法\" class=\"headerlink\" title=\"解密办法\"></a>解密办法</h2><p>下载动态字体文件，解析映射关系。</p>\n<h2 id=\"解密思路\"><a href=\"#解密思路\" class=\"headerlink\" title=\"解密思路\"></a>解密思路</h2><p>首先找到动态字体文件的地址（head标签内的style标签内）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    @<span class=\"keyword\">font-face</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      font-family: stonefont;</span></span><br><span class=\"line\"><span class=\"undefined\">      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot');</span></span><br><span class=\"line\"><span class=\"undefined\">      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot?#iefix') format('embedded-opentype'),</span></span><br><span class=\"line\"><span class=\"undefined\">           url('//vfile.meituan.net/colorstone/8f497cdb4e39d1f3dcbafa28a486aea42076.woff') format('woff');</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.stonefont</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      font-family: stonefont;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中的.woff文件是我们需要的。</p>\n<p>爬取代码如下（利用<strong>scrapy</strong>）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载字体文件</span></span><br><span class=\"line\">font_url = sel.xpath(<span class=\"string\">'/html/head/style/text()'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">font_url = <span class=\"string\">'http:'</span>+font_url[font_url.rfind(<span class=\"string\">'url'</span>)+<span class=\"number\">5</span>:font_url.find(<span class=\"string\">'woff'</span>)+<span class=\"number\">4</span>]</span><br><span class=\"line\">print(font_url)</span><br><span class=\"line\">woff_path = <span class=\"string\">'tmp.woff'</span></span><br><span class=\"line\">f = urllib.request.urlopen(font_url)</span><br><span class=\"line\">data = f.read()</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(woff_path, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> code:</span><br><span class=\"line\">    code.write(data)</span><br></pre></td></tr></table></figure>\n<p>利用<code>TTFont</code>将<code>woff</code>文件转换为<code>xml</code>文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font1 = TTFont(<span class=\"string\">'tmp.woff'</span>)</span><br><span class=\"line\">font1.saveXML(<span class=\"string\">'tmp.xml'</span>)</span><br></pre></td></tr></table></figure>\n<p>查看xml文件会发现一个映射关系：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GlyphOrder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- The 'id' attribute is only for humans; it is ignored when parsed. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"glyph00000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF753\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniEA72\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"4\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniEE4E\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniECE6\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"6\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE140\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"7\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF4B0\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE1B7\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"9\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF245\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE488\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"11\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE6DA\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">GlyphOrder</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是使用这个映射关系解码发现解密出来的数字不对，因此GlyphOrder并不是我们需要的映射关系。</p>\n<p>xml文件往下翻，发现了字体数据：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TTGlyph</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF245\"</span> <span class=\"attr\">xMin</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">yMin</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">xMax</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">yMax</span>=<span class=\"string\">\"716\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"339\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"716\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"716\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"575\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"99\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">instructions</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TTGlyph</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看到这里突然想到，无论unicode码怎么变，数字渲染出来的样子是不会变的，因此可以从字体数据入手：</p>\n<p><strong>0-9每一个数字都有对应的一个<code>TTGlyph</code>数据，首先对一个已知映射关系的字体文件进行分析，获取0-9的字体数据，然后对于每次下载的动态字体文件，将其字体信息与0-9的字体数据进行对比就可以知道其映射关系了。</strong></p>\n<p>首先需要一份已知映射关系的xml文件作为映射关系对比文件，将其命名为<code>data.xml</code>，然后使用<a href=\"http://fontstore.baidu.com/static/editor/index.html\" target=\"_blank\" rel=\"noopener\">百度字体编辑器</a>分析其对应的<code>woff</code>获取其映射关系(由于我的<code>data.xml</code>对应的<code>woff</code>文件删掉了，因此这里截图的是一个随机的<code>woff</code>文件对应的映射关系，可能与后边的代码内的映射关系不同，特此说明)：</p>\n<p><img src=\"/images/woff_decode.PNG\" alt=\"\"></p>\n<p>创建<code>data.xml</code>对应的映射关系的字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_dict = &#123;<span class=\"string\">\"uniE184\"</span>:<span class=\"string\">\"4\"</span>,<span class=\"string\">\"uniE80B\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"uniF22E\"</span>:<span class=\"string\">\"8\"</span>,<span class=\"string\">\"uniE14C\"</span>:<span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"uniF5FB\"</span>:<span class=\"string\">\"6\"</span>,<span class=\"string\">\"uniEE59\"</span>:<span class=\"string\">\"5\"</span>,<span class=\"string\">\"uniEBD3\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"uniED85\"</span>:<span class=\"string\">\"7\"</span>,<span class=\"string\">\"uniECB8\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"uniE96A\"</span>:<span class=\"string\">\"9\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>要对比字体数据就要对xml文件进行分析，因此创建相关xml分析函数：</p>\n<p>获取某节点指定属性的值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getValue</span><span class=\"params\">(node, attribute)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node.attributes[attribute].value</span><br></pre></td></tr></table></figure>\n<p>字体数据的标签为<code>TTGlyph</code>，创建获取一个<code>xml</code>文件中所有的文字信息节点的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getTTGlyphList</span><span class=\"params\">(xml_path)</span>:</span></span><br><span class=\"line\">\tdataXmlfilepath = os.path.abspath(xml_path)</span><br><span class=\"line\">\tdataDomObj = xmldom.parse(dataXmlfilepath)</span><br><span class=\"line\">\tdataElementObj = dataDomObj.documentElement</span><br><span class=\"line\">\tdataTTGlyphList = dataElementObj.getElementsByTagName(<span class=\"string\">'TTGlyph'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dataTTGlyphList</span><br></pre></td></tr></table></figure>\n<p>判断两个<code>TTGlyph</code>节点数据是否相同的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEqual</span><span class=\"params\">(ttglyph_a, ttglyph_b)</span>:</span></span><br><span class=\"line\">\ta_pt_list = ttglyph_a.getElementsByTagName(<span class=\"string\">'pt'</span>)</span><br><span class=\"line\">\tb_pt_list = ttglyph_b.getElementsByTagName(<span class=\"string\">'pt'</span>)</span><br><span class=\"line\">\ta_len = len(a_pt_list)</span><br><span class=\"line\">\tb_len = len(b_pt_list)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a_len != b_len:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(a_len):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> getValue(a_pt_list[i], <span class=\"string\">'x'</span>) != getValue(b_pt_list[i], <span class=\"string\">'x'</span>)  <span class=\"keyword\">or</span> getValue(a_pt_list[i], <span class=\"string\">'y'</span>) != getValue(b_pt_list[i], <span class=\"string\">'y'</span>) <span class=\"keyword\">or</span> getValue(a_pt_list[i], <span class=\"string\">'on'</span>) != getValue(b_pt_list[i], <span class=\"string\">'on'</span>):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>===============================================</p>\n<p>相关函数建好后可以继续分析：</p>\n<p>由于每次的unicode码是随机生成的，因此还需要知道新的0-9对应的unicode码是多少，为了方便直接使用函数获取了上边提到过的映射关系不对的<code>GlyphOrder</code>，是一个<code>key</code>为unicode，<code>value</code>为数字的字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict = dict(enumerate(font1.getGlyphOrder()[<span class=\"number\">2</span>:]))</span><br><span class=\"line\">decode_dict = dict(zip(decode_dict.values(),decode_dict.keys()))</span><br></pre></td></tr></table></figure>\n<p>获取已知映射关系的<code>data.xml</code>的字体数据节点和新的动态字体文件的数据节点：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataTTGlyphList = getTTGlyphList(<span class=\"string\">\"data.xml\"</span>)</span><br><span class=\"line\">tmpTTGlyphList = getTTGlyphList(<span class=\"string\">\"tmp.xml\"</span>)</span><br></pre></td></tr></table></figure>\n<p>利用字体数据更新映射字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict = refresh(decode_dict,tmpTTGlyphList,dataTTGlyphList)</span><br></pre></td></tr></table></figure>\n<p>更新函数的具体实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">refresh</span><span class=\"params\">(dict, ttGlyphList_a, ttGlyphList_data)</span>:</span></span><br><span class=\"line\">\tdata_dict = &#123;<span class=\"string\">\"uniE184\"</span>:<span class=\"string\">\"4\"</span>,<span class=\"string\">\"uniE80B\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"uniF22E\"</span>:<span class=\"string\">\"8\"</span>,<span class=\"string\">\"uniE14C\"</span>:<span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"uniF5FB\"</span>:<span class=\"string\">\"6\"</span>,<span class=\"string\">\"uniEE59\"</span>:<span class=\"string\">\"5\"</span>,<span class=\"string\">\"uniEBD3\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"uniED85\"</span>:<span class=\"string\">\"7\"</span>,<span class=\"string\">\"uniECB8\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"uniE96A\"</span>:<span class=\"string\">\"9\"</span>&#125;</span><br><span class=\"line\">\tdata_keys = data_dict.keys()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ttglyph_data <span class=\"keyword\">in</span> ttGlyphList_data:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> \tgetValue(ttglyph_data,<span class=\"string\">'name'</span>) <span class=\"keyword\">in</span> data_keys:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ttglyph_a <span class=\"keyword\">in</span> ttGlyphList_a:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> isEqual(ttglyph_a, ttglyph_data):</span><br><span class=\"line\">\t\t\t\t\tdict[getValue(ttglyph_a,<span class=\"string\">'name'</span>)] = data_dict[getValue(ttglyph_data,<span class=\"string\">'name'</span>)]</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dict</span><br></pre></td></tr></table></figure>\n<p>考虑到小数的情况，加入小数点映射：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict[<span class=\"string\">'.'</span>] = <span class=\"string\">'.'</span></span><br></pre></td></tr></table></figure>\n<p>实现解码函数（输入映射字典和一个需要解密的数值，输出解密后的结果如15.6）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decode</span><span class=\"params\">(decode_dict, code)</span>:</span></span><br><span class=\"line\">\t_lst_uincode = []</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> code.__repr__().split(<span class=\"string\">\"\\\\u\"</span>):</span><br><span class=\"line\">\t\t_lst_uincode.append(<span class=\"string\">\"uni\"</span> + item[:<span class=\"number\">4</span>].upper())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> item[<span class=\"number\">4</span>:]:</span><br><span class=\"line\">\t\t\t_lst_uincode.append(item[<span class=\"number\">4</span>:])</span><br><span class=\"line\">\t_lst_uincode = _lst_uincode[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]</span><br><span class=\"line\">\tresult = <span class=\"string\">\"\"</span>.join([str(decode_dict[i]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> _lst_uincode])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>==================================================</p>\n<p><a href=\"https://github.com/SoftwareSAD/Spider/blob/master/rowpiece/rowpiece/spiders/RowpieceSpider.py\" target=\"_blank\" rel=\"noopener\">具体代码链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在爬取猫眼电影相关数据时发现爬取下来的评分、票房、票价不是具体的数字而是一串类似于<code>\\uf5fb</code>的码，需要解密。</p>\n<p>而这些密码是每次访问时随机生成的，和0-9的映射关系也是随机的。</p>\n<h2 id=\"解密办法\"><a href=\"#解密办法\" class=\"headerlink\" title=\"解密办法\"></a>解密办法</h2><p>下载动态字体文件，解析映射关系。</p>\n<h2 id=\"解密思路\"><a href=\"#解密思路\" class=\"headerlink\" title=\"解密思路\"></a>解密思路</h2><p>首先找到动态字体文件的地址（head标签内的style标签内）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    @<span class=\"keyword\">font-face</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      font-family: stonefont;</span></span><br><span class=\"line\"><span class=\"undefined\">      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot');</span></span><br><span class=\"line\"><span class=\"undefined\">      src: url('//vfile.meituan.net/colorstone/e954129d5204b4e8c783c95f7da4c2733168.eot?#iefix') format('embedded-opentype'),</span></span><br><span class=\"line\"><span class=\"undefined\">           url('//vfile.meituan.net/colorstone/8f497cdb4e39d1f3dcbafa28a486aea42076.woff') format('woff');</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.stonefont</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      font-family: stonefont;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中的.woff文件是我们需要的。</p>\n<p>爬取代码如下（利用<strong>scrapy</strong>）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载字体文件</span></span><br><span class=\"line\">font_url = sel.xpath(<span class=\"string\">'/html/head/style/text()'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">font_url = <span class=\"string\">'http:'</span>+font_url[font_url.rfind(<span class=\"string\">'url'</span>)+<span class=\"number\">5</span>:font_url.find(<span class=\"string\">'woff'</span>)+<span class=\"number\">4</span>]</span><br><span class=\"line\">print(font_url)</span><br><span class=\"line\">woff_path = <span class=\"string\">'tmp.woff'</span></span><br><span class=\"line\">f = urllib.request.urlopen(font_url)</span><br><span class=\"line\">data = f.read()</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(woff_path, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> code:</span><br><span class=\"line\">    code.write(data)</span><br></pre></td></tr></table></figure>\n<p>利用<code>TTFont</code>将<code>woff</code>文件转换为<code>xml</code>文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font1 = TTFont(<span class=\"string\">'tmp.woff'</span>)</span><br><span class=\"line\">font1.saveXML(<span class=\"string\">'tmp.xml'</span>)</span><br></pre></td></tr></table></figure>\n<p>查看xml文件会发现一个映射关系：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GlyphOrder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- The 'id' attribute is only for humans; it is ignored when parsed. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"glyph00000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF753\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniEA72\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"4\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniEE4E\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniECE6\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"6\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE140\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"7\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF4B0\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE1B7\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"9\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF245\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE488\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GlyphID</span> <span class=\"attr\">id</span>=<span class=\"string\">\"11\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniE6DA\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">GlyphOrder</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是使用这个映射关系解码发现解密出来的数字不对，因此GlyphOrder并不是我们需要的映射关系。</p>\n<p>xml文件往下翻，发现了字体数据：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TTGlyph</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uniF245\"</span> <span class=\"attr\">xMin</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">yMin</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">xMax</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">yMax</span>=<span class=\"string\">\"716\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"339\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"716\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"716\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"508\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"171\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"411\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"323\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"575\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pt</span> <span class=\"attr\">x</span>=<span class=\"string\">\"99\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"252\"</span> <span class=\"attr\">on</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">contour</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">instructions</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TTGlyph</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看到这里突然想到，无论unicode码怎么变，数字渲染出来的样子是不会变的，因此可以从字体数据入手：</p>\n<p><strong>0-9每一个数字都有对应的一个<code>TTGlyph</code>数据，首先对一个已知映射关系的字体文件进行分析，获取0-9的字体数据，然后对于每次下载的动态字体文件，将其字体信息与0-9的字体数据进行对比就可以知道其映射关系了。</strong></p>\n<p>首先需要一份已知映射关系的xml文件作为映射关系对比文件，将其命名为<code>data.xml</code>，然后使用<a href=\"http://fontstore.baidu.com/static/editor/index.html\" target=\"_blank\" rel=\"noopener\">百度字体编辑器</a>分析其对应的<code>woff</code>获取其映射关系(由于我的<code>data.xml</code>对应的<code>woff</code>文件删掉了，因此这里截图的是一个随机的<code>woff</code>文件对应的映射关系，可能与后边的代码内的映射关系不同，特此说明)：</p>\n<p><img src=\"/images/woff_decode.PNG\" alt=\"\"></p>\n<p>创建<code>data.xml</code>对应的映射关系的字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_dict = &#123;<span class=\"string\">\"uniE184\"</span>:<span class=\"string\">\"4\"</span>,<span class=\"string\">\"uniE80B\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"uniF22E\"</span>:<span class=\"string\">\"8\"</span>,<span class=\"string\">\"uniE14C\"</span>:<span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"uniF5FB\"</span>:<span class=\"string\">\"6\"</span>,<span class=\"string\">\"uniEE59\"</span>:<span class=\"string\">\"5\"</span>,<span class=\"string\">\"uniEBD3\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"uniED85\"</span>:<span class=\"string\">\"7\"</span>,<span class=\"string\">\"uniECB8\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"uniE96A\"</span>:<span class=\"string\">\"9\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>要对比字体数据就要对xml文件进行分析，因此创建相关xml分析函数：</p>\n<p>获取某节点指定属性的值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getValue</span><span class=\"params\">(node, attribute)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node.attributes[attribute].value</span><br></pre></td></tr></table></figure>\n<p>字体数据的标签为<code>TTGlyph</code>，创建获取一个<code>xml</code>文件中所有的文字信息节点的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getTTGlyphList</span><span class=\"params\">(xml_path)</span>:</span></span><br><span class=\"line\">\tdataXmlfilepath = os.path.abspath(xml_path)</span><br><span class=\"line\">\tdataDomObj = xmldom.parse(dataXmlfilepath)</span><br><span class=\"line\">\tdataElementObj = dataDomObj.documentElement</span><br><span class=\"line\">\tdataTTGlyphList = dataElementObj.getElementsByTagName(<span class=\"string\">'TTGlyph'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dataTTGlyphList</span><br></pre></td></tr></table></figure>\n<p>判断两个<code>TTGlyph</code>节点数据是否相同的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEqual</span><span class=\"params\">(ttglyph_a, ttglyph_b)</span>:</span></span><br><span class=\"line\">\ta_pt_list = ttglyph_a.getElementsByTagName(<span class=\"string\">'pt'</span>)</span><br><span class=\"line\">\tb_pt_list = ttglyph_b.getElementsByTagName(<span class=\"string\">'pt'</span>)</span><br><span class=\"line\">\ta_len = len(a_pt_list)</span><br><span class=\"line\">\tb_len = len(b_pt_list)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a_len != b_len:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(a_len):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> getValue(a_pt_list[i], <span class=\"string\">'x'</span>) != getValue(b_pt_list[i], <span class=\"string\">'x'</span>)  <span class=\"keyword\">or</span> getValue(a_pt_list[i], <span class=\"string\">'y'</span>) != getValue(b_pt_list[i], <span class=\"string\">'y'</span>) <span class=\"keyword\">or</span> getValue(a_pt_list[i], <span class=\"string\">'on'</span>) != getValue(b_pt_list[i], <span class=\"string\">'on'</span>):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>===============================================</p>\n<p>相关函数建好后可以继续分析：</p>\n<p>由于每次的unicode码是随机生成的，因此还需要知道新的0-9对应的unicode码是多少，为了方便直接使用函数获取了上边提到过的映射关系不对的<code>GlyphOrder</code>，是一个<code>key</code>为unicode，<code>value</code>为数字的字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict = dict(enumerate(font1.getGlyphOrder()[<span class=\"number\">2</span>:]))</span><br><span class=\"line\">decode_dict = dict(zip(decode_dict.values(),decode_dict.keys()))</span><br></pre></td></tr></table></figure>\n<p>获取已知映射关系的<code>data.xml</code>的字体数据节点和新的动态字体文件的数据节点：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataTTGlyphList = getTTGlyphList(<span class=\"string\">\"data.xml\"</span>)</span><br><span class=\"line\">tmpTTGlyphList = getTTGlyphList(<span class=\"string\">\"tmp.xml\"</span>)</span><br></pre></td></tr></table></figure>\n<p>利用字体数据更新映射字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict = refresh(decode_dict,tmpTTGlyphList,dataTTGlyphList)</span><br></pre></td></tr></table></figure>\n<p>更新函数的具体实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">refresh</span><span class=\"params\">(dict, ttGlyphList_a, ttGlyphList_data)</span>:</span></span><br><span class=\"line\">\tdata_dict = &#123;<span class=\"string\">\"uniE184\"</span>:<span class=\"string\">\"4\"</span>,<span class=\"string\">\"uniE80B\"</span>:<span class=\"string\">\"3\"</span>,<span class=\"string\">\"uniF22E\"</span>:<span class=\"string\">\"8\"</span>,<span class=\"string\">\"uniE14C\"</span>:<span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"uniF5FB\"</span>:<span class=\"string\">\"6\"</span>,<span class=\"string\">\"uniEE59\"</span>:<span class=\"string\">\"5\"</span>,<span class=\"string\">\"uniEBD3\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"uniED85\"</span>:<span class=\"string\">\"7\"</span>,<span class=\"string\">\"uniECB8\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"uniE96A\"</span>:<span class=\"string\">\"9\"</span>&#125;</span><br><span class=\"line\">\tdata_keys = data_dict.keys()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ttglyph_data <span class=\"keyword\">in</span> ttGlyphList_data:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> \tgetValue(ttglyph_data,<span class=\"string\">'name'</span>) <span class=\"keyword\">in</span> data_keys:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ttglyph_a <span class=\"keyword\">in</span> ttGlyphList_a:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> isEqual(ttglyph_a, ttglyph_data):</span><br><span class=\"line\">\t\t\t\t\tdict[getValue(ttglyph_a,<span class=\"string\">'name'</span>)] = data_dict[getValue(ttglyph_data,<span class=\"string\">'name'</span>)]</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dict</span><br></pre></td></tr></table></figure>\n<p>考虑到小数的情况，加入小数点映射：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode_dict[<span class=\"string\">'.'</span>] = <span class=\"string\">'.'</span></span><br></pre></td></tr></table></figure>\n<p>实现解码函数（输入映射字典和一个需要解密的数值，输出解密后的结果如15.6）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decode</span><span class=\"params\">(decode_dict, code)</span>:</span></span><br><span class=\"line\">\t_lst_uincode = []</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> code.__repr__().split(<span class=\"string\">\"\\\\u\"</span>):</span><br><span class=\"line\">\t\t_lst_uincode.append(<span class=\"string\">\"uni\"</span> + item[:<span class=\"number\">4</span>].upper())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> item[<span class=\"number\">4</span>:]:</span><br><span class=\"line\">\t\t\t_lst_uincode.append(item[<span class=\"number\">4</span>:])</span><br><span class=\"line\">\t_lst_uincode = _lst_uincode[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]</span><br><span class=\"line\">\tresult = <span class=\"string\">\"\"</span>.join([str(decode_dict[i]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> _lst_uincode])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>==================================================</p>\n<p><a href=\"https://github.com/SoftwareSAD/Spider/blob/master/rowpiece/rowpiece/spiders/RowpieceSpider.py\" target=\"_blank\" rel=\"noopener\">具体代码链接</a></p>\n"},{"title":"系统分析与设计作业FinalReport","toc":true,"date":"2018-06-30T11:27:39.000Z","_content":"\n## 简短的课程学习自我总结（400字以内）\n\n> 请不用讲述与分析、设计、开发、管理无关的话题\n>\n> 可以包括对同学帮助的致谢（同学姓名请用 github 昵称表示，不许出现真实姓名）\n>\n> 0 ~ 400字，即没有这段也没关系\n\n感谢所有队友（[Eileen101    ](https://github.com/orgs/SoftwareSAD/people/Eileen101)、[hanxu1997    ](https://github.com/orgs/SoftwareSAD/people/hanxu1997)、[heygrandpa    ](https://github.com/orgs/SoftwareSAD/people/heygrandpa)、[Lisa-bao    ](https://github.com/orgs/SoftwareSAD/people/Lisa-bao)、[samayuki    ](https://github.com/orgs/SoftwareSAD/people/samayuki)、[Mars_i    ](https://github.com/orgs/SoftwareSAD/people/SusieChang)）在这次作业中所做的所有贡献。\n\n跟着这次课程和队友们一起感受了开发一个项目大概的过程：需求分析、Product Backing、UI设计、迭代等等。同时参与到项目开发中更加了解了前端后端 的联系、熟悉了爬虫技术等。\n\n## PSP 2.1 统计表\n\n| PSP2.1                                | Time(%) |\n| ------------------------------------- | ------- |\n| **Planning**                          | **5**   |\n| Estimate                              | 5       |\n| **Development**                       | **85**  |\n| Analysis                              | 20      |\n| Design Spec                           | 5       |\n| Design Review                         | 5       |\n| Coding Standard                       | 3       |\n| Design                                | 8       |\n| Coding                                | 20      |\n| Code Review                           | 4       |\n| Test                                  | 20      |\n| **Reporting**                         | **10**  |\n| Test Report                           | 3       |\n| Size Measurement                      | 3       |\n| Postmortem & Process Improvement Plan | 4       |\n\n\n\n## 个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图\n\n![](/images/analysis_final_1.PNG)\n\n![](/images/analysis_final_2.PNG)\n\n![](/images/analysis_final_3.PNG)\n\n![](/images/analysis_final_4.PNG)\n\n![](/images/analysis_final_5.PNG)\n\n## 自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）\n\n解决动态字体反爬虫\n\n说明：猫眼电影网站的评分票房和票价为了反爬虫使用动态字体，利用字体形状不变进行解密。\n\n## 个人的技术类、项目管理类博客清单（只需要名称与 url ）\n\n[猫眼电影加密数字破解（爬取评分票房票价）](http://blog.zmj97.top/2018/07/01/猫眼电影加密数字破解%EF%BC%88爬取评分票房票价%EF%BC%89/)","source":"_posts/系统分析与设计作业FinalReport.md","raw":"---\ntitle: 系统分析与设计作业FinalReport\ntoc: true\ndate: 2018-06-30 19:27:39\ncategories:\n- 系统分析与设计\ntags:\n---\n\n## 简短的课程学习自我总结（400字以内）\n\n> 请不用讲述与分析、设计、开发、管理无关的话题\n>\n> 可以包括对同学帮助的致谢（同学姓名请用 github 昵称表示，不许出现真实姓名）\n>\n> 0 ~ 400字，即没有这段也没关系\n\n感谢所有队友（[Eileen101    ](https://github.com/orgs/SoftwareSAD/people/Eileen101)、[hanxu1997    ](https://github.com/orgs/SoftwareSAD/people/hanxu1997)、[heygrandpa    ](https://github.com/orgs/SoftwareSAD/people/heygrandpa)、[Lisa-bao    ](https://github.com/orgs/SoftwareSAD/people/Lisa-bao)、[samayuki    ](https://github.com/orgs/SoftwareSAD/people/samayuki)、[Mars_i    ](https://github.com/orgs/SoftwareSAD/people/SusieChang)）在这次作业中所做的所有贡献。\n\n跟着这次课程和队友们一起感受了开发一个项目大概的过程：需求分析、Product Backing、UI设计、迭代等等。同时参与到项目开发中更加了解了前端后端 的联系、熟悉了爬虫技术等。\n\n## PSP 2.1 统计表\n\n| PSP2.1                                | Time(%) |\n| ------------------------------------- | ------- |\n| **Planning**                          | **5**   |\n| Estimate                              | 5       |\n| **Development**                       | **85**  |\n| Analysis                              | 20      |\n| Design Spec                           | 5       |\n| Design Review                         | 5       |\n| Coding Standard                       | 3       |\n| Design                                | 8       |\n| Coding                                | 20      |\n| Code Review                           | 4       |\n| Test                                  | 20      |\n| **Reporting**                         | **10**  |\n| Test Report                           | 3       |\n| Size Measurement                      | 3       |\n| Postmortem & Process Improvement Plan | 4       |\n\n\n\n## 个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图\n\n![](/images/analysis_final_1.PNG)\n\n![](/images/analysis_final_2.PNG)\n\n![](/images/analysis_final_3.PNG)\n\n![](/images/analysis_final_4.PNG)\n\n![](/images/analysis_final_5.PNG)\n\n## 自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）\n\n解决动态字体反爬虫\n\n说明：猫眼电影网站的评分票房和票价为了反爬虫使用动态字体，利用字体形状不变进行解密。\n\n## 个人的技术类、项目管理类博客清单（只需要名称与 url ）\n\n[猫眼电影加密数字破解（爬取评分票房票价）](http://blog.zmj97.top/2018/07/01/猫眼电影加密数字破解%EF%BC%88爬取评分票房票价%EF%BC%89/)","slug":"系统分析与设计作业FinalReport","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1n003ecragwbq4x3ih","content":"<h2 id=\"简短的课程学习自我总结（400字以内）\"><a href=\"#简短的课程学习自我总结（400字以内）\" class=\"headerlink\" title=\"简短的课程学习自我总结（400字以内）\"></a>简短的课程学习自我总结（400字以内）</h2><blockquote>\n<p>请不用讲述与分析、设计、开发、管理无关的话题</p>\n<p>可以包括对同学帮助的致谢（同学姓名请用 github 昵称表示，不许出现真实姓名）</p>\n<p>0 ~ 400字，即没有这段也没关系</p>\n</blockquote>\n<p>感谢所有队友（<a href=\"https://github.com/orgs/SoftwareSAD/people/Eileen101\" target=\"_blank\" rel=\"noopener\">Eileen101    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/hanxu1997\" target=\"_blank\" rel=\"noopener\">hanxu1997    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/heygrandpa\" target=\"_blank\" rel=\"noopener\">heygrandpa    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/Lisa-bao\" target=\"_blank\" rel=\"noopener\">Lisa-bao    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/samayuki\" target=\"_blank\" rel=\"noopener\">samayuki    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/SusieChang\" target=\"_blank\" rel=\"noopener\">Mars_i    </a>）在这次作业中所做的所有贡献。</p>\n<p>跟着这次课程和队友们一起感受了开发一个项目大概的过程：需求分析、Product Backing、UI设计、迭代等等。同时参与到项目开发中更加了解了前端后端 的联系、熟悉了爬虫技术等。</p>\n<h2 id=\"PSP-2-1-统计表\"><a href=\"#PSP-2-1-统计表\" class=\"headerlink\" title=\"PSP 2.1 统计表\"></a>PSP 2.1 统计表</h2><table>\n<thead>\n<tr>\n<th>PSP2.1</th>\n<th>Time(%)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Planning</strong></td>\n<td><strong>5</strong></td>\n</tr>\n<tr>\n<td>Estimate</td>\n<td>5</td>\n</tr>\n<tr>\n<td><strong>Development</strong></td>\n<td><strong>85</strong></td>\n</tr>\n<tr>\n<td>Analysis</td>\n<td>20</td>\n</tr>\n<tr>\n<td>Design Spec</td>\n<td>5</td>\n</tr>\n<tr>\n<td>Design Review</td>\n<td>5</td>\n</tr>\n<tr>\n<td>Coding Standard</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Design</td>\n<td>8</td>\n</tr>\n<tr>\n<td>Coding</td>\n<td>20</td>\n</tr>\n<tr>\n<td>Code Review</td>\n<td>4</td>\n</tr>\n<tr>\n<td>Test</td>\n<td>20</td>\n</tr>\n<tr>\n<td><strong>Reporting</strong></td>\n<td><strong>10</strong></td>\n</tr>\n<tr>\n<td>Test Report</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Size Measurement</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Postmortem &amp; Process Improvement Plan</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"个人分支的-GIT-统计报告（不需要解释原因）-仅需要提交截图\"><a href=\"#个人分支的-GIT-统计报告（不需要解释原因）-仅需要提交截图\" class=\"headerlink\" title=\"个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图\"></a>个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图</h2><p><img src=\"/images/analysis_final_1.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_2.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_3.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_4.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_5.PNG\" alt=\"\"></p>\n<h2 id=\"自认为最得意-或有价值-或有苦劳的工作清单，含简短说明（一句话）\"><a href=\"#自认为最得意-或有价值-或有苦劳的工作清单，含简短说明（一句话）\" class=\"headerlink\" title=\"自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）\"></a>自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）</h2><p>解决动态字体反爬虫</p>\n<p>说明：猫眼电影网站的评分票房和票价为了反爬虫使用动态字体，利用字体形状不变进行解密。</p>\n<h2 id=\"个人的技术类、项目管理类博客清单（只需要名称与-url-）\"><a href=\"#个人的技术类、项目管理类博客清单（只需要名称与-url-）\" class=\"headerlink\" title=\"个人的技术类、项目管理类博客清单（只需要名称与 url ）\"></a>个人的技术类、项目管理类博客清单（只需要名称与 url ）</h2><p><a href=\"http://blog.zmj97.top/2018/07/01/猫眼电影加密数字破解%EF%BC%88爬取评分票房票价%EF%BC%89/\" target=\"_blank\" rel=\"noopener\">猫眼电影加密数字破解（爬取评分票房票价）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简短的课程学习自我总结（400字以内）\"><a href=\"#简短的课程学习自我总结（400字以内）\" class=\"headerlink\" title=\"简短的课程学习自我总结（400字以内）\"></a>简短的课程学习自我总结（400字以内）</h2><blockquote>\n<p>请不用讲述与分析、设计、开发、管理无关的话题</p>\n<p>可以包括对同学帮助的致谢（同学姓名请用 github 昵称表示，不许出现真实姓名）</p>\n<p>0 ~ 400字，即没有这段也没关系</p>\n</blockquote>\n<p>感谢所有队友（<a href=\"https://github.com/orgs/SoftwareSAD/people/Eileen101\" target=\"_blank\" rel=\"noopener\">Eileen101    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/hanxu1997\" target=\"_blank\" rel=\"noopener\">hanxu1997    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/heygrandpa\" target=\"_blank\" rel=\"noopener\">heygrandpa    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/Lisa-bao\" target=\"_blank\" rel=\"noopener\">Lisa-bao    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/samayuki\" target=\"_blank\" rel=\"noopener\">samayuki    </a>、<a href=\"https://github.com/orgs/SoftwareSAD/people/SusieChang\" target=\"_blank\" rel=\"noopener\">Mars_i    </a>）在这次作业中所做的所有贡献。</p>\n<p>跟着这次课程和队友们一起感受了开发一个项目大概的过程：需求分析、Product Backing、UI设计、迭代等等。同时参与到项目开发中更加了解了前端后端 的联系、熟悉了爬虫技术等。</p>\n<h2 id=\"PSP-2-1-统计表\"><a href=\"#PSP-2-1-统计表\" class=\"headerlink\" title=\"PSP 2.1 统计表\"></a>PSP 2.1 统计表</h2><table>\n<thead>\n<tr>\n<th>PSP2.1</th>\n<th>Time(%)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Planning</strong></td>\n<td><strong>5</strong></td>\n</tr>\n<tr>\n<td>Estimate</td>\n<td>5</td>\n</tr>\n<tr>\n<td><strong>Development</strong></td>\n<td><strong>85</strong></td>\n</tr>\n<tr>\n<td>Analysis</td>\n<td>20</td>\n</tr>\n<tr>\n<td>Design Spec</td>\n<td>5</td>\n</tr>\n<tr>\n<td>Design Review</td>\n<td>5</td>\n</tr>\n<tr>\n<td>Coding Standard</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Design</td>\n<td>8</td>\n</tr>\n<tr>\n<td>Coding</td>\n<td>20</td>\n</tr>\n<tr>\n<td>Code Review</td>\n<td>4</td>\n</tr>\n<tr>\n<td>Test</td>\n<td>20</td>\n</tr>\n<tr>\n<td><strong>Reporting</strong></td>\n<td><strong>10</strong></td>\n</tr>\n<tr>\n<td>Test Report</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Size Measurement</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Postmortem &amp; Process Improvement Plan</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"个人分支的-GIT-统计报告（不需要解释原因）-仅需要提交截图\"><a href=\"#个人分支的-GIT-统计报告（不需要解释原因）-仅需要提交截图\" class=\"headerlink\" title=\"个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图\"></a>个人分支的 GIT 统计报告（不需要解释原因）- 仅需要提交截图</h2><p><img src=\"/images/analysis_final_1.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_2.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_3.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_4.PNG\" alt=\"\"></p>\n<p><img src=\"/images/analysis_final_5.PNG\" alt=\"\"></p>\n<h2 id=\"自认为最得意-或有价值-或有苦劳的工作清单，含简短说明（一句话）\"><a href=\"#自认为最得意-或有价值-或有苦劳的工作清单，含简短说明（一句话）\" class=\"headerlink\" title=\"自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）\"></a>自认为最得意/或有价值/或有苦劳的工作清单，含简短说明（一句话）</h2><p>解决动态字体反爬虫</p>\n<p>说明：猫眼电影网站的评分票房和票价为了反爬虫使用动态字体，利用字体形状不变进行解密。</p>\n<h2 id=\"个人的技术类、项目管理类博客清单（只需要名称与-url-）\"><a href=\"#个人的技术类、项目管理类博客清单（只需要名称与-url-）\" class=\"headerlink\" title=\"个人的技术类、项目管理类博客清单（只需要名称与 url ）\"></a>个人的技术类、项目管理类博客清单（只需要名称与 url ）</h2><p><a href=\"http://blog.zmj97.top/2018/07/01/猫眼电影加密数字破解%EF%BC%88爬取评分票房票价%EF%BC%89/\" target=\"_blank\" rel=\"noopener\">猫眼电影加密数字破解（爬取评分票房票价）</a></p>\n"},{"title":"系统分析与设计作业七","toc":true,"date":"2018-04-29T12:14:31.000Z","_content":"\n# 领域建模\n\n## 阅读 Asg_RH 文档，按用例构建领域模型。\n\n> 按 Task2 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸。\n>\n> 说明：请不要受 PCMEF 层次结构影响。你需要识别实体（E）和 中介实体（M，也称状态实体）\n>\n> - 在单页面应用（如 vue）中，E 一般与数据库构建有关， M 一般与 [store 模式](https://cn.vuejs.org/v2/guide/state-management.html) 有关\n> - 在 java web 应用中，E 一般与数据库构建有关， M 一般与 session 有关\n\n![](/images/lesson7.png)\n\n## 数据库建模(E-R 模型)\n\n>  \\- 按 Task 3 要求，给出系统的 E-R 模型（数据逻辑模型）\n>\n> \\- 建模工具 PowerDesigner（简称PD） 或开源工具 [OpenSystemArchitect](http://www.codebydesign.com/)\n>\n> \\- 不负责的链接 <http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html>\n>\n> \\- 导出 Mysql 物理数据库的脚本\n>\n> \\- 简单叙说 数据库逻辑模型 与 领域模型 的异同\n\n![](/images/lesson7_2.png)\n\n```sql\n-- +---------------------------------------------------------\n-- | MODEL       : \n-- | AUTHOR      : \n-- | GENERATED BY: Open System Architect\n-- +---------------------------------------------------------\n-- | WARNING     : Review before execution\n-- +---------------------------------------------------------\n\n-- +---------------------------------------------------------\n-- | CREATE\n-- +---------------------------------------------------------\nCREATE TABLE `CardHolder`\n(\n  firstName LONGTEXT NOT NULL,\n  lastName LONGTEXT NOT NULL,\n  address LONGTEXT NOT NULL,\n  phoneNumber CHAR NOT NULL\n);\n\nCREATE TABLE `CreditCard`\n(\n  type LONGTEXT NOT NULL,\n  number INTEGER NOT NULL,\n  securityCode INTEGER NOT NULL,\n  expireDate DATE NOT NULL,\n  holderDetail LONGTEXT NOT NULL,\n  PRIMARY KEY (number)\n);\n\nCREATE TABLE `Payment`\n(\n  price INTEGER NOT NULL,\n  isSuccessful BIT NOT NULL\n);\n\nCREATE TABLE `Customer`\n(\n  firstName LONGTEXT NOT NULL,\n  lastName LONGTEXT NOT NULL,\n  gender BIT NOT NULL,\n  email LONGTEXT NOT NULL\n);\n\nCREATE TABLE `ShoppingBasket`\n(\n  numberOfReservation INTEGER NOT NULL,\n  totalPrice INTEGER NOT NULL\n);\n\nCREATE TABLE `Reservation`\n(\n  orderDate DATE NOT NULL,\n  checkInDate DATE NOT NULL,\n  checkOutDate DATE NOT NULL,\n  details LONGTEXT,\n  roomCount INTEGER NOT NULL,\n  smokingPermission BIT NOT NULL,\n  specialRequirement LONGTEXT\n);\n\nCREATE TABLE `Room`\n(\n  number INTEGER NOT NULL,\n  type LONGTEXT NOT NULL,\n  price INTEGER NOT NULL,\n  date DATE NOT NULL,\n  numberOfAdults INTEGER,\n  numberOfChildren INTEGER,\n  PRIMARY KEY (number)\n);\n\nCREATE TABLE `Hotel`\n(\n  name LONGTEXT NOT NULL,\n  address LONGTEXT NOT NULL,\n  star_rating SMALLINT,\n  PRIMARY KEY (address)\n);\n\nCREATE TABLE `Destination`\n(\n  city LONGTEXT NOT NULL,\n  region LONGTEXT NOT NULL\n);\n\n\n\n```\n\n异：\n\n领域模型更注重整体，数据库逻辑模型更注重开发。\n\n同：\n\n都用于业务分析，抽象提取逻辑和实体来帮助分析业务。","source":"_posts/系统分析与设计作业七.md","raw":"---\ntitle: 系统分析与设计作业七\ntoc: true\ndate: 2018-04-29 20:14:31\ncategories:\n- 系统分析与设计\ntags:\n- UMLet\n- 用例图\n- 数据库建模\n---\n\n# 领域建模\n\n## 阅读 Asg_RH 文档，按用例构建领域模型。\n\n> 按 Task2 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸。\n>\n> 说明：请不要受 PCMEF 层次结构影响。你需要识别实体（E）和 中介实体（M，也称状态实体）\n>\n> - 在单页面应用（如 vue）中，E 一般与数据库构建有关， M 一般与 [store 模式](https://cn.vuejs.org/v2/guide/state-management.html) 有关\n> - 在 java web 应用中，E 一般与数据库构建有关， M 一般与 session 有关\n\n![](/images/lesson7.png)\n\n## 数据库建模(E-R 模型)\n\n>  \\- 按 Task 3 要求，给出系统的 E-R 模型（数据逻辑模型）\n>\n> \\- 建模工具 PowerDesigner（简称PD） 或开源工具 [OpenSystemArchitect](http://www.codebydesign.com/)\n>\n> \\- 不负责的链接 <http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html>\n>\n> \\- 导出 Mysql 物理数据库的脚本\n>\n> \\- 简单叙说 数据库逻辑模型 与 领域模型 的异同\n\n![](/images/lesson7_2.png)\n\n```sql\n-- +---------------------------------------------------------\n-- | MODEL       : \n-- | AUTHOR      : \n-- | GENERATED BY: Open System Architect\n-- +---------------------------------------------------------\n-- | WARNING     : Review before execution\n-- +---------------------------------------------------------\n\n-- +---------------------------------------------------------\n-- | CREATE\n-- +---------------------------------------------------------\nCREATE TABLE `CardHolder`\n(\n  firstName LONGTEXT NOT NULL,\n  lastName LONGTEXT NOT NULL,\n  address LONGTEXT NOT NULL,\n  phoneNumber CHAR NOT NULL\n);\n\nCREATE TABLE `CreditCard`\n(\n  type LONGTEXT NOT NULL,\n  number INTEGER NOT NULL,\n  securityCode INTEGER NOT NULL,\n  expireDate DATE NOT NULL,\n  holderDetail LONGTEXT NOT NULL,\n  PRIMARY KEY (number)\n);\n\nCREATE TABLE `Payment`\n(\n  price INTEGER NOT NULL,\n  isSuccessful BIT NOT NULL\n);\n\nCREATE TABLE `Customer`\n(\n  firstName LONGTEXT NOT NULL,\n  lastName LONGTEXT NOT NULL,\n  gender BIT NOT NULL,\n  email LONGTEXT NOT NULL\n);\n\nCREATE TABLE `ShoppingBasket`\n(\n  numberOfReservation INTEGER NOT NULL,\n  totalPrice INTEGER NOT NULL\n);\n\nCREATE TABLE `Reservation`\n(\n  orderDate DATE NOT NULL,\n  checkInDate DATE NOT NULL,\n  checkOutDate DATE NOT NULL,\n  details LONGTEXT,\n  roomCount INTEGER NOT NULL,\n  smokingPermission BIT NOT NULL,\n  specialRequirement LONGTEXT\n);\n\nCREATE TABLE `Room`\n(\n  number INTEGER NOT NULL,\n  type LONGTEXT NOT NULL,\n  price INTEGER NOT NULL,\n  date DATE NOT NULL,\n  numberOfAdults INTEGER,\n  numberOfChildren INTEGER,\n  PRIMARY KEY (number)\n);\n\nCREATE TABLE `Hotel`\n(\n  name LONGTEXT NOT NULL,\n  address LONGTEXT NOT NULL,\n  star_rating SMALLINT,\n  PRIMARY KEY (address)\n);\n\nCREATE TABLE `Destination`\n(\n  city LONGTEXT NOT NULL,\n  region LONGTEXT NOT NULL\n);\n\n\n\n```\n\n异：\n\n领域模型更注重整体，数据库逻辑模型更注重开发。\n\n同：\n\n都用于业务分析，抽象提取逻辑和实体来帮助分析业务。","slug":"系统分析与设计作业七","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1p003icragkvtcane2","content":"<h1 id=\"领域建模\"><a href=\"#领域建模\" class=\"headerlink\" title=\"领域建模\"></a>领域建模</h1><h2 id=\"阅读-Asg-RH-文档，按用例构建领域模型。\"><a href=\"#阅读-Asg-RH-文档，按用例构建领域模型。\" class=\"headerlink\" title=\"阅读 Asg_RH 文档，按用例构建领域模型。\"></a>阅读 Asg_RH 文档，按用例构建领域模型。</h2><blockquote>\n<p>按 Task2 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸。</p>\n<p>说明：请不要受 PCMEF 层次结构影响。你需要识别实体（E）和 中介实体（M，也称状态实体）</p>\n<ul>\n<li>在单页面应用（如 vue）中，E 一般与数据库构建有关， M 一般与 <a href=\"https://cn.vuejs.org/v2/guide/state-management.html\" target=\"_blank\" rel=\"noopener\">store 模式</a> 有关</li>\n<li>在 java web 应用中，E 一般与数据库构建有关， M 一般与 session 有关</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson7.png\" alt=\"\"></p>\n<h2 id=\"数据库建模-E-R-模型\"><a href=\"#数据库建模-E-R-模型\" class=\"headerlink\" title=\"数据库建模(E-R 模型)\"></a>数据库建模(E-R 模型)</h2><blockquote>\n<p> - 按 Task 3 要求，给出系统的 E-R 模型（数据逻辑模型）</p>\n<p>- 建模工具 PowerDesigner（简称PD） 或开源工具 <a href=\"http://www.codebydesign.com/\" target=\"_blank\" rel=\"noopener\">OpenSystemArchitect</a></p>\n<p>- 不负责的链接 <a href=\"http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html</a></p>\n<p>- 导出 Mysql 物理数据库的脚本</p>\n<p>- 简单叙说 数据库逻辑模型 与 领域模型 的异同</p>\n</blockquote>\n<p><img src=\"/images/lesson7_2.png\" alt=\"\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | MODEL       : </span></span><br><span class=\"line\"><span class=\"comment\">-- | AUTHOR      : </span></span><br><span class=\"line\"><span class=\"comment\">-- | GENERATED BY: Open System Architect</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | WARNING     : Review before execution</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | CREATE</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`CardHolder`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  firstName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  lastName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  address LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  phoneNumber <span class=\"built_in\">CHAR</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`CreditCard`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"keyword\">type</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"built_in\">number</span> <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  securityCode <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  expireDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  holderDetail LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"built_in\">number</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Payment`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  price <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  isSuccessful <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Customer`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  firstName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  lastName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  gender <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  email LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`ShoppingBasket`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  numberOfReservation <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  totalPrice <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Reservation`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  orderDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  checkInDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  checkOutDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  details LONGTEXT,</span><br><span class=\"line\">  roomCount <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  smokingPermission <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  specialRequirement LONGTEXT</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Room`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"built_in\">number</span> <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">type</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  price <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"built_in\">date</span> <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  numberOfAdults <span class=\"built_in\">INTEGER</span>,</span><br><span class=\"line\">  numberOfChildren <span class=\"built_in\">INTEGER</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"built_in\">number</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Hotel`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"keyword\">name</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  address LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  star_rating <span class=\"built_in\">SMALLINT</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (address)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Destination`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  city LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  region LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>异：</p>\n<p>领域模型更注重整体，数据库逻辑模型更注重开发。</p>\n<p>同：</p>\n<p>都用于业务分析，抽象提取逻辑和实体来帮助分析业务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"领域建模\"><a href=\"#领域建模\" class=\"headerlink\" title=\"领域建模\"></a>领域建模</h1><h2 id=\"阅读-Asg-RH-文档，按用例构建领域模型。\"><a href=\"#阅读-Asg-RH-文档，按用例构建领域模型。\" class=\"headerlink\" title=\"阅读 Asg_RH 文档，按用例构建领域模型。\"></a>阅读 Asg_RH 文档，按用例构建领域模型。</h2><blockquote>\n<p>按 Task2 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸。</p>\n<p>说明：请不要受 PCMEF 层次结构影响。你需要识别实体（E）和 中介实体（M，也称状态实体）</p>\n<ul>\n<li>在单页面应用（如 vue）中，E 一般与数据库构建有关， M 一般与 <a href=\"https://cn.vuejs.org/v2/guide/state-management.html\" target=\"_blank\" rel=\"noopener\">store 模式</a> 有关</li>\n<li>在 java web 应用中，E 一般与数据库构建有关， M 一般与 session 有关</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson7.png\" alt=\"\"></p>\n<h2 id=\"数据库建模-E-R-模型\"><a href=\"#数据库建模-E-R-模型\" class=\"headerlink\" title=\"数据库建模(E-R 模型)\"></a>数据库建模(E-R 模型)</h2><blockquote>\n<p> - 按 Task 3 要求，给出系统的 E-R 模型（数据逻辑模型）</p>\n<p>- 建模工具 PowerDesigner（简称PD） 或开源工具 <a href=\"http://www.codebydesign.com/\" target=\"_blank\" rel=\"noopener\">OpenSystemArchitect</a></p>\n<p>- 不负责的链接 <a href=\"http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mcgrady/archive/2013/05/25/3098588.html</a></p>\n<p>- 导出 Mysql 物理数据库的脚本</p>\n<p>- 简单叙说 数据库逻辑模型 与 领域模型 的异同</p>\n</blockquote>\n<p><img src=\"/images/lesson7_2.png\" alt=\"\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | MODEL       : </span></span><br><span class=\"line\"><span class=\"comment\">-- | AUTHOR      : </span></span><br><span class=\"line\"><span class=\"comment\">-- | GENERATED BY: Open System Architect</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | WARNING     : Review before execution</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- | CREATE</span></span><br><span class=\"line\"><span class=\"comment\">-- +---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`CardHolder`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  firstName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  lastName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  address LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  phoneNumber <span class=\"built_in\">CHAR</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`CreditCard`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"keyword\">type</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"built_in\">number</span> <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  securityCode <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  expireDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  holderDetail LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"built_in\">number</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Payment`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  price <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  isSuccessful <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Customer`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  firstName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  lastName LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  gender <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  email LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`ShoppingBasket`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  numberOfReservation <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  totalPrice <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Reservation`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  orderDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  checkInDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  checkOutDate <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  details LONGTEXT,</span><br><span class=\"line\">  roomCount <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  smokingPermission <span class=\"built_in\">BIT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  specialRequirement LONGTEXT</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Room`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"built_in\">number</span> <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">type</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  price <span class=\"built_in\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"built_in\">date</span> <span class=\"built_in\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  numberOfAdults <span class=\"built_in\">INTEGER</span>,</span><br><span class=\"line\">  numberOfChildren <span class=\"built_in\">INTEGER</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"built_in\">number</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Hotel`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  <span class=\"keyword\">name</span> LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  address LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  star_rating <span class=\"built_in\">SMALLINT</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (address)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`Destination`</span></span><br><span class=\"line\">(</span><br><span class=\"line\">  city LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  region LONGTEXT <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>异：</p>\n<p>领域模型更注重整体，数据库逻辑模型更注重开发。</p>\n<p>同：</p>\n<p>都用于业务分析，抽象提取逻辑和实体来帮助分析业务。</p>\n"},{"title":"系统分析与设计作业九","toc":true,"date":"2018-05-13T11:12:54.000Z","_content":"\n[业务描述链接](https://github.com/Chun-Ge/modelling-practice/blob/master/problem/ofo-app-hire-business-description.md)\n\n### 用例图\n\n![](/images/lesson9_1.png)\n\n### 活动图\n\n![](/images/lesson9_2.png)\n\n### 领域模型\n\n![](/images/lesson9_3.png)\n\n### 状态图\n\n![](/images/lesson9_4.png)\n\n### 系统顺序图\n\n![](/images/lesson9_5.png)","source":"_posts/系统分析与设计作业九.md","raw":"---\ntitle: 系统分析与设计作业九\ntoc: true\ndate: 2018-05-13 19:12:54\ncategories:\n- 系统分析与设计\ntags:\n- UMLet\n- 建模\n---\n\n[业务描述链接](https://github.com/Chun-Ge/modelling-practice/blob/master/problem/ofo-app-hire-business-description.md)\n\n### 用例图\n\n![](/images/lesson9_1.png)\n\n### 活动图\n\n![](/images/lesson9_2.png)\n\n### 领域模型\n\n![](/images/lesson9_3.png)\n\n### 状态图\n\n![](/images/lesson9_4.png)\n\n### 系统顺序图\n\n![](/images/lesson9_5.png)","slug":"系统分析与设计作业九","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1r003lcrag6s2c1jf3","content":"<p><a href=\"https://github.com/Chun-Ge/modelling-practice/blob/master/problem/ofo-app-hire-business-description.md\" target=\"_blank\" rel=\"noopener\">业务描述链接</a></p>\n<h3 id=\"用例图\"><a href=\"#用例图\" class=\"headerlink\" title=\"用例图\"></a>用例图</h3><p><img src=\"/images/lesson9_1.png\" alt=\"\"></p>\n<h3 id=\"活动图\"><a href=\"#活动图\" class=\"headerlink\" title=\"活动图\"></a>活动图</h3><p><img src=\"/images/lesson9_2.png\" alt=\"\"></p>\n<h3 id=\"领域模型\"><a href=\"#领域模型\" class=\"headerlink\" title=\"领域模型\"></a>领域模型</h3><p><img src=\"/images/lesson9_3.png\" alt=\"\"></p>\n<h3 id=\"状态图\"><a href=\"#状态图\" class=\"headerlink\" title=\"状态图\"></a>状态图</h3><p><img src=\"/images/lesson9_4.png\" alt=\"\"></p>\n<h3 id=\"系统顺序图\"><a href=\"#系统顺序图\" class=\"headerlink\" title=\"系统顺序图\"></a>系统顺序图</h3><p><img src=\"/images/lesson9_5.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/Chun-Ge/modelling-practice/blob/master/problem/ofo-app-hire-business-description.md\" target=\"_blank\" rel=\"noopener\">业务描述链接</a></p>\n<h3 id=\"用例图\"><a href=\"#用例图\" class=\"headerlink\" title=\"用例图\"></a>用例图</h3><p><img src=\"/images/lesson9_1.png\" alt=\"\"></p>\n<h3 id=\"活动图\"><a href=\"#活动图\" class=\"headerlink\" title=\"活动图\"></a>活动图</h3><p><img src=\"/images/lesson9_2.png\" alt=\"\"></p>\n<h3 id=\"领域模型\"><a href=\"#领域模型\" class=\"headerlink\" title=\"领域模型\"></a>领域模型</h3><p><img src=\"/images/lesson9_3.png\" alt=\"\"></p>\n<h3 id=\"状态图\"><a href=\"#状态图\" class=\"headerlink\" title=\"状态图\"></a>状态图</h3><p><img src=\"/images/lesson9_4.png\" alt=\"\"></p>\n<h3 id=\"系统顺序图\"><a href=\"#系统顺序图\" class=\"headerlink\" title=\"系统顺序图\"></a>系统顺序图</h3><p><img src=\"/images/lesson9_5.png\" alt=\"\"></p>\n"},{"title":"系统分析与设计作业五","date":"2018-04-15T14:52:13.000Z","toc":true,"_content":"\n# 配置mongoDB\n\n参考教程：https://www.yiibai.com/mongodb/mongodb_environment.html\n\n下载需要科学上网。\n\n另外：\n\n将F:\\mongodb\\bin\\添加到环境变量中。\n\n每次开启前用这个命令修改db缓存路径：\n\n> mongod -dbpath f:\\mongodb\\data\n\n然后再打开另一个cmd窗口输入mongod即可。\n\n# 了解Python+Flask后端服务实现（win10）\n\n参考资料：http://www.jb51.net/article/60738.htm\n\n## 环境配置\n\n安装pymongo、flask、Pillow：\n\n> easy_install pymongo\n>\n> easy_install flask\n>\n> easy_install Pillow\n\n## IDE\n\n使用[PyCharm](https://www.jetbrains.com/pycharm/)\n\n打开PyCharm->新建项目->选择Flask框架->修改路径->创建\n\n得到了一个最简单的hello world的项目：\n\n![first pro](/images/Untitled.png)\n\n## Flask 快速入门\n\n[参考链接](http://www.pythondoc.com/flask/quickstart.html#debug-mode)\n\n运行刚刚创建的hello world程序：\n\n![run](/images/Capture.PNG)\n\n在浏览器输入网址http://127.0.0.1:5000/：\n\n![web](/images/Capture1.PNG)\n\n### 调试模式\n\n在代码修改的时候服务器能够自动加载，\n并且如果发生错误，它会提供一个有用的调试器。\n\n使用\n\n```python\napp.debug = True\napp.run()\n```\n\n或者\n\n```python\napp.run(debug=True)\n```\n\n开启调试模式。\n\n### 路由\n\n[`route()`](http://www.pythondoc.com/flask/api.html#flask.Flask.route) 装饰器用于把一个函数绑定到一个 URL 上。\n\n#### 静态绑定\n\n```python\n@app.route('/')\ndef index():\n    return 'Index Page'\n\n@app.route('/hello')\ndef hello():\n    return 'Hello World'\n```\n\n#### 动态绑定\n\n把一些特定的字段标记成 `<variable_name>`来进行动态绑定，还可以用 `<converter:variable_name>`限制格式：\n\n```python\n@app.route('/user/<username>')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return 'User %s' % username\n\n@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return 'Post %d' % post_id\n```\n\n有如下三种转换器：\n\n| int       | 接受整数                        |\n| --------- | ------------------------------- |\n| **float** | **同 int 一样，但是接受浮点数** |\n| **path**  | **和默认的相似，但也接受斜线**  |\n\n### HTTP方法\n\n默认情况下，路由只会响应 GET 请求，但是能够通过给 [`route()`](http://www.pythondoc.com/flask/api.html#flask.Flask.route) 装饰器提供 methods 参数来改变：\n\n```python\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        do_the_login()\n    else:\n        show_the_login_form()\n```\n\n#### 常见HTTP方法\n\n- GET\n\n  浏览器通知服务器只 *获取* 页面上的信息并且发送回来。这可能是最常用的方法。\n\n- HEAD\n\n  浏览器告诉服务器获取信息，但是只对 *头信息* 感兴趣，不需要整个页面的内容。应用应该处理起来像接收到一个 GET 请求但是不传递实际内容。在 Flask 中你完全不需要处理它，底层的 Werkzeug 库会为你处理的。\n\n- POST\n\n  浏览器通知服务器它要在 URL 上 *提交* 一些信息，服务器必须保证数据被存储且只存储一次。这是 HTML 表单通常发送数据到服务器的方法。\n\n- PUT\n\n  同 POST 类似，但是服务器可能触发了多次存储过程，多次覆盖掉旧值。现在你就会问这有什么用，有许多理由需要如此去做。考虑下在传输过程中连接丢失：在这种情况下浏览器 和服务器之间的系统可能安全地第二次接收请求，而不破坏其它东西。对于 POST 是不可能实现的，因为它只会被触发一次。\n\n- DELETE\n\n  移除给定位置的信息。\n\n- OPTIONS\n\n  给客户端提供一个快速的途径来指出这个 URL 支持哪些 HTTP 方法。从 Flask 0.6 开始，自动实现了它。\n\n### 构建url\n\n可以使用函数[`url_for()`](http://www.pythondoc.com/flask/api.html#flask.url_for) 来针对一个特定的函数构建一个 URL。\n\n它能够接受函数名作为第一参数，以及一些关键字参数，\n每一个关键字参数对应于 URL 规则的变量部分。未知变量部分被插入到 URL 中作为查询参数：\n\n```python\n>>> from flask import Flask, url_for\n>>> app = Flask(__name__)\n>>> @app.route('/')\n... def index(): pass\n...\n>>> @app.route('/login')\n... def login(): pass\n...\n>>> @app.route('/user/<username>')\n... def profile(username): pass\n...\n>>> with app.test_request_context():\n...  print url_for('index')\n...  print url_for('login')\n...  print url_for('login', next='/')\n...  print url_for('profile', username='John Doe')\n...\n/\n/login\n/login?next=/\n/user/John%20Doe\n```\n\n### 渲染静态文件\n\n只要在你的包中或模块旁边创建一个名为 static 的文件夹，在应用中使用 /static 即可访问。\n\n给静态文件生成 URL：\n\n```python\nurl_for('static', filename='style.css')\n```\n\n这个文件应该存储在 `static/style.css`，而使用PyCharm创建Flask项目时已经为你创建好了static目录：\n\n![目录](/images/Capture2.PNG)\n\n### 渲染模板\n\n由于必须自行做好 HTML 转义以保持应用程序的安全，Flask 自动配置好了 [Jinja2](http://jinja.pocoo.org/2/) 模版。\n\n可以使用方法 [`render_template()`](http://www.pythondoc.com/flask/api.html#flask.render_template) 来渲染模版：\n\n```python\nfrom flask import render_template\n\n@app.route('/hello/')\n@app.route('/hello/<name>')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n```\n\nFlask 将会在 templates 文件夹中寻找模版。\n\n# [后续链接]()\n\n","source":"_posts/系统分析与设计作业五.md","raw":"---\ntitle: 系统分析与设计作业五\ndate: 2018-04-15 22:52:13\ncategories: \n- 系统分析与设计\ntags:\n- mongoDB\n- Flask\ntoc: true\n---\n\n# 配置mongoDB\n\n参考教程：https://www.yiibai.com/mongodb/mongodb_environment.html\n\n下载需要科学上网。\n\n另外：\n\n将F:\\mongodb\\bin\\添加到环境变量中。\n\n每次开启前用这个命令修改db缓存路径：\n\n> mongod -dbpath f:\\mongodb\\data\n\n然后再打开另一个cmd窗口输入mongod即可。\n\n# 了解Python+Flask后端服务实现（win10）\n\n参考资料：http://www.jb51.net/article/60738.htm\n\n## 环境配置\n\n安装pymongo、flask、Pillow：\n\n> easy_install pymongo\n>\n> easy_install flask\n>\n> easy_install Pillow\n\n## IDE\n\n使用[PyCharm](https://www.jetbrains.com/pycharm/)\n\n打开PyCharm->新建项目->选择Flask框架->修改路径->创建\n\n得到了一个最简单的hello world的项目：\n\n![first pro](/images/Untitled.png)\n\n## Flask 快速入门\n\n[参考链接](http://www.pythondoc.com/flask/quickstart.html#debug-mode)\n\n运行刚刚创建的hello world程序：\n\n![run](/images/Capture.PNG)\n\n在浏览器输入网址http://127.0.0.1:5000/：\n\n![web](/images/Capture1.PNG)\n\n### 调试模式\n\n在代码修改的时候服务器能够自动加载，\n并且如果发生错误，它会提供一个有用的调试器。\n\n使用\n\n```python\napp.debug = True\napp.run()\n```\n\n或者\n\n```python\napp.run(debug=True)\n```\n\n开启调试模式。\n\n### 路由\n\n[`route()`](http://www.pythondoc.com/flask/api.html#flask.Flask.route) 装饰器用于把一个函数绑定到一个 URL 上。\n\n#### 静态绑定\n\n```python\n@app.route('/')\ndef index():\n    return 'Index Page'\n\n@app.route('/hello')\ndef hello():\n    return 'Hello World'\n```\n\n#### 动态绑定\n\n把一些特定的字段标记成 `<variable_name>`来进行动态绑定，还可以用 `<converter:variable_name>`限制格式：\n\n```python\n@app.route('/user/<username>')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return 'User %s' % username\n\n@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return 'Post %d' % post_id\n```\n\n有如下三种转换器：\n\n| int       | 接受整数                        |\n| --------- | ------------------------------- |\n| **float** | **同 int 一样，但是接受浮点数** |\n| **path**  | **和默认的相似，但也接受斜线**  |\n\n### HTTP方法\n\n默认情况下，路由只会响应 GET 请求，但是能够通过给 [`route()`](http://www.pythondoc.com/flask/api.html#flask.Flask.route) 装饰器提供 methods 参数来改变：\n\n```python\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        do_the_login()\n    else:\n        show_the_login_form()\n```\n\n#### 常见HTTP方法\n\n- GET\n\n  浏览器通知服务器只 *获取* 页面上的信息并且发送回来。这可能是最常用的方法。\n\n- HEAD\n\n  浏览器告诉服务器获取信息，但是只对 *头信息* 感兴趣，不需要整个页面的内容。应用应该处理起来像接收到一个 GET 请求但是不传递实际内容。在 Flask 中你完全不需要处理它，底层的 Werkzeug 库会为你处理的。\n\n- POST\n\n  浏览器通知服务器它要在 URL 上 *提交* 一些信息，服务器必须保证数据被存储且只存储一次。这是 HTML 表单通常发送数据到服务器的方法。\n\n- PUT\n\n  同 POST 类似，但是服务器可能触发了多次存储过程，多次覆盖掉旧值。现在你就会问这有什么用，有许多理由需要如此去做。考虑下在传输过程中连接丢失：在这种情况下浏览器 和服务器之间的系统可能安全地第二次接收请求，而不破坏其它东西。对于 POST 是不可能实现的，因为它只会被触发一次。\n\n- DELETE\n\n  移除给定位置的信息。\n\n- OPTIONS\n\n  给客户端提供一个快速的途径来指出这个 URL 支持哪些 HTTP 方法。从 Flask 0.6 开始，自动实现了它。\n\n### 构建url\n\n可以使用函数[`url_for()`](http://www.pythondoc.com/flask/api.html#flask.url_for) 来针对一个特定的函数构建一个 URL。\n\n它能够接受函数名作为第一参数，以及一些关键字参数，\n每一个关键字参数对应于 URL 规则的变量部分。未知变量部分被插入到 URL 中作为查询参数：\n\n```python\n>>> from flask import Flask, url_for\n>>> app = Flask(__name__)\n>>> @app.route('/')\n... def index(): pass\n...\n>>> @app.route('/login')\n... def login(): pass\n...\n>>> @app.route('/user/<username>')\n... def profile(username): pass\n...\n>>> with app.test_request_context():\n...  print url_for('index')\n...  print url_for('login')\n...  print url_for('login', next='/')\n...  print url_for('profile', username='John Doe')\n...\n/\n/login\n/login?next=/\n/user/John%20Doe\n```\n\n### 渲染静态文件\n\n只要在你的包中或模块旁边创建一个名为 static 的文件夹，在应用中使用 /static 即可访问。\n\n给静态文件生成 URL：\n\n```python\nurl_for('static', filename='style.css')\n```\n\n这个文件应该存储在 `static/style.css`，而使用PyCharm创建Flask项目时已经为你创建好了static目录：\n\n![目录](/images/Capture2.PNG)\n\n### 渲染模板\n\n由于必须自行做好 HTML 转义以保持应用程序的安全，Flask 自动配置好了 [Jinja2](http://jinja.pocoo.org/2/) 模版。\n\n可以使用方法 [`render_template()`](http://www.pythondoc.com/flask/api.html#flask.render_template) 来渲染模版：\n\n```python\nfrom flask import render_template\n\n@app.route('/hello/')\n@app.route('/hello/<name>')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n```\n\nFlask 将会在 templates 文件夹中寻找模版。\n\n# [后续链接]()\n\n","slug":"系统分析与设计作业五","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1u003ocragzhut38r9","content":"<h1 id=\"配置mongoDB\"><a href=\"#配置mongoDB\" class=\"headerlink\" title=\"配置mongoDB\"></a>配置mongoDB</h1><p>参考教程：<a href=\"https://www.yiibai.com/mongodb/mongodb_environment.html\" target=\"_blank\" rel=\"noopener\">https://www.yiibai.com/mongodb/mongodb_environment.html</a></p>\n<p>下载需要科学上网。</p>\n<p>另外：</p>\n<p>将F:\\mongodb\\bin\\添加到环境变量中。</p>\n<p>每次开启前用这个命令修改db缓存路径：</p>\n<blockquote>\n<p>mongod -dbpath f:\\mongodb\\data</p>\n</blockquote>\n<p>然后再打开另一个cmd窗口输入mongod即可。</p>\n<h1 id=\"了解Python-Flask后端服务实现（win10）\"><a href=\"#了解Python-Flask后端服务实现（win10）\" class=\"headerlink\" title=\"了解Python+Flask后端服务实现（win10）\"></a>了解Python+Flask后端服务实现（win10）</h1><p>参考资料：<a href=\"http://www.jb51.net/article/60738.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/60738.htm</a></p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>安装pymongo、flask、Pillow：</p>\n<blockquote>\n<p>easy_install pymongo</p>\n<p>easy_install flask</p>\n<p>easy_install Pillow</p>\n</blockquote>\n<h2 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h2><p>使用<a href=\"https://www.jetbrains.com/pycharm/\" target=\"_blank\" rel=\"noopener\">PyCharm</a></p>\n<p>打开PyCharm-&gt;新建项目-&gt;选择Flask框架-&gt;修改路径-&gt;创建</p>\n<p>得到了一个最简单的hello world的项目：</p>\n<p><img src=\"/images/Untitled.png\" alt=\"first pro\"></p>\n<h2 id=\"Flask-快速入门\"><a href=\"#Flask-快速入门\" class=\"headerlink\" title=\"Flask 快速入门\"></a>Flask 快速入门</h2><p><a href=\"http://www.pythondoc.com/flask/quickstart.html#debug-mode\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>运行刚刚创建的hello world程序：</p>\n<p><img src=\"/images/Capture.PNG\" alt=\"run\"></p>\n<p>在浏览器输入网址<a href=\"http://127.0.0.1:5000/：\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/：</a></p>\n<p><img src=\"/images/Capture1.PNG\" alt=\"web\"></p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><p>在代码修改的时候服务器能够自动加载，<br>并且如果发生错误，它会提供一个有用的调试器。</p>\n<p>使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.debug = <span class=\"keyword\">True</span></span><br><span class=\"line\">app.run()</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.run(debug=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>开启调试模式。</p>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p><a href=\"http://www.pythondoc.com/flask/api.html#flask.Flask.route\" target=\"_blank\" rel=\"noopener\"><code>route()</code></a> 装饰器用于把一个函数绑定到一个 URL 上。</p>\n<h4 id=\"静态绑定\"><a href=\"#静态绑定\" class=\"headerlink\" title=\"静态绑定\"></a>静态绑定</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Index Page'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"动态绑定\"><a href=\"#动态绑定\" class=\"headerlink\" title=\"动态绑定\"></a>动态绑定</h4><p>把一些特定的字段标记成 <code>&lt;variable_name&gt;</code>来进行动态绑定，还可以用 <code>&lt;converter:variable_name&gt;</code>限制格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/user/&lt;username&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_user_profile</span><span class=\"params\">(username)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># show the user profile for that user</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User %s'</span> % username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/post/&lt;int:post_id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_post</span><span class=\"params\">(post_id)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># show the post with the given id, the id is an integer</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Post %d'</span> % post_id</span><br></pre></td></tr></table></figure>\n<p>有如下三种转换器：</p>\n<table>\n<thead>\n<tr>\n<th>int</th>\n<th>接受整数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>float</strong></td>\n<td><strong>同 int 一样，但是接受浮点数</strong></td>\n</tr>\n<tr>\n<td><strong>path</strong></td>\n<td><strong>和默认的相似，但也接受斜线</strong></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><p>默认情况下，路由只会响应 GET 请求，但是能够通过给 <a href=\"http://www.pythondoc.com/flask/api.html#flask.Flask.route\" target=\"_blank\" rel=\"noopener\"><code>route()</code></a> 装饰器提供 methods 参数来改变：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        do_the_login()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        show_the_login_form()</span><br></pre></td></tr></table></figure>\n<h4 id=\"常见HTTP方法\"><a href=\"#常见HTTP方法\" class=\"headerlink\" title=\"常见HTTP方法\"></a>常见HTTP方法</h4><ul>\n<li><p>GET</p>\n<p>浏览器通知服务器只 <em>获取</em> 页面上的信息并且发送回来。这可能是最常用的方法。</p>\n</li>\n<li><p>HEAD</p>\n<p>浏览器告诉服务器获取信息，但是只对 <em>头信息</em> 感兴趣，不需要整个页面的内容。应用应该处理起来像接收到一个 GET 请求但是不传递实际内容。在 Flask 中你完全不需要处理它，底层的 Werkzeug 库会为你处理的。</p>\n</li>\n<li><p>POST</p>\n<p>浏览器通知服务器它要在 URL 上 <em>提交</em> 一些信息，服务器必须保证数据被存储且只存储一次。这是 HTML 表单通常发送数据到服务器的方法。</p>\n</li>\n<li><p>PUT</p>\n<p>同 POST 类似，但是服务器可能触发了多次存储过程，多次覆盖掉旧值。现在你就会问这有什么用，有许多理由需要如此去做。考虑下在传输过程中连接丢失：在这种情况下浏览器 和服务器之间的系统可能安全地第二次接收请求，而不破坏其它东西。对于 POST 是不可能实现的，因为它只会被触发一次。</p>\n</li>\n<li><p>DELETE</p>\n<p>移除给定位置的信息。</p>\n</li>\n<li><p>OPTIONS</p>\n<p>给客户端提供一个快速的途径来指出这个 URL 支持哪些 HTTP 方法。从 Flask 0.6 开始，自动实现了它。</p>\n</li>\n</ul>\n<h3 id=\"构建url\"><a href=\"#构建url\" class=\"headerlink\" title=\"构建url\"></a>构建url</h3><p>可以使用函数<a href=\"http://www.pythondoc.com/flask/api.html#flask.url_for\" target=\"_blank\" rel=\"noopener\"><code>url_for()</code></a> 来针对一个特定的函数构建一个 URL。</p>\n<p>它能够接受函数名作为第一参数，以及一些关键字参数，<br>每一个关键字参数对应于 URL 规则的变量部分。未知变量部分被插入到 URL 中作为查询参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, url_for</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>app = Flask(__name__)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/login'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/user/&lt;username&gt;'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">profile</span><span class=\"params\">(username)</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> app.test_request_context():</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'index'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'login'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'login'</span>, next=<span class=\"string\">'/'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'profile'</span>, username=<span class=\"string\">'John Doe'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\">/</span><br><span class=\"line\">/login</span><br><span class=\"line\">/login?next=/</span><br><span class=\"line\">/user/John%<span class=\"number\">20</span>Doe</span><br></pre></td></tr></table></figure>\n<h3 id=\"渲染静态文件\"><a href=\"#渲染静态文件\" class=\"headerlink\" title=\"渲染静态文件\"></a>渲染静态文件</h3><p>只要在你的包中或模块旁边创建一个名为 static 的文件夹，在应用中使用 /static 即可访问。</p>\n<p>给静态文件生成 URL：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_for(<span class=\"string\">'static'</span>, filename=<span class=\"string\">'style.css'</span>)</span><br></pre></td></tr></table></figure>\n<p>这个文件应该存储在 <code>static/style.css</code>，而使用PyCharm创建Flask项目时已经为你创建好了static目录：</p>\n<p><img src=\"/images/Capture2.PNG\" alt=\"目录\"></p>\n<h3 id=\"渲染模板\"><a href=\"#渲染模板\" class=\"headerlink\" title=\"渲染模板\"></a>渲染模板</h3><p>由于必须自行做好 HTML 转义以保持应用程序的安全，Flask 自动配置好了 <a href=\"http://jinja.pocoo.org/2/\" target=\"_blank\" rel=\"noopener\">Jinja2</a> 模版。</p>\n<p>可以使用方法 <a href=\"http://www.pythondoc.com/flask/api.html#flask.render_template\" target=\"_blank\" rel=\"noopener\"><code>render_template()</code></a> 来渲染模版：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello/')</span></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello/&lt;name&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=name)</span><br></pre></td></tr></table></figure>\n<p>Flask 将会在 templates 文件夹中寻找模版。</p>\n<h1 id=\"后续链接\"><a href=\"#后续链接\" class=\"headerlink\" title=\"后续链接\"></a><a href=\"\">后续链接</a></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"配置mongoDB\"><a href=\"#配置mongoDB\" class=\"headerlink\" title=\"配置mongoDB\"></a>配置mongoDB</h1><p>参考教程：<a href=\"https://www.yiibai.com/mongodb/mongodb_environment.html\" target=\"_blank\" rel=\"noopener\">https://www.yiibai.com/mongodb/mongodb_environment.html</a></p>\n<p>下载需要科学上网。</p>\n<p>另外：</p>\n<p>将F:\\mongodb\\bin\\添加到环境变量中。</p>\n<p>每次开启前用这个命令修改db缓存路径：</p>\n<blockquote>\n<p>mongod -dbpath f:\\mongodb\\data</p>\n</blockquote>\n<p>然后再打开另一个cmd窗口输入mongod即可。</p>\n<h1 id=\"了解Python-Flask后端服务实现（win10）\"><a href=\"#了解Python-Flask后端服务实现（win10）\" class=\"headerlink\" title=\"了解Python+Flask后端服务实现（win10）\"></a>了解Python+Flask后端服务实现（win10）</h1><p>参考资料：<a href=\"http://www.jb51.net/article/60738.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/60738.htm</a></p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>安装pymongo、flask、Pillow：</p>\n<blockquote>\n<p>easy_install pymongo</p>\n<p>easy_install flask</p>\n<p>easy_install Pillow</p>\n</blockquote>\n<h2 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h2><p>使用<a href=\"https://www.jetbrains.com/pycharm/\" target=\"_blank\" rel=\"noopener\">PyCharm</a></p>\n<p>打开PyCharm-&gt;新建项目-&gt;选择Flask框架-&gt;修改路径-&gt;创建</p>\n<p>得到了一个最简单的hello world的项目：</p>\n<p><img src=\"/images/Untitled.png\" alt=\"first pro\"></p>\n<h2 id=\"Flask-快速入门\"><a href=\"#Flask-快速入门\" class=\"headerlink\" title=\"Flask 快速入门\"></a>Flask 快速入门</h2><p><a href=\"http://www.pythondoc.com/flask/quickstart.html#debug-mode\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>运行刚刚创建的hello world程序：</p>\n<p><img src=\"/images/Capture.PNG\" alt=\"run\"></p>\n<p>在浏览器输入网址<a href=\"http://127.0.0.1:5000/：\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:5000/：</a></p>\n<p><img src=\"/images/Capture1.PNG\" alt=\"web\"></p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><p>在代码修改的时候服务器能够自动加载，<br>并且如果发生错误，它会提供一个有用的调试器。</p>\n<p>使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.debug = <span class=\"keyword\">True</span></span><br><span class=\"line\">app.run()</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.run(debug=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>开启调试模式。</p>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p><a href=\"http://www.pythondoc.com/flask/api.html#flask.Flask.route\" target=\"_blank\" rel=\"noopener\"><code>route()</code></a> 装饰器用于把一个函数绑定到一个 URL 上。</p>\n<h4 id=\"静态绑定\"><a href=\"#静态绑定\" class=\"headerlink\" title=\"静态绑定\"></a>静态绑定</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Index Page'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"动态绑定\"><a href=\"#动态绑定\" class=\"headerlink\" title=\"动态绑定\"></a>动态绑定</h4><p>把一些特定的字段标记成 <code>&lt;variable_name&gt;</code>来进行动态绑定，还可以用 <code>&lt;converter:variable_name&gt;</code>限制格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/user/&lt;username&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_user_profile</span><span class=\"params\">(username)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># show the user profile for that user</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'User %s'</span> % username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/post/&lt;int:post_id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_post</span><span class=\"params\">(post_id)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># show the post with the given id, the id is an integer</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Post %d'</span> % post_id</span><br></pre></td></tr></table></figure>\n<p>有如下三种转换器：</p>\n<table>\n<thead>\n<tr>\n<th>int</th>\n<th>接受整数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>float</strong></td>\n<td><strong>同 int 一样，但是接受浮点数</strong></td>\n</tr>\n<tr>\n<td><strong>path</strong></td>\n<td><strong>和默认的相似，但也接受斜线</strong></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><p>默认情况下，路由只会响应 GET 请求，但是能够通过给 <a href=\"http://www.pythondoc.com/flask/api.html#flask.Flask.route\" target=\"_blank\" rel=\"noopener\"><code>route()</code></a> 装饰器提供 methods 参数来改变：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        do_the_login()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        show_the_login_form()</span><br></pre></td></tr></table></figure>\n<h4 id=\"常见HTTP方法\"><a href=\"#常见HTTP方法\" class=\"headerlink\" title=\"常见HTTP方法\"></a>常见HTTP方法</h4><ul>\n<li><p>GET</p>\n<p>浏览器通知服务器只 <em>获取</em> 页面上的信息并且发送回来。这可能是最常用的方法。</p>\n</li>\n<li><p>HEAD</p>\n<p>浏览器告诉服务器获取信息，但是只对 <em>头信息</em> 感兴趣，不需要整个页面的内容。应用应该处理起来像接收到一个 GET 请求但是不传递实际内容。在 Flask 中你完全不需要处理它，底层的 Werkzeug 库会为你处理的。</p>\n</li>\n<li><p>POST</p>\n<p>浏览器通知服务器它要在 URL 上 <em>提交</em> 一些信息，服务器必须保证数据被存储且只存储一次。这是 HTML 表单通常发送数据到服务器的方法。</p>\n</li>\n<li><p>PUT</p>\n<p>同 POST 类似，但是服务器可能触发了多次存储过程，多次覆盖掉旧值。现在你就会问这有什么用，有许多理由需要如此去做。考虑下在传输过程中连接丢失：在这种情况下浏览器 和服务器之间的系统可能安全地第二次接收请求，而不破坏其它东西。对于 POST 是不可能实现的，因为它只会被触发一次。</p>\n</li>\n<li><p>DELETE</p>\n<p>移除给定位置的信息。</p>\n</li>\n<li><p>OPTIONS</p>\n<p>给客户端提供一个快速的途径来指出这个 URL 支持哪些 HTTP 方法。从 Flask 0.6 开始，自动实现了它。</p>\n</li>\n</ul>\n<h3 id=\"构建url\"><a href=\"#构建url\" class=\"headerlink\" title=\"构建url\"></a>构建url</h3><p>可以使用函数<a href=\"http://www.pythondoc.com/flask/api.html#flask.url_for\" target=\"_blank\" rel=\"noopener\"><code>url_for()</code></a> 来针对一个特定的函数构建一个 URL。</p>\n<p>它能够接受函数名作为第一参数，以及一些关键字参数，<br>每一个关键字参数对应于 URL 规则的变量部分。未知变量部分被插入到 URL 中作为查询参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, url_for</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>app = Flask(__name__)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/login'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@app.route(<span class=\"string\">'/user/&lt;username&gt;'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">profile</span><span class=\"params\">(username)</span>:</span> <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> app.test_request_context():</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'index'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'login'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'login'</span>, next=<span class=\"string\">'/'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">print</span> url_for(<span class=\"string\">'profile'</span>, username=<span class=\"string\">'John Doe'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\">/</span><br><span class=\"line\">/login</span><br><span class=\"line\">/login?next=/</span><br><span class=\"line\">/user/John%<span class=\"number\">20</span>Doe</span><br></pre></td></tr></table></figure>\n<h3 id=\"渲染静态文件\"><a href=\"#渲染静态文件\" class=\"headerlink\" title=\"渲染静态文件\"></a>渲染静态文件</h3><p>只要在你的包中或模块旁边创建一个名为 static 的文件夹，在应用中使用 /static 即可访问。</p>\n<p>给静态文件生成 URL：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_for(<span class=\"string\">'static'</span>, filename=<span class=\"string\">'style.css'</span>)</span><br></pre></td></tr></table></figure>\n<p>这个文件应该存储在 <code>static/style.css</code>，而使用PyCharm创建Flask项目时已经为你创建好了static目录：</p>\n<p><img src=\"/images/Capture2.PNG\" alt=\"目录\"></p>\n<h3 id=\"渲染模板\"><a href=\"#渲染模板\" class=\"headerlink\" title=\"渲染模板\"></a>渲染模板</h3><p>由于必须自行做好 HTML 转义以保持应用程序的安全，Flask 自动配置好了 <a href=\"http://jinja.pocoo.org/2/\" target=\"_blank\" rel=\"noopener\">Jinja2</a> 模版。</p>\n<p>可以使用方法 <a href=\"http://www.pythondoc.com/flask/api.html#flask.render_template\" target=\"_blank\" rel=\"noopener\"><code>render_template()</code></a> 来渲染模版：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello/')</span></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello/&lt;name&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'hello.html'</span>, name=name)</span><br></pre></td></tr></table></figure>\n<p>Flask 将会在 templates 文件夹中寻找模版。</p>\n<h1 id=\"后续链接\"><a href=\"#后续链接\" class=\"headerlink\" title=\"后续链接\"></a><a href=\"\">后续链接</a></h1>"},{"title":"系统分析与设计作业八","toc":true,"date":"2018-05-06T14:12:10.000Z","_content":"\n建模工具： UMLet 14.1.1 stand-alone\n\n# 使用 UML State Model\n\n> - 建模对象： 参考 Asg_RH 文档， 对 Reservation/Order 对象建模。\n> - 建模要求： 参考练习不能提供足够信息帮助你对订单对象建模，请参考现在 定旅馆 的旅游网站，尽可能分析围绕订单发生的各种情况，直到订单通过销售事件（柜台销售）结束订单。\n\n![](/images/lesson8.png)\n\n# 研究淘宝退货流程活动图，对退货业务对象状态建模\n\n![](/images/lesson8_2.png)","source":"_posts/系统分析与设计作业八.md","raw":"---\ntitle: 系统分析与设计作业八\ntoc: true\ndate: 2018-05-06 22:12:10\ncategories:\n- 系统分析与设计\ntags:\n- UMLet\n- 用例图\n- 建模\n---\n\n建模工具： UMLet 14.1.1 stand-alone\n\n# 使用 UML State Model\n\n> - 建模对象： 参考 Asg_RH 文档， 对 Reservation/Order 对象建模。\n> - 建模要求： 参考练习不能提供足够信息帮助你对订单对象建模，请参考现在 定旅馆 的旅游网站，尽可能分析围绕订单发生的各种情况，直到订单通过销售事件（柜台销售）结束订单。\n\n![](/images/lesson8.png)\n\n# 研究淘宝退货流程活动图，对退货业务对象状态建模\n\n![](/images/lesson8_2.png)","slug":"系统分析与设计作业八","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1v003qcragaaiolzbg","content":"<p>建模工具： UMLet 14.1.1 stand-alone</p>\n<h1 id=\"使用-UML-State-Model\"><a href=\"#使用-UML-State-Model\" class=\"headerlink\" title=\"使用 UML State Model\"></a>使用 UML State Model</h1><blockquote>\n<ul>\n<li>建模对象： 参考 Asg_RH 文档， 对 Reservation/Order 对象建模。</li>\n<li>建模要求： 参考练习不能提供足够信息帮助你对订单对象建模，请参考现在 定旅馆 的旅游网站，尽可能分析围绕订单发生的各种情况，直到订单通过销售事件（柜台销售）结束订单。</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson8.png\" alt=\"\"></p>\n<h1 id=\"研究淘宝退货流程活动图，对退货业务对象状态建模\"><a href=\"#研究淘宝退货流程活动图，对退货业务对象状态建模\" class=\"headerlink\" title=\"研究淘宝退货流程活动图，对退货业务对象状态建模\"></a>研究淘宝退货流程活动图，对退货业务对象状态建模</h1><p><img src=\"/images/lesson8_2.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>建模工具： UMLet 14.1.1 stand-alone</p>\n<h1 id=\"使用-UML-State-Model\"><a href=\"#使用-UML-State-Model\" class=\"headerlink\" title=\"使用 UML State Model\"></a>使用 UML State Model</h1><blockquote>\n<ul>\n<li>建模对象： 参考 Asg_RH 文档， 对 Reservation/Order 对象建模。</li>\n<li>建模要求： 参考练习不能提供足够信息帮助你对订单对象建模，请参考现在 定旅馆 的旅游网站，尽可能分析围绕订单发生的各种情况，直到订单通过销售事件（柜台销售）结束订单。</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson8.png\" alt=\"\"></p>\n<h1 id=\"研究淘宝退货流程活动图，对退货业务对象状态建模\"><a href=\"#研究淘宝退货流程活动图，对退货业务对象状态建模\" class=\"headerlink\" title=\"研究淘宝退货流程活动图，对退货业务对象状态建模\"></a>研究淘宝退货流程活动图，对退货业务对象状态建模</h1><p><img src=\"/images/lesson8_2.png\" alt=\"\"></p>\n"},{"title":"系统分析与设计作业六","toc":true,"date":"2018-04-22T14:18:13.000Z","_content":"\n# 用例建模\n\n## 阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸\n\n![](/images/lesson6.png)\n\n## 选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：\n\n> - 对比 Asg_RH 用例图，请用色彩标注出创新用例或子用例\n> - 尽可能识别外部系统，并用色彩标注新的外部系统和服务\n\n![](/images/lesson6b.png)\n\n## 对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\n\n- 在基础功能上进行延伸\n- 按照模块进行深入\n- 按照用户需求的变化\n- 按照技术的变化\n\n## 请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）\n\n| ID   | Name     | Imp  | Est  | How to demo                                          |\n| ---- | -------- | ---- | ---- | ---------------------------------------------------- |\n| 1    | 选择酒店 | 40   | 5    | 选择酒店所在城市、预定时间、酒店关键字               |\n| 2    | 预订酒店 | 45   | 6    | 选择酒店、选择房间类型、查看评价、选择时间、确认信息 |\n| 3    | 确认订单 | 25   | 3    | 查看信息                                             |\n| 4    | 支付订单 | 40   | 4    | 选择付款方式付款                                     |\n| 5    | 管理订单 | 30   | 5    | 查看订单信息、删除订单                               |\n\n# 业务建模\n\n## 在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\n\n![](/images/lesson6_3.png)\n\n## 选择你身边的银行 ATM，用活动图描绘取款业务流程\n\n![](/images/lesson6_3b.png)\n\n## 查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\n\n![](/images/lesson6_3c.png)\n\n# 用例文本编写\n\n> 在大作业基础上，分析三种用例文本的优点和缺点\n\n| 用例文本    | 优点               | 缺点               |\n| ----------- | ------------------ | ------------------ |\n| 详细用例    | 详细、深入         | 繁琐导致耗时长     |\n| casual 用例 | 较详细、编写较简便 | 细节不足，不够正式 |\n| brief用例   | 简介、编写简便     | 缺少细节           |","source":"_posts/系统分析与设计作业六.md","raw":"---\ntitle: 系统分析与设计作业六\ntoc: true\ndate: 2018-04-22 22:18:13\ncategories:\n- 系统分析与设计\ntags:\n- UMLet\n- 用例图\n- SCRUM\n---\n\n# 用例建模\n\n## 阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸\n\n![](/images/lesson6.png)\n\n## 选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：\n\n> - 对比 Asg_RH 用例图，请用色彩标注出创新用例或子用例\n> - 尽可能识别外部系统，并用色彩标注新的外部系统和服务\n\n![](/images/lesson6b.png)\n\n## 对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\n\n- 在基础功能上进行延伸\n- 按照模块进行深入\n- 按照用户需求的变化\n- 按照技术的变化\n\n## 请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）\n\n| ID   | Name     | Imp  | Est  | How to demo                                          |\n| ---- | -------- | ---- | ---- | ---------------------------------------------------- |\n| 1    | 选择酒店 | 40   | 5    | 选择酒店所在城市、预定时间、酒店关键字               |\n| 2    | 预订酒店 | 45   | 6    | 选择酒店、选择房间类型、查看评价、选择时间、确认信息 |\n| 3    | 确认订单 | 25   | 3    | 查看信息                                             |\n| 4    | 支付订单 | 40   | 4    | 选择付款方式付款                                     |\n| 5    | 管理订单 | 30   | 5    | 查看订单信息、删除订单                               |\n\n# 业务建模\n\n## 在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\n\n![](/images/lesson6_3.png)\n\n## 选择你身边的银行 ATM，用活动图描绘取款业务流程\n\n![](/images/lesson6_3b.png)\n\n## 查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\n\n![](/images/lesson6_3c.png)\n\n# 用例文本编写\n\n> 在大作业基础上，分析三种用例文本的优点和缺点\n\n| 用例文本    | 优点               | 缺点               |\n| ----------- | ------------------ | ------------------ |\n| 详细用例    | 详细、深入         | 繁琐导致耗时长     |\n| casual 用例 | 较详细、编写较简便 | 细节不足，不够正式 |\n| brief用例   | 简介、编写简便     | 缺少细节           |","slug":"系统分析与设计作业六","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1x003ucraglmwfgkvy","content":"<h1 id=\"用例建模\"><a href=\"#用例建模\" class=\"headerlink\" title=\"用例建模\"></a>用例建模</h1><h2 id=\"阅读-Asg-RH-文档，绘制用例图。-按-Task1-要求，请使用工具-UMLet，截图格式务必是-png-并控制尺寸\"><a href=\"#阅读-Asg-RH-文档，绘制用例图。-按-Task1-要求，请使用工具-UMLet，截图格式务必是-png-并控制尺寸\" class=\"headerlink\" title=\"阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸\"></a>阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸</h2><p><img src=\"/images/lesson6.png\" alt=\"\"></p>\n<h2 id=\"选择你熟悉的定旅馆在线服务系统（或移动-APP），如绘制用例图。并满足以下要求：\"><a href=\"#选择你熟悉的定旅馆在线服务系统（或移动-APP），如绘制用例图。并满足以下要求：\" class=\"headerlink\" title=\"选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：\"></a>选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：</h2><blockquote>\n<ul>\n<li>对比 Asg_RH 用例图，请用色彩标注出创新用例或子用例</li>\n<li>尽可能识别外部系统，并用色彩标注新的外部系统和服务</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson6b.png\" alt=\"\"></p>\n<h2 id=\"对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\"><a href=\"#对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\" class=\"headerlink\" title=\"对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\"></a>对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法</h2><ul>\n<li>在基础功能上进行延伸</li>\n<li>按照模块进行深入</li>\n<li>按照用户需求的变化</li>\n<li>按照技术的变化</li>\n</ul>\n<h2 id=\"请使用-SCRUM-方法，在（任务b）用例图基础上，编制某定旅馆开发的需求-（backlog）\"><a href=\"#请使用-SCRUM-方法，在（任务b）用例图基础上，编制某定旅馆开发的需求-（backlog）\" class=\"headerlink\" title=\"请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）\"></a>请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）</h2><table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Name</th>\n<th>Imp</th>\n<th>Est</th>\n<th>How to demo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>选择酒店</td>\n<td>40</td>\n<td>5</td>\n<td>选择酒店所在城市、预定时间、酒店关键字</td>\n</tr>\n<tr>\n<td>2</td>\n<td>预订酒店</td>\n<td>45</td>\n<td>6</td>\n<td>选择酒店、选择房间类型、查看评价、选择时间、确认信息</td>\n</tr>\n<tr>\n<td>3</td>\n<td>确认订单</td>\n<td>25</td>\n<td>3</td>\n<td>查看信息</td>\n</tr>\n<tr>\n<td>4</td>\n<td>支付订单</td>\n<td>40</td>\n<td>4</td>\n<td>选择付款方式付款</td>\n</tr>\n<tr>\n<td>5</td>\n<td>管理订单</td>\n<td>30</td>\n<td>5</td>\n<td>查看订单信息、删除订单</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"业务建模\"><a href=\"#业务建模\" class=\"headerlink\" title=\"业务建模\"></a>业务建模</h1><h2 id=\"在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\"><a href=\"#在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\" class=\"headerlink\" title=\"在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\"></a>在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。</h2><p><img src=\"/images/lesson6_3.png\" alt=\"\"></p>\n<h2 id=\"选择你身边的银行-ATM，用活动图描绘取款业务流程\"><a href=\"#选择你身边的银行-ATM，用活动图描绘取款业务流程\" class=\"headerlink\" title=\"选择你身边的银行 ATM，用活动图描绘取款业务流程\"></a>选择你身边的银行 ATM，用活动图描绘取款业务流程</h2><p><img src=\"/images/lesson6_3b.png\" alt=\"\"></p>\n<h2 id=\"查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\"><a href=\"#查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\" class=\"headerlink\" title=\"查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\"></a>查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例</h2><p><img src=\"/images/lesson6_3c.png\" alt=\"\"></p>\n<h1 id=\"用例文本编写\"><a href=\"#用例文本编写\" class=\"headerlink\" title=\"用例文本编写\"></a>用例文本编写</h1><blockquote>\n<p>在大作业基础上，分析三种用例文本的优点和缺点</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>用例文本</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>详细用例</td>\n<td>详细、深入</td>\n<td>繁琐导致耗时长</td>\n</tr>\n<tr>\n<td>casual 用例</td>\n<td>较详细、编写较简便</td>\n<td>细节不足，不够正式</td>\n</tr>\n<tr>\n<td>brief用例</td>\n<td>简介、编写简便</td>\n<td>缺少细节</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用例建模\"><a href=\"#用例建模\" class=\"headerlink\" title=\"用例建模\"></a>用例建模</h1><h2 id=\"阅读-Asg-RH-文档，绘制用例图。-按-Task1-要求，请使用工具-UMLet，截图格式务必是-png-并控制尺寸\"><a href=\"#阅读-Asg-RH-文档，绘制用例图。-按-Task1-要求，请使用工具-UMLet，截图格式务必是-png-并控制尺寸\" class=\"headerlink\" title=\"阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸\"></a>阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸</h2><p><img src=\"/images/lesson6.png\" alt=\"\"></p>\n<h2 id=\"选择你熟悉的定旅馆在线服务系统（或移动-APP），如绘制用例图。并满足以下要求：\"><a href=\"#选择你熟悉的定旅馆在线服务系统（或移动-APP），如绘制用例图。并满足以下要求：\" class=\"headerlink\" title=\"选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：\"></a>选择你熟悉的定旅馆在线服务系统（或移动 APP），如绘制用例图。并满足以下要求：</h2><blockquote>\n<ul>\n<li>对比 Asg_RH 用例图，请用色彩标注出创新用例或子用例</li>\n<li>尽可能识别外部系统，并用色彩标注新的外部系统和服务</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/lesson6b.png\" alt=\"\"></p>\n<h2 id=\"对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\"><a href=\"#对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\" class=\"headerlink\" title=\"对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法\"></a>对比两个时代、不同地区产品的用例图，总结在项目早期，发现创新的思路与方法</h2><ul>\n<li>在基础功能上进行延伸</li>\n<li>按照模块进行深入</li>\n<li>按照用户需求的变化</li>\n<li>按照技术的变化</li>\n</ul>\n<h2 id=\"请使用-SCRUM-方法，在（任务b）用例图基础上，编制某定旅馆开发的需求-（backlog）\"><a href=\"#请使用-SCRUM-方法，在（任务b）用例图基础上，编制某定旅馆开发的需求-（backlog）\" class=\"headerlink\" title=\"请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）\"></a>请使用 SCRUM 方法，在（任务b）用例图基础上，编制某定旅馆开发的需求 （backlog）</h2><table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Name</th>\n<th>Imp</th>\n<th>Est</th>\n<th>How to demo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>选择酒店</td>\n<td>40</td>\n<td>5</td>\n<td>选择酒店所在城市、预定时间、酒店关键字</td>\n</tr>\n<tr>\n<td>2</td>\n<td>预订酒店</td>\n<td>45</td>\n<td>6</td>\n<td>选择酒店、选择房间类型、查看评价、选择时间、确认信息</td>\n</tr>\n<tr>\n<td>3</td>\n<td>确认订单</td>\n<td>25</td>\n<td>3</td>\n<td>查看信息</td>\n</tr>\n<tr>\n<td>4</td>\n<td>支付订单</td>\n<td>40</td>\n<td>4</td>\n<td>选择付款方式付款</td>\n</tr>\n<tr>\n<td>5</td>\n<td>管理订单</td>\n<td>30</td>\n<td>5</td>\n<td>查看订单信息、删除订单</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"业务建模\"><a href=\"#业务建模\" class=\"headerlink\" title=\"业务建模\"></a>业务建模</h1><h2 id=\"在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\"><a href=\"#在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\" class=\"headerlink\" title=\"在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。\"></a>在（任务b）基础上，用活动图建模找酒店用例。简述利用流程图发现子用例的方法。</h2><p><img src=\"/images/lesson6_3.png\" alt=\"\"></p>\n<h2 id=\"选择你身边的银行-ATM，用活动图描绘取款业务流程\"><a href=\"#选择你身边的银行-ATM，用活动图描绘取款业务流程\" class=\"headerlink\" title=\"选择你身边的银行 ATM，用活动图描绘取款业务流程\"></a>选择你身边的银行 ATM，用活动图描绘取款业务流程</h2><p><img src=\"/images/lesson6_3b.png\" alt=\"\"></p>\n<h2 id=\"查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\"><a href=\"#查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\" class=\"headerlink\" title=\"查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例\"></a>查找淘宝退货业务官方文档，使用多泳道图，表达客户、淘宝网、淘宝商家服务系统、商家等用户和系统协同完成退货业务的过程。分析客户要完成退货业务，在淘宝网上需要实现哪些系统用例</h2><p><img src=\"/images/lesson6_3c.png\" alt=\"\"></p>\n<h1 id=\"用例文本编写\"><a href=\"#用例文本编写\" class=\"headerlink\" title=\"用例文本编写\"></a>用例文本编写</h1><blockquote>\n<p>在大作业基础上，分析三种用例文本的优点和缺点</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>用例文本</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>详细用例</td>\n<td>详细、深入</td>\n<td>繁琐导致耗时长</td>\n</tr>\n<tr>\n<td>casual 用例</td>\n<td>较详细、编写较简便</td>\n<td>细节不足，不够正式</td>\n</tr>\n<tr>\n<td>brief用例</td>\n<td>简介、编写简便</td>\n<td>缺少细节</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"系统分析与设计作业十三","toc":true,"date":"2018-06-06T09:16:25.000Z","_content":"\n## 描述软件架构与框架之间的区别与联系\n\n### 软件架构\n\n软件架构是一个系统的草图。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。\n\n### 软件框架\n\n软件框架其实就是将代码放到一个我们看不到的容器中，规定架构。当我们使用的时候直接调用。\n\n### 区别\n\n​\t框架是软件，架构不是软件。\n\n​\t框架是一种特殊的软件，它并不能提供完整无缺的解决方案，而是为构建解决方案提供良好的基础。框架是半成品。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用系统直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”\n\n​\t软件架构不是软件，而是关于软件如何设计的重要决策。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。\n\n​\t我们不能指着某些代码，说这就是软件架构，因为软件架构是比具体代码高一个抽象层次的概念。架构势必被代码所体现和遵循，但任何一段具体的代码都代表不了架构。\n\n### 联系\n\n​\t架构是框架的抽象，框架是架构的具体实现。\n\n​\t框架可能集合了一种或多种架构。\n\n## 以你的项目为案例\n\n### 绘制三层架构模型图，细致到分区\n\n![](/images/lesson13_1.png)\n\n### 结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\n\n1、开发人员可以只关注整个结构中的其中某一层；\n\n2、可以很容易的用新的实现来替换原有层次的实现；\n\n3、可以降低层与层之间的依赖；\n\n4、有利于标准化；\n\n5、利于各层逻辑的复用。\n\n6、结构更加的明确\n\n7、在后期维护的时候，极大地降低了维护成本和维护时间\n\n## 研究 VUE 与 Flux 状态管理的异同\n\n### Vuex\n\n采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n核心概念：\n\n- State：Vuex 使用**单一状态树**——用一个对象就包含了全部的应用层级状态。\n- Getter：Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。\n- Mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 **事件类型 (type)** 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。\n- Action：和Action 类似于 mutation，不同在于：\n  - Action 提交的是 mutation，而不是直接变更状态。\n  - Action 可以包含任意异步操作。\n- Module：**模块（module）**。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。\n\nVuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：\n\n1. 应用层级的状态应该集中到单个 store 对象中。\n2. 提交 **mutation** 是更改状态的唯一方法，并且这个过程是同步的。\n3. 异步逻辑都应该封装到 **action** 里面。\n\n### Flux\n\n[参考链接](https://blog.csdn.net/u010644262/article/details/79443567)\n\nFlux是Facebook用于构建客户端Web应用程序的一个**系统架构**。它通过**利用单向数据流来补充React的可组合视图组件**。它更像是一种模式，而不是一个正式的框架。\nFlux将一个应用分成**四个部分**。\n\n- View： 视图层 \n- Action（动作）：视图层发出的消息（比如mouseClick） \n- Dispatcher（派发器）：用来接收Actions、执行回调函数\n- Store（数据层）：用来存放应用的状态，一旦发生变动就提醒Views要更新页面\n\n流程：\n\n1. 用户访问 View\n2. View 发出用户的 Action\n3. Dispatcher 收到 Action，要求 Store 进行相应的更新\n4. Store 更新后，发出一个\"change\"事件\n5. View 收到\"change\"事件后，更新页面\n\n### 区别：\n\nVuex将action分为了异步和同步两种而Flux没有区分。\n\n### 联系：\n\nVuex是基于Flux进行改进的。","source":"_posts/系统分析与设计作业十三.md","raw":"---\ntitle: 系统分析与设计作业十三\ntoc: true\ndate: 2018-06-06 17:16:25\ncategories:\n- 系统分析与设计\ntags:\n- VUE\n- Flux\n- 三层架构\n---\n\n## 描述软件架构与框架之间的区别与联系\n\n### 软件架构\n\n软件架构是一个系统的草图。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。\n\n### 软件框架\n\n软件框架其实就是将代码放到一个我们看不到的容器中，规定架构。当我们使用的时候直接调用。\n\n### 区别\n\n​\t框架是软件，架构不是软件。\n\n​\t框架是一种特殊的软件，它并不能提供完整无缺的解决方案，而是为构建解决方案提供良好的基础。框架是半成品。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用系统直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”\n\n​\t软件架构不是软件，而是关于软件如何设计的重要决策。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。\n\n​\t我们不能指着某些代码，说这就是软件架构，因为软件架构是比具体代码高一个抽象层次的概念。架构势必被代码所体现和遵循，但任何一段具体的代码都代表不了架构。\n\n### 联系\n\n​\t架构是框架的抽象，框架是架构的具体实现。\n\n​\t框架可能集合了一种或多种架构。\n\n## 以你的项目为案例\n\n### 绘制三层架构模型图，细致到分区\n\n![](/images/lesson13_1.png)\n\n### 结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\n\n1、开发人员可以只关注整个结构中的其中某一层；\n\n2、可以很容易的用新的实现来替换原有层次的实现；\n\n3、可以降低层与层之间的依赖；\n\n4、有利于标准化；\n\n5、利于各层逻辑的复用。\n\n6、结构更加的明确\n\n7、在后期维护的时候，极大地降低了维护成本和维护时间\n\n## 研究 VUE 与 Flux 状态管理的异同\n\n### Vuex\n\n采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n核心概念：\n\n- State：Vuex 使用**单一状态树**——用一个对象就包含了全部的应用层级状态。\n- Getter：Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。\n- Mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 **事件类型 (type)** 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。\n- Action：和Action 类似于 mutation，不同在于：\n  - Action 提交的是 mutation，而不是直接变更状态。\n  - Action 可以包含任意异步操作。\n- Module：**模块（module）**。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。\n\nVuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：\n\n1. 应用层级的状态应该集中到单个 store 对象中。\n2. 提交 **mutation** 是更改状态的唯一方法，并且这个过程是同步的。\n3. 异步逻辑都应该封装到 **action** 里面。\n\n### Flux\n\n[参考链接](https://blog.csdn.net/u010644262/article/details/79443567)\n\nFlux是Facebook用于构建客户端Web应用程序的一个**系统架构**。它通过**利用单向数据流来补充React的可组合视图组件**。它更像是一种模式，而不是一个正式的框架。\nFlux将一个应用分成**四个部分**。\n\n- View： 视图层 \n- Action（动作）：视图层发出的消息（比如mouseClick） \n- Dispatcher（派发器）：用来接收Actions、执行回调函数\n- Store（数据层）：用来存放应用的状态，一旦发生变动就提醒Views要更新页面\n\n流程：\n\n1. 用户访问 View\n2. View 发出用户的 Action\n3. Dispatcher 收到 Action，要求 Store 进行相应的更新\n4. Store 更新后，发出一个\"change\"事件\n5. View 收到\"change\"事件后，更新页面\n\n### 区别：\n\nVuex将action分为了异步和同步两种而Flux没有区分。\n\n### 联系：\n\nVuex是基于Flux进行改进的。","slug":"系统分析与设计作业十三","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b1y003xcragfppjk4nq","content":"<h2 id=\"描述软件架构与框架之间的区别与联系\"><a href=\"#描述软件架构与框架之间的区别与联系\" class=\"headerlink\" title=\"描述软件架构与框架之间的区别与联系\"></a>描述软件架构与框架之间的区别与联系</h2><h3 id=\"软件架构\"><a href=\"#软件架构\" class=\"headerlink\" title=\"软件架构\"></a>软件架构</h3><p>软件架构是一个系统的草图。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。</p>\n<h3 id=\"软件框架\"><a href=\"#软件框架\" class=\"headerlink\" title=\"软件框架\"></a>软件框架</h3><p>软件框架其实就是将代码放到一个我们看不到的容器中，规定架构。当我们使用的时候直接调用。</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><p>​    框架是软件，架构不是软件。</p>\n<p>​    框架是一种特殊的软件，它并不能提供完整无缺的解决方案，而是为构建解决方案提供良好的基础。框架是半成品。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用系统直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”</p>\n<p>​    软件架构不是软件，而是关于软件如何设计的重要决策。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。</p>\n<p>​    我们不能指着某些代码，说这就是软件架构，因为软件架构是比具体代码高一个抽象层次的概念。架构势必被代码所体现和遵循，但任何一段具体的代码都代表不了架构。</p>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><p>​    架构是框架的抽象，框架是架构的具体实现。</p>\n<p>​    框架可能集合了一种或多种架构。</p>\n<h2 id=\"以你的项目为案例\"><a href=\"#以你的项目为案例\" class=\"headerlink\" title=\"以你的项目为案例\"></a>以你的项目为案例</h2><h3 id=\"绘制三层架构模型图，细致到分区\"><a href=\"#绘制三层架构模型图，细致到分区\" class=\"headerlink\" title=\"绘制三层架构模型图，细致到分区\"></a>绘制三层架构模型图，细致到分区</h3><p><img src=\"/images/lesson13_1.png\" alt=\"\"></p>\n<h3 id=\"结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\"><a href=\"#结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\" class=\"headerlink\" title=\"结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\"></a>结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利</h3><p>1、开发人员可以只关注整个结构中的其中某一层；</p>\n<p>2、可以很容易的用新的实现来替换原有层次的实现；</p>\n<p>3、可以降低层与层之间的依赖；</p>\n<p>4、有利于标准化；</p>\n<p>5、利于各层逻辑的复用。</p>\n<p>6、结构更加的明确</p>\n<p>7、在后期维护的时候，极大地降低了维护成本和维护时间</p>\n<h2 id=\"研究-VUE-与-Flux-状态管理的异同\"><a href=\"#研究-VUE-与-Flux-状态管理的异同\" class=\"headerlink\" title=\"研究 VUE 与 Flux 状态管理的异同\"></a>研究 VUE 与 Flux 状态管理的异同</h2><h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>核心概念：</p>\n<ul>\n<li>State：Vuex 使用<strong>单一状态树</strong>——用一个对象就包含了全部的应用层级状态。</li>\n<li>Getter：Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</li>\n<li>Mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。</li>\n<li>Action：和Action 类似于 mutation，不同在于：<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n</li>\n<li>Module：<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。</li>\n</ul>\n<p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p>\n<ol>\n<li>应用层级的状态应该集中到单个 store 对象中。</li>\n<li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li>\n<li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li>\n</ol>\n<h3 id=\"Flux\"><a href=\"#Flux\" class=\"headerlink\" title=\"Flux\"></a>Flux</h3><p><a href=\"https://blog.csdn.net/u010644262/article/details/79443567\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>Flux是Facebook用于构建客户端Web应用程序的一个<strong>系统架构</strong>。它通过<strong>利用单向数据流来补充React的可组合视图组件</strong>。它更像是一种模式，而不是一个正式的框架。<br>Flux将一个应用分成<strong>四个部分</strong>。</p>\n<ul>\n<li>View： 视图层 </li>\n<li>Action（动作）：视图层发出的消息（比如mouseClick） </li>\n<li>Dispatcher（派发器）：用来接收Actions、执行回调函数</li>\n<li>Store（数据层）：用来存放应用的状态，一旦发生变动就提醒Views要更新页面</li>\n</ul>\n<p>流程：</p>\n<ol>\n<li>用户访问 View</li>\n<li>View 发出用户的 Action</li>\n<li>Dispatcher 收到 Action，要求 Store 进行相应的更新</li>\n<li>Store 更新后，发出一个”change”事件</li>\n<li>View 收到”change”事件后，更新页面</li>\n</ol>\n<h3 id=\"区别：\"><a href=\"#区别：\" class=\"headerlink\" title=\"区别：\"></a>区别：</h3><p>Vuex将action分为了异步和同步两种而Flux没有区分。</p>\n<h3 id=\"联系：\"><a href=\"#联系：\" class=\"headerlink\" title=\"联系：\"></a>联系：</h3><p>Vuex是基于Flux进行改进的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"描述软件架构与框架之间的区别与联系\"><a href=\"#描述软件架构与框架之间的区别与联系\" class=\"headerlink\" title=\"描述软件架构与框架之间的区别与联系\"></a>描述软件架构与框架之间的区别与联系</h2><h3 id=\"软件架构\"><a href=\"#软件架构\" class=\"headerlink\" title=\"软件架构\"></a>软件架构</h3><p>软件架构是一个系统的草图。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通讯。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。</p>\n<h3 id=\"软件框架\"><a href=\"#软件框架\" class=\"headerlink\" title=\"软件框架\"></a>软件框架</h3><p>软件框架其实就是将代码放到一个我们看不到的容器中，规定架构。当我们使用的时候直接调用。</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><p>​    框架是软件，架构不是软件。</p>\n<p>​    框架是一种特殊的软件，它并不能提供完整无缺的解决方案，而是为构建解决方案提供良好的基础。框架是半成品。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用系统直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”</p>\n<p>​    软件架构不是软件，而是关于软件如何设计的重要决策。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。</p>\n<p>​    我们不能指着某些代码，说这就是软件架构，因为软件架构是比具体代码高一个抽象层次的概念。架构势必被代码所体现和遵循，但任何一段具体的代码都代表不了架构。</p>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><p>​    架构是框架的抽象，框架是架构的具体实现。</p>\n<p>​    框架可能集合了一种或多种架构。</p>\n<h2 id=\"以你的项目为案例\"><a href=\"#以你的项目为案例\" class=\"headerlink\" title=\"以你的项目为案例\"></a>以你的项目为案例</h2><h3 id=\"绘制三层架构模型图，细致到分区\"><a href=\"#绘制三层架构模型图，细致到分区\" class=\"headerlink\" title=\"绘制三层架构模型图，细致到分区\"></a>绘制三层架构模型图，细致到分区</h3><p><img src=\"/images/lesson13_1.png\" alt=\"\"></p>\n<h3 id=\"结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\"><a href=\"#结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\" class=\"headerlink\" title=\"结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\"></a>结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利</h3><p>1、开发人员可以只关注整个结构中的其中某一层；</p>\n<p>2、可以很容易的用新的实现来替换原有层次的实现；</p>\n<p>3、可以降低层与层之间的依赖；</p>\n<p>4、有利于标准化；</p>\n<p>5、利于各层逻辑的复用。</p>\n<p>6、结构更加的明确</p>\n<p>7、在后期维护的时候，极大地降低了维护成本和维护时间</p>\n<h2 id=\"研究-VUE-与-Flux-状态管理的异同\"><a href=\"#研究-VUE-与-Flux-状态管理的异同\" class=\"headerlink\" title=\"研究 VUE 与 Flux 状态管理的异同\"></a>研究 VUE 与 Flux 状态管理的异同</h2><h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>核心概念：</p>\n<ul>\n<li>State：Vuex 使用<strong>单一状态树</strong>——用一个对象就包含了全部的应用层级状态。</li>\n<li>Getter：Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</li>\n<li>Mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。</li>\n<li>Action：和Action 类似于 mutation，不同在于：<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n</li>\n<li>Module：<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。</li>\n</ul>\n<p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p>\n<ol>\n<li>应用层级的状态应该集中到单个 store 对象中。</li>\n<li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li>\n<li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li>\n</ol>\n<h3 id=\"Flux\"><a href=\"#Flux\" class=\"headerlink\" title=\"Flux\"></a>Flux</h3><p><a href=\"https://blog.csdn.net/u010644262/article/details/79443567\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>Flux是Facebook用于构建客户端Web应用程序的一个<strong>系统架构</strong>。它通过<strong>利用单向数据流来补充React的可组合视图组件</strong>。它更像是一种模式，而不是一个正式的框架。<br>Flux将一个应用分成<strong>四个部分</strong>。</p>\n<ul>\n<li>View： 视图层 </li>\n<li>Action（动作）：视图层发出的消息（比如mouseClick） </li>\n<li>Dispatcher（派发器）：用来接收Actions、执行回调函数</li>\n<li>Store（数据层）：用来存放应用的状态，一旦发生变动就提醒Views要更新页面</li>\n</ul>\n<p>流程：</p>\n<ol>\n<li>用户访问 View</li>\n<li>View 发出用户的 Action</li>\n<li>Dispatcher 收到 Action，要求 Store 进行相应的更新</li>\n<li>Store 更新后，发出一个”change”事件</li>\n<li>View 收到”change”事件后，更新页面</li>\n</ol>\n<h3 id=\"区别：\"><a href=\"#区别：\" class=\"headerlink\" title=\"区别：\"></a>区别：</h3><p>Vuex将action分为了异步和同步两种而Flux没有区分。</p>\n<h3 id=\"联系：\"><a href=\"#联系：\" class=\"headerlink\" title=\"联系：\"></a>联系：</h3><p>Vuex是基于Flux进行改进的。</p>\n"},{"title":"系统分析与设计作业十六","toc":true,"date":"2018-06-30T07:12:15.000Z","_content":"\n## 使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）\n\n### 用例简介\n\n用户提交订单后填写用户信息、确认房间和时间后完成订单。\n\n### 顺序图\n\n![](/images/lesson16_1.png)\n\n### 类图\n\n![](/images/lesson16_2.png)\n\n## 将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\n\n![](/images/lesson16_3.png)","source":"_posts/系统分析与设计作业十六.md","raw":"---\ntitle: 系统分析与设计作业十六\ntoc: true\ndate: 2018-06-30 15:12:15\ncategories:\n- 系统分析与设计\ntags:\n- UMLet\n- 用例图\n---\n\n## 使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）\n\n### 用例简介\n\n用户提交订单后填写用户信息、确认房间和时间后完成订单。\n\n### 顺序图\n\n![](/images/lesson16_1.png)\n\n### 类图\n\n![](/images/lesson16_2.png)\n\n## 将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\n\n![](/images/lesson16_3.png)","slug":"系统分析与设计作业十六","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b200042crag1babcrur","content":"<h2 id=\"使用-ECB-实现-make-reservation-用例的详细设计（包含用例简介，顺序图，类图）\"><a href=\"#使用-ECB-实现-make-reservation-用例的详细设计（包含用例简介，顺序图，类图）\" class=\"headerlink\" title=\"使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）\"></a>使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）</h2><h3 id=\"用例简介\"><a href=\"#用例简介\" class=\"headerlink\" title=\"用例简介\"></a>用例简介</h3><p>用户提交订单后填写用户信息、确认房间和时间后完成订单。</p>\n<h3 id=\"顺序图\"><a href=\"#顺序图\" class=\"headerlink\" title=\"顺序图\"></a>顺序图</h3><p><img src=\"/images/lesson16_1.png\" alt=\"\"></p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/images/lesson16_2.png\" alt=\"\"></p>\n<h2 id=\"将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\"><a href=\"#将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\" class=\"headerlink\" title=\"将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\"></a>将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类</h2><p><img src=\"/images/lesson16_3.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用-ECB-实现-make-reservation-用例的详细设计（包含用例简介，顺序图，类图）\"><a href=\"#使用-ECB-实现-make-reservation-用例的详细设计（包含用例简介，顺序图，类图）\" class=\"headerlink\" title=\"使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）\"></a>使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）</h2><h3 id=\"用例简介\"><a href=\"#用例简介\" class=\"headerlink\" title=\"用例简介\"></a>用例简介</h3><p>用户提交订单后填写用户信息、确认房间和时间后完成订单。</p>\n<h3 id=\"顺序图\"><a href=\"#顺序图\" class=\"headerlink\" title=\"顺序图\"></a>顺序图</h3><p><img src=\"/images/lesson16_1.png\" alt=\"\"></p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/images/lesson16_2.png\" alt=\"\"></p>\n<h2 id=\"将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\"><a href=\"#将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\" class=\"headerlink\" title=\"将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类\"></a>将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类</h2><p><img src=\"/images/lesson16_3.png\" alt=\"\"></p>\n"},{"title":"遇见逆水寒男号女NPC奇物好感统计","toc":false,"date":"2018-08-23T11:42:20.000Z","_content":"\n特别感谢[秦沨_JONAS](https://weibo.com/u/3744087174?source=webim)及其小伙伴们的辛苦统计！\n\n---\n\n\n\n### 首字母索引\n\n[B](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#B) [C](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#C) [D](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#D) [F](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#F) [G](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#G) [H](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#H) [J](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#J) [K](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#K) [L](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#L) [M](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#M) [N](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#N) [P](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#P) [Q](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Q) [R](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#R) [S](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#S) [T](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#T) [W](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#W) [X](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#X) [Y](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Y) [Z](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Z)\n\n### B\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 半截蜡烛 | 2      | 2      | 2    | 2      | 5      |\n| 拨浪鼓   | 10     | 15     | 20   | 15     | 10     |\n| 筚篥     | 15     | 10     | 10   | 20     | 10     |\n| 薄荷     | 10     | 15     | 10   | 15     | 15     |\n| 剥皮小刀 | 20     | 10     | 15   | 10     | 10     |\n| 冰糖糕   | 15     | 15     | 10   | 15     | 15     |\n| 布老虎   |        | 15     | 10   |        |        |\n| 碧血战铠 | 15     | 5      | 5    | 5      | 5      |\n| 碧血战籍 | 15     | 10     | 5    | 5      | 5      |\n| 碧血毒蝎 | 20     | 5      | 5    | 5      | 5      |\n\n### C\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 草帽     | 15   | 15   | 10   | 10   | 10   |\n| 彩球     | 10 | 15 | 10   | 15   | 15   |\n| 词韵曲谱 |      | 15   |      | 20   | 15   |\n| 蹴鞠     | 10   | 10   | 20   | 10   | 10   |\n\n### D\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 冬虫夏草 | 10   | 10   | 10 |      | 20   |\n\n### F\n\n[返回首字母索引](#首字母索引)\n\n| 道具   | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| ------ | ------ | ------ | ---- | ------ | ------ |\n| 风俗画 | 5      | 5      |      |        | 20     |\n\n### G\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 弓箭     | 15   | 10   | 15   | 10   | 10   |\n| 枸杞     |      | 10   |      |      | 15   |\n| 蝈蝈笼   | 10   | 15   | 15   | 10   | 15   |\n| 关外鹿肉 | 10   | 10   | 15   | 10   | 10   |\n| 高丽泡菜 | 5    | 10   | 5    | 10   | 15   |\n| 鬼谷算盘 |      | 5    | 10   | 5    | 5 |\n| 关外鹿皮 | 15   | 10   | 15   | 10   | 10   |\n| 关外人参 | 15   | 10   | 15   | 15   | 20   |\n\n### H\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 花盆土     | 2    | 5    | 2    | 2    | 2    |\n| 红泪面脂 | 15 | 15 | 15 | 20 | 20 |\n| 花瓶       | 2    | 5    | 5    | 5    | 2    |\n| 虎皮围裙   | 10   | 10   | 15   | 10   | 10   |\n| 虎骨酒     | 15   | 5    | 15   | 10   | 10   |\n| 荷包       | 10   | 10   | 10   | 15   | 15   |\n| 和田玉坠   | 10   | 15   | 15   | 15   | 20   |\n| 和田玉石   | 10   | 15   | 15   | 20   | 20   |\n| 毁诺城女装 | 5    | 15   | 20   | 15   | 15   |\n| 河豚       | 10   | 10   | 15   | 15   | 15   |\n| 化骨水     | 20   | 5    | 5    | 5    | 5    |\n| 海螺       | 15   | 15   | 10   | 15   | 15   |\n| 胡笳十八拍 | 5    | 10   | 5    | 20   | 15   |\n| 火铳       | 20   | 5    | 20   | 5    | 5    |\n| 黑白玲珑子 | 15   | 10   | 15   | 15   | 10   |\n\n### J\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 毽子       | 5    | 15   | 15   | 10   | 10   |\n| 鸡毛掸子   | 5    | 10   | 15   | 10   | 5    |\n| 金秀铁骨扇 | 15   | 10   | 15   | 10   | 10   |\n| 金丝楠木   | 15   | 10   | 15   | 15   | 10   |\n| 绢花绸伞   | 10   | 15   | 10   | 15   | 15   |\n| 嘉禾肉粽   | 10   | 15   | 5    | 15   | 15   |\n| 机械鸟     | 15   | 15   | 20   | 15   | 10   |\n| 江山笔记   | 10   | 10   | 10   | 10 | 10 |\n| 剑门豆腐   | 15   | 15   | 15   | 15   | 15   |\n| 酒葫芦     | 10   | 10   | 15   | 10   | 15   |\n| 金叶子     | 10   | 10   | 10   | 15   | 15   |\n\n### K\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 孔雀石 | 10   | 15   | 10     | 15   | 20   |\n| 孔雀翎 |      | 15 | 10（20 | 15   | 15   |\n\n### L\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 绿茶茶叶   | 5    | 2    | 2    | 5    | 5    |\n| 莲花河灯   | 10   | 20   |      |      |      |\n| 狼毫笔     | 2    | 2    | 2    | 5    | 2    |\n| 鎏金碧玉勺 | 10   | 15   | 10   | 15   | 15   |\n| 楼兰蜜酒   | 10   | 15   | 15   | 15   | 20   |\n| 灵芝       | 15   | 15   | 15   | 20   | 20   |\n| 龙井黑猪肉 | 10   | 10   | 5 |      |      |\n| 柳笛       | 10   | 15   | 10   | 15   | 15   |\n| 龙渊       | 20   | 10   | 15   | 10   | 10   |\n\n### M\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 磨刀石   | 2    | 2    | 5    | 2    | 2    |\n| 沐浴香药 | 15   | 10   | 15   | 20   | 20   |\n| 明前龙井 |      | 15 | 10   | 20   |      |\n| 美人图 | |  |  |  | 20 |\n| 棉花     | 5    | 5    | 2    | 2    | 2    |\n\n### N\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 女儿红 | 10   | 15   | 20   | 15   | 15   |\n| 泥鳅   | 5    | 5    | 15   | 5    | 15   |\n\n### P\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 判官笔     | 5    | 5    | 5    | 10   | 10   |\n| 苹果       | 5    | 20   |      |      |      |\n| 霹雳堂火器 | 20   | 5    | 20   | 5    | 5    |\n| 霹雳堂炮仗 | 15   | 5    | 20   |      |      |\n\n### Q\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 青城脸谱   | 15   | 5      | 15   | 10   | 5    |\n| 邛窑茶盏   | 15   | 15     | 10   | 20   | 15   |\n| 契丹瓜子   | 15   | 15     | 15   | 10   | 15   |\n| 契丹牛乳   | 15   | 15     | 15   | 10   | 15   |\n| 青铜锭     | 5    | 10     | 5    | 10   | 10   |\n| 庆力善治方 | 10   | 10（15 | 10   | 10   | 10   |\n\n### R\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 阮       |      |      | 5    | 20   |      |\n| 汝窑茶盏 | 10   | 15   | 10   | 20   | 10   |\n\n### S\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 神秘妆匣   | 2    | 2    | 2    | 2    | 2    |\n| 时空碎片   | 2    | 2    | 2    | 2    | 2    |\n| 锁子甲     | 15   | 5    | 15   | 5    | 5    |\n| 水域全图   | 15   | 10   | 15   | 10   | 10 |\n| 兽皮包裹   | 15   | 10   | 15   | 10   | 10   |\n| 碎月海龟   | 10   | 10   | 15   | 15   | 10   |\n| 碎月明虾   | 15   | 15   | 10   | 15   | 15   |\n| 扇子       | 10   | 15   | 10   | 15   | 15   |\n| 蒜香排骨   |      | 10   | 10   | 5    | 10   |\n| 梳妆匣     | 10   | 15   | 20   | 20   | 20   |\n| 蛇骨手串   | 20   | 5    | 15   | 10   | 10   |\n| 司南       | 15   | 15   | 15   | 10   | 10   |\n| 三合美酒   | 10   | 15   | 20   | 15   | 15   |\n| 蓑衣（农家 | 15   | 10   | 10   | 10   | 10   |\n| 蓑衣（桃溪 | 15   |      |      |      |      |\n\n### T\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 陶罐     | 5    | 2    | 5    | 2    | 2    |\n| 桃溪钓竿 | 10   | 15 | 10   | 10 | 10   |\n| 桃溪花枝 | 10   | 20   |      | 10   | 10   |\n| 糖葫芦   | 10   | 20   | 15   | 15   | 10   |\n| 团扇     |      |      | 5    | 20   | 20   |\n| 桃木剑   | 10   | 15   | 10   | 10 | 10   |\n| 桃溪河虾 |  | 20 | 10 |  | 15 |\n| 桃花雪   | 10   | 20   | 15   | 15   | 15   |\n| 桃溪泥人 | 15   | 20 |      |      | 10   |\n| 桃溪豆腐 | 15   | 20   | 10   |      | 15   |\n| 铜镜     | 10   | 15   | 10   | 15   | 15 |\n| 铜丝手套 | 20   | 10   | 15   | 10   | 10   |\n\n### W\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 武经总要 | 5 | 10   | 5    | 10   | 5    |\n| 武安蹴鞠 | 10   | 10   | 20   | 5    | 10   |\n| 武林秘籍 | 20   | 10   | 15   | 5    | 5    |\n\n### X\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 小暖       | 15   | 20   | 20   | 15   | 10   |\n| 雪梨       | 15   | 15   | 10   | 15   | 15   |\n| 雪狐皮     | 20   | 15   | 15   | 15   | 15   |\n| 雪村鸡蛋   | 15   | 15   | 10   | 10 | 15 |\n| 熙春调味料 | 10   | 10   | 15   | 15   | 15   |\n| 宣州紫毫笔 | 10   | 15   | 10   | 15   | 10   |\n| 绣花娟帕   | 10   | 15   | 10   | 15   | 20   |\n| 西湖莲花   | 10   | 15   | 10 | 15   | 15   |\n| 西湖莲蓬   | 10   | 20   | 15   | 15   | 10   |\n| 西域葡萄   | 15   | 15   | 15   | 15   | 15   |\n| 西域炼乳   | 15   | 10   | 15   | 15   | 15   |\n\n### Y\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 一颗大白菜   | 2    | 2    | 2    | 2    | 2    |\n| 一块木板     | 2    | 2    | 2    | 2    | 2    |\n| 一块帆布     | 2    | 2    | 2    | 2    | 2    |\n| 一根茄子     | 2    | 2    | 2    | 2    | 5 |\n| 一根萝卜     | 2    | 2    | 2    | 2    | 2    |\n| 一片枫叶     | 5    | 5    | 2    | 2    | 5    |\n| 一袋面粉     | 2    | 2    | 2    | 2 | 2 |\n| 一捆麻绳     | 2    | 2    | 2    | 2    | 5    |\n| 一袋大麦     | 2    | 2    | 2    | 2    | 2    |\n| 一块粗麻布   | 2    | 2    | 2    | 2    | 2    |\n| 一袋麦麸     | 2    | 2    | 2    | 2    | 2    |\n| 一束桃花     |      | 20   |      | 15   | 15   |\n| 一袋红豆     | 2    | 2    | 2    | 5    | 2    |\n| 一捆线球     | 2    | 2    | 2    | 2    | 2    |\n| 一筐蔬菜     | 2    | 2    | 2    | 2    | 2    |\n| 一屉包子     | 10   |      |      |      | 10   |\n| 一只寒梅     | 20   |      |      |      | 15   |\n| 羊毫笔       | 2    | 2    | 2    | 5    | 2    |\n| 野生牛筋     | 10   | 10 | 15   |      | 10   |\n| 萤火虫       | 15   | 20   | 10   | 15   | 15   |\n| 云西竹笋     | 15   | 20   |      |      | 15   |\n| 月影碎空残卷 | 20   | 15   | 15   | 5    | 5    |\n| 养颜阿胶     | 20   | 20   | 20   | 20   | 20   |\n| 药粥         | 15   | 15   |      | 10 | 10 |\n| 玉扳指       | 20   | 5    | 15   | 15   | 15   |\n| 玉红叶       | 15   | 15   | 10   | 20   | 20   |\n\n### Z\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 针线包 | 2 | 5 | 2 | 2 | 2 |\n| 竹哨           | 15   | 15   | 10   | 10   | 10   |\n| 竹陀螺         | 10   | 15   | 20   | 10   | 10   |\n| 醉螺           | 10   | 10   | 15   | 10   | 15   |\n| 粽子           | 5 |      | 5    | 2 | 5    |\n| 竹笋           |      |      | 10   |      |      |\n| 竹竿           | 2    | 2    | 5    | 2    | 2 |\n| 追风翼（白帝城 | 15   | 10   | 20   | 10   | 10   |\n| 追风翼         | 15   | 10   | 15   | 10   | 10   |","source":"_posts/遇见逆水寒男号女NPC奇物好感统计.md","raw":"---\ntitle: 遇见逆水寒男号女NPC奇物好感统计\ntoc: false\ndate: 2018-08-23 19:42:20\ncategories:\ntags:\n- 遇见逆水寒\n---\n\n特别感谢[秦沨_JONAS](https://weibo.com/u/3744087174?source=webim)及其小伙伴们的辛苦统计！\n\n---\n\n\n\n### 首字母索引\n\n[B](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#B) [C](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#C) [D](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#D) [F](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#F) [G](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#G) [H](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#H) [J](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#J) [K](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#K) [L](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#L) [M](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#M) [N](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#N) [P](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#P) [Q](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Q) [R](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#R) [S](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#S) [T](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#T) [W](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#W) [X](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#X) [Y](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Y) [Z](http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Z)\n\n### B\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 半截蜡烛 | 2      | 2      | 2    | 2      | 5      |\n| 拨浪鼓   | 10     | 15     | 20   | 15     | 10     |\n| 筚篥     | 15     | 10     | 10   | 20     | 10     |\n| 薄荷     | 10     | 15     | 10   | 15     | 15     |\n| 剥皮小刀 | 20     | 10     | 15   | 10     | 10     |\n| 冰糖糕   | 15     | 15     | 10   | 15     | 15     |\n| 布老虎   |        | 15     | 10   |        |        |\n| 碧血战铠 | 15     | 5      | 5    | 5      | 5      |\n| 碧血战籍 | 15     | 10     | 5    | 5      | 5      |\n| 碧血毒蝎 | 20     | 5      | 5    | 5      | 5      |\n\n### C\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 草帽     | 15   | 15   | 10   | 10   | 10   |\n| 彩球     | 10 | 15 | 10   | 15   | 15   |\n| 词韵曲谱 |      | 15   |      | 20   | 15   |\n| 蹴鞠     | 10   | 10   | 20   | 10   | 10   |\n\n### D\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 冬虫夏草 | 10   | 10   | 10 |      | 20   |\n\n### F\n\n[返回首字母索引](#首字母索引)\n\n| 道具   | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| ------ | ------ | ------ | ---- | ------ | ------ |\n| 风俗画 | 5      | 5      |      |        | 20     |\n\n### G\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 弓箭     | 15   | 10   | 15   | 10   | 10   |\n| 枸杞     |      | 10   |      |      | 15   |\n| 蝈蝈笼   | 10   | 15   | 15   | 10   | 15   |\n| 关外鹿肉 | 10   | 10   | 15   | 10   | 10   |\n| 高丽泡菜 | 5    | 10   | 5    | 10   | 15   |\n| 鬼谷算盘 |      | 5    | 10   | 5    | 5 |\n| 关外鹿皮 | 15   | 10   | 15   | 10   | 10   |\n| 关外人参 | 15   | 10   | 15   | 15   | 20   |\n\n### H\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 花盆土     | 2    | 5    | 2    | 2    | 2    |\n| 红泪面脂 | 15 | 15 | 15 | 20 | 20 |\n| 花瓶       | 2    | 5    | 5    | 5    | 2    |\n| 虎皮围裙   | 10   | 10   | 15   | 10   | 10   |\n| 虎骨酒     | 15   | 5    | 15   | 10   | 10   |\n| 荷包       | 10   | 10   | 10   | 15   | 15   |\n| 和田玉坠   | 10   | 15   | 15   | 15   | 20   |\n| 和田玉石   | 10   | 15   | 15   | 20   | 20   |\n| 毁诺城女装 | 5    | 15   | 20   | 15   | 15   |\n| 河豚       | 10   | 10   | 15   | 15   | 15   |\n| 化骨水     | 20   | 5    | 5    | 5    | 5    |\n| 海螺       | 15   | 15   | 10   | 15   | 15   |\n| 胡笳十八拍 | 5    | 10   | 5    | 20   | 15   |\n| 火铳       | 20   | 5    | 20   | 5    | 5    |\n| 黑白玲珑子 | 15   | 10   | 15   | 15   | 10   |\n\n### J\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 毽子       | 5    | 15   | 15   | 10   | 10   |\n| 鸡毛掸子   | 5    | 10   | 15   | 10   | 5    |\n| 金秀铁骨扇 | 15   | 10   | 15   | 10   | 10   |\n| 金丝楠木   | 15   | 10   | 15   | 15   | 10   |\n| 绢花绸伞   | 10   | 15   | 10   | 15   | 15   |\n| 嘉禾肉粽   | 10   | 15   | 5    | 15   | 15   |\n| 机械鸟     | 15   | 15   | 20   | 15   | 10   |\n| 江山笔记   | 10   | 10   | 10   | 10 | 10 |\n| 剑门豆腐   | 15   | 15   | 15   | 15   | 15   |\n| 酒葫芦     | 10   | 10   | 15   | 10   | 15   |\n| 金叶子     | 10   | 10   | 10   | 15   | 15   |\n\n### K\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 孔雀石 | 10   | 15   | 10     | 15   | 20   |\n| 孔雀翎 |      | 15 | 10（20 | 15   | 15   |\n\n### L\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 绿茶茶叶   | 5    | 2    | 2    | 5    | 5    |\n| 莲花河灯   | 10   | 20   |      |      |      |\n| 狼毫笔     | 2    | 2    | 2    | 5    | 2    |\n| 鎏金碧玉勺 | 10   | 15   | 10   | 15   | 15   |\n| 楼兰蜜酒   | 10   | 15   | 15   | 15   | 20   |\n| 灵芝       | 15   | 15   | 15   | 20   | 20   |\n| 龙井黑猪肉 | 10   | 10   | 5 |      |      |\n| 柳笛       | 10   | 15   | 10   | 15   | 15   |\n| 龙渊       | 20   | 10   | 15   | 10   | 10   |\n\n### M\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 磨刀石   | 2    | 2    | 5    | 2    | 2    |\n| 沐浴香药 | 15   | 10   | 15   | 20   | 20   |\n| 明前龙井 |      | 15 | 10   | 20   |      |\n| 美人图 | |  |  |  | 20 |\n| 棉花     | 5    | 5    | 2    | 2    | 2    |\n\n### N\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 女儿红 | 10   | 15   | 20   | 15   | 15   |\n| 泥鳅   | 5    | 5    | 15   | 5    | 15   |\n\n### P\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 判官笔     | 5    | 5    | 5    | 10   | 10   |\n| 苹果       | 5    | 20   |      |      |      |\n| 霹雳堂火器 | 20   | 5    | 20   | 5    | 5    |\n| 霹雳堂炮仗 | 15   | 5    | 20   |      |      |\n\n### Q\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 青城脸谱   | 15   | 5      | 15   | 10   | 5    |\n| 邛窑茶盏   | 15   | 15     | 10   | 20   | 15   |\n| 契丹瓜子   | 15   | 15     | 15   | 10   | 15   |\n| 契丹牛乳   | 15   | 15     | 15   | 10   | 15   |\n| 青铜锭     | 5    | 10     | 5    | 10   | 10   |\n| 庆力善治方 | 10   | 10（15 | 10   | 10   | 10   |\n\n### R\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 阮       |      |      | 5    | 20   |      |\n| 汝窑茶盏 | 10   | 15   | 10   | 20   | 10   |\n\n### S\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 神秘妆匣   | 2    | 2    | 2    | 2    | 2    |\n| 时空碎片   | 2    | 2    | 2    | 2    | 2    |\n| 锁子甲     | 15   | 5    | 15   | 5    | 5    |\n| 水域全图   | 15   | 10   | 15   | 10   | 10 |\n| 兽皮包裹   | 15   | 10   | 15   | 10   | 10   |\n| 碎月海龟   | 10   | 10   | 15   | 15   | 10   |\n| 碎月明虾   | 15   | 15   | 10   | 15   | 15   |\n| 扇子       | 10   | 15   | 10   | 15   | 15   |\n| 蒜香排骨   |      | 10   | 10   | 5    | 10   |\n| 梳妆匣     | 10   | 15   | 20   | 20   | 20   |\n| 蛇骨手串   | 20   | 5    | 15   | 10   | 10   |\n| 司南       | 15   | 15   | 15   | 10   | 10   |\n| 三合美酒   | 10   | 15   | 20   | 15   | 15   |\n| 蓑衣（农家 | 15   | 10   | 10   | 10   | 10   |\n| 蓑衣（桃溪 | 15   |      |      |      |      |\n\n### T\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 陶罐     | 5    | 2    | 5    | 2    | 2    |\n| 桃溪钓竿 | 10   | 15 | 10   | 10 | 10   |\n| 桃溪花枝 | 10   | 20   |      | 10   | 10   |\n| 糖葫芦   | 10   | 20   | 15   | 15   | 10   |\n| 团扇     |      |      | 5    | 20   | 20   |\n| 桃木剑   | 10   | 15   | 10   | 10 | 10   |\n| 桃溪河虾 |  | 20 | 10 |  | 15 |\n| 桃花雪   | 10   | 20   | 15   | 15   | 15   |\n| 桃溪泥人 | 15   | 20 |      |      | 10   |\n| 桃溪豆腐 | 15   | 20   | 10   |      | 15   |\n| 铜镜     | 10   | 15   | 10   | 15   | 15 |\n| 铜丝手套 | 20   | 10   | 15   | 10   | 10   |\n\n### W\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 武经总要 | 5 | 10   | 5    | 10   | 5    |\n| 武安蹴鞠 | 10   | 10   | 20   | 5    | 10   |\n| 武林秘籍 | 20   | 10   | 15   | 5    | 5    |\n\n### X\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 小暖       | 15   | 20   | 20   | 15   | 10   |\n| 雪梨       | 15   | 15   | 10   | 15   | 15   |\n| 雪狐皮     | 20   | 15   | 15   | 15   | 15   |\n| 雪村鸡蛋   | 15   | 15   | 10   | 10 | 15 |\n| 熙春调味料 | 10   | 10   | 15   | 15   | 15   |\n| 宣州紫毫笔 | 10   | 15   | 10   | 15   | 10   |\n| 绣花娟帕   | 10   | 15   | 10   | 15   | 20   |\n| 西湖莲花   | 10   | 15   | 10 | 15   | 15   |\n| 西湖莲蓬   | 10   | 20   | 15   | 15   | 10   |\n| 西域葡萄   | 15   | 15   | 15   | 15   | 15   |\n| 西域炼乳   | 15   | 10   | 15   | 15   | 15   |\n\n### Y\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 一颗大白菜   | 2    | 2    | 2    | 2    | 2    |\n| 一块木板     | 2    | 2    | 2    | 2    | 2    |\n| 一块帆布     | 2    | 2    | 2    | 2    | 2    |\n| 一根茄子     | 2    | 2    | 2    | 2    | 5 |\n| 一根萝卜     | 2    | 2    | 2    | 2    | 2    |\n| 一片枫叶     | 5    | 5    | 2    | 2    | 5    |\n| 一袋面粉     | 2    | 2    | 2    | 2 | 2 |\n| 一捆麻绳     | 2    | 2    | 2    | 2    | 5    |\n| 一袋大麦     | 2    | 2    | 2    | 2    | 2    |\n| 一块粗麻布   | 2    | 2    | 2    | 2    | 2    |\n| 一袋麦麸     | 2    | 2    | 2    | 2    | 2    |\n| 一束桃花     |      | 20   |      | 15   | 15   |\n| 一袋红豆     | 2    | 2    | 2    | 5    | 2    |\n| 一捆线球     | 2    | 2    | 2    | 2    | 2    |\n| 一筐蔬菜     | 2    | 2    | 2    | 2    | 2    |\n| 一屉包子     | 10   |      |      |      | 10   |\n| 一只寒梅     | 20   |      |      |      | 15   |\n| 羊毫笔       | 2    | 2    | 2    | 5    | 2    |\n| 野生牛筋     | 10   | 10 | 15   |      | 10   |\n| 萤火虫       | 15   | 20   | 10   | 15   | 15   |\n| 云西竹笋     | 15   | 20   |      |      | 15   |\n| 月影碎空残卷 | 20   | 15   | 15   | 5    | 5    |\n| 养颜阿胶     | 20   | 20   | 20   | 20   | 20   |\n| 药粥         | 15   | 15   |      | 10 | 10 |\n| 玉扳指       | 20   | 5    | 15   | 15   | 15   |\n| 玉红叶       | 15   | 15   | 10   | 20   | 20   |\n\n### Z\n\n[返回首字母索引](#首字母索引)\n\n| 道具     | 花将离 | 叶雪清 | 温柔 | 李师师 | 姬蜜儿 |\n| -------- | ------ | ------ | ---- | ------ | ------ |\n| 针线包 | 2 | 5 | 2 | 2 | 2 |\n| 竹哨           | 15   | 15   | 10   | 10   | 10   |\n| 竹陀螺         | 10   | 15   | 20   | 10   | 10   |\n| 醉螺           | 10   | 10   | 15   | 10   | 15   |\n| 粽子           | 5 |      | 5    | 2 | 5    |\n| 竹笋           |      |      | 10   |      |      |\n| 竹竿           | 2    | 2    | 5    | 2    | 2 |\n| 追风翼（白帝城 | 15   | 10   | 20   | 10   | 10   |\n| 追风翼         | 15   | 10   | 15   | 10   | 10   |","slug":"遇见逆水寒男号女NPC奇物好感统计","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b220045crag7uzyne7n","content":"<p>特别感谢<a href=\"https://weibo.com/u/3744087174?source=webim\" target=\"_blank\" rel=\"noopener\">秦沨_JONAS</a>及其小伙伴们的辛苦统计！</p>\n<hr>\n<h3 id=\"首字母索引\"><a href=\"#首字母索引\" class=\"headerlink\" title=\"首字母索引\"></a>首字母索引</h3><p><a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#B\" target=\"_blank\" rel=\"noopener\">B</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#C\" target=\"_blank\" rel=\"noopener\">C</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#D\" target=\"_blank\" rel=\"noopener\">D</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#F\" target=\"_blank\" rel=\"noopener\">F</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#G\" target=\"_blank\" rel=\"noopener\">G</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#H\" target=\"_blank\" rel=\"noopener\">H</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#J\" target=\"_blank\" rel=\"noopener\">J</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#K\" target=\"_blank\" rel=\"noopener\">K</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#L\" target=\"_blank\" rel=\"noopener\">L</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#M\" target=\"_blank\" rel=\"noopener\">M</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#N\" target=\"_blank\" rel=\"noopener\">N</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#P\" target=\"_blank\" rel=\"noopener\">P</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Q\" target=\"_blank\" rel=\"noopener\">Q</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#R\" target=\"_blank\" rel=\"noopener\">R</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#S\" target=\"_blank\" rel=\"noopener\">S</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#T\" target=\"_blank\" rel=\"noopener\">T</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#W\" target=\"_blank\" rel=\"noopener\">W</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#X\" target=\"_blank\" rel=\"noopener\">X</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Y\" target=\"_blank\" rel=\"noopener\">Y</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Z\" target=\"_blank\" rel=\"noopener\">Z</a></p>\n<h3 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a>B</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>半截蜡烛</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>拨浪鼓</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>筚篥</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n</tr>\n<tr>\n<td>薄荷</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>剥皮小刀</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>冰糖糕</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>布老虎</td>\n<td></td>\n<td>15</td>\n<td>10</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>碧血战铠</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>碧血战籍</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>碧血毒蝎</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>草帽</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>彩球</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>词韵曲谱</td>\n<td></td>\n<td>15</td>\n<td></td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蹴鞠</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"D\"></a>D</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冬虫夏草</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td></td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"F\"></a>F</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>风俗画</td>\n<td>5</td>\n<td>5</td>\n<td></td>\n<td></td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"G\"><a href=\"#G\" class=\"headerlink\" title=\"G\"></a>G</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>弓箭</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>枸杞</td>\n<td></td>\n<td>10</td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>蝈蝈笼</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>关外鹿肉</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>高丽泡菜</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>鬼谷算盘</td>\n<td></td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>关外鹿皮</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>关外人参</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"H\"><a href=\"#H\" class=\"headerlink\" title=\"H\"></a>H</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>花盆土</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>红泪面脂</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>花瓶</td>\n<td>2</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>虎皮围裙</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>虎骨酒</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>荷包</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>和田玉坠</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>和田玉石</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>毁诺城女装</td>\n<td>5</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>河豚</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>化骨水</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>海螺</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>胡笳十八拍</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>火铳</td>\n<td>20</td>\n<td>5</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>黑白玲珑子</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"J\"><a href=\"#J\" class=\"headerlink\" title=\"J\"></a>J</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>毽子</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>鸡毛掸子</td>\n<td>5</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>金秀铁骨扇</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>金丝楠木</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>绢花绸伞</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>嘉禾肉粽</td>\n<td>10</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>机械鸟</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>江山笔记</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>剑门豆腐</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>酒葫芦</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>金叶子</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"K\"><a href=\"#K\" class=\"headerlink\" title=\"K\"></a>K</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>孔雀石</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>孔雀翎</td>\n<td></td>\n<td>15</td>\n<td>10（20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"L\"><a href=\"#L\" class=\"headerlink\" title=\"L\"></a>L</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>绿茶茶叶</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>莲花河灯</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>狼毫笔</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>鎏金碧玉勺</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>楼兰蜜酒</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>灵芝</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>龙井黑猪肉</td>\n<td>10</td>\n<td>10</td>\n<td>5</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>柳笛</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>龙渊</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"M\"><a href=\"#M\" class=\"headerlink\" title=\"M\"></a>M</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>磨刀石</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>沐浴香药</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>明前龙井</td>\n<td></td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>美人图</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>20</td>\n</tr>\n<tr>\n<td>棉花</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"N\"><a href=\"#N\" class=\"headerlink\" title=\"N\"></a>N</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>女儿红</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>泥鳅</td>\n<td>5</td>\n<td>5</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"P\"><a href=\"#P\" class=\"headerlink\" title=\"P\"></a>P</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>判官笔</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>苹果</td>\n<td>5</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>霹雳堂火器</td>\n<td>20</td>\n<td>5</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>霹雳堂炮仗</td>\n<td>15</td>\n<td>5</td>\n<td>20</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q\"></a>Q</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>青城脸谱</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>邛窑茶盏</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>契丹瓜子</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>契丹牛乳</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>青铜锭</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>庆力善治方</td>\n<td>10</td>\n<td>10（15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"R\"><a href=\"#R\" class=\"headerlink\" title=\"R\"></a>R</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>阮</td>\n<td></td>\n<td></td>\n<td>5</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>汝窑茶盏</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S\"></a>S</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>神秘妆匣</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>时空碎片</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>锁子甲</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>水域全图</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>兽皮包裹</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>碎月海龟</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>碎月明虾</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>扇子</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蒜香排骨</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n</tr>\n<tr>\n<td>梳妆匣</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>蛇骨手串</td>\n<td>20</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>司南</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>三合美酒</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蓑衣（农家</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>蓑衣（桃溪</td>\n<td>15</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"T\"><a href=\"#T\" class=\"headerlink\" title=\"T\"></a>T</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>陶罐</td>\n<td>5</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>桃溪钓竿</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪花枝</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>糖葫芦</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>团扇</td>\n<td></td>\n<td></td>\n<td>5</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>桃木剑</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪河虾</td>\n<td></td>\n<td>20</td>\n<td>10</td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>桃花雪</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>桃溪泥人</td>\n<td>15</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪豆腐</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>铜镜</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>铜丝手套</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"W\"><a href=\"#W\" class=\"headerlink\" title=\"W\"></a>W</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>武经总要</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>武安蹴鞠</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>5</td>\n<td>10</td>\n</tr>\n<tr>\n<td>武林秘籍</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"X\"><a href=\"#X\" class=\"headerlink\" title=\"X\"></a>X</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>小暖</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>雪梨</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>雪狐皮</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>雪村鸡蛋</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>熙春调味料</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>宣州紫毫笔</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>绣花娟帕</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>西湖莲花</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>西湖莲蓬</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>西域葡萄</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>西域炼乳</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Y\"><a href=\"#Y\" class=\"headerlink\" title=\"Y\"></a>Y</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一颗大白菜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块木板</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块帆布</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一根茄子</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一根萝卜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一片枫叶</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一袋面粉</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一捆麻绳</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一袋大麦</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块粗麻布</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一袋麦麸</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一束桃花</td>\n<td></td>\n<td>20</td>\n<td></td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>一袋红豆</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一捆线球</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一筐蔬菜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一屉包子</td>\n<td>10</td>\n<td></td>\n<td></td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>一只寒梅</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>羊毫笔</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>野生牛筋</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>萤火虫</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>云西竹笋</td>\n<td>15</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>月影碎空残卷</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>养颜阿胶</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>药粥</td>\n<td>15</td>\n<td>15</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>玉扳指</td>\n<td>20</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>玉红叶</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Z\"><a href=\"#Z\" class=\"headerlink\" title=\"Z\"></a>Z</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>针线包</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>竹哨</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>竹陀螺</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>醉螺</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>粽子</td>\n<td>5</td>\n<td></td>\n<td>5</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>竹笋</td>\n<td></td>\n<td></td>\n<td>10</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>竹竿</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>追风翼（白帝城</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>追风翼</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>特别感谢<a href=\"https://weibo.com/u/3744087174?source=webim\" target=\"_blank\" rel=\"noopener\">秦沨_JONAS</a>及其小伙伴们的辛苦统计！</p>\n<hr>\n<h3 id=\"首字母索引\"><a href=\"#首字母索引\" class=\"headerlink\" title=\"首字母索引\"></a>首字母索引</h3><p><a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#B\" target=\"_blank\" rel=\"noopener\">B</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#C\" target=\"_blank\" rel=\"noopener\">C</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#D\" target=\"_blank\" rel=\"noopener\">D</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#F\" target=\"_blank\" rel=\"noopener\">F</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#G\" target=\"_blank\" rel=\"noopener\">G</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#H\" target=\"_blank\" rel=\"noopener\">H</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#J\" target=\"_blank\" rel=\"noopener\">J</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#K\" target=\"_blank\" rel=\"noopener\">K</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#L\" target=\"_blank\" rel=\"noopener\">L</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#M\" target=\"_blank\" rel=\"noopener\">M</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#N\" target=\"_blank\" rel=\"noopener\">N</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#P\" target=\"_blank\" rel=\"noopener\">P</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Q\" target=\"_blank\" rel=\"noopener\">Q</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#R\" target=\"_blank\" rel=\"noopener\">R</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#S\" target=\"_blank\" rel=\"noopener\">S</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#T\" target=\"_blank\" rel=\"noopener\">T</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#W\" target=\"_blank\" rel=\"noopener\">W</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#X\" target=\"_blank\" rel=\"noopener\">X</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Y\" target=\"_blank\" rel=\"noopener\">Y</a> <a href=\"http://blog.zmj97.top/2018/08/23/%E9%81%87%E8%A7%81%E9%80%86%E6%B0%B4%E5%AF%92%E7%94%B7%E5%8F%B7%E5%A5%B3NPC%E5%A5%87%E7%89%A9%E5%A5%BD%E6%84%9F%E7%BB%9F%E8%AE%A1/#Z\" target=\"_blank\" rel=\"noopener\">Z</a></p>\n<h3 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a>B</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>半截蜡烛</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>拨浪鼓</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>筚篥</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n</tr>\n<tr>\n<td>薄荷</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>剥皮小刀</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>冰糖糕</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>布老虎</td>\n<td></td>\n<td>15</td>\n<td>10</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>碧血战铠</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>碧血战籍</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>碧血毒蝎</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>草帽</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>彩球</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>词韵曲谱</td>\n<td></td>\n<td>15</td>\n<td></td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蹴鞠</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"D\"></a>D</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冬虫夏草</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td></td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"F\"></a>F</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>风俗画</td>\n<td>5</td>\n<td>5</td>\n<td></td>\n<td></td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"G\"><a href=\"#G\" class=\"headerlink\" title=\"G\"></a>G</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>弓箭</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>枸杞</td>\n<td></td>\n<td>10</td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>蝈蝈笼</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>关外鹿肉</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>高丽泡菜</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>鬼谷算盘</td>\n<td></td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>关外鹿皮</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>关外人参</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"H\"><a href=\"#H\" class=\"headerlink\" title=\"H\"></a>H</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>花盆土</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>红泪面脂</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>花瓶</td>\n<td>2</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>虎皮围裙</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>虎骨酒</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>荷包</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>和田玉坠</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>和田玉石</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>毁诺城女装</td>\n<td>5</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>河豚</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>化骨水</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>海螺</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>胡笳十八拍</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>火铳</td>\n<td>20</td>\n<td>5</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>黑白玲珑子</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"J\"><a href=\"#J\" class=\"headerlink\" title=\"J\"></a>J</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>毽子</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>鸡毛掸子</td>\n<td>5</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>金秀铁骨扇</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>金丝楠木</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>绢花绸伞</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>嘉禾肉粽</td>\n<td>10</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>机械鸟</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>江山笔记</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>剑门豆腐</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>酒葫芦</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>金叶子</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"K\"><a href=\"#K\" class=\"headerlink\" title=\"K\"></a>K</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>孔雀石</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>孔雀翎</td>\n<td></td>\n<td>15</td>\n<td>10（20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"L\"><a href=\"#L\" class=\"headerlink\" title=\"L\"></a>L</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>绿茶茶叶</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>莲花河灯</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>狼毫笔</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>鎏金碧玉勺</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>楼兰蜜酒</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>灵芝</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>龙井黑猪肉</td>\n<td>10</td>\n<td>10</td>\n<td>5</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>柳笛</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>龙渊</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"M\"><a href=\"#M\" class=\"headerlink\" title=\"M\"></a>M</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>磨刀石</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>沐浴香药</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>明前龙井</td>\n<td></td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>美人图</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>20</td>\n</tr>\n<tr>\n<td>棉花</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"N\"><a href=\"#N\" class=\"headerlink\" title=\"N\"></a>N</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>女儿红</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>泥鳅</td>\n<td>5</td>\n<td>5</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"P\"><a href=\"#P\" class=\"headerlink\" title=\"P\"></a>P</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>判官笔</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>苹果</td>\n<td>5</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>霹雳堂火器</td>\n<td>20</td>\n<td>5</td>\n<td>20</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>霹雳堂炮仗</td>\n<td>15</td>\n<td>5</td>\n<td>20</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q\"></a>Q</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>青城脸谱</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>邛窑茶盏</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n</tr>\n<tr>\n<td>契丹瓜子</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>契丹牛乳</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>青铜锭</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>庆力善治方</td>\n<td>10</td>\n<td>10（15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"R\"><a href=\"#R\" class=\"headerlink\" title=\"R\"></a>R</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>阮</td>\n<td></td>\n<td></td>\n<td>5</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>汝窑茶盏</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S\"></a>S</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>神秘妆匣</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>时空碎片</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>锁子甲</td>\n<td>15</td>\n<td>5</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>水域全图</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>兽皮包裹</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>碎月海龟</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>碎月明虾</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>扇子</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蒜香排骨</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n</tr>\n<tr>\n<td>梳妆匣</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>蛇骨手串</td>\n<td>20</td>\n<td>5</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>司南</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>三合美酒</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>蓑衣（农家</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>蓑衣（桃溪</td>\n<td>15</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"T\"><a href=\"#T\" class=\"headerlink\" title=\"T\"></a>T</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>陶罐</td>\n<td>5</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>桃溪钓竿</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪花枝</td>\n<td>10</td>\n<td>20</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>糖葫芦</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>团扇</td>\n<td></td>\n<td></td>\n<td>5</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>桃木剑</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪河虾</td>\n<td></td>\n<td>20</td>\n<td>10</td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>桃花雪</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>桃溪泥人</td>\n<td>15</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>桃溪豆腐</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>铜镜</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>铜丝手套</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"W\"><a href=\"#W\" class=\"headerlink\" title=\"W\"></a>W</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>武经总要</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n<td>10</td>\n<td>5</td>\n</tr>\n<tr>\n<td>武安蹴鞠</td>\n<td>10</td>\n<td>10</td>\n<td>20</td>\n<td>5</td>\n<td>10</td>\n</tr>\n<tr>\n<td>武林秘籍</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"X\"><a href=\"#X\" class=\"headerlink\" title=\"X\"></a>X</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>小暖</td>\n<td>15</td>\n<td>20</td>\n<td>20</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>雪梨</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>雪狐皮</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>雪村鸡蛋</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>熙春调味料</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>宣州紫毫笔</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>绣花娟帕</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n</tr>\n<tr>\n<td>西湖莲花</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>西湖莲蓬</td>\n<td>10</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n</tr>\n<tr>\n<td>西域葡萄</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>西域炼乳</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Y\"><a href=\"#Y\" class=\"headerlink\" title=\"Y\"></a>Y</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一颗大白菜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块木板</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块帆布</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一根茄子</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一根萝卜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一片枫叶</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一袋面粉</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一捆麻绳</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>一袋大麦</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一块粗麻布</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一袋麦麸</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一束桃花</td>\n<td></td>\n<td>20</td>\n<td></td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>一袋红豆</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一捆线球</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一筐蔬菜</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>一屉包子</td>\n<td>10</td>\n<td></td>\n<td></td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>一只寒梅</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>羊毫笔</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>野生牛筋</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>萤火虫</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>云西竹笋</td>\n<td>15</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td>15</td>\n</tr>\n<tr>\n<td>月影碎空残卷</td>\n<td>20</td>\n<td>15</td>\n<td>15</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>养颜阿胶</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n<td>20</td>\n</tr>\n<tr>\n<td>药粥</td>\n<td>15</td>\n<td>15</td>\n<td></td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>玉扳指</td>\n<td>20</td>\n<td>5</td>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n<tr>\n<td>玉红叶</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Z\"><a href=\"#Z\" class=\"headerlink\" title=\"Z\"></a>Z</h3><p><a href=\"#首字母索引\">返回首字母索引</a></p>\n<table>\n<thead>\n<tr>\n<th>道具</th>\n<th>花将离</th>\n<th>叶雪清</th>\n<th>温柔</th>\n<th>李师师</th>\n<th>姬蜜儿</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>针线包</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>竹哨</td>\n<td>15</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>竹陀螺</td>\n<td>10</td>\n<td>15</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>醉螺</td>\n<td>10</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n</tr>\n<tr>\n<td>粽子</td>\n<td>5</td>\n<td></td>\n<td>5</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>竹笋</td>\n<td></td>\n<td></td>\n<td>10</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>竹竿</td>\n<td>2</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>追风翼（白帝城</td>\n<td>15</td>\n<td>10</td>\n<td>20</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>追风翼</td>\n<td>15</td>\n<td>10</td>\n<td>15</td>\n<td>10</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"部署hexo后github pages页面未更新或无法打开问题","date":"2018-03-30T07:34:29.000Z","_content":"\n\n\n# 部署\n\n本地编写完成后，要同步Github Pages，运行以下三个命令即可：\n\n```\nhexo clean\nhexo g\nhexo d\n```\n\n需要注意的是**这些命令应该在hexo目录的根目录下进行**。\n\n# 部署后页面未更新\n\n使用**无痕模式**浏览或者**等一段时间**再查看。\n\n\n\n---\n\n更推荐运行`hexo s`后利用本地服务器在**localhost:4000**查看效果，效果满意后直接部署，过段时间页面自然会更新的。","source":"_posts/部署hexo后github-pages页面未更新或无法打开问题.md","raw":"---\ntitle: 部署hexo后github pages页面未更新或无法打开问题\ndate: 2018-03-30 15:34:29\ncategories:\n- methods\ntags:\n- hexo\n- github pages\n---\n\n\n\n# 部署\n\n本地编写完成后，要同步Github Pages，运行以下三个命令即可：\n\n```\nhexo clean\nhexo g\nhexo d\n```\n\n需要注意的是**这些命令应该在hexo目录的根目录下进行**。\n\n# 部署后页面未更新\n\n使用**无痕模式**浏览或者**等一段时间**再查看。\n\n\n\n---\n\n更推荐运行`hexo s`后利用本地服务器在**localhost:4000**查看效果，效果满意后直接部署，过段时间页面自然会更新的。","slug":"部署hexo后github-pages页面未更新或无法打开问题","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b230048crago04m0b74","content":"<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>本地编写完成后，要同步Github Pages，运行以下三个命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>需要注意的是<strong>这些命令应该在hexo目录的根目录下进行</strong>。</p>\n<h1 id=\"部署后页面未更新\"><a href=\"#部署后页面未更新\" class=\"headerlink\" title=\"部署后页面未更新\"></a>部署后页面未更新</h1><p>使用<strong>无痕模式</strong>浏览或者<strong>等一段时间</strong>再查看。</p>\n<hr>\n<p>更推荐运行<code>hexo s</code>后利用本地服务器在<strong>localhost:4000</strong>查看效果，效果满意后直接部署，过段时间页面自然会更新的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>本地编写完成后，要同步Github Pages，运行以下三个命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>需要注意的是<strong>这些命令应该在hexo目录的根目录下进行</strong>。</p>\n<h1 id=\"部署后页面未更新\"><a href=\"#部署后页面未更新\" class=\"headerlink\" title=\"部署后页面未更新\"></a>部署后页面未更新</h1><p>使用<strong>无痕模式</strong>浏览或者<strong>等一段时间</strong>再查看。</p>\n<hr>\n<p>更推荐运行<code>hexo s</code>后利用本地服务器在<strong>localhost:4000</strong>查看效果，效果满意后直接部署，过段时间页面自然会更新的。</p>\n"},{"title":"牛客网前端挑战编程题解","toc":true,"date":"2018-09-20T06:33:15.000Z","_content":"\nOJ链接：https://www.nowcoder.com/ta/front-end\n\n注意：在牛客不能用ES6的东西！\n\n## 修改this指向\n\n>  封装函数 f，使 f 的 this 指向指定的对象\n\n代码\n\n```js\nfunction bindThis(f, oTarget) {\n  // 考虑浏览器兼容\n  if (f.bind) {\n    return f.bind(oTarget);\n  } else {\n    // apply()为立即执行函数，因此需要放在一个函数里，到需要使用的时候再立即执行\n    return function() {\n      // arguments不能省略，在执行f时可能会传入参数\n      return f.apply(oTarget, arguments);\n    }\n  }\n}\n```\n\n## 获取url参数\n\n> 获取 url 中的参数\n> 1. 指定参数名称，返回该参数的值 或者 空字符串\n> 2. 不指定参数名称，返回全部的参数对象 或者 {}\n> 3. 如果存在多个同名参数，则返回数组\n\n输入\n\n```\nhttp://www.nowcoder.com?key=1&key=2&key=3&test=4#hehe\n```\n\n输出\n\n```\n[1, 2, 3]\n```\n\n代码\n\n```js\nfunction getUrlParam(sUrl, sKey) {\n  var result = {};\n  // 先取?和#之间的字符串，然后按照&分割\n  var querys = ((sUrl.split('?')[1]).split('#')[0]).split('&');\n  for (var i = 0; i < querys.length; i++) {\n    var key = querys[i].split('=')[0];\n    var value = querys[i].split('=')[1];\n    // 如果result[key]未定义，则创建一个含有value的数组\n    if (result[key] == undefined) result[key] = [value];\n    else result[key].push(value);\n  }\n  // 不指定参数名称，返回全部的参数对象\n  if (sKey == undefined) return result;\n  if (result[sKey] == undefined) return \"\";\n  else if (result[sKey].length == 1) return result[sKey][0];\n  else return result[sKey];\n}\n```\n\n还有大神的正则的方法...直接贴出来吧：\n\n```js\n// 链接：https://www.nowcoder.com/questionTerminal/a3ded747e3884a3c86d09d88d1652e10\n// 来源：牛客网\n\nfunction getUrlParam(sUrl, sKey) {\n    var obj = {};\n    var reg = /[?&](\\w+)=(\\w+)/g;\n    while(reg.exec(sUrl))\n        obj[RegExp.$1] ? obj[RegExp.$1]=[].concat(obj[RegExp.$1],RegExp.$2) : obj[RegExp.$1]=RegExp.$2;\n    return sKey ? obj[sKey]||\"\" : obj;\n}\n```\n\n## dom节点查找\n\n> 查找两个节点的最近的一个共同父节点，可以包括节点自身\n\n输入描述\n\n```\noNode1 和 oNode2 在同一文档中，且不会为相同的节点\n```\n\n代码\n\n```js\nfunction commonParentNode(oNode1, oNode2) {\n    for (;oNode1;oNode1 = oNode1.parentNode) {\n        if (oNode1.contains(oNode2)) {\n            return oNode1;\n        }\n    }\n}\n```\n\n还是对DOM的相关属性啊什么的不了解。。红宝书刚看到DOM。。。要加油鸭\n\n## 根据包名，在指定空间中创建对象\n\n输入描述\n\n```\nnamespace({a: {test: 1, b: 2}}, 'a.b.c.d')\n```\n\n输出描述\n\n```\n{a: {test: 1, b: {c: {d: {}}}}}\n```\n\n代码\n\n```js\nfunction namespace(oNamespace, sPackage) {\n    var tmpPoint = oNamespace;\n    var keys = sPackage.split('.');\n    for (var i = 0; i < keys.length; i++) {\n        if (tmpPoint[keys[i]] == undefined) tmpPoint[keys[i]] = {};\n        tmpPoint = tmpPoint[keys[i]];\n    }\n    return oNamespace;\n}\n```\n\n记住，对象名就像是指针一样。\n\n## 数组去重\n\n> 为 Array 对象添加一个去除重复项的方法\n\n输入\n\n```\n[false, true, undefined, null, NaN, 0, 1, {}, {}, 'a', 'a', NaN]\n```\n\n输出\n\n```\n[false, true, undefined, null, NaN, 0, 1, {}, {}, 'a']\n```\n\n代码\n\n```js\nArray.prototype.uniq = function () {\n    var hasNaN = false;\n    for (var i = 0; i < this.length; i++) {\n        if ((hasNaN === false) && (this[i] != this[i])) {\n            hasNaN = true;\n            continue;\n        }\n        if (this.indexOf(this[i]) < i) this.splice(i--,1);\n    }\n    return this;\n}\n```\n\n关于NaN的问题调试了好几次。。\n\n使用`this.indexOf(this[i]) < i`判断的时候，\n\n因为NaN和任何值都不相等，因此index是-1，因此在这里一定会被删掉，\n\n因此需要先判断是不是已经遇到过NaN了，遇到过的话再次遇到就直接删掉，没有遇到的话遇到时就把hasNaN设为true，然后continue来跳过splice。\n\n## 斐波那契数列\n\n> 用 JavaScript 实现斐波那契数列函数,返回第n个斐波那契数。 f(1) = 1, f(2) = 1 等\n\nemmmmm，不知道为什么会有斐波那契这种题。。。。\n\n```js\n// 暴力递归\nfunction fibonacci(n) {\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    return fibonacci(n-1) + fibonacci(n-2);\n}\n// 本来想用callee，结果严格模式不让用。。。红宝书一直说callee多么多么好。。。搞得我不用好难受\n```\n\n```js\n// 循环\nfunction fibonacci(n) {\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    var a = 0, b = 1, c = 1;\n    for (var i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return c;\n}\n```\n\n## 时间格式化输出\n\n> 按所给的时间格式输出指定的时间\n> 格式说明\n> 对于 2014.09.05 13:14:20\n> yyyy: 年份，2014\n> yy: 年份，14\n> MM: 月份，补满两位，09\n> M: 月份, 9\n> dd: 日期，补满两位，05\n> d: 日期, 5\n> HH: 24制小时，补满两位，13\n> H: 24制小时，13\n> hh: 12制小时，补满两位，01\n> h: 12制小时，1\n> mm: 分钟，补满两位，14\n> m: 分钟，14\n> ss: 秒，补满两位，20\n> s: 秒，20\n> w: 星期，为 ['日', '一', '二', '三', '四', '五', '六'] 中的某一个，本 demo 结果为 五\n\n输入\n\n```\nformatDate(new Date(1409894060000), 'yyyy-MM-dd HH:mm:ss 星期w')\n```\n\n输出\n\n```\n2014-09-05 13:14:20 星期五\n```\n\n代码\n\n```js\nfunction formatDate(date, format) {\n    var myDate = {\n        yyyy: date.getFullYear(),\n        yy: date.getFullYear()%100,\n        MM: (\"0\" + (date.getMonth()+1)).slice(-2),\n        M: date.getMonth()+1,\n        dd: (\"0\" + (date.getDate())).slice(-2),\n        d: date.getDate(),\n        HH: (\"0\" + date.getHours()).slice(-2),\n        H: date.getHours(),\n        hh: (\"0\" + (date.getHours() % 12)).slice(-2),\n        h: date.getHours() % 12,\n        mm: (\"0\" + date.getMinutes()).slice(-2),\n        m: date.getMinutes(),\n        ss: (\"0\" + date.getSeconds()).slice(-2),\n        s: date.getSeconds(),\n        w: ['日', '一', '二', '三', '四', '五', '六'][date.getDay()]\n    }\n    return format.replace(/([a-z]+)/ig,function($1){return myDate[$1];});\n}\n```\n\n参考了大神的代码。。。自己差点就十几个if了。。。\n\n关于代码说明几点：\n\n`getFullYear()`为年份四位表示\n\n`getMonth()`为月份0-11\n\n`getDate()`为日期1-31\n\n`getHours()`为小时0-23\n\n`getMinutes()`为分钟0-59\n\n`getSeconds()`为秒数0-59\n\n`getDay()`为0-6表示['日', '一', '二', '三', '四', '五', '六']\n\n`RegExp.$1...RegExp.$9`表示用于存储第一、……第九个匹配的捕获组，至于什么是捕获组可以看下边这个例子：\n\n```js\nvar text = \"this has been a short summer\";\nvar pattern = /(..)or(.)/g;\n\nif (pattern.exec(text)) {\n  alert(RegExp.$1); // \"sh\"\n  alert(RegExp.$2); // \"t\"\n}\n```\n\n## 获取字符串长度\n\n> 如果第二个参数 bUnicode255For1 === true，则所有字符长度为 1\n> 否则如果字符 Unicode 编码 > 255 则长度为 2\n\n输入\n\n```\n'hello world, 牛客', false\n```\n\n输出\n\n```\n17\n```\n\n代码\n\n```js\nfunction strLength(s, bUnicode255For1) {\n    if (bUnicode255For1 === true) {\n        return s.length;\n    } else {\n        var result = 0;\n        for (var i = 0; i < s.length; i++) {\n            if (s.charCodeAt(i) > 255) result+=2;\n            else result+=1;\n        }\n        return result;\n    }\n}\n```\n\n刚开始一直没看懂题。。。这道题应该有点问题，js默认utf-16编码，所以不是所有字符都长度为1，有的字符是长度为2的。。。忽略这个写这个题吧。。。\n\n## 邮箱字符串判断\n\n输入描述\n\n```\n邮箱字符串\n```\n\n输出描述\n\n```\ntrue表示格式正确\n```\n\n代码\n\n```js\nfunction isAvailableEmail(sEmail) {\n    var reg = /^[\\w\\.]+@[\\w\\.]+\\.[\\w\\.]+$/i;\n    return reg.test(sEmail);\n}\n```\n\n> - \\w 匹配字母或数字或下划线或汉字 等价于 '[^A-Za-z0-9_]'。\n>\n> - \\s 匹配任意的空白符\n>\n> - \\d 匹配数字\n>\n> - \\b 匹配单词的开始或结束\n>\n> - ^ 匹配字符串的开始\n>\n> - $ 匹配字符串的结束\n>\n> - \\w能不能匹配汉字要视你的操作系统和你的应用环境而定\n\n## 颜色字符串转换\n\n> 将 rgb 颜色字符串转换为十六进制的形式，如 rgb(255, 255, 255) 转为 #ffffff\n> 1. rgb 中每个 , 后面的空格数量不固定\n> 2. 十六进制表达式使用六位小写字母\n> 3. 如果输入不符合 rgb 格式，返回原始输入\n\n输入\n\n```\n'rgb(255, 255, 255)'\n```\n\n输出\n\n```\n#ffffff\n```\n\n代码\n\n```js\nfunction rgb2hex(sRGB) {\n    if(sRGB.slice(0,4)!=='rgb(' || sRGB.slice(-1)!==')') return sRGB;\n    var tmp = (sRGB.split('(')[1]).split(')')[0];\n    var colors = tmp.split(',');\n    if (colors.length != 3) return sRGB;\n    var re = \"#\";\n    for (var i = 0; i < colors.length; i++) {\n        var value =  parseInt(colors[i].substring(colors[i].lastIndexOf(' ')));\n        if (value < 0 || value > 255) return sRGB;\n        re += (\"0\" + (value).toString(16)).slice(-2);\n    }\n    return re;\n}\n```\n\n又使用了最水的办法。。。\n\n看一下大佬的正则的方法：\n\n```js\n//链接：https://www.nowcoder.com/questionTerminal/80b08802a833419f9c4ccc6e042c1cca\n//来源：牛客网\n\nfunction rgb2hex(sRGB) {\n   return sRGB.replace(/^rgb\\((\\d+)\\s*\\,\\s*(\\d+)\\s*\\,\\s*(\\d+)\\)$/g, function(a, r, g, b){\n       return '#' + hex(r) + hex(g) + hex(b);\n   });\n}\nfunction hex(n){\n    return n < 16 ? '0' + (+n).toString(16) : (+n).toString(16);\n}\n\n```\n\na代表正则匹配的整个字符串,  r ,g, b代表红绿蓝三个通道, 分别是正则中的三个括号匹配的字符串.  通常用的$0, $1, $2, $3。\n\n但是吧，可能是用例不全，这个方法并没有判断是不是超出0-255也能AC。。\n\n可以在hex函数里加个判断，如果规范才返回字符串，然后在replace里的那个函数里加个判断hex(r)、hex(g)、hex(b)是否为undefined，像这样：\n\n```js\nfunction rgb2hex(sRGB) {\n  return sRGB.replace(/^rgb\\((\\d+)\\s*\\,\\s*(\\d+)\\s*\\,\\s*(\\d+)\\)$/g, function(a, r, g, b){\n    if (hex(r) == undefined || hex(g) == undefined || hex(b) == undefined) return sRGB;\n    return '#' + hex(r) + hex(g) + hex(b);\n  });\n}\nfunction hex(n){\n  if (n > -1 && n < 256) {\n    return n < 16 ? '0' + (+n).toString(16) : (+n).toString(16);\n  }\n}\n```\n\n这样就可以啦！\n\n## 将字符串转换为驼峰模式\n\n> css 中经常有类似 background-image 这种通过 - 连接的字符，通过 javascript 设置样式的时候需要将这种样式转换成 backgroundImage 驼峰格式，请完成此转换功能\n> 1. 以 - 为分隔符，将第二个起的非空单词首字母转为大写\n> 2. -webkit-border-image 转换后的结果为 webkitBorderImage\n\n输入\n\n```\n'font-size'\n```\n\n输出\n\n```\nfontSize\n```\n\n代码\n\n```js\nfunction cssStyle2DomStyle(sName) {\n    if (sName[0] == \"-\") sName = sName.slice(1);\n    var words = sName.split('-');\n    var re = words[0];\n    for (var i = 1; i < words.length; i++) {\n        re = re + words[i][0].toUpperCase() + words[i].slice(1);\n    }\n    return re;\n}\n```\n\n大神的代码：\n\n```js\n// 链接：https://www.nowcoder.com/questionTerminal/2ded24e34ec34325a62d42d0c8479bae\n// 来源：牛客网\n\nreturn sName.replace(/\\-[a-z]/g , function(a, b){\n \n    return b == 0 ? a.replace('-','') : a.replace('-','').toUpperCase();\n \n});\n```\n\n其中b是offset。\n\nreplace第二个参数函数的参数表：\n\n| 变量名       | 代表的值                                                     |\n| ------------ | ------------------------------------------------------------ |\n| match        | 匹配的子串。（对应于上述的$&。）                             |\n| `p1,p2, ...` | 假如replace()方法的第一个参数是一个[`RegExp`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp) 对象，则代表第n个括号匹配的字符串。（对应于上述的$1，$2等。） |\n| `offset`     | 匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串是“bc”，那么这个参数将是1） |\n| string       | 被匹配的原字符串。                                           |\n\n## 字符串字符统计\n\n> 统计字符串中每个字符的出现频率，返回一个 Object，key 为统计字符，value 为出现频率\n> 1. 不限制 key 的顺序\n> 2. 输入的字符串参数不会为空\n> 3. 忽略空白字符\n\n输入\n\n```\n'hello world'\n```\n\n输出\n\n```\n{h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1}\n```\n\n大神的代码：\n\n```js\nfunction count(str) {\n    var obj = {};\n    str.replace(/\\S/g,function(s){\n        !obj[s]?obj[s]=1:obj[s]++;\n    })\n    return obj;\n}\n```\n\n\\S匹配非空字符串，function(s)里的s代表匹配到的每一项。\n\n\n\n---\n\n哎总结一句就是我好菜。。对JS了解还是太少。。。","source":"_posts/牛客网前端挑战编程题解.md","raw":"---\ntitle: 牛客网前端挑战编程题解\ntoc: true\ndate: 2018-09-20 14:33:15\ncategories:\n- Web\ntags:\n- JavaScript\n---\n\nOJ链接：https://www.nowcoder.com/ta/front-end\n\n注意：在牛客不能用ES6的东西！\n\n## 修改this指向\n\n>  封装函数 f，使 f 的 this 指向指定的对象\n\n代码\n\n```js\nfunction bindThis(f, oTarget) {\n  // 考虑浏览器兼容\n  if (f.bind) {\n    return f.bind(oTarget);\n  } else {\n    // apply()为立即执行函数，因此需要放在一个函数里，到需要使用的时候再立即执行\n    return function() {\n      // arguments不能省略，在执行f时可能会传入参数\n      return f.apply(oTarget, arguments);\n    }\n  }\n}\n```\n\n## 获取url参数\n\n> 获取 url 中的参数\n> 1. 指定参数名称，返回该参数的值 或者 空字符串\n> 2. 不指定参数名称，返回全部的参数对象 或者 {}\n> 3. 如果存在多个同名参数，则返回数组\n\n输入\n\n```\nhttp://www.nowcoder.com?key=1&key=2&key=3&test=4#hehe\n```\n\n输出\n\n```\n[1, 2, 3]\n```\n\n代码\n\n```js\nfunction getUrlParam(sUrl, sKey) {\n  var result = {};\n  // 先取?和#之间的字符串，然后按照&分割\n  var querys = ((sUrl.split('?')[1]).split('#')[0]).split('&');\n  for (var i = 0; i < querys.length; i++) {\n    var key = querys[i].split('=')[0];\n    var value = querys[i].split('=')[1];\n    // 如果result[key]未定义，则创建一个含有value的数组\n    if (result[key] == undefined) result[key] = [value];\n    else result[key].push(value);\n  }\n  // 不指定参数名称，返回全部的参数对象\n  if (sKey == undefined) return result;\n  if (result[sKey] == undefined) return \"\";\n  else if (result[sKey].length == 1) return result[sKey][0];\n  else return result[sKey];\n}\n```\n\n还有大神的正则的方法...直接贴出来吧：\n\n```js\n// 链接：https://www.nowcoder.com/questionTerminal/a3ded747e3884a3c86d09d88d1652e10\n// 来源：牛客网\n\nfunction getUrlParam(sUrl, sKey) {\n    var obj = {};\n    var reg = /[?&](\\w+)=(\\w+)/g;\n    while(reg.exec(sUrl))\n        obj[RegExp.$1] ? obj[RegExp.$1]=[].concat(obj[RegExp.$1],RegExp.$2) : obj[RegExp.$1]=RegExp.$2;\n    return sKey ? obj[sKey]||\"\" : obj;\n}\n```\n\n## dom节点查找\n\n> 查找两个节点的最近的一个共同父节点，可以包括节点自身\n\n输入描述\n\n```\noNode1 和 oNode2 在同一文档中，且不会为相同的节点\n```\n\n代码\n\n```js\nfunction commonParentNode(oNode1, oNode2) {\n    for (;oNode1;oNode1 = oNode1.parentNode) {\n        if (oNode1.contains(oNode2)) {\n            return oNode1;\n        }\n    }\n}\n```\n\n还是对DOM的相关属性啊什么的不了解。。红宝书刚看到DOM。。。要加油鸭\n\n## 根据包名，在指定空间中创建对象\n\n输入描述\n\n```\nnamespace({a: {test: 1, b: 2}}, 'a.b.c.d')\n```\n\n输出描述\n\n```\n{a: {test: 1, b: {c: {d: {}}}}}\n```\n\n代码\n\n```js\nfunction namespace(oNamespace, sPackage) {\n    var tmpPoint = oNamespace;\n    var keys = sPackage.split('.');\n    for (var i = 0; i < keys.length; i++) {\n        if (tmpPoint[keys[i]] == undefined) tmpPoint[keys[i]] = {};\n        tmpPoint = tmpPoint[keys[i]];\n    }\n    return oNamespace;\n}\n```\n\n记住，对象名就像是指针一样。\n\n## 数组去重\n\n> 为 Array 对象添加一个去除重复项的方法\n\n输入\n\n```\n[false, true, undefined, null, NaN, 0, 1, {}, {}, 'a', 'a', NaN]\n```\n\n输出\n\n```\n[false, true, undefined, null, NaN, 0, 1, {}, {}, 'a']\n```\n\n代码\n\n```js\nArray.prototype.uniq = function () {\n    var hasNaN = false;\n    for (var i = 0; i < this.length; i++) {\n        if ((hasNaN === false) && (this[i] != this[i])) {\n            hasNaN = true;\n            continue;\n        }\n        if (this.indexOf(this[i]) < i) this.splice(i--,1);\n    }\n    return this;\n}\n```\n\n关于NaN的问题调试了好几次。。\n\n使用`this.indexOf(this[i]) < i`判断的时候，\n\n因为NaN和任何值都不相等，因此index是-1，因此在这里一定会被删掉，\n\n因此需要先判断是不是已经遇到过NaN了，遇到过的话再次遇到就直接删掉，没有遇到的话遇到时就把hasNaN设为true，然后continue来跳过splice。\n\n## 斐波那契数列\n\n> 用 JavaScript 实现斐波那契数列函数,返回第n个斐波那契数。 f(1) = 1, f(2) = 1 等\n\nemmmmm，不知道为什么会有斐波那契这种题。。。。\n\n```js\n// 暴力递归\nfunction fibonacci(n) {\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    return fibonacci(n-1) + fibonacci(n-2);\n}\n// 本来想用callee，结果严格模式不让用。。。红宝书一直说callee多么多么好。。。搞得我不用好难受\n```\n\n```js\n// 循环\nfunction fibonacci(n) {\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    var a = 0, b = 1, c = 1;\n    for (var i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return c;\n}\n```\n\n## 时间格式化输出\n\n> 按所给的时间格式输出指定的时间\n> 格式说明\n> 对于 2014.09.05 13:14:20\n> yyyy: 年份，2014\n> yy: 年份，14\n> MM: 月份，补满两位，09\n> M: 月份, 9\n> dd: 日期，补满两位，05\n> d: 日期, 5\n> HH: 24制小时，补满两位，13\n> H: 24制小时，13\n> hh: 12制小时，补满两位，01\n> h: 12制小时，1\n> mm: 分钟，补满两位，14\n> m: 分钟，14\n> ss: 秒，补满两位，20\n> s: 秒，20\n> w: 星期，为 ['日', '一', '二', '三', '四', '五', '六'] 中的某一个，本 demo 结果为 五\n\n输入\n\n```\nformatDate(new Date(1409894060000), 'yyyy-MM-dd HH:mm:ss 星期w')\n```\n\n输出\n\n```\n2014-09-05 13:14:20 星期五\n```\n\n代码\n\n```js\nfunction formatDate(date, format) {\n    var myDate = {\n        yyyy: date.getFullYear(),\n        yy: date.getFullYear()%100,\n        MM: (\"0\" + (date.getMonth()+1)).slice(-2),\n        M: date.getMonth()+1,\n        dd: (\"0\" + (date.getDate())).slice(-2),\n        d: date.getDate(),\n        HH: (\"0\" + date.getHours()).slice(-2),\n        H: date.getHours(),\n        hh: (\"0\" + (date.getHours() % 12)).slice(-2),\n        h: date.getHours() % 12,\n        mm: (\"0\" + date.getMinutes()).slice(-2),\n        m: date.getMinutes(),\n        ss: (\"0\" + date.getSeconds()).slice(-2),\n        s: date.getSeconds(),\n        w: ['日', '一', '二', '三', '四', '五', '六'][date.getDay()]\n    }\n    return format.replace(/([a-z]+)/ig,function($1){return myDate[$1];});\n}\n```\n\n参考了大神的代码。。。自己差点就十几个if了。。。\n\n关于代码说明几点：\n\n`getFullYear()`为年份四位表示\n\n`getMonth()`为月份0-11\n\n`getDate()`为日期1-31\n\n`getHours()`为小时0-23\n\n`getMinutes()`为分钟0-59\n\n`getSeconds()`为秒数0-59\n\n`getDay()`为0-6表示['日', '一', '二', '三', '四', '五', '六']\n\n`RegExp.$1...RegExp.$9`表示用于存储第一、……第九个匹配的捕获组，至于什么是捕获组可以看下边这个例子：\n\n```js\nvar text = \"this has been a short summer\";\nvar pattern = /(..)or(.)/g;\n\nif (pattern.exec(text)) {\n  alert(RegExp.$1); // \"sh\"\n  alert(RegExp.$2); // \"t\"\n}\n```\n\n## 获取字符串长度\n\n> 如果第二个参数 bUnicode255For1 === true，则所有字符长度为 1\n> 否则如果字符 Unicode 编码 > 255 则长度为 2\n\n输入\n\n```\n'hello world, 牛客', false\n```\n\n输出\n\n```\n17\n```\n\n代码\n\n```js\nfunction strLength(s, bUnicode255For1) {\n    if (bUnicode255For1 === true) {\n        return s.length;\n    } else {\n        var result = 0;\n        for (var i = 0; i < s.length; i++) {\n            if (s.charCodeAt(i) > 255) result+=2;\n            else result+=1;\n        }\n        return result;\n    }\n}\n```\n\n刚开始一直没看懂题。。。这道题应该有点问题，js默认utf-16编码，所以不是所有字符都长度为1，有的字符是长度为2的。。。忽略这个写这个题吧。。。\n\n## 邮箱字符串判断\n\n输入描述\n\n```\n邮箱字符串\n```\n\n输出描述\n\n```\ntrue表示格式正确\n```\n\n代码\n\n```js\nfunction isAvailableEmail(sEmail) {\n    var reg = /^[\\w\\.]+@[\\w\\.]+\\.[\\w\\.]+$/i;\n    return reg.test(sEmail);\n}\n```\n\n> - \\w 匹配字母或数字或下划线或汉字 等价于 '[^A-Za-z0-9_]'。\n>\n> - \\s 匹配任意的空白符\n>\n> - \\d 匹配数字\n>\n> - \\b 匹配单词的开始或结束\n>\n> - ^ 匹配字符串的开始\n>\n> - $ 匹配字符串的结束\n>\n> - \\w能不能匹配汉字要视你的操作系统和你的应用环境而定\n\n## 颜色字符串转换\n\n> 将 rgb 颜色字符串转换为十六进制的形式，如 rgb(255, 255, 255) 转为 #ffffff\n> 1. rgb 中每个 , 后面的空格数量不固定\n> 2. 十六进制表达式使用六位小写字母\n> 3. 如果输入不符合 rgb 格式，返回原始输入\n\n输入\n\n```\n'rgb(255, 255, 255)'\n```\n\n输出\n\n```\n#ffffff\n```\n\n代码\n\n```js\nfunction rgb2hex(sRGB) {\n    if(sRGB.slice(0,4)!=='rgb(' || sRGB.slice(-1)!==')') return sRGB;\n    var tmp = (sRGB.split('(')[1]).split(')')[0];\n    var colors = tmp.split(',');\n    if (colors.length != 3) return sRGB;\n    var re = \"#\";\n    for (var i = 0; i < colors.length; i++) {\n        var value =  parseInt(colors[i].substring(colors[i].lastIndexOf(' ')));\n        if (value < 0 || value > 255) return sRGB;\n        re += (\"0\" + (value).toString(16)).slice(-2);\n    }\n    return re;\n}\n```\n\n又使用了最水的办法。。。\n\n看一下大佬的正则的方法：\n\n```js\n//链接：https://www.nowcoder.com/questionTerminal/80b08802a833419f9c4ccc6e042c1cca\n//来源：牛客网\n\nfunction rgb2hex(sRGB) {\n   return sRGB.replace(/^rgb\\((\\d+)\\s*\\,\\s*(\\d+)\\s*\\,\\s*(\\d+)\\)$/g, function(a, r, g, b){\n       return '#' + hex(r) + hex(g) + hex(b);\n   });\n}\nfunction hex(n){\n    return n < 16 ? '0' + (+n).toString(16) : (+n).toString(16);\n}\n\n```\n\na代表正则匹配的整个字符串,  r ,g, b代表红绿蓝三个通道, 分别是正则中的三个括号匹配的字符串.  通常用的$0, $1, $2, $3。\n\n但是吧，可能是用例不全，这个方法并没有判断是不是超出0-255也能AC。。\n\n可以在hex函数里加个判断，如果规范才返回字符串，然后在replace里的那个函数里加个判断hex(r)、hex(g)、hex(b)是否为undefined，像这样：\n\n```js\nfunction rgb2hex(sRGB) {\n  return sRGB.replace(/^rgb\\((\\d+)\\s*\\,\\s*(\\d+)\\s*\\,\\s*(\\d+)\\)$/g, function(a, r, g, b){\n    if (hex(r) == undefined || hex(g) == undefined || hex(b) == undefined) return sRGB;\n    return '#' + hex(r) + hex(g) + hex(b);\n  });\n}\nfunction hex(n){\n  if (n > -1 && n < 256) {\n    return n < 16 ? '0' + (+n).toString(16) : (+n).toString(16);\n  }\n}\n```\n\n这样就可以啦！\n\n## 将字符串转换为驼峰模式\n\n> css 中经常有类似 background-image 这种通过 - 连接的字符，通过 javascript 设置样式的时候需要将这种样式转换成 backgroundImage 驼峰格式，请完成此转换功能\n> 1. 以 - 为分隔符，将第二个起的非空单词首字母转为大写\n> 2. -webkit-border-image 转换后的结果为 webkitBorderImage\n\n输入\n\n```\n'font-size'\n```\n\n输出\n\n```\nfontSize\n```\n\n代码\n\n```js\nfunction cssStyle2DomStyle(sName) {\n    if (sName[0] == \"-\") sName = sName.slice(1);\n    var words = sName.split('-');\n    var re = words[0];\n    for (var i = 1; i < words.length; i++) {\n        re = re + words[i][0].toUpperCase() + words[i].slice(1);\n    }\n    return re;\n}\n```\n\n大神的代码：\n\n```js\n// 链接：https://www.nowcoder.com/questionTerminal/2ded24e34ec34325a62d42d0c8479bae\n// 来源：牛客网\n\nreturn sName.replace(/\\-[a-z]/g , function(a, b){\n \n    return b == 0 ? a.replace('-','') : a.replace('-','').toUpperCase();\n \n});\n```\n\n其中b是offset。\n\nreplace第二个参数函数的参数表：\n\n| 变量名       | 代表的值                                                     |\n| ------------ | ------------------------------------------------------------ |\n| match        | 匹配的子串。（对应于上述的$&。）                             |\n| `p1,p2, ...` | 假如replace()方法的第一个参数是一个[`RegExp`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp) 对象，则代表第n个括号匹配的字符串。（对应于上述的$1，$2等。） |\n| `offset`     | 匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串是“bc”，那么这个参数将是1） |\n| string       | 被匹配的原字符串。                                           |\n\n## 字符串字符统计\n\n> 统计字符串中每个字符的出现频率，返回一个 Object，key 为统计字符，value 为出现频率\n> 1. 不限制 key 的顺序\n> 2. 输入的字符串参数不会为空\n> 3. 忽略空白字符\n\n输入\n\n```\n'hello world'\n```\n\n输出\n\n```\n{h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1}\n```\n\n大神的代码：\n\n```js\nfunction count(str) {\n    var obj = {};\n    str.replace(/\\S/g,function(s){\n        !obj[s]?obj[s]=1:obj[s]++;\n    })\n    return obj;\n}\n```\n\n\\S匹配非空字符串，function(s)里的s代表匹配到的每一项。\n\n\n\n---\n\n哎总结一句就是我好菜。。对JS了解还是太少。。。","slug":"牛客网前端挑战编程题解","published":1,"updated":"2018-09-20T11:23:00.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b25004acrage2qelek4","content":"<p>OJ链接：<a href=\"https://www.nowcoder.com/ta/front-end\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/ta/front-end</a></p>\n<p>注意：在牛客不能用ES6的东西！</p>\n<h2 id=\"修改this指向\"><a href=\"#修改this指向\" class=\"headerlink\" title=\"修改this指向\"></a>修改this指向</h2><blockquote>\n<p> 封装函数 f，使 f 的 this 指向指定的对象</p>\n</blockquote>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindThis</span>(<span class=\"params\">f, oTarget</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 考虑浏览器兼容</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.bind) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f.bind(oTarget);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// apply()为立即执行函数，因此需要放在一个函数里，到需要使用的时候再立即执行</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// arguments不能省略，在执行f时可能会传入参数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> f.apply(oTarget, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取url参数\"><a href=\"#获取url参数\" class=\"headerlink\" title=\"获取url参数\"></a>获取url参数</h2><blockquote>\n<p>获取 url 中的参数</p>\n<ol>\n<li>指定参数名称，返回该参数的值 或者 空字符串</li>\n<li>不指定参数名称，返回全部的参数对象 或者 {}</li>\n<li>如果存在多个同名参数，则返回数组</li>\n</ol>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3]</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlParam</span>(<span class=\"params\">sUrl, sKey</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 先取?和#之间的字符串，然后按照&amp;分割</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> querys = ((sUrl.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]).split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>]).split(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; querys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = querys[i].split(<span class=\"string\">'='</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = querys[i].split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 如果result[key]未定义，则创建一个含有value的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result[key] == <span class=\"literal\">undefined</span>) result[key] = [value];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> result[key].push(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 不指定参数名称，返回全部的参数对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sKey == <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result[sKey] == <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result[sKey].length == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> result[sKey][<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> result[sKey];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有大神的正则的方法…直接贴出来吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 链接：https://www.nowcoder.com/questionTerminal/a3ded747e3884a3c86d09d88d1652e10</span></span><br><span class=\"line\"><span class=\"comment\">// 来源：牛客网</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlParam</span>(<span class=\"params\">sUrl, sKey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[?&amp;](\\w+)=(\\w+)/g</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(reg.exec(sUrl))</span><br><span class=\"line\">        obj[<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>] ? obj[<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>]=[].concat(obj[<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>],<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>) : obj[<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>]=<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sKey ? obj[sKey]||<span class=\"string\">\"\"</span> : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"dom节点查找\"><a href=\"#dom节点查找\" class=\"headerlink\" title=\"dom节点查找\"></a>dom节点查找</h2><blockquote>\n<p>查找两个节点的最近的一个共同父节点，可以包括节点自身</p>\n</blockquote>\n<p>输入描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oNode1 和 oNode2 在同一文档中，且不会为相同的节点</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">commonParentNode</span>(<span class=\"params\">oNode1, oNode2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;oNode1;oNode1 = oNode1.parentNode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oNode1.contains(oNode2)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oNode1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还是对DOM的相关属性啊什么的不了解。。红宝书刚看到DOM。。。要加油鸭</p>\n<h2 id=\"根据包名，在指定空间中创建对象\"><a href=\"#根据包名，在指定空间中创建对象\" class=\"headerlink\" title=\"根据包名，在指定空间中创建对象\"></a>根据包名，在指定空间中创建对象</h2><p>输入描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace(&#123;a: &#123;test: 1, b: 2&#125;&#125;, &apos;a.b.c.d&apos;)</span><br></pre></td></tr></table></figure>\n<p>输出描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;a: &#123;test: 1, b: &#123;c: &#123;d: &#123;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">namespace</span>(<span class=\"params\">oNamespace, sPackage</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmpPoint = oNamespace;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = sPackage.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmpPoint[keys[i]] == <span class=\"literal\">undefined</span>) tmpPoint[keys[i]] = &#123;&#125;;</span><br><span class=\"line\">        tmpPoint = tmpPoint[keys[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oNamespace;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>记住，对象名就像是指针一样。</p>\n<h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><blockquote>\n<p>为 Array 对象添加一个去除重复项的方法</p>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[false, true, undefined, null, NaN, 0, 1, &#123;&#125;, &#123;&#125;, &apos;a&apos;, &apos;a&apos;, NaN]</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[false, true, undefined, null, NaN, 0, 1, &#123;&#125;, &#123;&#125;, &apos;a&apos;]</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.uniq = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasNaN = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((hasNaN === <span class=\"literal\">false</span>) &amp;&amp; (<span class=\"keyword\">this</span>[i] != <span class=\"keyword\">this</span>[i])) &#123;</span><br><span class=\"line\">            hasNaN = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.indexOf(<span class=\"keyword\">this</span>[i]) &lt; i) <span class=\"keyword\">this</span>.splice(i--,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于NaN的问题调试了好几次。。</p>\n<p>使用<code>this.indexOf(this[i]) &lt; i</code>判断的时候，</p>\n<p>因为NaN和任何值都不相等，因此index是-1，因此在这里一定会被删掉，</p>\n<p>因此需要先判断是不是已经遇到过NaN了，遇到过的话再次遇到就直接删掉，没有遇到的话遇到时就把hasNaN设为true，然后continue来跳过splice。</p>\n<h2 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h2><blockquote>\n<p>用 JavaScript 实现斐波那契数列函数,返回第n个斐波那契数。 f(1) = 1, f(2) = 1 等</p>\n</blockquote>\n<p>emmmmm，不知道为什么会有斐波那契这种题。。。。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暴力递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-1</span>) + fibonacci(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 本来想用callee，结果严格模式不让用。。。红宝书一直说callee多么多么好。。。搞得我不用好难受</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">1</span>, c = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        c = a + b;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">        b = c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"时间格式化输出\"><a href=\"#时间格式化输出\" class=\"headerlink\" title=\"时间格式化输出\"></a>时间格式化输出</h2><blockquote>\n<p>按所给的时间格式输出指定的时间<br>格式说明<br>对于 2014.09.05 13:14:20<br>yyyy: 年份，2014<br>yy: 年份，14<br>MM: 月份，补满两位，09<br>M: 月份, 9<br>dd: 日期，补满两位，05<br>d: 日期, 5<br>HH: 24制小时，补满两位，13<br>H: 24制小时，13<br>hh: 12制小时，补满两位，01<br>h: 12制小时，1<br>mm: 分钟，补满两位，14<br>m: 分钟，14<br>ss: 秒，补满两位，20<br>s: 秒，20<br>w: 星期，为 [‘日’, ‘一’, ‘二’, ‘三’, ‘四’, ‘五’, ‘六’] 中的某一个，本 demo 结果为 五</p>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formatDate(new Date(1409894060000), &apos;yyyy-MM-dd HH:mm:ss 星期w&apos;)</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2014-09-05 13:14:20 星期五</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatDate</span>(<span class=\"params\">date, format</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myDate = &#123;</span><br><span class=\"line\">        yyyy: date.getFullYear(),</span><br><span class=\"line\">        yy: date.getFullYear()%<span class=\"number\">100</span>,</span><br><span class=\"line\">        MM: (<span class=\"string\">\"0\"</span> + (date.getMonth()+<span class=\"number\">1</span>)).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        M: date.getMonth()+<span class=\"number\">1</span>,</span><br><span class=\"line\">        dd: (<span class=\"string\">\"0\"</span> + (date.getDate())).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        d: date.getDate(),</span><br><span class=\"line\">        HH: (<span class=\"string\">\"0\"</span> + date.getHours()).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        H: date.getHours(),</span><br><span class=\"line\">        hh: (<span class=\"string\">\"0\"</span> + (date.getHours() % <span class=\"number\">12</span>)).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        h: date.getHours() % <span class=\"number\">12</span>,</span><br><span class=\"line\">        mm: (<span class=\"string\">\"0\"</span> + date.getMinutes()).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        m: date.getMinutes(),</span><br><span class=\"line\">        ss: (<span class=\"string\">\"0\"</span> + date.getSeconds()).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        s: date.getSeconds(),</span><br><span class=\"line\">        w: [<span class=\"string\">'日'</span>, <span class=\"string\">'一'</span>, <span class=\"string\">'二'</span>, <span class=\"string\">'三'</span>, <span class=\"string\">'四'</span>, <span class=\"string\">'五'</span>, <span class=\"string\">'六'</span>][date.getDay()]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> format.replace(<span class=\"regexp\">/([a-z]+)/ig</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$<span class=\"number\">1</span></span>)</span>&#123;<span class=\"keyword\">return</span> myDate[$<span class=\"number\">1</span>];&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考了大神的代码。。。自己差点就十几个if了。。。</p>\n<p>关于代码说明几点：</p>\n<p><code>getFullYear()</code>为年份四位表示</p>\n<p><code>getMonth()</code>为月份0-11</p>\n<p><code>getDate()</code>为日期1-31</p>\n<p><code>getHours()</code>为小时0-23</p>\n<p><code>getMinutes()</code>为分钟0-59</p>\n<p><code>getSeconds()</code>为秒数0-59</p>\n<p><code>getDay()</code>为0-6表示[‘日’, ‘一’, ‘二’, ‘三’, ‘四’, ‘五’, ‘六’]</p>\n<p><code>RegExp.$1...RegExp.$9</code>表示用于存储第一、……第九个匹配的捕获组，至于什么是捕获组可以看下边这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">\"this has been a short summer\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/(..)or(.)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (pattern.exec(text)) &#123;</span><br><span class=\"line\">  alert(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>); <span class=\"comment\">// \"sh\"</span></span><br><span class=\"line\">  alert(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>); <span class=\"comment\">// \"t\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取字符串长度\"><a href=\"#获取字符串长度\" class=\"headerlink\" title=\"获取字符串长度\"></a>获取字符串长度</h2><blockquote>\n<p>如果第二个参数 bUnicode255For1 === true，则所有字符长度为 1<br>否则如果字符 Unicode 编码 &gt; 255 则长度为 2</p>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;hello world, 牛客&apos;, false</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strLength</span>(<span class=\"params\">s, bUnicode255For1</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bUnicode255For1 === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.charCodeAt(i) &gt; <span class=\"number\">255</span>) result+=<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> result+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚开始一直没看懂题。。。这道题应该有点问题，js默认utf-16编码，所以不是所有字符都长度为1，有的字符是长度为2的。。。忽略这个写这个题吧。。。</p>\n<h2 id=\"邮箱字符串判断\"><a href=\"#邮箱字符串判断\" class=\"headerlink\" title=\"邮箱字符串判断\"></a>邮箱字符串判断</h2><p>输入描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">邮箱字符串</span><br></pre></td></tr></table></figure>\n<p>输出描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">true表示格式正确</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAvailableEmail</span>(<span class=\"params\">sEmail</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^[\\w\\.]+@[\\w\\.]+\\.[\\w\\.]+$/i</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.test(sEmail);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><p>\\w 匹配字母或数字或下划线或汉字 等价于 ‘[^A-Za-z0-9_]’。</p>\n</li>\n<li><p>\\s 匹配任意的空白符</p>\n</li>\n<li><p>\\d 匹配数字</p>\n</li>\n<li><p>\\b 匹配单词的开始或结束</p>\n</li>\n<li><p>^ 匹配字符串的开始</p>\n</li>\n<li><p>$ 匹配字符串的结束</p>\n</li>\n<li><p>\\w能不能匹配汉字要视你的操作系统和你的应用环境而定</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"颜色字符串转换\"><a href=\"#颜色字符串转换\" class=\"headerlink\" title=\"颜色字符串转换\"></a>颜色字符串转换</h2><blockquote>\n<p>将 rgb 颜色字符串转换为十六进制的形式，如 rgb(255, 255, 255) 转为 #ffffff</p>\n<ol>\n<li>rgb 中每个 , 后面的空格数量不固定</li>\n<li>十六进制表达式使用六位小写字母</li>\n<li>如果输入不符合 rgb 格式，返回原始输入</li>\n</ol>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;rgb(255, 255, 255)&apos;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ffffff</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rgb2hex</span>(<span class=\"params\">sRGB</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sRGB.slice(<span class=\"number\">0</span>,<span class=\"number\">4</span>)!==<span class=\"string\">'rgb('</span> || sRGB.slice(<span class=\"number\">-1</span>)!==<span class=\"string\">')'</span>) <span class=\"keyword\">return</span> sRGB;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = (sRGB.split(<span class=\"string\">'('</span>)[<span class=\"number\">1</span>]).split(<span class=\"string\">')'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> colors = tmp.split(<span class=\"string\">','</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (colors.length != <span class=\"number\">3</span>) <span class=\"keyword\">return</span> sRGB;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> re = <span class=\"string\">\"#\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; colors.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value =  <span class=\"built_in\">parseInt</span>(colors[i].substring(colors[i].lastIndexOf(<span class=\"string\">' '</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span> || value &gt; <span class=\"number\">255</span>) <span class=\"keyword\">return</span> sRGB;</span><br><span class=\"line\">        re += (<span class=\"string\">\"0\"</span> + (value).toString(<span class=\"number\">16</span>)).slice(<span class=\"number\">-2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>又使用了最水的办法。。。</p>\n<p>看一下大佬的正则的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//链接：https://www.nowcoder.com/questionTerminal/80b08802a833419f9c4ccc6e042c1cca</span></span><br><span class=\"line\"><span class=\"comment\">//来源：牛客网</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rgb2hex</span>(<span class=\"params\">sRGB</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> sRGB.replace(<span class=\"regexp\">/^rgb\\((\\d+)\\s*\\,\\s*(\\d+)\\s*\\,\\s*(\\d+)\\)$/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, r, g, b</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">'#'</span> + hex(r) + hex(g) + hex(b);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hex</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &lt; <span class=\"number\">16</span> ? <span class=\"string\">'0'</span> + (+n).toString(<span class=\"number\">16</span>) : (+n).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>a代表正则匹配的整个字符串,  r ,g, b代表红绿蓝三个通道, 分别是正则中的三个括号匹配的字符串.  通常用的$0, $1, $2, $3。</p>\n<p>但是吧，可能是用例不全，这个方法并没有判断是不是超出0-255也能AC。。</p>\n<p>可以在hex函数里加个判断，如果规范才返回字符串，然后在replace里的那个函数里加个判断hex(r)、hex(g)、hex(b)是否为undefined，像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rgb2hex</span>(<span class=\"params\">sRGB</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sRGB.replace(<span class=\"regexp\">/^rgb\\((\\d+)\\s*\\,\\s*(\\d+)\\s*\\,\\s*(\\d+)\\)$/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, r, g, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hex(r) == <span class=\"literal\">undefined</span> || hex(g) == <span class=\"literal\">undefined</span> || hex(b) == <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> sRGB;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'#'</span> + hex(r) + hex(g) + hex(b);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hex</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">-1</span> &amp;&amp; n &lt; <span class=\"number\">256</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &lt; <span class=\"number\">16</span> ? <span class=\"string\">'0'</span> + (+n).toString(<span class=\"number\">16</span>) : (+n).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可以啦！</p>\n<h2 id=\"将字符串转换为驼峰模式\"><a href=\"#将字符串转换为驼峰模式\" class=\"headerlink\" title=\"将字符串转换为驼峰模式\"></a>将字符串转换为驼峰模式</h2><blockquote>\n<p>css 中经常有类似 background-image 这种通过 - 连接的字符，通过 javascript 设置样式的时候需要将这种样式转换成 backgroundImage 驼峰格式，请完成此转换功能</p>\n<ol>\n<li>以 - 为分隔符，将第二个起的非空单词首字母转为大写</li>\n<li>-webkit-border-image 转换后的结果为 webkitBorderImage</li>\n</ol>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;font-size&apos;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fontSize</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cssStyle2DomStyle</span>(<span class=\"params\">sName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sName[<span class=\"number\">0</span>] == <span class=\"string\">\"-\"</span>) sName = sName.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> words = sName.split(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> re = words[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">        re = re + words[i][<span class=\"number\">0</span>].toUpperCase() + words[i].slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大神的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 链接：https://www.nowcoder.com/questionTerminal/2ded24e34ec34325a62d42d0c8479bae</span></span><br><span class=\"line\"><span class=\"comment\">// 来源：牛客网</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> sName.replace(<span class=\"regexp\">/\\-[a-z]/g</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> b == <span class=\"number\">0</span> ? a.replace(<span class=\"string\">'-'</span>,<span class=\"string\">''</span>) : a.replace(<span class=\"string\">'-'</span>,<span class=\"string\">''</span>).toUpperCase();</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其中b是offset。</p>\n<p>replace第二个参数函数的参数表：</p>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>代表的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>match</td>\n<td>匹配的子串。（对应于上述的$&amp;。）</td>\n</tr>\n<tr>\n<td><code>p1,p2, ...</code></td>\n<td>假如replace()方法的第一个参数是一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp\" target=\"_blank\" rel=\"noopener\"><code>RegExp</code></a> 对象，则代表第n个括号匹配的字符串。（对应于上述的$1，$2等。）</td>\n</tr>\n<tr>\n<td><code>offset</code></td>\n<td>匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串是“bc”，那么这个参数将是1）</td>\n</tr>\n<tr>\n<td>string</td>\n<td>被匹配的原字符串。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字符串字符统计\"><a href=\"#字符串字符统计\" class=\"headerlink\" title=\"字符串字符统计\"></a>字符串字符统计</h2><blockquote>\n<p>统计字符串中每个字符的出现频率，返回一个 Object，key 为统计字符，value 为出现频率</p>\n<ol>\n<li>不限制 key 的顺序</li>\n<li>输入的字符串参数不会为空</li>\n<li>忽略空白字符</li>\n</ol>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;hello world&apos;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1&#125;</span><br></pre></td></tr></table></figure>\n<p>大神的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">    str.replace(<span class=\"regexp\">/\\S/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">        !obj[s]?obj[s]=<span class=\"number\">1</span>:obj[s]++;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\\S匹配非空字符串，function(s)里的s代表匹配到的每一项。</p>\n<hr>\n<p>哎总结一句就是我好菜。。对JS了解还是太少。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>OJ链接：<a href=\"https://www.nowcoder.com/ta/front-end\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/ta/front-end</a></p>\n<p>注意：在牛客不能用ES6的东西！</p>\n<h2 id=\"修改this指向\"><a href=\"#修改this指向\" class=\"headerlink\" title=\"修改this指向\"></a>修改this指向</h2><blockquote>\n<p> 封装函数 f，使 f 的 this 指向指定的对象</p>\n</blockquote>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindThis</span>(<span class=\"params\">f, oTarget</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 考虑浏览器兼容</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.bind) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f.bind(oTarget);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// apply()为立即执行函数，因此需要放在一个函数里，到需要使用的时候再立即执行</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// arguments不能省略，在执行f时可能会传入参数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> f.apply(oTarget, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取url参数\"><a href=\"#获取url参数\" class=\"headerlink\" title=\"获取url参数\"></a>获取url参数</h2><blockquote>\n<p>获取 url 中的参数</p>\n<ol>\n<li>指定参数名称，返回该参数的值 或者 空字符串</li>\n<li>不指定参数名称，返回全部的参数对象 或者 {}</li>\n<li>如果存在多个同名参数，则返回数组</li>\n</ol>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3]</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlParam</span>(<span class=\"params\">sUrl, sKey</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 先取?和#之间的字符串，然后按照&amp;分割</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> querys = ((sUrl.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]).split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>]).split(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; querys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = querys[i].split(<span class=\"string\">'='</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = querys[i].split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 如果result[key]未定义，则创建一个含有value的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result[key] == <span class=\"literal\">undefined</span>) result[key] = [value];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> result[key].push(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 不指定参数名称，返回全部的参数对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sKey == <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result[sKey] == <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result[sKey].length == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> result[sKey][<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> result[sKey];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有大神的正则的方法…直接贴出来吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 链接：https://www.nowcoder.com/questionTerminal/a3ded747e3884a3c86d09d88d1652e10</span></span><br><span class=\"line\"><span class=\"comment\">// 来源：牛客网</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlParam</span>(<span class=\"params\">sUrl, sKey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[?&amp;](\\w+)=(\\w+)/g</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(reg.exec(sUrl))</span><br><span class=\"line\">        obj[<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>] ? obj[<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>]=[].concat(obj[<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>],<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>) : obj[<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>]=<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sKey ? obj[sKey]||<span class=\"string\">\"\"</span> : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"dom节点查找\"><a href=\"#dom节点查找\" class=\"headerlink\" title=\"dom节点查找\"></a>dom节点查找</h2><blockquote>\n<p>查找两个节点的最近的一个共同父节点，可以包括节点自身</p>\n</blockquote>\n<p>输入描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oNode1 和 oNode2 在同一文档中，且不会为相同的节点</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">commonParentNode</span>(<span class=\"params\">oNode1, oNode2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;oNode1;oNode1 = oNode1.parentNode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oNode1.contains(oNode2)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oNode1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还是对DOM的相关属性啊什么的不了解。。红宝书刚看到DOM。。。要加油鸭</p>\n<h2 id=\"根据包名，在指定空间中创建对象\"><a href=\"#根据包名，在指定空间中创建对象\" class=\"headerlink\" title=\"根据包名，在指定空间中创建对象\"></a>根据包名，在指定空间中创建对象</h2><p>输入描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace(&#123;a: &#123;test: 1, b: 2&#125;&#125;, &apos;a.b.c.d&apos;)</span><br></pre></td></tr></table></figure>\n<p>输出描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;a: &#123;test: 1, b: &#123;c: &#123;d: &#123;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">namespace</span>(<span class=\"params\">oNamespace, sPackage</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmpPoint = oNamespace;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = sPackage.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmpPoint[keys[i]] == <span class=\"literal\">undefined</span>) tmpPoint[keys[i]] = &#123;&#125;;</span><br><span class=\"line\">        tmpPoint = tmpPoint[keys[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oNamespace;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>记住，对象名就像是指针一样。</p>\n<h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><blockquote>\n<p>为 Array 对象添加一个去除重复项的方法</p>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[false, true, undefined, null, NaN, 0, 1, &#123;&#125;, &#123;&#125;, &apos;a&apos;, &apos;a&apos;, NaN]</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[false, true, undefined, null, NaN, 0, 1, &#123;&#125;, &#123;&#125;, &apos;a&apos;]</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.uniq = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasNaN = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((hasNaN === <span class=\"literal\">false</span>) &amp;&amp; (<span class=\"keyword\">this</span>[i] != <span class=\"keyword\">this</span>[i])) &#123;</span><br><span class=\"line\">            hasNaN = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.indexOf(<span class=\"keyword\">this</span>[i]) &lt; i) <span class=\"keyword\">this</span>.splice(i--,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于NaN的问题调试了好几次。。</p>\n<p>使用<code>this.indexOf(this[i]) &lt; i</code>判断的时候，</p>\n<p>因为NaN和任何值都不相等，因此index是-1，因此在这里一定会被删掉，</p>\n<p>因此需要先判断是不是已经遇到过NaN了，遇到过的话再次遇到就直接删掉，没有遇到的话遇到时就把hasNaN设为true，然后continue来跳过splice。</p>\n<h2 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h2><blockquote>\n<p>用 JavaScript 实现斐波那契数列函数,返回第n个斐波那契数。 f(1) = 1, f(2) = 1 等</p>\n</blockquote>\n<p>emmmmm，不知道为什么会有斐波那契这种题。。。。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暴力递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-1</span>) + fibonacci(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 本来想用callee，结果严格模式不让用。。。红宝书一直说callee多么多么好。。。搞得我不用好难受</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">1</span>, c = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        c = a + b;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">        b = c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"时间格式化输出\"><a href=\"#时间格式化输出\" class=\"headerlink\" title=\"时间格式化输出\"></a>时间格式化输出</h2><blockquote>\n<p>按所给的时间格式输出指定的时间<br>格式说明<br>对于 2014.09.05 13:14:20<br>yyyy: 年份，2014<br>yy: 年份，14<br>MM: 月份，补满两位，09<br>M: 月份, 9<br>dd: 日期，补满两位，05<br>d: 日期, 5<br>HH: 24制小时，补满两位，13<br>H: 24制小时，13<br>hh: 12制小时，补满两位，01<br>h: 12制小时，1<br>mm: 分钟，补满两位，14<br>m: 分钟，14<br>ss: 秒，补满两位，20<br>s: 秒，20<br>w: 星期，为 [‘日’, ‘一’, ‘二’, ‘三’, ‘四’, ‘五’, ‘六’] 中的某一个，本 demo 结果为 五</p>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formatDate(new Date(1409894060000), &apos;yyyy-MM-dd HH:mm:ss 星期w&apos;)</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2014-09-05 13:14:20 星期五</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatDate</span>(<span class=\"params\">date, format</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myDate = &#123;</span><br><span class=\"line\">        yyyy: date.getFullYear(),</span><br><span class=\"line\">        yy: date.getFullYear()%<span class=\"number\">100</span>,</span><br><span class=\"line\">        MM: (<span class=\"string\">\"0\"</span> + (date.getMonth()+<span class=\"number\">1</span>)).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        M: date.getMonth()+<span class=\"number\">1</span>,</span><br><span class=\"line\">        dd: (<span class=\"string\">\"0\"</span> + (date.getDate())).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        d: date.getDate(),</span><br><span class=\"line\">        HH: (<span class=\"string\">\"0\"</span> + date.getHours()).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        H: date.getHours(),</span><br><span class=\"line\">        hh: (<span class=\"string\">\"0\"</span> + (date.getHours() % <span class=\"number\">12</span>)).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        h: date.getHours() % <span class=\"number\">12</span>,</span><br><span class=\"line\">        mm: (<span class=\"string\">\"0\"</span> + date.getMinutes()).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        m: date.getMinutes(),</span><br><span class=\"line\">        ss: (<span class=\"string\">\"0\"</span> + date.getSeconds()).slice(<span class=\"number\">-2</span>),</span><br><span class=\"line\">        s: date.getSeconds(),</span><br><span class=\"line\">        w: [<span class=\"string\">'日'</span>, <span class=\"string\">'一'</span>, <span class=\"string\">'二'</span>, <span class=\"string\">'三'</span>, <span class=\"string\">'四'</span>, <span class=\"string\">'五'</span>, <span class=\"string\">'六'</span>][date.getDay()]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> format.replace(<span class=\"regexp\">/([a-z]+)/ig</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$<span class=\"number\">1</span></span>)</span>&#123;<span class=\"keyword\">return</span> myDate[$<span class=\"number\">1</span>];&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考了大神的代码。。。自己差点就十几个if了。。。</p>\n<p>关于代码说明几点：</p>\n<p><code>getFullYear()</code>为年份四位表示</p>\n<p><code>getMonth()</code>为月份0-11</p>\n<p><code>getDate()</code>为日期1-31</p>\n<p><code>getHours()</code>为小时0-23</p>\n<p><code>getMinutes()</code>为分钟0-59</p>\n<p><code>getSeconds()</code>为秒数0-59</p>\n<p><code>getDay()</code>为0-6表示[‘日’, ‘一’, ‘二’, ‘三’, ‘四’, ‘五’, ‘六’]</p>\n<p><code>RegExp.$1...RegExp.$9</code>表示用于存储第一、……第九个匹配的捕获组，至于什么是捕获组可以看下边这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">\"this has been a short summer\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/(..)or(.)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (pattern.exec(text)) &#123;</span><br><span class=\"line\">  alert(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>); <span class=\"comment\">// \"sh\"</span></span><br><span class=\"line\">  alert(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>); <span class=\"comment\">// \"t\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取字符串长度\"><a href=\"#获取字符串长度\" class=\"headerlink\" title=\"获取字符串长度\"></a>获取字符串长度</h2><blockquote>\n<p>如果第二个参数 bUnicode255For1 === true，则所有字符长度为 1<br>否则如果字符 Unicode 编码 &gt; 255 则长度为 2</p>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;hello world, 牛客&apos;, false</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strLength</span>(<span class=\"params\">s, bUnicode255For1</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bUnicode255For1 === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.length;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.charCodeAt(i) &gt; <span class=\"number\">255</span>) result+=<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> result+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚开始一直没看懂题。。。这道题应该有点问题，js默认utf-16编码，所以不是所有字符都长度为1，有的字符是长度为2的。。。忽略这个写这个题吧。。。</p>\n<h2 id=\"邮箱字符串判断\"><a href=\"#邮箱字符串判断\" class=\"headerlink\" title=\"邮箱字符串判断\"></a>邮箱字符串判断</h2><p>输入描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">邮箱字符串</span><br></pre></td></tr></table></figure>\n<p>输出描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">true表示格式正确</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAvailableEmail</span>(<span class=\"params\">sEmail</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^[\\w\\.]+@[\\w\\.]+\\.[\\w\\.]+$/i</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.test(sEmail);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><p>\\w 匹配字母或数字或下划线或汉字 等价于 ‘[^A-Za-z0-9_]’。</p>\n</li>\n<li><p>\\s 匹配任意的空白符</p>\n</li>\n<li><p>\\d 匹配数字</p>\n</li>\n<li><p>\\b 匹配单词的开始或结束</p>\n</li>\n<li><p>^ 匹配字符串的开始</p>\n</li>\n<li><p>$ 匹配字符串的结束</p>\n</li>\n<li><p>\\w能不能匹配汉字要视你的操作系统和你的应用环境而定</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"颜色字符串转换\"><a href=\"#颜色字符串转换\" class=\"headerlink\" title=\"颜色字符串转换\"></a>颜色字符串转换</h2><blockquote>\n<p>将 rgb 颜色字符串转换为十六进制的形式，如 rgb(255, 255, 255) 转为 #ffffff</p>\n<ol>\n<li>rgb 中每个 , 后面的空格数量不固定</li>\n<li>十六进制表达式使用六位小写字母</li>\n<li>如果输入不符合 rgb 格式，返回原始输入</li>\n</ol>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;rgb(255, 255, 255)&apos;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ffffff</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rgb2hex</span>(<span class=\"params\">sRGB</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sRGB.slice(<span class=\"number\">0</span>,<span class=\"number\">4</span>)!==<span class=\"string\">'rgb('</span> || sRGB.slice(<span class=\"number\">-1</span>)!==<span class=\"string\">')'</span>) <span class=\"keyword\">return</span> sRGB;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = (sRGB.split(<span class=\"string\">'('</span>)[<span class=\"number\">1</span>]).split(<span class=\"string\">')'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> colors = tmp.split(<span class=\"string\">','</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (colors.length != <span class=\"number\">3</span>) <span class=\"keyword\">return</span> sRGB;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> re = <span class=\"string\">\"#\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; colors.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value =  <span class=\"built_in\">parseInt</span>(colors[i].substring(colors[i].lastIndexOf(<span class=\"string\">' '</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span> || value &gt; <span class=\"number\">255</span>) <span class=\"keyword\">return</span> sRGB;</span><br><span class=\"line\">        re += (<span class=\"string\">\"0\"</span> + (value).toString(<span class=\"number\">16</span>)).slice(<span class=\"number\">-2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>又使用了最水的办法。。。</p>\n<p>看一下大佬的正则的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//链接：https://www.nowcoder.com/questionTerminal/80b08802a833419f9c4ccc6e042c1cca</span></span><br><span class=\"line\"><span class=\"comment\">//来源：牛客网</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rgb2hex</span>(<span class=\"params\">sRGB</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> sRGB.replace(<span class=\"regexp\">/^rgb\\((\\d+)\\s*\\,\\s*(\\d+)\\s*\\,\\s*(\\d+)\\)$/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, r, g, b</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">'#'</span> + hex(r) + hex(g) + hex(b);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hex</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &lt; <span class=\"number\">16</span> ? <span class=\"string\">'0'</span> + (+n).toString(<span class=\"number\">16</span>) : (+n).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>a代表正则匹配的整个字符串,  r ,g, b代表红绿蓝三个通道, 分别是正则中的三个括号匹配的字符串.  通常用的$0, $1, $2, $3。</p>\n<p>但是吧，可能是用例不全，这个方法并没有判断是不是超出0-255也能AC。。</p>\n<p>可以在hex函数里加个判断，如果规范才返回字符串，然后在replace里的那个函数里加个判断hex(r)、hex(g)、hex(b)是否为undefined，像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rgb2hex</span>(<span class=\"params\">sRGB</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sRGB.replace(<span class=\"regexp\">/^rgb\\((\\d+)\\s*\\,\\s*(\\d+)\\s*\\,\\s*(\\d+)\\)$/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, r, g, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hex(r) == <span class=\"literal\">undefined</span> || hex(g) == <span class=\"literal\">undefined</span> || hex(b) == <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> sRGB;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'#'</span> + hex(r) + hex(g) + hex(b);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hex</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">-1</span> &amp;&amp; n &lt; <span class=\"number\">256</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &lt; <span class=\"number\">16</span> ? <span class=\"string\">'0'</span> + (+n).toString(<span class=\"number\">16</span>) : (+n).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可以啦！</p>\n<h2 id=\"将字符串转换为驼峰模式\"><a href=\"#将字符串转换为驼峰模式\" class=\"headerlink\" title=\"将字符串转换为驼峰模式\"></a>将字符串转换为驼峰模式</h2><blockquote>\n<p>css 中经常有类似 background-image 这种通过 - 连接的字符，通过 javascript 设置样式的时候需要将这种样式转换成 backgroundImage 驼峰格式，请完成此转换功能</p>\n<ol>\n<li>以 - 为分隔符，将第二个起的非空单词首字母转为大写</li>\n<li>-webkit-border-image 转换后的结果为 webkitBorderImage</li>\n</ol>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;font-size&apos;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fontSize</span><br></pre></td></tr></table></figure>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cssStyle2DomStyle</span>(<span class=\"params\">sName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sName[<span class=\"number\">0</span>] == <span class=\"string\">\"-\"</span>) sName = sName.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> words = sName.split(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> re = words[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">        re = re + words[i][<span class=\"number\">0</span>].toUpperCase() + words[i].slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大神的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 链接：https://www.nowcoder.com/questionTerminal/2ded24e34ec34325a62d42d0c8479bae</span></span><br><span class=\"line\"><span class=\"comment\">// 来源：牛客网</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> sName.replace(<span class=\"regexp\">/\\-[a-z]/g</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> b == <span class=\"number\">0</span> ? a.replace(<span class=\"string\">'-'</span>,<span class=\"string\">''</span>) : a.replace(<span class=\"string\">'-'</span>,<span class=\"string\">''</span>).toUpperCase();</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其中b是offset。</p>\n<p>replace第二个参数函数的参数表：</p>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>代表的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>match</td>\n<td>匹配的子串。（对应于上述的$&amp;。）</td>\n</tr>\n<tr>\n<td><code>p1,p2, ...</code></td>\n<td>假如replace()方法的第一个参数是一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp\" target=\"_blank\" rel=\"noopener\"><code>RegExp</code></a> 对象，则代表第n个括号匹配的字符串。（对应于上述的$1，$2等。）</td>\n</tr>\n<tr>\n<td><code>offset</code></td>\n<td>匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串是“bc”，那么这个参数将是1）</td>\n</tr>\n<tr>\n<td>string</td>\n<td>被匹配的原字符串。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字符串字符统计\"><a href=\"#字符串字符统计\" class=\"headerlink\" title=\"字符串字符统计\"></a>字符串字符统计</h2><blockquote>\n<p>统计字符串中每个字符的出现频率，返回一个 Object，key 为统计字符，value 为出现频率</p>\n<ol>\n<li>不限制 key 的顺序</li>\n<li>输入的字符串参数不会为空</li>\n<li>忽略空白字符</li>\n</ol>\n</blockquote>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;hello world&apos;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1&#125;</span><br></pre></td></tr></table></figure>\n<p>大神的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">    str.replace(<span class=\"regexp\">/\\S/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">        !obj[s]?obj[s]=<span class=\"number\">1</span>:obj[s]++;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\\S匹配非空字符串，function(s)里的s代表匹配到的每一项。</p>\n<hr>\n<p>哎总结一句就是我好菜。。对JS了解还是太少。。。</p>\n"},{"title":"ubuntu18.04中安装iNode","toc":false,"date":"2018-09-01T09:52:20.000Z","_content":"\n\n\n\n\n首先在学校官网下载32位版本的iNode包（64位一直无法安装成功因此选择安装32位版本的）。\n\n\n\n解压。\n\n\n\n安装各种依赖库（如果某个命令无法运行可以在安装目录下运行`./iNodeClient.sh`查看当前需要安装的依赖）：\n\n```powershell\nsudo apt-get install lib32ncurses5\nsudo apt-get install lib32z1\nsudo aptitude install libgtk-x11-2.0\nsudo apt-get install libgtk2.0-0:i386 libnss3:i386 libcurl3-gnutls:i386 libidn11:i386 libpango1.0-0:i386 libpangox-1.0-0:i386 libpangoxft-1.0-0:i386\nsudo apt-get install libgtk2.0-0:i386 libxxf86vm1:i386 libsm6:i386 lib32stdc++6\nsudo apt-get dist-upgrade\nsudo ln -s /usr/lib/i386-linux-gnu/libjpeg.so.8 /usr/lib/i386-linux-gnu/libjpeg.so.62\nsudo ln -s /usr/lib/i386-linux-gnu/libtiff.so.5 /usr/lib/i386-linux-gnu/libtiff.so.3\nsudo apt-get install murrine-themes\nsudo apt-get install gtk2-engines-murrine\nsudo apt-get install libgtkmm-2.4-dev\nsudo apt-get install libcanberra-gtk-module:i386\n```\n\n\n\n在解压后的目录中运行：\n\n```powershell\nsudo ./install.sh\n```\n\n\n\n这个时候`iNodeClient.destop`就可以点击运行了。\n\n\n\n添加用户名和密码后将`NIC`修改为`enp7s0`即可成功连接。\n\n\n\n[参考链接](https://blog.csdn.net/a845717607/article/details/52563005)","source":"_posts/ubuntu18-04中安装iNode.md","raw":"---\ntitle: ubuntu18.04中安装iNode\ntoc: false\ndate: 2018-09-01 17:52:20\ncategories:\n- methods\ntags:\n- ubuntu\n- iNode\n---\n\n\n\n\n\n首先在学校官网下载32位版本的iNode包（64位一直无法安装成功因此选择安装32位版本的）。\n\n\n\n解压。\n\n\n\n安装各种依赖库（如果某个命令无法运行可以在安装目录下运行`./iNodeClient.sh`查看当前需要安装的依赖）：\n\n```powershell\nsudo apt-get install lib32ncurses5\nsudo apt-get install lib32z1\nsudo aptitude install libgtk-x11-2.0\nsudo apt-get install libgtk2.0-0:i386 libnss3:i386 libcurl3-gnutls:i386 libidn11:i386 libpango1.0-0:i386 libpangox-1.0-0:i386 libpangoxft-1.0-0:i386\nsudo apt-get install libgtk2.0-0:i386 libxxf86vm1:i386 libsm6:i386 lib32stdc++6\nsudo apt-get dist-upgrade\nsudo ln -s /usr/lib/i386-linux-gnu/libjpeg.so.8 /usr/lib/i386-linux-gnu/libjpeg.so.62\nsudo ln -s /usr/lib/i386-linux-gnu/libtiff.so.5 /usr/lib/i386-linux-gnu/libtiff.so.3\nsudo apt-get install murrine-themes\nsudo apt-get install gtk2-engines-murrine\nsudo apt-get install libgtkmm-2.4-dev\nsudo apt-get install libcanberra-gtk-module:i386\n```\n\n\n\n在解压后的目录中运行：\n\n```powershell\nsudo ./install.sh\n```\n\n\n\n这个时候`iNodeClient.destop`就可以点击运行了。\n\n\n\n添加用户名和密码后将`NIC`修改为`enp7s0`即可成功连接。\n\n\n\n[参考链接](https://blog.csdn.net/a845717607/article/details/52563005)","slug":"ubuntu18-04中安装iNode","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b3e007gcragk91svab7","content":"<p>首先在学校官网下载32位版本的iNode包（64位一直无法安装成功因此选择安装32位版本的）。</p>\n<p>解压。</p>\n<p>安装各种依赖库（如果某个命令无法运行可以在安装目录下运行<code>./iNodeClient.sh</code>查看当前需要安装的依赖）：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lib32ncurses5</span><br><span class=\"line\">sudo apt-get install lib32z1</span><br><span class=\"line\">sudo aptitude install libgtk-x11-<span class=\"number\">2.0</span></span><br><span class=\"line\">sudo apt-get install libgtk2.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libnss3:i386 libcurl3-gnutls:i386 libidn11:i386 libpango1.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libpangox-<span class=\"number\">1.0</span>-<span class=\"number\">0</span>:i386 libpangoxft-<span class=\"number\">1.0</span>-<span class=\"number\">0</span>:i386</span><br><span class=\"line\">sudo apt-get install libgtk2.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libxxf86vm1:i386 libsm6:i386 lib32stdc++<span class=\"number\">6</span></span><br><span class=\"line\">sudo apt-get dist-upgrade</span><br><span class=\"line\">sudo ln -s /usr/lib/i386-linux-gnu/libjpeg.so.<span class=\"number\">8</span> /usr/lib/i386-linux-gnu/libjpeg.so.<span class=\"number\">62</span></span><br><span class=\"line\">sudo ln -s /usr/lib/i386-linux-gnu/libtiff.so.<span class=\"number\">5</span> /usr/lib/i386-linux-gnu/libtiff.so.<span class=\"number\">3</span></span><br><span class=\"line\">sudo apt-get install murrine-themes</span><br><span class=\"line\">sudo apt-get install gtk2-engines-murrine</span><br><span class=\"line\">sudo apt-get install libgtkmm-<span class=\"number\">2.4</span>-dev</span><br><span class=\"line\">sudo apt-get install libcanberra-gtk-module:i386</span><br></pre></td></tr></table></figure>\n<p>在解压后的目录中运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./install.sh</span><br></pre></td></tr></table></figure>\n<p>这个时候<code>iNodeClient.destop</code>就可以点击运行了。</p>\n<p>添加用户名和密码后将<code>NIC</code>修改为<code>enp7s0</code>即可成功连接。</p>\n<p><a href=\"https://blog.csdn.net/a845717607/article/details/52563005\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先在学校官网下载32位版本的iNode包（64位一直无法安装成功因此选择安装32位版本的）。</p>\n<p>解压。</p>\n<p>安装各种依赖库（如果某个命令无法运行可以在安装目录下运行<code>./iNodeClient.sh</code>查看当前需要安装的依赖）：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lib32ncurses5</span><br><span class=\"line\">sudo apt-get install lib32z1</span><br><span class=\"line\">sudo aptitude install libgtk-x11-<span class=\"number\">2.0</span></span><br><span class=\"line\">sudo apt-get install libgtk2.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libnss3:i386 libcurl3-gnutls:i386 libidn11:i386 libpango1.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libpangox-<span class=\"number\">1.0</span>-<span class=\"number\">0</span>:i386 libpangoxft-<span class=\"number\">1.0</span>-<span class=\"number\">0</span>:i386</span><br><span class=\"line\">sudo apt-get install libgtk2.<span class=\"number\">0</span>-<span class=\"number\">0</span>:i386 libxxf86vm1:i386 libsm6:i386 lib32stdc++<span class=\"number\">6</span></span><br><span class=\"line\">sudo apt-get dist-upgrade</span><br><span class=\"line\">sudo ln -s /usr/lib/i386-linux-gnu/libjpeg.so.<span class=\"number\">8</span> /usr/lib/i386-linux-gnu/libjpeg.so.<span class=\"number\">62</span></span><br><span class=\"line\">sudo ln -s /usr/lib/i386-linux-gnu/libtiff.so.<span class=\"number\">5</span> /usr/lib/i386-linux-gnu/libtiff.so.<span class=\"number\">3</span></span><br><span class=\"line\">sudo apt-get install murrine-themes</span><br><span class=\"line\">sudo apt-get install gtk2-engines-murrine</span><br><span class=\"line\">sudo apt-get install libgtkmm-<span class=\"number\">2.4</span>-dev</span><br><span class=\"line\">sudo apt-get install libcanberra-gtk-module:i386</span><br></pre></td></tr></table></figure>\n<p>在解压后的目录中运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./install.sh</span><br></pre></td></tr></table></figure>\n<p>这个时候<code>iNodeClient.destop</code>就可以点击运行了。</p>\n<p>添加用户名和密码后将<code>NIC</code>修改为<code>enp7s0</code>即可成功连接。</p>\n<p><a href=\"https://blog.csdn.net/a845717607/article/details/52563005\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n"},{"title":"ubuntu下Chrome谷歌浏览器部分网站图片显示不正常的解决方法","toc":false,"date":"2018-09-02T06:37:26.000Z","_content":"\n\n\n由于Chrome设置了使用微软雅黑字体导致了部分图片显示不正常，\n\n在浏览器设置中将字体换回ubuntu刷新页面会发现图片已经显示正常。\n\n","source":"_posts/ubuntu下Chrome谷歌浏览器部分网站图片显示不正常的解决方法.md","raw":"---\ntitle: ubuntu下Chrome谷歌浏览器部分网站图片显示不正常的解决方法\ntoc: false\ndate: 2018-09-02 14:37:26\ncategories:\n- methods\ntags:\n- ubuntu\n- Chrome\n- 图片显示\n---\n\n\n\n由于Chrome设置了使用微软雅黑字体导致了部分图片显示不正常，\n\n在浏览器设置中将字体换回ubuntu刷新页面会发现图片已经显示正常。\n\n","slug":"ubuntu下Chrome谷歌浏览器部分网站图片显示不正常的解决方法","published":1,"updated":"2018-09-11T05:46:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgf4b3g007hcragwz0t0ven","content":"<p>由于Chrome设置了使用微软雅黑字体导致了部分图片显示不正常，</p>\n<p>在浏览器设置中将字体换回ubuntu刷新页面会发现图片已经显示正常。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于Chrome设置了使用微软雅黑字体导致了部分图片显示不正常，</p>\n<p>在浏览器设置中将字体换回ubuntu刷新页面会发现图片已经显示正常。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjmgf4ayq0001cragnyp23giv","category_id":"cjmgf4azj0004crag6m34pxdj","_id":"cjmgf4azz000ecrag8dtjerjk"},{"post_id":"cjmgf4azu000ccragvvxbro4e","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b05000kcrag6n1ixevf"},{"post_id":"cjmgf4azh0003craguyh3y8iq","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b08000pcragww2wd9ph"},{"post_id":"cjmgf4azx000dcrag3rdwsyno","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b0a000rcrag4ad4qil8"},{"post_id":"cjmgf4b02000hcragw6ho28kh","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b0c000vcragbqq6uran"},{"post_id":"cjmgf4azm0006cragc00wrhje","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b0e000ycrag6k3mnhum"},{"post_id":"cjmgf4azo0007cragckh5ox6r","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b0f0013cragcmuun5jc"},{"post_id":"cjmgf4azq0008cragacodgexf","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b0h0016cragtum1i7gg"},{"post_id":"cjmgf4b0d000xcrag4f9ahywl","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b0j001bcragn4lv3uet"},{"post_id":"cjmgf4b0f0012cragxa7impim","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b0l001ecragc9wqamjy"},{"post_id":"cjmgf4b04000jcragk3s0licl","category_id":"cjmgf4b0e000zcragoyq2wajr","_id":"cjmgf4b0m001icragh54rm0r3"},{"post_id":"cjmgf4b07000ocragfp7ck2dy","category_id":"cjmgf4b0e000zcragoyq2wajr","_id":"cjmgf4b0o001lcragywpybn46"},{"post_id":"cjmgf4b0k001dcragqtoa8k3k","category_id":"cjmgf4azj0004crag6m34pxdj","_id":"cjmgf4b0q001pcragky37s8qv"},{"post_id":"cjmgf4b09000qcragwzpc0fpl","category_id":"cjmgf4b0l001fcragc3mizjbi","_id":"cjmgf4b0r001rcragzhl63vio"},{"post_id":"cjmgf4b0n001kcrag2r0n43zp","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b0u001vcragi8zrd3cl"},{"post_id":"cjmgf4b0p001ncragu99op1ks","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b0x001ycragilucugtl"},{"post_id":"cjmgf4b0q001qcragcim0ytgm","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b0z0023cragx2v23j38"},{"post_id":"cjmgf4b0b000ucragzyu9mmw9","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b110026cragdmqsrkg9"},{"post_id":"cjmgf4b0r001scragx8s7x95v","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b130029cragrt9p5t2l"},{"post_id":"cjmgf4b0u001wcragc5jbeycg","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b14002ccragv4bzbu9i"},{"post_id":"cjmgf4b0g0015craggorp4l03","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b16002ecragfmw7nezm"},{"post_id":"cjmgf4b0x001zcrag9y5xq2wg","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b17002jcragbhf7bhbl"},{"post_id":"cjmgf4b0z0024cragpfrs01g0","category_id":"cjmgf4b0e000zcragoyq2wajr","_id":"cjmgf4b19002mcrag7e27wsyx"},{"post_id":"cjmgf4b0i0019crag1um93z3p","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b1b002pcragqftmzy8e"},{"post_id":"cjmgf4b110027cragkkdarumo","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b1d002rcragz42024s1"},{"post_id":"cjmgf4b13002bcragqqwpcs3n","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b1e002vcragvrtgkked"},{"post_id":"cjmgf4b0l001gcragvq6b8aml","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b1g002ycragf3w2vau2"},{"post_id":"cjmgf4b16002gcragvlrvvwx3","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b1i0032craghhzjw1h0"},{"post_id":"cjmgf4b17002kcragiv5jbgxb","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b1j0035cragv4lt3miz"},{"post_id":"cjmgf4b19002ncrag3v2fwmxa","category_id":"cjmgf4b17002icragdzg4x1di","_id":"cjmgf4b1k0037cragw1ealy00"},{"post_id":"cjmgf4b14002dcrag5upeut3f","category_id":"cjmgf4b17002icragdzg4x1di","_id":"cjmgf4b1m003bcrag923s2r7p"},{"post_id":"cjmgf4b1b002qcragantht8x3","category_id":"cjmgf4b0e000zcragoyq2wajr","_id":"cjmgf4b1n003dcragne3fqaco"},{"post_id":"cjmgf4b1d002scragbclpqmzl","category_id":"cjmgf4b0e000zcragoyq2wajr","_id":"cjmgf4b1p003gcrag13c3rcqy"},{"post_id":"cjmgf4b1f002wcragnpned0ur","category_id":"cjmgf4b0l001fcragc3mizjbi","_id":"cjmgf4b1r003kcragjklufhqx"},{"post_id":"cjmgf4b1g002zcragc7iv4fgk","category_id":"cjmgf4b0e000zcragoyq2wajr","_id":"cjmgf4b1t003ncrag5yt2anuk"},{"post_id":"cjmgf4b1i0033cragflbf0hyu","category_id":"cjmgf4b0e000zcragoyq2wajr","_id":"cjmgf4b1v003pcragr3x727pc"},{"post_id":"cjmgf4b1j0036crag4prs3vv0","category_id":"cjmgf4b0e000zcragoyq2wajr","_id":"cjmgf4b1x003tcraguiskito9"},{"post_id":"cjmgf4b1l0039cragzmglmemy","category_id":"cjmgf4b0e000zcragoyq2wajr","_id":"cjmgf4b1y003wcrag8gpkwy1g"},{"post_id":"cjmgf4b1m003ccrag5p2afs4o","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b200041cragsrxbi11g"},{"post_id":"cjmgf4b1u003ocragzhut38r9","category_id":"cjmgf4b1r003jcrag30mbdhfl","_id":"cjmgf4b210044crag0gis2fed"},{"post_id":"cjmgf4b1n003ecragwbq4x3ih","category_id":"cjmgf4b1r003jcrag30mbdhfl","_id":"cjmgf4b230047crag86qi872u"},{"post_id":"cjmgf4b1v003qcragaaiolzbg","category_id":"cjmgf4b1r003jcrag30mbdhfl","_id":"cjmgf4b240049crag82atwbk4"},{"post_id":"cjmgf4b1x003ucraglmwfgkvy","category_id":"cjmgf4b1r003jcrag30mbdhfl","_id":"cjmgf4b26004bcrag6fk3k1ek"},{"post_id":"cjmgf4b1p003icragkvtcane2","category_id":"cjmgf4b1r003jcrag30mbdhfl","_id":"cjmgf4b27004ecragwi2yl4kp"},{"post_id":"cjmgf4b1y003xcragfppjk4nq","category_id":"cjmgf4b1r003jcrag30mbdhfl","_id":"cjmgf4b27004gcragj1kw11we"},{"post_id":"cjmgf4b200042crag1babcrur","category_id":"cjmgf4b1r003jcrag30mbdhfl","_id":"cjmgf4b27004jcragwql6lrit"},{"post_id":"cjmgf4b1r003lcrag6s2c1jf3","category_id":"cjmgf4b1r003jcrag30mbdhfl","_id":"cjmgf4b27004kcragd4entely"},{"post_id":"cjmgf4b230048crago04m0b74","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b28004mcragdsrynnzx"},{"post_id":"cjmgf4b25004acrage2qelek4","category_id":"cjmgf4azs0009crag1lbvbl7n","_id":"cjmgf4b28004ocrag323bxdz0"},{"post_id":"cjmgf4b3e007gcragk91svab7","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b3i007lcragc0z8di68"},{"post_id":"cjmgf4b3g007hcragwz0t0ven","category_id":"cjmgf4b0o001mcragrii7vgjy","_id":"cjmgf4b3i007mcragbljjw00p"}],"PostTag":[{"post_id":"cjmgf4ayq0001cragnyp23giv","tag_id":"cjmgf4azl0005cragpk7vd67g","_id":"cjmgf4azu000bcrag764ipqdi"},{"post_id":"cjmgf4azh0003craguyh3y8iq","tag_id":"cjmgf4azs000acragej7cafxx","_id":"cjmgf4b03000icragspimoyq9"},{"post_id":"cjmgf4b02000hcragw6ho28kh","tag_id":"cjmgf4b00000gcragnc4m7bbn","_id":"cjmgf4b07000ncragy0ck4xe0"},{"post_id":"cjmgf4azm0006cragc00wrhje","tag_id":"cjmgf4b00000gcragnc4m7bbn","_id":"cjmgf4b0c000wcragxwfagkka"},{"post_id":"cjmgf4azm0006cragc00wrhje","tag_id":"cjmgf4b06000mcrageu75f5se","_id":"cjmgf4b0e0010cragoa6brpxv"},{"post_id":"cjmgf4azo0007cragckh5ox6r","tag_id":"cjmgf4b00000gcragnc4m7bbn","_id":"cjmgf4b0g0014cragv1bd0134"},{"post_id":"cjmgf4b0d000xcrag4f9ahywl","tag_id":"cjmgf4b00000gcragnc4m7bbn","_id":"cjmgf4b0h0018cragbztivsw2"},{"post_id":"cjmgf4azq0008cragacodgexf","tag_id":"cjmgf4b0e0011cragcbp0xmjy","_id":"cjmgf4b0k001ccragegbm6smj"},{"post_id":"cjmgf4azu000ccragvvxbro4e","tag_id":"cjmgf4b00000gcragnc4m7bbn","_id":"cjmgf4b0n001jcragxvnarq3s"},{"post_id":"cjmgf4azx000dcrag3rdwsyno","tag_id":"cjmgf4b0e0011cragcbp0xmjy","_id":"cjmgf4b0w001xcragyvu8271o"},{"post_id":"cjmgf4azx000dcrag3rdwsyno","tag_id":"cjmgf4b0p001ocrags9jtpe8j","_id":"cjmgf4b0y0021cragb64g56rz"},{"post_id":"cjmgf4b04000jcragk3s0licl","tag_id":"cjmgf4b0t001ucragw3i9wbyz","_id":"cjmgf4b100025cragt8ba1v14"},{"post_id":"cjmgf4b07000ocragfp7ck2dy","tag_id":"cjmgf4b0z0022crag88ymdzgy","_id":"cjmgf4b17002hcraglesw371c"},{"post_id":"cjmgf4b07000ocragfp7ck2dy","tag_id":"cjmgf4b0t001ucragw3i9wbyz","_id":"cjmgf4b19002lcraggrp4u9cb"},{"post_id":"cjmgf4b1b002qcragantht8x3","tag_id":"cjmgf4b0t001ucragw3i9wbyz","_id":"cjmgf4b1e002ucragoumrgv95"},{"post_id":"cjmgf4b09000qcragwzpc0fpl","tag_id":"cjmgf4b16002fcragou4bdivy","_id":"cjmgf4b1g002xcrag5sgxnni4"},{"post_id":"cjmgf4b09000qcragwzpc0fpl","tag_id":"cjmgf4b1a002ocragawp5lfkm","_id":"cjmgf4b1i0031crag0bmn463j"},{"post_id":"cjmgf4b0b000ucragzyu9mmw9","tag_id":"cjmgf4b1e002tcragfumywxdk","_id":"cjmgf4b1j0034crag8ccmaedb"},{"post_id":"cjmgf4b0f0012cragxa7impim","tag_id":"cjmgf4b1i0030crag3axogc1d","_id":"cjmgf4b1m003acragtwum58sa"},{"post_id":"cjmgf4b0g0015craggorp4l03","tag_id":"cjmgf4b1k0038cragdwlco9yt","_id":"cjmgf4b1p003hcrag5dxtgynv"},{"post_id":"cjmgf4b0i0019crag1um93z3p","tag_id":"cjmgf4b1k0038cragdwlco9yt","_id":"cjmgf4b1y003vcragve82a12x"},{"post_id":"cjmgf4b0i0019crag1um93z3p","tag_id":"cjmgf4b1t003mcrags5uawasq","_id":"cjmgf4b1z003zcragju41d42d"},{"post_id":"cjmgf4b0k001dcragqtoa8k3k","tag_id":"cjmgf4b1w003scrago0v95565","_id":"cjmgf4b210043crag9q0timn6"},{"post_id":"cjmgf4b0l001gcragvq6b8aml","tag_id":"cjmgf4b1e002tcragfumywxdk","_id":"cjmgf4b27004dcraguy6mksr1"},{"post_id":"cjmgf4b0l001gcragvq6b8aml","tag_id":"cjmgf4b230046cragby7jrvtl","_id":"cjmgf4b27004fcrag3t95w145"},{"post_id":"cjmgf4b25004acrage2qelek4","tag_id":"cjmgf4b00000gcragnc4m7bbn","_id":"cjmgf4b27004icrag80g3a3au"},{"post_id":"cjmgf4b0n001kcrag2r0n43zp","tag_id":"cjmgf4b26004ccragoyku1oo7","_id":"cjmgf4b28004ncrag7j81zoqv"},{"post_id":"cjmgf4b0n001kcrag2r0n43zp","tag_id":"cjmgf4b27004hcragj2wxxmxx","_id":"cjmgf4b28004pcrage2shniuh"},{"post_id":"cjmgf4b0p001ncragu99op1ks","tag_id":"cjmgf4b0e0011cragcbp0xmjy","_id":"cjmgf4b29004rcragcaop9ntd"},{"post_id":"cjmgf4b0p001ncragu99op1ks","tag_id":"cjmgf4b0p001ocrags9jtpe8j","_id":"cjmgf4b29004scraghds6aqoz"},{"post_id":"cjmgf4b0p001ncragu99op1ks","tag_id":"cjmgf4b00000gcragnc4m7bbn","_id":"cjmgf4b29004ucragkhopoqyp"},{"post_id":"cjmgf4b0q001qcragcim0ytgm","tag_id":"cjmgf4b1e002tcragfumywxdk","_id":"cjmgf4b2a004vcragqbkyt204"},{"post_id":"cjmgf4b0r001scragx8s7x95v","tag_id":"cjmgf4b1e002tcragfumywxdk","_id":"cjmgf4b2a004ycragcurwuf6p"},{"post_id":"cjmgf4b0r001scragx8s7x95v","tag_id":"cjmgf4b2a004wcragfww5ink7","_id":"cjmgf4b2a004zcrag0poxgymp"},{"post_id":"cjmgf4b0u001wcragc5jbeycg","tag_id":"cjmgf4b1e002tcragfumywxdk","_id":"cjmgf4b2b0052cragptwa7oru"},{"post_id":"cjmgf4b0u001wcragc5jbeycg","tag_id":"cjmgf4b2b0050cragxj3mqdjq","_id":"cjmgf4b2b0053cragd1mshfpo"},{"post_id":"cjmgf4b0x001zcrag9y5xq2wg","tag_id":"cjmgf4b1k0038cragdwlco9yt","_id":"cjmgf4b2c0056cragqe8pptea"},{"post_id":"cjmgf4b0x001zcrag9y5xq2wg","tag_id":"cjmgf4b2b0054cragoy6c68mp","_id":"cjmgf4b2c0057crag5k8ij5ns"},{"post_id":"cjmgf4b0z0024cragpfrs01g0","tag_id":"cjmgf4b0t001ucragw3i9wbyz","_id":"cjmgf4b2c0059cragw3c4ufee"},{"post_id":"cjmgf4b0z0024cragpfrs01g0","tag_id":"cjmgf4b2c0055cragf4a048im","_id":"cjmgf4b2d005acrag9t1mtbv3"},{"post_id":"cjmgf4b110027cragkkdarumo","tag_id":"cjmgf4b1k0038cragdwlco9yt","_id":"cjmgf4b2e005fcragnoyl41fh"},{"post_id":"cjmgf4b110027cragkkdarumo","tag_id":"cjmgf4b2d005bcragktrrg0ie","_id":"cjmgf4b2e005gcragtmhhd2w2"},{"post_id":"cjmgf4b110027cragkkdarumo","tag_id":"cjmgf4b2d005ccrag8nuubh5x","_id":"cjmgf4b2e005icragr6nwfo2e"},{"post_id":"cjmgf4b110027cragkkdarumo","tag_id":"cjmgf4b2d005dcragrl47xhag","_id":"cjmgf4b2e005jcrags4rpy9uh"},{"post_id":"cjmgf4b13002bcragqqwpcs3n","tag_id":"cjmgf4b1e002tcragfumywxdk","_id":"cjmgf4b2f005mcragd1cp0qnw"},{"post_id":"cjmgf4b13002bcragqqwpcs3n","tag_id":"cjmgf4b2e005hcragsyxnl5xr","_id":"cjmgf4b2f005ncragver9e7dk"},{"post_id":"cjmgf4b13002bcragqqwpcs3n","tag_id":"cjmgf4b2e005kcrag0znylbiq","_id":"cjmgf4b2h005pcragvd033h4h"},{"post_id":"cjmgf4b14002dcrag5upeut3f","tag_id":"cjmgf4b2f005lcragi3be1niq","_id":"cjmgf4b2h005qcrag4wwrt7mg"},{"post_id":"cjmgf4b16002gcragvlrvvwx3","tag_id":"cjmgf4b1k0038cragdwlco9yt","_id":"cjmgf4b2i005tcraga03l7apf"},{"post_id":"cjmgf4b16002gcragvlrvvwx3","tag_id":"cjmgf4b2d005bcragktrrg0ie","_id":"cjmgf4b2i005ucragc0bmb9k8"},{"post_id":"cjmgf4b17002kcragiv5jbgxb","tag_id":"cjmgf4b1k0038cragdwlco9yt","_id":"cjmgf4b2j005ycragvwk5ghrz"},{"post_id":"cjmgf4b17002kcragiv5jbgxb","tag_id":"cjmgf4b2d005bcragktrrg0ie","_id":"cjmgf4b2j005zcrag4f7omxn8"},{"post_id":"cjmgf4b17002kcragiv5jbgxb","tag_id":"cjmgf4b2j005wcraggf26e6pa","_id":"cjmgf4b2k0061craghxm0d0q0"},{"post_id":"cjmgf4b19002ncrag3v2fwmxa","tag_id":"cjmgf4b2j005xcrag7xp41afr","_id":"cjmgf4b2k0062cragy4ycxre5"},{"post_id":"cjmgf4b1d002scragbclpqmzl","tag_id":"cjmgf4b2k0060cragsw4rdbn2","_id":"cjmgf4b2k0064craggpsj09iw"},{"post_id":"cjmgf4b1f002wcragnpned0ur","tag_id":"cjmgf4b2k0063cragn73kapph","_id":"cjmgf4b2l0066cragek6vknif"},{"post_id":"cjmgf4b1j0036crag4prs3vv0","tag_id":"cjmgf4b2l0065cragx97giut8","_id":"cjmgf4b2l0068cragqnu84gx1"},{"post_id":"cjmgf4b1m003ccrag5p2afs4o","tag_id":"cjmgf4b2l0067cragprncl4nu","_id":"cjmgf4b2m006bcragmt72rx34"},{"post_id":"cjmgf4b1m003ccrag5p2afs4o","tag_id":"cjmgf4b2l0069cragji9q37qw","_id":"cjmgf4b2m006ccragh93m46d4"},{"post_id":"cjmgf4b1p003icragkvtcane2","tag_id":"cjmgf4b2m006acraglg2ce1n1","_id":"cjmgf4b2n006gcragzk09scuv"},{"post_id":"cjmgf4b1p003icragkvtcane2","tag_id":"cjmgf4b2m006dcragkxa643e7","_id":"cjmgf4b2n006hcragin3za4vv"},{"post_id":"cjmgf4b1p003icragkvtcane2","tag_id":"cjmgf4b2m006ecrag5no0v7cz","_id":"cjmgf4b2o006jcragpvnmi3h4"},{"post_id":"cjmgf4b1r003lcrag6s2c1jf3","tag_id":"cjmgf4b2m006acraglg2ce1n1","_id":"cjmgf4b2o006lcragiaehhiyj"},{"post_id":"cjmgf4b1r003lcrag6s2c1jf3","tag_id":"cjmgf4b2n006icrag9tir9git","_id":"cjmgf4b2o006mcragmnzg1h5l"},{"post_id":"cjmgf4b1u003ocragzhut38r9","tag_id":"cjmgf4b2o006kcragjcroc1ks","_id":"cjmgf4b2p006ocragttab1o4r"},{"post_id":"cjmgf4b1u003ocragzhut38r9","tag_id":"cjmgf4azl0005cragpk7vd67g","_id":"cjmgf4b2p006pcragbj3jqxsn"},{"post_id":"cjmgf4b1v003qcragaaiolzbg","tag_id":"cjmgf4b2m006acraglg2ce1n1","_id":"cjmgf4b2r006tcragmau2ca5j"},{"post_id":"cjmgf4b1v003qcragaaiolzbg","tag_id":"cjmgf4b2m006dcragkxa643e7","_id":"cjmgf4b2r006ucragho0hq773"},{"post_id":"cjmgf4b1v003qcragaaiolzbg","tag_id":"cjmgf4b2n006icrag9tir9git","_id":"cjmgf4b2r006wcragyo6zatwj"},{"post_id":"cjmgf4b1x003ucraglmwfgkvy","tag_id":"cjmgf4b2m006acraglg2ce1n1","_id":"cjmgf4b2s006zcragpzytoeo8"},{"post_id":"cjmgf4b1x003ucraglmwfgkvy","tag_id":"cjmgf4b2m006dcragkxa643e7","_id":"cjmgf4b2s0070cragqfzjkuy0"},{"post_id":"cjmgf4b1x003ucraglmwfgkvy","tag_id":"cjmgf4b2r006xcragmz9vksz3","_id":"cjmgf4b2s0072cragioai42wq"},{"post_id":"cjmgf4b1y003xcragfppjk4nq","tag_id":"cjmgf4b2s006ycrag073kvpmu","_id":"cjmgf4b2t0075crag5v471k3q"},{"post_id":"cjmgf4b1y003xcragfppjk4nq","tag_id":"cjmgf4b2s0071cragmxnbgtcv","_id":"cjmgf4b2t0076crag14vso15p"},{"post_id":"cjmgf4b1y003xcragfppjk4nq","tag_id":"cjmgf4b2t0073cragdv5wbve7","_id":"cjmgf4b2u0078crag0it8d03n"},{"post_id":"cjmgf4b200042crag1babcrur","tag_id":"cjmgf4b2m006acraglg2ce1n1","_id":"cjmgf4b2u007acragvttdkj6a"},{"post_id":"cjmgf4b200042crag1babcrur","tag_id":"cjmgf4b2m006dcragkxa643e7","_id":"cjmgf4b2v007bcragbkvu4yvz"},{"post_id":"cjmgf4b220045crag7uzyne7n","tag_id":"cjmgf4b2u0079crag6f9dv6hk","_id":"cjmgf4b2v007dcragxc8sb3xu"},{"post_id":"cjmgf4b230048crago04m0b74","tag_id":"cjmgf4b1k0038cragdwlco9yt","_id":"cjmgf4b2v007ecragdq814upf"},{"post_id":"cjmgf4b230048crago04m0b74","tag_id":"cjmgf4b2v007ccragqc35wjf4","_id":"cjmgf4b2v007fcragcnh2wyz1"},{"post_id":"cjmgf4b3e007gcragk91svab7","tag_id":"cjmgf4b1e002tcragfumywxdk","_id":"cjmgf4b3h007icragt6su493c"},{"post_id":"cjmgf4b3e007gcragk91svab7","tag_id":"cjmgf4b2b0050cragxj3mqdjq","_id":"cjmgf4b3h007kcragh1k1hh17"},{"post_id":"cjmgf4b3g007hcragwz0t0ven","tag_id":"cjmgf4b1e002tcragfumywxdk","_id":"cjmgf4b3i007ncrag65o3ilhc"},{"post_id":"cjmgf4b3g007hcragwz0t0ven","tag_id":"cjmgf4b230046cragby7jrvtl","_id":"cjmgf4b3i007ocragu5vr9q5z"},{"post_id":"cjmgf4b3g007hcragwz0t0ven","tag_id":"cjmgf4b3h007jcragaodakfhx","_id":"cjmgf4b3i007pcragpokxur0e"}],"Tag":[{"name":"Flask","_id":"cjmgf4azl0005cragpk7vd67g"},{"name":"HTTP","_id":"cjmgf4azs000acragej7cafxx"},{"name":"JavaScript","_id":"cjmgf4b00000gcragnc4m7bbn"},{"name":"prototype","_id":"cjmgf4b06000mcrageu75f5se"},{"name":"HTML","_id":"cjmgf4b0e0011cragcbp0xmjy"},{"name":"CSS","_id":"cjmgf4b0p001ocrags9jtpe8j"},{"name":"TensorFlow","_id":"cjmgf4b0t001ucragw3i9wbyz"},{"name":"MNIST","_id":"cjmgf4b0z0022crag88ymdzgy"},{"name":"PAT","_id":"cjmgf4b16002fcragou4bdivy"},{"name":"刷题","_id":"cjmgf4b1a002ocragawp5lfkm"},{"name":"ubuntu","_id":"cjmgf4b1e002tcragfumywxdk"},{"name":"git","_id":"cjmgf4b1i0030crag3axogc1d"},{"name":"hexo","_id":"cjmgf4b1k0038cragdwlco9yt"},{"name":"网站收录","_id":"cjmgf4b1t003mcrags5uawasq"},{"name":"numpy","_id":"cjmgf4b1w003scrago0v95565"},{"name":"Chrome","_id":"cjmgf4b230046cragby7jrvtl"},{"name":"Vue","_id":"cjmgf4b26004ccragoyku1oo7"},{"name":"Vuex","_id":"cjmgf4b27004hcragj2wxxmxx"},{"name":"快捷方式","_id":"cjmgf4b2a004wcragfww5ink7"},{"name":"iNode","_id":"cjmgf4b2b0050cragxj3mqdjq"},{"name":"markdown","_id":"cjmgf4b2b0054cragoy6c68mp"},{"name":"TensorBoard","_id":"cjmgf4b2c0055cragf4a048im"},{"name":"gitment","_id":"cjmgf4b2d005bcragktrrg0ie"},{"name":"OAuth","_id":"cjmgf4b2d005ccrag8nuubh5x"},{"name":"阿里云","_id":"cjmgf4b2d005dcragrl47xhag"},{"name":"Typora","_id":"cjmgf4b2e005hcragsyxnl5xr"},{"name":"Markdown","_id":"cjmgf4b2e005kcrag0znylbiq"},{"name":"内存","_id":"cjmgf4b2f005lcragi3be1niq"},{"name":"Valine","_id":"cjmgf4b2j005wcraggf26e6pa"},{"name":"指针","_id":"cjmgf4b2j005xcrag7xp41afr"},{"name":"Tmux","_id":"cjmgf4b2k0060cragsw4rdbn2"},{"name":"归并","_id":"cjmgf4b2k0063cragn73kapph"},{"name":"BN","_id":"cjmgf4b2l0065cragx97giut8"},{"name":"爬虫","_id":"cjmgf4b2l0067cragprncl4nu"},{"name":"Python","_id":"cjmgf4b2l0069cragji9q37qw"},{"name":"UMLet","_id":"cjmgf4b2m006acraglg2ce1n1"},{"name":"用例图","_id":"cjmgf4b2m006dcragkxa643e7"},{"name":"数据库建模","_id":"cjmgf4b2m006ecrag5no0v7cz"},{"name":"建模","_id":"cjmgf4b2n006icrag9tir9git"},{"name":"mongoDB","_id":"cjmgf4b2o006kcragjcroc1ks"},{"name":"SCRUM","_id":"cjmgf4b2r006xcragmz9vksz3"},{"name":"VUE","_id":"cjmgf4b2s006ycrag073kvpmu"},{"name":"Flux","_id":"cjmgf4b2s0071cragmxnbgtcv"},{"name":"三层架构","_id":"cjmgf4b2t0073cragdv5wbve7"},{"name":"遇见逆水寒","_id":"cjmgf4b2u0079crag6f9dv6hk"},{"name":"github pages","_id":"cjmgf4b2v007ccragqc35wjf4"},{"name":"图片显示","_id":"cjmgf4b3h007jcragaodakfhx"}]}}